# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
XSControl module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_xscontrol.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _XSControl
else:
    import _XSControl

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _XSControl.SWIG_PyInstanceMethod_New
_swig_new_static_method = _XSControl.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XSControl.delete_SwigPyIterator
    value = _swig_new_instance_method(_XSControl.SwigPyIterator_value)
    incr = _swig_new_instance_method(_XSControl.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_XSControl.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_XSControl.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_XSControl.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_XSControl.SwigPyIterator_copy)
    next = _swig_new_instance_method(_XSControl.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_XSControl.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_XSControl.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_XSControl.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_XSControl.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_XSControl.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_XSControl.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_XSControl.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_XSControl.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_XSControl.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _XSControl:
_XSControl.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.IFSelect
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
import OCC.Core.Transfer
import OCC.Core.TopTools
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2d
Handle_XSControl_ConnectedShapes_Create = _XSControl.Handle_XSControl_ConnectedShapes_Create
Handle_XSControl_ConnectedShapes_DownCast = _XSControl.Handle_XSControl_ConnectedShapes_DownCast
Handle_XSControl_ConnectedShapes_IsNull = _XSControl.Handle_XSControl_ConnectedShapes_IsNull
Handle_XSControl_Controller_Create = _XSControl.Handle_XSControl_Controller_Create
Handle_XSControl_Controller_DownCast = _XSControl.Handle_XSControl_Controller_DownCast
Handle_XSControl_Controller_IsNull = _XSControl.Handle_XSControl_Controller_IsNull
Handle_XSControl_SelectForTransfer_Create = _XSControl.Handle_XSControl_SelectForTransfer_Create
Handle_XSControl_SelectForTransfer_DownCast = _XSControl.Handle_XSControl_SelectForTransfer_DownCast
Handle_XSControl_SelectForTransfer_IsNull = _XSControl.Handle_XSControl_SelectForTransfer_IsNull
Handle_XSControl_SignTransferStatus_Create = _XSControl.Handle_XSControl_SignTransferStatus_Create
Handle_XSControl_SignTransferStatus_DownCast = _XSControl.Handle_XSControl_SignTransferStatus_DownCast
Handle_XSControl_SignTransferStatus_IsNull = _XSControl.Handle_XSControl_SignTransferStatus_IsNull
Handle_XSControl_TransferReader_Create = _XSControl.Handle_XSControl_TransferReader_Create
Handle_XSControl_TransferReader_DownCast = _XSControl.Handle_XSControl_TransferReader_DownCast
Handle_XSControl_TransferReader_IsNull = _XSControl.Handle_XSControl_TransferReader_IsNull
Handle_XSControl_TransferWriter_Create = _XSControl.Handle_XSControl_TransferWriter_Create
Handle_XSControl_TransferWriter_DownCast = _XSControl.Handle_XSControl_TransferWriter_DownCast
Handle_XSControl_TransferWriter_IsNull = _XSControl.Handle_XSControl_TransferWriter_IsNull
Handle_XSControl_Vars_Create = _XSControl.Handle_XSControl_Vars_Create
Handle_XSControl_Vars_DownCast = _XSControl.Handle_XSControl_Vars_DownCast
Handle_XSControl_Vars_IsNull = _XSControl.Handle_XSControl_Vars_IsNull
Handle_XSControl_WorkSession_Create = _XSControl.Handle_XSControl_WorkSession_Create
Handle_XSControl_WorkSession_DownCast = _XSControl.Handle_XSControl_WorkSession_DownCast
Handle_XSControl_WorkSession_IsNull = _XSControl.Handle_XSControl_WorkSession_IsNull
class xscontrol(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Session = _swig_new_static_method(_XSControl.xscontrol_Session)
    Vars = _swig_new_static_method(_XSControl.xscontrol_Vars)

    __repr__ = _dumps_object


    def __init__(self):
        _XSControl.xscontrol_swiginit(self, _XSControl.new_xscontrol())
    __swig_destroy__ = _XSControl.delete_xscontrol

# Register xscontrol in _XSControl:
_XSControl.xscontrol_swigregister(xscontrol)
xscontrol_Session = _XSControl.xscontrol_Session
xscontrol_Vars = _XSControl.xscontrol_Vars

class XSControl_ConnectedShapes(OCC.Core.IFSelect.IFSelect_SelectExplore):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AdjacentEntities = _swig_new_static_method(_XSControl.XSControl_ConnectedShapes_AdjacentEntities)
    SetReader = _swig_new_instance_method(_XSControl.XSControl_ConnectedShapes_SetReader)

    def __init__(self, *args):
        r"""
        * Creates a Selection ConnectedShapes. It remains to be set a TransferReader
        	:rtype: None* Creates a Selection ConnectedShapes, which will work with the current TransferProcess brought by the TransferReader
        	:param TR:
        	:type TR: XSControl_TransferReader
        	:rtype: None
        """
        _XSControl.XSControl_ConnectedShapes_swiginit(self, _XSControl.new_XSControl_ConnectedShapes(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XSControl_ConnectedShapes_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XSControl.delete_XSControl_ConnectedShapes

# Register XSControl_ConnectedShapes in _XSControl:
_XSControl.XSControl_ConnectedShapes_swigregister(XSControl_ConnectedShapes)
XSControl_ConnectedShapes_AdjacentEntities = _XSControl.XSControl_ConnectedShapes_AdjacentEntities

class XSControl_Controller(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ActorRead = _swig_new_instance_method(_XSControl.XSControl_Controller_ActorRead)
    ActorWrite = _swig_new_instance_method(_XSControl.XSControl_Controller_ActorWrite)
    AdaptorSession = _swig_new_instance_method(_XSControl.XSControl_Controller_AdaptorSession)
    AddSessionItem = _swig_new_instance_method(_XSControl.XSControl_Controller_AddSessionItem)
    AutoRecord = _swig_new_instance_method(_XSControl.XSControl_Controller_AutoRecord)
    Customise = _swig_new_instance_method(_XSControl.XSControl_Controller_Customise)
    IsModeWrite = _swig_new_instance_method(_XSControl.XSControl_Controller_IsModeWrite)
    ModeWriteBounds = _swig_new_instance_method(_XSControl.XSControl_Controller_ModeWriteBounds)
    ModeWriteHelp = _swig_new_instance_method(_XSControl.XSControl_Controller_ModeWriteHelp)
    Name = _swig_new_instance_method(_XSControl.XSControl_Controller_Name)
    NewModel = _swig_new_instance_method(_XSControl.XSControl_Controller_NewModel)
    Protocol = _swig_new_instance_method(_XSControl.XSControl_Controller_Protocol)
    RecognizeWriteShape = _swig_new_instance_method(_XSControl.XSControl_Controller_RecognizeWriteShape)
    RecognizeWriteTransient = _swig_new_instance_method(_XSControl.XSControl_Controller_RecognizeWriteTransient)
    Record = _swig_new_instance_method(_XSControl.XSControl_Controller_Record)
    Recorded = _swig_new_static_method(_XSControl.XSControl_Controller_Recorded)
    SessionItem = _swig_new_instance_method(_XSControl.XSControl_Controller_SessionItem)
    SetModeWrite = _swig_new_instance_method(_XSControl.XSControl_Controller_SetModeWrite)
    SetModeWriteHelp = _swig_new_instance_method(_XSControl.XSControl_Controller_SetModeWriteHelp)
    SetNames = _swig_new_instance_method(_XSControl.XSControl_Controller_SetNames)
    TransferWriteShape = _swig_new_instance_method(_XSControl.XSControl_Controller_TransferWriteShape)
    TransferWriteTransient = _swig_new_instance_method(_XSControl.XSControl_Controller_TransferWriteTransient)
    WorkLibrary = _swig_new_instance_method(_XSControl.XSControl_Controller_WorkLibrary)


    @staticmethod
    def DownCast(t):
      return Handle_XSControl_Controller_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XSControl.delete_XSControl_Controller

# Register XSControl_Controller in _XSControl:
_XSControl.XSControl_Controller_swigregister(XSControl_Controller)
XSControl_Controller_Recorded = _XSControl.XSControl_Controller_Recorded

class XSControl_FuncShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FileAndVar = _swig_new_static_method(_XSControl.XSControl_FuncShape_FileAndVar)
    Init = _swig_new_static_method(_XSControl.XSControl_FuncShape_Init)
    MoreShapes = _swig_new_static_method(_XSControl.XSControl_FuncShape_MoreShapes)

    __repr__ = _dumps_object


    def __init__(self):
        _XSControl.XSControl_FuncShape_swiginit(self, _XSControl.new_XSControl_FuncShape())
    __swig_destroy__ = _XSControl.delete_XSControl_FuncShape

# Register XSControl_FuncShape in _XSControl:
_XSControl.XSControl_FuncShape_swigregister(XSControl_FuncShape)
XSControl_FuncShape_FileAndVar = _XSControl.XSControl_FuncShape_FileAndVar
XSControl_FuncShape_Init = _XSControl.XSControl_FuncShape_Init
XSControl_FuncShape_MoreShapes = _XSControl.XSControl_FuncShape_MoreShapes

class XSControl_Functions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Init = _swig_new_static_method(_XSControl.XSControl_Functions_Init)

    __repr__ = _dumps_object


    def __init__(self):
        _XSControl.XSControl_Functions_swiginit(self, _XSControl.new_XSControl_Functions())
    __swig_destroy__ = _XSControl.delete_XSControl_Functions

# Register XSControl_Functions in _XSControl:
_XSControl.XSControl_Functions_swigregister(XSControl_Functions)
XSControl_Functions_Init = _XSControl.XSControl_Functions_Init

class XSControl_Reader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ClearShapes = _swig_new_instance_method(_XSControl.XSControl_Reader_ClearShapes)
    GetStatsTransfer = _swig_new_instance_method(_XSControl.XSControl_Reader_GetStatsTransfer)
    GiveList = _swig_new_instance_method(_XSControl.XSControl_Reader_GiveList)
    Model = _swig_new_instance_method(_XSControl.XSControl_Reader_Model)
    NbRootsForTransfer = _swig_new_instance_method(_XSControl.XSControl_Reader_NbRootsForTransfer)
    NbShapes = _swig_new_instance_method(_XSControl.XSControl_Reader_NbShapes)
    OneShape = _swig_new_instance_method(_XSControl.XSControl_Reader_OneShape)
    PrintCheckLoad = _swig_new_instance_method(_XSControl.XSControl_Reader_PrintCheckLoad)
    PrintCheckTransfer = _swig_new_instance_method(_XSControl.XSControl_Reader_PrintCheckTransfer)
    PrintStatsTransfer = _swig_new_instance_method(_XSControl.XSControl_Reader_PrintStatsTransfer)
    ReadFile = _swig_new_instance_method(_XSControl.XSControl_Reader_ReadFile)
    RootForTransfer = _swig_new_instance_method(_XSControl.XSControl_Reader_RootForTransfer)
    SetNorm = _swig_new_instance_method(_XSControl.XSControl_Reader_SetNorm)
    SetWS = _swig_new_instance_method(_XSControl.XSControl_Reader_SetWS)
    Shape = _swig_new_instance_method(_XSControl.XSControl_Reader_Shape)
    TransferEntity = _swig_new_instance_method(_XSControl.XSControl_Reader_TransferEntity)
    TransferList = _swig_new_instance_method(_XSControl.XSControl_Reader_TransferList)
    TransferOne = _swig_new_instance_method(_XSControl.XSControl_Reader_TransferOne)
    TransferOneRoot = _swig_new_instance_method(_XSControl.XSControl_Reader_TransferOneRoot)
    TransferRoots = _swig_new_instance_method(_XSControl.XSControl_Reader_TransferRoots)
    WS = _swig_new_instance_method(_XSControl.XSControl_Reader_WS)

    def __init__(self, *args):
        r"""
        * Creates a Reader from scratch (creates an empty WorkSession) A WorkSession or a Controller must be provided before running
        	:rtype: None* Creates a Reader from scratch, with a norm name which identifies a Controller
        	:param norm:
        	:type norm: char *
        	:rtype: None* Creates a Reader from an already existing Session, with a Controller already set Virtual destructor
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:param scratch: default value is Standard_True
        	:type scratch: bool
        	:rtype: None
        """
        _XSControl.XSControl_Reader_swiginit(self, _XSControl.new_XSControl_Reader(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _XSControl.delete_XSControl_Reader

# Register XSControl_Reader in _XSControl:
_XSControl.XSControl_Reader_swigregister(XSControl_Reader)

class XSControl_SelectForTransfer(OCC.Core.IFSelect.IFSelect_SelectExtract):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Actor = _swig_new_instance_method(_XSControl.XSControl_SelectForTransfer_Actor)
    Reader = _swig_new_instance_method(_XSControl.XSControl_SelectForTransfer_Reader)
    SetActor = _swig_new_instance_method(_XSControl.XSControl_SelectForTransfer_SetActor)
    SetReader = _swig_new_instance_method(_XSControl.XSControl_SelectForTransfer_SetReader)

    def __init__(self, *args):
        r"""
        * Creates a SelectForTransfer, non initialised it sorts nothing, unless an Actor has been defined
        	:rtype: None* Creates a SelectForTransfer, which will work with the currently defined Actor brought by the TransferReader
        	:param TR:
        	:type TR: XSControl_TransferReader
        	:rtype: None
        """
        _XSControl.XSControl_SelectForTransfer_swiginit(self, _XSControl.new_XSControl_SelectForTransfer(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XSControl_SelectForTransfer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XSControl.delete_XSControl_SelectForTransfer

# Register XSControl_SelectForTransfer in _XSControl:
_XSControl.XSControl_SelectForTransfer_swigregister(XSControl_SelectForTransfer)

class XSControl_SignTransferStatus(OCC.Core.IFSelect.IFSelect_Signature):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Map = _swig_new_instance_method(_XSControl.XSControl_SignTransferStatus_Map)
    Reader = _swig_new_instance_method(_XSControl.XSControl_SignTransferStatus_Reader)
    SetMap = _swig_new_instance_method(_XSControl.XSControl_SignTransferStatus_SetMap)
    SetReader = _swig_new_instance_method(_XSControl.XSControl_SignTransferStatus_SetReader)

    def __init__(self, *args):
        r"""
        * Creates a SignTransferStatus, not initialised it gives nothing (empty string)
        	:rtype: None* Creates a SignTransferStatus, which will work on the current TransientProcess brought by the TransferReader (its MapReader)
        	:param TR:
        	:type TR: XSControl_TransferReader
        	:rtype: None
        """
        _XSControl.XSControl_SignTransferStatus_swiginit(self, _XSControl.new_XSControl_SignTransferStatus(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XSControl_SignTransferStatus_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XSControl.delete_XSControl_SignTransferStatus

# Register XSControl_SignTransferStatus in _XSControl:
_XSControl.XSControl_SignTransferStatus_swigregister(XSControl_SignTransferStatus)

class XSControl_TransferReader(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Actor = _swig_new_instance_method(_XSControl.XSControl_TransferReader_Actor)
    BeginTransfer = _swig_new_instance_method(_XSControl.XSControl_TransferReader_BeginTransfer)
    CheckList = _swig_new_instance_method(_XSControl.XSControl_TransferReader_CheckList)
    CheckedList = _swig_new_instance_method(_XSControl.XSControl_TransferReader_CheckedList)
    Clear = _swig_new_instance_method(_XSControl.XSControl_TransferReader_Clear)
    ClearResult = _swig_new_instance_method(_XSControl.XSControl_TransferReader_ClearResult)
    Context = _swig_new_instance_method(_XSControl.XSControl_TransferReader_Context)
    EntitiesFromShapeList = _swig_new_instance_method(_XSControl.XSControl_TransferReader_EntitiesFromShapeList)
    EntityFromResult = _swig_new_instance_method(_XSControl.XSControl_TransferReader_EntityFromResult)
    EntityFromShapeResult = _swig_new_instance_method(_XSControl.XSControl_TransferReader_EntityFromShapeResult)
    FileName = _swig_new_instance_method(_XSControl.XSControl_TransferReader_FileName)
    FinalEntityLabel = _swig_new_instance_method(_XSControl.XSControl_TransferReader_FinalEntityLabel)
    FinalEntityNumber = _swig_new_instance_method(_XSControl.XSControl_TransferReader_FinalEntityNumber)
    FinalResult = _swig_new_instance_method(_XSControl.XSControl_TransferReader_FinalResult)
    GetContext = _swig_new_instance_method(_XSControl.XSControl_TransferReader_GetContext)
    HasChecks = _swig_new_instance_method(_XSControl.XSControl_TransferReader_HasChecks)
    HasResult = _swig_new_instance_method(_XSControl.XSControl_TransferReader_HasResult)
    IsMarked = _swig_new_instance_method(_XSControl.XSControl_TransferReader_IsMarked)
    IsRecorded = _swig_new_instance_method(_XSControl.XSControl_TransferReader_IsRecorded)
    IsSkipped = _swig_new_instance_method(_XSControl.XSControl_TransferReader_IsSkipped)
    LastCheckList = _swig_new_instance_method(_XSControl.XSControl_TransferReader_LastCheckList)
    LastTransferList = _swig_new_instance_method(_XSControl.XSControl_TransferReader_LastTransferList)
    Model = _swig_new_instance_method(_XSControl.XSControl_TransferReader_Model)
    PrintStats = _swig_new_instance_method(_XSControl.XSControl_TransferReader_PrintStats)
    PrintStatsOnList = _swig_new_static_method(_XSControl.XSControl_TransferReader_PrintStatsOnList)
    PrintStatsProcess = _swig_new_static_method(_XSControl.XSControl_TransferReader_PrintStatsProcess)
    Recognize = _swig_new_instance_method(_XSControl.XSControl_TransferReader_Recognize)
    RecordResult = _swig_new_instance_method(_XSControl.XSControl_TransferReader_RecordResult)
    RecordedList = _swig_new_instance_method(_XSControl.XSControl_TransferReader_RecordedList)
    ResultFromNumber = _swig_new_instance_method(_XSControl.XSControl_TransferReader_ResultFromNumber)
    SetActor = _swig_new_instance_method(_XSControl.XSControl_TransferReader_SetActor)
    SetContext = _swig_new_instance_method(_XSControl.XSControl_TransferReader_SetContext)
    SetController = _swig_new_instance_method(_XSControl.XSControl_TransferReader_SetController)
    SetFileName = _swig_new_instance_method(_XSControl.XSControl_TransferReader_SetFileName)
    SetGraph = _swig_new_instance_method(_XSControl.XSControl_TransferReader_SetGraph)
    SetModel = _swig_new_instance_method(_XSControl.XSControl_TransferReader_SetModel)
    SetTransientProcess = _swig_new_instance_method(_XSControl.XSControl_TransferReader_SetTransientProcess)
    ShapeResult = _swig_new_instance_method(_XSControl.XSControl_TransferReader_ShapeResult)
    ShapeResultList = _swig_new_instance_method(_XSControl.XSControl_TransferReader_ShapeResultList)
    Skip = _swig_new_instance_method(_XSControl.XSControl_TransferReader_Skip)
    TransferClear = _swig_new_instance_method(_XSControl.XSControl_TransferReader_TransferClear)
    TransferList = _swig_new_instance_method(_XSControl.XSControl_TransferReader_TransferList)
    TransferOne = _swig_new_instance_method(_XSControl.XSControl_TransferReader_TransferOne)
    TransferRoots = _swig_new_instance_method(_XSControl.XSControl_TransferReader_TransferRoots)
    TransientProcess = _swig_new_instance_method(_XSControl.XSControl_TransferReader_TransientProcess)
    TransientResult = _swig_new_instance_method(_XSControl.XSControl_TransferReader_TransientResult)

    def __init__(self, *args):
        r"""
        * Creates a TransferReader, empty
        	:rtype: None
        """
        _XSControl.XSControl_TransferReader_swiginit(self, _XSControl.new_XSControl_TransferReader(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XSControl_TransferReader_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XSControl.delete_XSControl_TransferReader

# Register XSControl_TransferReader in _XSControl:
_XSControl.XSControl_TransferReader_swigregister(XSControl_TransferReader)
XSControl_TransferReader_PrintStatsOnList = _XSControl.XSControl_TransferReader_PrintStatsOnList
XSControl_TransferReader_PrintStatsProcess = _XSControl.XSControl_TransferReader_PrintStatsProcess

class XSControl_TransferWriter(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CheckList = _swig_new_instance_method(_XSControl.XSControl_TransferWriter_CheckList)
    Clear = _swig_new_instance_method(_XSControl.XSControl_TransferWriter_Clear)
    Controller = _swig_new_instance_method(_XSControl.XSControl_TransferWriter_Controller)
    FinderProcess = _swig_new_instance_method(_XSControl.XSControl_TransferWriter_FinderProcess)
    PrintStats = _swig_new_instance_method(_XSControl.XSControl_TransferWriter_PrintStats)
    RecognizeShape = _swig_new_instance_method(_XSControl.XSControl_TransferWriter_RecognizeShape)
    RecognizeTransient = _swig_new_instance_method(_XSControl.XSControl_TransferWriter_RecognizeTransient)
    ResultCheckList = _swig_new_instance_method(_XSControl.XSControl_TransferWriter_ResultCheckList)
    SetController = _swig_new_instance_method(_XSControl.XSControl_TransferWriter_SetController)
    SetFinderProcess = _swig_new_instance_method(_XSControl.XSControl_TransferWriter_SetFinderProcess)
    SetTransferMode = _swig_new_instance_method(_XSControl.XSControl_TransferWriter_SetTransferMode)
    TransferMode = _swig_new_instance_method(_XSControl.XSControl_TransferWriter_TransferMode)
    TransferWriteShape = _swig_new_instance_method(_XSControl.XSControl_TransferWriter_TransferWriteShape)
    TransferWriteTransient = _swig_new_instance_method(_XSControl.XSControl_TransferWriter_TransferWriteTransient)

    def __init__(self, *args):
        r"""
        * Creates a TransferWriter, empty, ready to run with an empty FinderProcess (but no controller, etc)
        	:rtype: None
        """
        _XSControl.XSControl_TransferWriter_swiginit(self, _XSControl.new_XSControl_TransferWriter(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XSControl_TransferWriter_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XSControl.delete_XSControl_TransferWriter

# Register XSControl_TransferWriter in _XSControl:
_XSControl.XSControl_TransferWriter_swigregister(XSControl_TransferWriter)

class XSControl_Utils(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AppendCStr = _swig_new_instance_method(_XSControl.XSControl_Utils_AppendCStr)
    AppendEStr = _swig_new_instance_method(_XSControl.XSControl_Utils_AppendEStr)
    AppendShape = _swig_new_instance_method(_XSControl.XSControl_Utils_AppendShape)
    AppendTra = _swig_new_instance_method(_XSControl.XSControl_Utils_AppendTra)
    ArrToSeq = _swig_new_instance_method(_XSControl.XSControl_Utils_ArrToSeq)
    AsciiToExtended = _swig_new_instance_method(_XSControl.XSControl_Utils_AsciiToExtended)
    BinderShape = _swig_new_instance_method(_XSControl.XSControl_Utils_BinderShape)
    CStrValue = _swig_new_instance_method(_XSControl.XSControl_Utils_CStrValue)
    CompoundFromSeq = _swig_new_instance_method(_XSControl.XSControl_Utils_CompoundFromSeq)
    DateString = _swig_new_instance_method(_XSControl.XSControl_Utils_DateString)
    DateValues = _swig_new_instance_method(_XSControl.XSControl_Utils_DateValues)
    EStrValue = _swig_new_instance_method(_XSControl.XSControl_Utils_EStrValue)
    ExtendedToAscii = _swig_new_instance_method(_XSControl.XSControl_Utils_ExtendedToAscii)
    IsAscii = _swig_new_instance_method(_XSControl.XSControl_Utils_IsAscii)
    IsKind = _swig_new_instance_method(_XSControl.XSControl_Utils_IsKind)
    NewSeqCStr = _swig_new_instance_method(_XSControl.XSControl_Utils_NewSeqCStr)
    NewSeqEStr = _swig_new_instance_method(_XSControl.XSControl_Utils_NewSeqEStr)
    NewSeqShape = _swig_new_instance_method(_XSControl.XSControl_Utils_NewSeqShape)
    NewSeqTra = _swig_new_instance_method(_XSControl.XSControl_Utils_NewSeqTra)
    SeqIntValue = _swig_new_instance_method(_XSControl.XSControl_Utils_SeqIntValue)
    SeqLength = _swig_new_instance_method(_XSControl.XSControl_Utils_SeqLength)
    SeqToArr = _swig_new_instance_method(_XSControl.XSControl_Utils_SeqToArr)
    ShapeBinder = _swig_new_instance_method(_XSControl.XSControl_Utils_ShapeBinder)
    ShapeType = _swig_new_instance_method(_XSControl.XSControl_Utils_ShapeType)
    ShapeValue = _swig_new_instance_method(_XSControl.XSControl_Utils_ShapeValue)
    SortedCompound = _swig_new_instance_method(_XSControl.XSControl_Utils_SortedCompound)
    ToAString = _swig_new_instance_method(_XSControl.XSControl_Utils_ToAString)
    ToCString = _swig_new_instance_method(_XSControl.XSControl_Utils_ToCString)
    ToEString = _swig_new_instance_method(_XSControl.XSControl_Utils_ToEString)
    ToHString = _swig_new_instance_method(_XSControl.XSControl_Utils_ToHString)
    ToXString = _swig_new_instance_method(_XSControl.XSControl_Utils_ToXString)
    TraValue = _swig_new_instance_method(_XSControl.XSControl_Utils_TraValue)
    TraceLine = _swig_new_instance_method(_XSControl.XSControl_Utils_TraceLine)
    TraceLines = _swig_new_instance_method(_XSControl.XSControl_Utils_TraceLines)
    TypeName = _swig_new_instance_method(_XSControl.XSControl_Utils_TypeName)

    def __init__(self, *args):
        r"""
        * the only use of this, is to allow a frontal to get one distinct 'Utils' set per separate engine
        	:rtype: None
        """
        _XSControl.XSControl_Utils_swiginit(self, _XSControl.new_XSControl_Utils(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _XSControl.delete_XSControl_Utils

# Register XSControl_Utils in _XSControl:
_XSControl.XSControl_Utils_swigregister(XSControl_Utils)

class XSControl_Vars(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Get = _swig_new_instance_method(_XSControl.XSControl_Vars_Get)
    GetCurve = _swig_new_instance_method(_XSControl.XSControl_Vars_GetCurve)
    GetCurve2d = _swig_new_instance_method(_XSControl.XSControl_Vars_GetCurve2d)
    GetGeom = _swig_new_instance_method(_XSControl.XSControl_Vars_GetGeom)
    GetPoint = _swig_new_instance_method(_XSControl.XSControl_Vars_GetPoint)
    GetPoint2d = _swig_new_instance_method(_XSControl.XSControl_Vars_GetPoint2d)
    GetShape = _swig_new_instance_method(_XSControl.XSControl_Vars_GetShape)
    GetSurface = _swig_new_instance_method(_XSControl.XSControl_Vars_GetSurface)
    Set = _swig_new_instance_method(_XSControl.XSControl_Vars_Set)
    SetPoint = _swig_new_instance_method(_XSControl.XSControl_Vars_SetPoint)
    SetPoint2d = _swig_new_instance_method(_XSControl.XSControl_Vars_SetPoint2d)
    SetShape = _swig_new_instance_method(_XSControl.XSControl_Vars_SetShape)

    def __init__(self, *args):
        r""":rtype: None"""
        _XSControl.XSControl_Vars_swiginit(self, _XSControl.new_XSControl_Vars(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XSControl_Vars_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XSControl.delete_XSControl_Vars

# Register XSControl_Vars in _XSControl:
_XSControl.XSControl_Vars_swigregister(XSControl_Vars)

class XSControl_WorkSession(OCC.Core.IFSelect.IFSelect_WorkSession):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ClearContext = _swig_new_instance_method(_XSControl.XSControl_WorkSession_ClearContext)
    Context = _swig_new_instance_method(_XSControl.XSControl_WorkSession_Context)
    InitTransferReader = _swig_new_instance_method(_XSControl.XSControl_WorkSession_InitTransferReader)
    MapReader = _swig_new_instance_method(_XSControl.XSControl_WorkSession_MapReader)
    NewModel = _swig_new_instance_method(_XSControl.XSControl_WorkSession_NewModel)
    NormAdaptor = _swig_new_instance_method(_XSControl.XSControl_WorkSession_NormAdaptor)
    PrintTransferStatus = _swig_new_instance_method(_XSControl.XSControl_WorkSession_PrintTransferStatus)
    Result = _swig_new_instance_method(_XSControl.XSControl_WorkSession_Result)
    SelectNorm = _swig_new_instance_method(_XSControl.XSControl_WorkSession_SelectNorm)
    SelectedNorm = _swig_new_instance_method(_XSControl.XSControl_WorkSession_SelectedNorm)
    SetAllContext = _swig_new_instance_method(_XSControl.XSControl_WorkSession_SetAllContext)
    SetController = _swig_new_instance_method(_XSControl.XSControl_WorkSession_SetController)
    SetMapReader = _swig_new_instance_method(_XSControl.XSControl_WorkSession_SetMapReader)
    SetMapWriter = _swig_new_instance_method(_XSControl.XSControl_WorkSession_SetMapWriter)
    SetTransferReader = _swig_new_instance_method(_XSControl.XSControl_WorkSession_SetTransferReader)
    SetVars = _swig_new_instance_method(_XSControl.XSControl_WorkSession_SetVars)
    TransferReadOne = _swig_new_instance_method(_XSControl.XSControl_WorkSession_TransferReadOne)
    TransferReadRoots = _swig_new_instance_method(_XSControl.XSControl_WorkSession_TransferReadRoots)
    TransferReader = _swig_new_instance_method(_XSControl.XSControl_WorkSession_TransferReader)
    TransferWriteCheckList = _swig_new_instance_method(_XSControl.XSControl_WorkSession_TransferWriteCheckList)
    TransferWriteShape = _swig_new_instance_method(_XSControl.XSControl_WorkSession_TransferWriteShape)
    TransferWriter = _swig_new_instance_method(_XSControl.XSControl_WorkSession_TransferWriter)
    Vars = _swig_new_instance_method(_XSControl.XSControl_WorkSession_Vars)

    def __init__(self, *args):
        r""":rtype: None"""
        _XSControl.XSControl_WorkSession_swiginit(self, _XSControl.new_XSControl_WorkSession(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XSControl_WorkSession_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XSControl.delete_XSControl_WorkSession

# Register XSControl_WorkSession in _XSControl:
_XSControl.XSControl_WorkSession_swigregister(XSControl_WorkSession)

class XSControl_Writer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Model = _swig_new_instance_method(_XSControl.XSControl_Writer_Model)
    PrintStatsTransfer = _swig_new_instance_method(_XSControl.XSControl_Writer_PrintStatsTransfer)
    SetNorm = _swig_new_instance_method(_XSControl.XSControl_Writer_SetNorm)
    SetWS = _swig_new_instance_method(_XSControl.XSControl_Writer_SetWS)
    TransferShape = _swig_new_instance_method(_XSControl.XSControl_Writer_TransferShape)
    WS = _swig_new_instance_method(_XSControl.XSControl_Writer_WS)
    WriteFile = _swig_new_instance_method(_XSControl.XSControl_Writer_WriteFile)

    def __init__(self, *args):
        r"""
        * Creates a Writer from scratch
        	:rtype: None* Creates a Writer from scratch, with a norm name which identifie a Controller
        	:param norm:
        	:type norm: char *
        	:rtype: None* Creates a Writer from an already existing Session If <scratch> is True (D), clears already recorded data
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:param scratch: default value is Standard_True
        	:type scratch: bool
        	:rtype: None
        """
        _XSControl.XSControl_Writer_swiginit(self, _XSControl.new_XSControl_Writer(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _XSControl.delete_XSControl_Writer

# Register XSControl_Writer in _XSControl:
_XSControl.XSControl_Writer_swigregister(XSControl_Writer)



