# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IntSurf module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_intsurf.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _IntSurf
else:
    import _IntSurf

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _IntSurf.SWIG_PyInstanceMethod_New
_swig_new_static_method = _IntSurf.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntSurf.delete_SwigPyIterator
    value = _swig_new_instance_method(_IntSurf.SwigPyIterator_value)
    incr = _swig_new_instance_method(_IntSurf.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_IntSurf.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_IntSurf.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_IntSurf.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_IntSurf.SwigPyIterator_copy)
    next = _swig_new_instance_method(_IntSurf.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_IntSurf.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_IntSurf.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_IntSurf.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_IntSurf.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_IntSurf.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_IntSurf.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_IntSurf.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_IntSurf.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_IntSurf.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _IntSurf:
_IntSurf.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
IntSurf_Inside = _IntSurf.IntSurf_Inside
IntSurf_Outside = _IntSurf.IntSurf_Outside
IntSurf_Unknown = _IntSurf.IntSurf_Unknown
IntSurf_In = _IntSurf.IntSurf_In
IntSurf_Out = _IntSurf.IntSurf_Out
IntSurf_Touch = _IntSurf.IntSurf_Touch
IntSurf_Undecided = _IntSurf.IntSurf_Undecided
Handle_IntSurf_LineOn2S_Create = _IntSurf.Handle_IntSurf_LineOn2S_Create
Handle_IntSurf_LineOn2S_DownCast = _IntSurf.Handle_IntSurf_LineOn2S_DownCast
Handle_IntSurf_LineOn2S_IsNull = _IntSurf.Handle_IntSurf_LineOn2S_IsNull
class IntSurf_SequenceOfPathPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_begin)
    end = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_end)
    cbegin = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_cbegin)
    cend = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_cend)

    def __init__(self, *args):
        _IntSurf.IntSurf_SequenceOfPathPoint_swiginit(self, _IntSurf.new_IntSurf_SequenceOfPathPoint(*args))
    Size = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_Size)
    Length = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_Length)
    Lower = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_Lower)
    Upper = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_Upper)
    IsEmpty = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_IsEmpty)
    Reverse = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_Reverse)
    Exchange = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_Exchange)
    delNode = _swig_new_static_method(_IntSurf.IntSurf_SequenceOfPathPoint_delNode)
    Clear = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_Clear)
    Assign = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_Assign)
    Set = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_Set)
    Remove = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_Remove)
    Append = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_Append)
    Prepend = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_Prepend)
    InsertBefore = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_InsertBefore)
    InsertAfter = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_InsertAfter)
    Split = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_Split)
    First = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_First)
    ChangeFirst = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_ChangeFirst)
    Last = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_Last)
    ChangeLast = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_ChangeLast)
    Value = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_Value)
    ChangeValue = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_ChangeValue)
    __call__ = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint___call__)
    SetValue = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPathPoint_SetValue)
    __swig_destroy__ = _IntSurf.delete_IntSurf_SequenceOfPathPoint

# Register IntSurf_SequenceOfPathPoint in _IntSurf:
_IntSurf.IntSurf_SequenceOfPathPoint_swigregister(IntSurf_SequenceOfPathPoint)
IntSurf_SequenceOfPathPoint_delNode = _IntSurf.IntSurf_SequenceOfPathPoint_delNode

class IntSurf_SequenceOfInteriorPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_begin)
    end = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_end)
    cbegin = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_cbegin)
    cend = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_cend)

    def __init__(self, *args):
        _IntSurf.IntSurf_SequenceOfInteriorPoint_swiginit(self, _IntSurf.new_IntSurf_SequenceOfInteriorPoint(*args))
    Size = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_Size)
    Length = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_Length)
    Lower = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_Lower)
    Upper = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_Upper)
    IsEmpty = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_IsEmpty)
    Reverse = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_Reverse)
    Exchange = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_Exchange)
    delNode = _swig_new_static_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_delNode)
    Clear = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_Clear)
    Assign = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_Assign)
    Set = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_Set)
    Remove = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_Remove)
    Append = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_Append)
    Prepend = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_Prepend)
    InsertBefore = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_InsertBefore)
    InsertAfter = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_InsertAfter)
    Split = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_Split)
    First = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_First)
    ChangeFirst = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_ChangeFirst)
    Last = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_Last)
    ChangeLast = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_ChangeLast)
    Value = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_Value)
    ChangeValue = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_ChangeValue)
    __call__ = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint___call__)
    SetValue = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfInteriorPoint_SetValue)
    __swig_destroy__ = _IntSurf.delete_IntSurf_SequenceOfInteriorPoint

# Register IntSurf_SequenceOfInteriorPoint in _IntSurf:
_IntSurf.IntSurf_SequenceOfInteriorPoint_swigregister(IntSurf_SequenceOfInteriorPoint)
IntSurf_SequenceOfInteriorPoint_delNode = _IntSurf.IntSurf_SequenceOfInteriorPoint_delNode

class IntSurf_Allocator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _IntSurf.IntSurf_Allocator_swiginit(self, _IntSurf.new_IntSurf_Allocator())
    __swig_destroy__ = _IntSurf.delete_IntSurf_Allocator

# Register IntSurf_Allocator in _IntSurf:
_IntSurf.IntSurf_Allocator_swigregister(IntSurf_Allocator)

class IntSurf_SequenceOfCouple(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_begin)
    end = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_end)
    cbegin = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_cbegin)
    cend = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_cend)

    def __init__(self, *args):
        _IntSurf.IntSurf_SequenceOfCouple_swiginit(self, _IntSurf.new_IntSurf_SequenceOfCouple(*args))
    Size = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_Size)
    Length = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_Length)
    Lower = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_Lower)
    Upper = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_Upper)
    IsEmpty = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_IsEmpty)
    Reverse = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_Reverse)
    Exchange = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_Exchange)
    delNode = _swig_new_static_method(_IntSurf.IntSurf_SequenceOfCouple_delNode)
    Clear = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_Clear)
    Assign = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_Assign)
    Set = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_Set)
    Remove = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_Remove)
    Append = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_Append)
    Prepend = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_Prepend)
    InsertBefore = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_InsertBefore)
    InsertAfter = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_InsertAfter)
    Split = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_Split)
    First = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_First)
    ChangeFirst = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_ChangeFirst)
    Last = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_Last)
    ChangeLast = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_ChangeLast)
    Value = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_Value)
    ChangeValue = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_ChangeValue)
    __call__ = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple___call__)
    SetValue = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfCouple_SetValue)
    __swig_destroy__ = _IntSurf.delete_IntSurf_SequenceOfCouple

# Register IntSurf_SequenceOfCouple in _IntSurf:
_IntSurf.IntSurf_SequenceOfCouple_swigregister(IntSurf_SequenceOfCouple)
IntSurf_SequenceOfCouple_delNode = _IntSurf.IntSurf_SequenceOfCouple_delNode

class IntSurf_SequenceOfPntOn2S(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_begin)
    end = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_end)
    cbegin = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_cbegin)
    cend = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_cend)

    def __init__(self, *args):
        _IntSurf.IntSurf_SequenceOfPntOn2S_swiginit(self, _IntSurf.new_IntSurf_SequenceOfPntOn2S(*args))
    Size = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_Size)
    Length = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_Length)
    Lower = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_Lower)
    Upper = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_Upper)
    IsEmpty = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_IsEmpty)
    Reverse = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_Reverse)
    Exchange = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_Exchange)
    delNode = _swig_new_static_method(_IntSurf.IntSurf_SequenceOfPntOn2S_delNode)
    Clear = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_Clear)
    Assign = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_Assign)
    Set = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_Set)
    Remove = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_Remove)
    Append = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_Append)
    Prepend = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_Prepend)
    InsertBefore = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_InsertBefore)
    InsertAfter = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_InsertAfter)
    Split = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_Split)
    First = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_First)
    ChangeFirst = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_ChangeFirst)
    Last = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_Last)
    ChangeLast = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_ChangeLast)
    Value = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_Value)
    ChangeValue = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_ChangeValue)
    __call__ = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S___call__)
    SetValue = _swig_new_instance_method(_IntSurf.IntSurf_SequenceOfPntOn2S_SetValue)
    __swig_destroy__ = _IntSurf.delete_IntSurf_SequenceOfPntOn2S

# Register IntSurf_SequenceOfPntOn2S in _IntSurf:
_IntSurf.IntSurf_SequenceOfPntOn2S_swigregister(IntSurf_SequenceOfPntOn2S)
IntSurf_SequenceOfPntOn2S_delNode = _IntSurf.IntSurf_SequenceOfPntOn2S_delNode

class IntSurf_ListOfPntOn2S(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_IntSurf.IntSurf_ListOfPntOn2S_begin)
    end = _swig_new_instance_method(_IntSurf.IntSurf_ListOfPntOn2S_end)
    cbegin = _swig_new_instance_method(_IntSurf.IntSurf_ListOfPntOn2S_cbegin)
    cend = _swig_new_instance_method(_IntSurf.IntSurf_ListOfPntOn2S_cend)

    def __init__(self, *args):
        _IntSurf.IntSurf_ListOfPntOn2S_swiginit(self, _IntSurf.new_IntSurf_ListOfPntOn2S(*args))
    Size = _swig_new_instance_method(_IntSurf.IntSurf_ListOfPntOn2S_Size)
    Assign = _swig_new_instance_method(_IntSurf.IntSurf_ListOfPntOn2S_Assign)
    Set = _swig_new_instance_method(_IntSurf.IntSurf_ListOfPntOn2S_Set)
    Clear = _swig_new_instance_method(_IntSurf.IntSurf_ListOfPntOn2S_Clear)
    First = _swig_new_instance_method(_IntSurf.IntSurf_ListOfPntOn2S_First)
    Last = _swig_new_instance_method(_IntSurf.IntSurf_ListOfPntOn2S_Last)
    Append = _swig_new_instance_method(_IntSurf.IntSurf_ListOfPntOn2S_Append)
    Prepend = _swig_new_instance_method(_IntSurf.IntSurf_ListOfPntOn2S_Prepend)
    RemoveFirst = _swig_new_instance_method(_IntSurf.IntSurf_ListOfPntOn2S_RemoveFirst)
    Remove = _swig_new_instance_method(_IntSurf.IntSurf_ListOfPntOn2S_Remove)
    InsertBefore = _swig_new_instance_method(_IntSurf.IntSurf_ListOfPntOn2S_InsertBefore)
    InsertAfter = _swig_new_instance_method(_IntSurf.IntSurf_ListOfPntOn2S_InsertAfter)
    Reverse = _swig_new_instance_method(_IntSurf.IntSurf_ListOfPntOn2S_Reverse)
    __swig_destroy__ = _IntSurf.delete_IntSurf_ListOfPntOn2S

# Register IntSurf_ListOfPntOn2S in _IntSurf:
_IntSurf.IntSurf_ListOfPntOn2S_swigregister(IntSurf_ListOfPntOn2S)

class IntSurf_ListIteratorOfListOfPntOn2S(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_swiginit(self, _IntSurf.new_IntSurf_ListIteratorOfListOfPntOn2S(*args))
    More = _swig_new_instance_method(_IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_More)
    Next = _swig_new_instance_method(_IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_Next)
    Value = _swig_new_instance_method(_IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_Value)
    ChangeValue = _swig_new_instance_method(_IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_ChangeValue)
    __swig_destroy__ = _IntSurf.delete_IntSurf_ListIteratorOfListOfPntOn2S

# Register IntSurf_ListIteratorOfListOfPntOn2S in _IntSurf:
_IntSurf.IntSurf_ListIteratorOfListOfPntOn2S_swigregister(IntSurf_ListIteratorOfListOfPntOn2S)

class intsurf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MakeTransition = _swig_new_static_method(_IntSurf.intsurf_MakeTransition)
    SetPeriod = _swig_new_static_method(_IntSurf.intsurf_SetPeriod)

    __repr__ = _dumps_object


    def __init__(self):
        _IntSurf.intsurf_swiginit(self, _IntSurf.new_intsurf())
    __swig_destroy__ = _IntSurf.delete_intsurf

# Register intsurf in _IntSurf:
_IntSurf.intsurf_swigregister(intsurf)
intsurf_MakeTransition = _IntSurf.intsurf_MakeTransition
intsurf_SetPeriod = _IntSurf.intsurf_SetPeriod

class IntSurf_Couple(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    First = _swig_new_instance_method(_IntSurf.IntSurf_Couple_First)

    def __init__(self, *args):
        r"""
        :rtype: None:param Index1:
        	:type Index1: int
        	:param Index2:
        	:type Index2: int
        	:rtype: None
        """
        _IntSurf.IntSurf_Couple_swiginit(self, _IntSurf.new_IntSurf_Couple(*args))
    Second = _swig_new_instance_method(_IntSurf.IntSurf_Couple_Second)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntSurf.delete_IntSurf_Couple

# Register IntSurf_Couple in _IntSurf:
_IntSurf.IntSurf_Couple_swigregister(IntSurf_Couple)

class IntSurf_InteriorPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Direction = _swig_new_instance_method(_IntSurf.IntSurf_InteriorPoint_Direction)
    Direction2d = _swig_new_instance_method(_IntSurf.IntSurf_InteriorPoint_Direction2d)

    def __init__(self, *args):
        r"""
        :rtype: None:param P:
        	:type P: gp_Pnt
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:param Direc:
        	:type Direc: gp_Vec
        	:param Direc2d:
        	:type Direc2d: gp_Vec2d
        	:rtype: None
        """
        _IntSurf.IntSurf_InteriorPoint_swiginit(self, _IntSurf.new_IntSurf_InteriorPoint(*args))
    Parameters = _swig_new_instance_method(_IntSurf.IntSurf_InteriorPoint_Parameters)
    SetValue = _swig_new_instance_method(_IntSurf.IntSurf_InteriorPoint_SetValue)
    UParameter = _swig_new_instance_method(_IntSurf.IntSurf_InteriorPoint_UParameter)
    VParameter = _swig_new_instance_method(_IntSurf.IntSurf_InteriorPoint_VParameter)
    Value = _swig_new_instance_method(_IntSurf.IntSurf_InteriorPoint_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntSurf.delete_IntSurf_InteriorPoint

# Register IntSurf_InteriorPoint in _IntSurf:
_IntSurf.IntSurf_InteriorPoint_swigregister(IntSurf_InteriorPoint)

class IntSurf_InteriorPointTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Direction2d = _swig_new_static_method(_IntSurf.IntSurf_InteriorPointTool_Direction2d)
    Direction3d = _swig_new_static_method(_IntSurf.IntSurf_InteriorPointTool_Direction3d)
    Value2d = _swig_new_static_method(_IntSurf.IntSurf_InteriorPointTool_Value2d)
    Value3d = _swig_new_static_method(_IntSurf.IntSurf_InteriorPointTool_Value3d)

    __repr__ = _dumps_object


    def __init__(self):
        _IntSurf.IntSurf_InteriorPointTool_swiginit(self, _IntSurf.new_IntSurf_InteriorPointTool())
    __swig_destroy__ = _IntSurf.delete_IntSurf_InteriorPointTool

# Register IntSurf_InteriorPointTool in _IntSurf:
_IntSurf.IntSurf_InteriorPointTool_swigregister(IntSurf_InteriorPointTool)
IntSurf_InteriorPointTool_Direction2d = _IntSurf.IntSurf_InteriorPointTool_Direction2d
IntSurf_InteriorPointTool_Direction3d = _IntSurf.IntSurf_InteriorPointTool_Direction3d
IntSurf_InteriorPointTool_Value2d = _IntSurf.IntSurf_InteriorPointTool_Value2d
IntSurf_InteriorPointTool_Value3d = _IntSurf.IntSurf_InteriorPointTool_Value3d

class IntSurf_LineOn2S(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_IntSurf.IntSurf_LineOn2S_Add)
    Clear = _swig_new_instance_method(_IntSurf.IntSurf_LineOn2S_Clear)
    InsertBefore = _swig_new_instance_method(_IntSurf.IntSurf_LineOn2S_InsertBefore)

    def __init__(self, *args):
        r"""
        :param theAllocator: default value is 0
        	:type theAllocator: IntSurf_Allocator
        	:rtype: None
        """
        _IntSurf.IntSurf_LineOn2S_swiginit(self, _IntSurf.new_IntSurf_LineOn2S(*args))
    IsOutBox = _swig_new_instance_method(_IntSurf.IntSurf_LineOn2S_IsOutBox)
    IsOutSurf1Box = _swig_new_instance_method(_IntSurf.IntSurf_LineOn2S_IsOutSurf1Box)
    IsOutSurf2Box = _swig_new_instance_method(_IntSurf.IntSurf_LineOn2S_IsOutSurf2Box)
    NbPoints = _swig_new_instance_method(_IntSurf.IntSurf_LineOn2S_NbPoints)
    RemovePoint = _swig_new_instance_method(_IntSurf.IntSurf_LineOn2S_RemovePoint)
    Reverse = _swig_new_instance_method(_IntSurf.IntSurf_LineOn2S_Reverse)
    SetUV = _swig_new_instance_method(_IntSurf.IntSurf_LineOn2S_SetUV)
    Split = _swig_new_instance_method(_IntSurf.IntSurf_LineOn2S_Split)
    Value = _swig_new_instance_method(_IntSurf.IntSurf_LineOn2S_Value)


    @staticmethod
    def DownCast(t):
      return Handle_IntSurf_LineOn2S_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntSurf.delete_IntSurf_LineOn2S

# Register IntSurf_LineOn2S in _IntSurf:
_IntSurf.IntSurf_LineOn2S_swigregister(IntSurf_LineOn2S)

class IntSurf_PathPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddUV = _swig_new_instance_method(_IntSurf.IntSurf_PathPoint_AddUV)
    Direction2d = _swig_new_instance_method(_IntSurf.IntSurf_PathPoint_Direction2d)
    Direction3d = _swig_new_instance_method(_IntSurf.IntSurf_PathPoint_Direction3d)

    def __init__(self, *args):
        r"""
        :rtype: None:param P:
        	:type P: gp_Pnt
        	:param U:
        	:type U: float
        	:param V:
        	:type V: float
        	:rtype: None
        """
        _IntSurf.IntSurf_PathPoint_swiginit(self, _IntSurf.new_IntSurf_PathPoint(*args))
    IsPassingPnt = _swig_new_instance_method(_IntSurf.IntSurf_PathPoint_IsPassingPnt)
    IsTangent = _swig_new_instance_method(_IntSurf.IntSurf_PathPoint_IsTangent)
    Multiplicity = _swig_new_instance_method(_IntSurf.IntSurf_PathPoint_Multiplicity)
    Parameters = _swig_new_instance_method(_IntSurf.IntSurf_PathPoint_Parameters)
    SetDirections = _swig_new_instance_method(_IntSurf.IntSurf_PathPoint_SetDirections)
    SetPassing = _swig_new_instance_method(_IntSurf.IntSurf_PathPoint_SetPassing)
    SetTangency = _swig_new_instance_method(_IntSurf.IntSurf_PathPoint_SetTangency)
    SetValue = _swig_new_instance_method(_IntSurf.IntSurf_PathPoint_SetValue)
    Value = _swig_new_instance_method(_IntSurf.IntSurf_PathPoint_Value)
    Value2d = _swig_new_instance_method(_IntSurf.IntSurf_PathPoint_Value2d)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntSurf.delete_IntSurf_PathPoint

# Register IntSurf_PathPoint in _IntSurf:
_IntSurf.IntSurf_PathPoint_swigregister(IntSurf_PathPoint)

class IntSurf_PathPointTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Direction2d = _swig_new_static_method(_IntSurf.IntSurf_PathPointTool_Direction2d)
    Direction3d = _swig_new_static_method(_IntSurf.IntSurf_PathPointTool_Direction3d)
    IsPassingPnt = _swig_new_static_method(_IntSurf.IntSurf_PathPointTool_IsPassingPnt)
    IsTangent = _swig_new_static_method(_IntSurf.IntSurf_PathPointTool_IsTangent)
    Multiplicity = _swig_new_static_method(_IntSurf.IntSurf_PathPointTool_Multiplicity)
    Parameters = _swig_new_static_method(_IntSurf.IntSurf_PathPointTool_Parameters)
    Value2d = _swig_new_static_method(_IntSurf.IntSurf_PathPointTool_Value2d)
    Value3d = _swig_new_static_method(_IntSurf.IntSurf_PathPointTool_Value3d)

    __repr__ = _dumps_object


    def __init__(self):
        _IntSurf.IntSurf_PathPointTool_swiginit(self, _IntSurf.new_IntSurf_PathPointTool())
    __swig_destroy__ = _IntSurf.delete_IntSurf_PathPointTool

# Register IntSurf_PathPointTool in _IntSurf:
_IntSurf.IntSurf_PathPointTool_swigregister(IntSurf_PathPointTool)
IntSurf_PathPointTool_Direction2d = _IntSurf.IntSurf_PathPointTool_Direction2d
IntSurf_PathPointTool_Direction3d = _IntSurf.IntSurf_PathPointTool_Direction3d
IntSurf_PathPointTool_IsPassingPnt = _IntSurf.IntSurf_PathPointTool_IsPassingPnt
IntSurf_PathPointTool_IsTangent = _IntSurf.IntSurf_PathPointTool_IsTangent
IntSurf_PathPointTool_Multiplicity = _IntSurf.IntSurf_PathPointTool_Multiplicity
IntSurf_PathPointTool_Parameters = _IntSurf.IntSurf_PathPointTool_Parameters
IntSurf_PathPointTool_Value2d = _IntSurf.IntSurf_PathPointTool_Value2d
IntSurf_PathPointTool_Value3d = _IntSurf.IntSurf_PathPointTool_Value3d

class IntSurf_PntOn2S(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:rtype: None
        """
        _IntSurf.IntSurf_PntOn2S_swiginit(self, _IntSurf.new_IntSurf_PntOn2S(*args))
    IsSame = _swig_new_instance_method(_IntSurf.IntSurf_PntOn2S_IsSame)
    Parameters = _swig_new_instance_method(_IntSurf.IntSurf_PntOn2S_Parameters)
    ParametersOnS1 = _swig_new_instance_method(_IntSurf.IntSurf_PntOn2S_ParametersOnS1)
    ParametersOnS2 = _swig_new_instance_method(_IntSurf.IntSurf_PntOn2S_ParametersOnS2)
    ParametersOnSurface = _swig_new_instance_method(_IntSurf.IntSurf_PntOn2S_ParametersOnSurface)
    SetValue = _swig_new_instance_method(_IntSurf.IntSurf_PntOn2S_SetValue)
    Value = _swig_new_instance_method(_IntSurf.IntSurf_PntOn2S_Value)
    ValueOnSurface = _swig_new_instance_method(_IntSurf.IntSurf_PntOn2S_ValueOnSurface)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntSurf.delete_IntSurf_PntOn2S

# Register IntSurf_PntOn2S in _IntSurf:
_IntSurf.IntSurf_PntOn2S_swigregister(IntSurf_PntOn2S)

class IntSurf_Quadric(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Cone = _swig_new_instance_method(_IntSurf.IntSurf_Quadric_Cone)
    Cylinder = _swig_new_instance_method(_IntSurf.IntSurf_Quadric_Cylinder)
    D1 = _swig_new_instance_method(_IntSurf.IntSurf_Quadric_D1)
    DN = _swig_new_instance_method(_IntSurf.IntSurf_Quadric_DN)
    Distance = _swig_new_instance_method(_IntSurf.IntSurf_Quadric_Distance)
    Gradient = _swig_new_instance_method(_IntSurf.IntSurf_Quadric_Gradient)

    def __init__(self, *args):
        r"""
        :rtype: None:param P:
        	:type P: gp_Pln
        	:rtype: None:param C:
        	:type C: gp_Cylinder
        	:rtype: None:param S:
        	:type S: gp_Sphere
        	:rtype: None:param C:
        	:type C: gp_Cone
        	:rtype: None:param T:
        	:type T: gp_Torus
        	:rtype: None
        """
        _IntSurf.IntSurf_Quadric_swiginit(self, _IntSurf.new_IntSurf_Quadric(*args))
    Normale = _swig_new_instance_method(_IntSurf.IntSurf_Quadric_Normale)
    Parameters = _swig_new_instance_method(_IntSurf.IntSurf_Quadric_Parameters)
    Plane = _swig_new_instance_method(_IntSurf.IntSurf_Quadric_Plane)
    SetValue = _swig_new_instance_method(_IntSurf.IntSurf_Quadric_SetValue)
    Sphere = _swig_new_instance_method(_IntSurf.IntSurf_Quadric_Sphere)
    Torus = _swig_new_instance_method(_IntSurf.IntSurf_Quadric_Torus)
    TypeQuadric = _swig_new_instance_method(_IntSurf.IntSurf_Quadric_TypeQuadric)
    ValAndGrad = _swig_new_instance_method(_IntSurf.IntSurf_Quadric_ValAndGrad)
    Value = _swig_new_instance_method(_IntSurf.IntSurf_Quadric_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntSurf.delete_IntSurf_Quadric

# Register IntSurf_Quadric in _IntSurf:
_IntSurf.IntSurf_Quadric_swigregister(IntSurf_Quadric)

class IntSurf_QuadricTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Gradient = _swig_new_static_method(_IntSurf.IntSurf_QuadricTool_Gradient)
    Tolerance = _swig_new_static_method(_IntSurf.IntSurf_QuadricTool_Tolerance)
    Value = _swig_new_static_method(_IntSurf.IntSurf_QuadricTool_Value)
    ValueAndGradient = _swig_new_static_method(_IntSurf.IntSurf_QuadricTool_ValueAndGradient)

    __repr__ = _dumps_object


    def __init__(self):
        _IntSurf.IntSurf_QuadricTool_swiginit(self, _IntSurf.new_IntSurf_QuadricTool())
    __swig_destroy__ = _IntSurf.delete_IntSurf_QuadricTool

# Register IntSurf_QuadricTool in _IntSurf:
_IntSurf.IntSurf_QuadricTool_swigregister(IntSurf_QuadricTool)
IntSurf_QuadricTool_Gradient = _IntSurf.IntSurf_QuadricTool_Gradient
IntSurf_QuadricTool_Tolerance = _IntSurf.IntSurf_QuadricTool_Tolerance
IntSurf_QuadricTool_Value = _IntSurf.IntSurf_QuadricTool_Value
IntSurf_QuadricTool_ValueAndGradient = _IntSurf.IntSurf_QuadricTool_ValueAndGradient

class IntSurf_Transition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Empty constructor. Creates an UNDECIDED transition.
        	:rtype: None* Create a IN or OUT transition
        	:param Tangent:
        	:type Tangent: bool
        	:param Type:
        	:type Type: IntSurf_TypeTrans
        	:rtype: None* Create a TOUCH transition.
        	:param Tangent:
        	:type Tangent: bool
        	:param Situ:
        	:type Situ: IntSurf_Situation
        	:param Oppos:
        	:type Oppos: bool
        	:rtype: None
        """
        _IntSurf.IntSurf_Transition_swiginit(self, _IntSurf.new_IntSurf_Transition(*args))
    IsOpposite = _swig_new_instance_method(_IntSurf.IntSurf_Transition_IsOpposite)
    IsTangent = _swig_new_instance_method(_IntSurf.IntSurf_Transition_IsTangent)
    SetValue = _swig_new_instance_method(_IntSurf.IntSurf_Transition_SetValue)
    Situation = _swig_new_instance_method(_IntSurf.IntSurf_Transition_Situation)
    TransitionType = _swig_new_instance_method(_IntSurf.IntSurf_Transition_TransitionType)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntSurf.delete_IntSurf_Transition

# Register IntSurf_Transition in _IntSurf:
_IntSurf.IntSurf_Transition_swigregister(IntSurf_Transition)



