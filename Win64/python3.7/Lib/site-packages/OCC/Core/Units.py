# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Units module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_units.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Units
else:
    import _Units

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _Units.SWIG_PyInstanceMethod_New
_swig_new_static_method = _Units.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Units.delete_SwigPyIterator
    value = _swig_new_instance_method(_Units.SwigPyIterator_value)
    incr = _swig_new_instance_method(_Units.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_Units.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_Units.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_Units.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_Units.SwigPyIterator_copy)
    next = _swig_new_instance_method(_Units.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_Units.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_Units.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_Units.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_Units.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_Units.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_Units.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_Units.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_Units.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_Units.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Units:
_Units.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TCollection
import OCC.Core.TColStd
Handle_Units_Lexicon_Create = _Units.Handle_Units_Lexicon_Create
Handle_Units_Lexicon_DownCast = _Units.Handle_Units_Lexicon_DownCast
Handle_Units_Lexicon_IsNull = _Units.Handle_Units_Lexicon_IsNull
Handle_Units_Token_Create = _Units.Handle_Units_Token_Create
Handle_Units_Token_DownCast = _Units.Handle_Units_Token_DownCast
Handle_Units_Token_IsNull = _Units.Handle_Units_Token_IsNull
Handle_Units_Unit_Create = _Units.Handle_Units_Unit_Create
Handle_Units_Unit_DownCast = _Units.Handle_Units_Unit_DownCast
Handle_Units_Unit_IsNull = _Units.Handle_Units_Unit_IsNull
Handle_Units_UnitsDictionary_Create = _Units.Handle_Units_UnitsDictionary_Create
Handle_Units_UnitsDictionary_DownCast = _Units.Handle_Units_UnitsDictionary_DownCast
Handle_Units_UnitsDictionary_IsNull = _Units.Handle_Units_UnitsDictionary_IsNull
Handle_Units_UnitsSystem_Create = _Units.Handle_Units_UnitsSystem_Create
Handle_Units_UnitsSystem_DownCast = _Units.Handle_Units_UnitsSystem_DownCast
Handle_Units_UnitsSystem_IsNull = _Units.Handle_Units_UnitsSystem_IsNull
Handle_Units_ShiftedToken_Create = _Units.Handle_Units_ShiftedToken_Create
Handle_Units_ShiftedToken_DownCast = _Units.Handle_Units_ShiftedToken_DownCast
Handle_Units_ShiftedToken_IsNull = _Units.Handle_Units_ShiftedToken_IsNull
Handle_Units_ShiftedUnit_Create = _Units.Handle_Units_ShiftedUnit_Create
Handle_Units_ShiftedUnit_DownCast = _Units.Handle_Units_ShiftedUnit_DownCast
Handle_Units_ShiftedUnit_IsNull = _Units.Handle_Units_ShiftedUnit_IsNull
Handle_Units_UnitsLexicon_Create = _Units.Handle_Units_UnitsLexicon_Create
Handle_Units_UnitsLexicon_DownCast = _Units.Handle_Units_UnitsLexicon_DownCast
Handle_Units_UnitsLexicon_IsNull = _Units.Handle_Units_UnitsLexicon_IsNull
Handle_Units_TokensSequence_Create = _Units.Handle_Units_TokensSequence_Create
Handle_Units_TokensSequence_DownCast = _Units.Handle_Units_TokensSequence_DownCast
Handle_Units_TokensSequence_IsNull = _Units.Handle_Units_TokensSequence_IsNull
Handle_Units_QuantitiesSequence_Create = _Units.Handle_Units_QuantitiesSequence_Create
Handle_Units_QuantitiesSequence_DownCast = _Units.Handle_Units_QuantitiesSequence_DownCast
Handle_Units_QuantitiesSequence_IsNull = _Units.Handle_Units_QuantitiesSequence_IsNull
Handle_Units_UnitsSequence_Create = _Units.Handle_Units_UnitsSequence_Create
Handle_Units_UnitsSequence_DownCast = _Units.Handle_Units_UnitsSequence_DownCast
Handle_Units_UnitsSequence_IsNull = _Units.Handle_Units_UnitsSequence_IsNull
class Units_TksSequence(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Units.Units_TksSequence_begin)
    end = _swig_new_instance_method(_Units.Units_TksSequence_end)
    cbegin = _swig_new_instance_method(_Units.Units_TksSequence_cbegin)
    cend = _swig_new_instance_method(_Units.Units_TksSequence_cend)

    def __init__(self, *args):
        _Units.Units_TksSequence_swiginit(self, _Units.new_Units_TksSequence(*args))
    Size = _swig_new_instance_method(_Units.Units_TksSequence_Size)
    Length = _swig_new_instance_method(_Units.Units_TksSequence_Length)
    Lower = _swig_new_instance_method(_Units.Units_TksSequence_Lower)
    Upper = _swig_new_instance_method(_Units.Units_TksSequence_Upper)
    IsEmpty = _swig_new_instance_method(_Units.Units_TksSequence_IsEmpty)
    Reverse = _swig_new_instance_method(_Units.Units_TksSequence_Reverse)
    Exchange = _swig_new_instance_method(_Units.Units_TksSequence_Exchange)
    delNode = _swig_new_static_method(_Units.Units_TksSequence_delNode)
    Clear = _swig_new_instance_method(_Units.Units_TksSequence_Clear)
    Assign = _swig_new_instance_method(_Units.Units_TksSequence_Assign)
    Set = _swig_new_instance_method(_Units.Units_TksSequence_Set)
    Remove = _swig_new_instance_method(_Units.Units_TksSequence_Remove)
    Append = _swig_new_instance_method(_Units.Units_TksSequence_Append)
    Prepend = _swig_new_instance_method(_Units.Units_TksSequence_Prepend)
    InsertBefore = _swig_new_instance_method(_Units.Units_TksSequence_InsertBefore)
    InsertAfter = _swig_new_instance_method(_Units.Units_TksSequence_InsertAfter)
    Split = _swig_new_instance_method(_Units.Units_TksSequence_Split)
    First = _swig_new_instance_method(_Units.Units_TksSequence_First)
    ChangeFirst = _swig_new_instance_method(_Units.Units_TksSequence_ChangeFirst)
    Last = _swig_new_instance_method(_Units.Units_TksSequence_Last)
    ChangeLast = _swig_new_instance_method(_Units.Units_TksSequence_ChangeLast)
    Value = _swig_new_instance_method(_Units.Units_TksSequence_Value)
    ChangeValue = _swig_new_instance_method(_Units.Units_TksSequence_ChangeValue)
    __call__ = _swig_new_instance_method(_Units.Units_TksSequence___call__)
    SetValue = _swig_new_instance_method(_Units.Units_TksSequence_SetValue)
    __swig_destroy__ = _Units.delete_Units_TksSequence

# Register Units_TksSequence in _Units:
_Units.Units_TksSequence_swigregister(Units_TksSequence)
Units_TksSequence_delNode = _Units.Units_TksSequence_delNode

class Units_QtsSequence(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Units.Units_QtsSequence_begin)
    end = _swig_new_instance_method(_Units.Units_QtsSequence_end)
    cbegin = _swig_new_instance_method(_Units.Units_QtsSequence_cbegin)
    cend = _swig_new_instance_method(_Units.Units_QtsSequence_cend)

    def __init__(self, *args):
        _Units.Units_QtsSequence_swiginit(self, _Units.new_Units_QtsSequence(*args))
    Size = _swig_new_instance_method(_Units.Units_QtsSequence_Size)
    Length = _swig_new_instance_method(_Units.Units_QtsSequence_Length)
    Lower = _swig_new_instance_method(_Units.Units_QtsSequence_Lower)
    Upper = _swig_new_instance_method(_Units.Units_QtsSequence_Upper)
    IsEmpty = _swig_new_instance_method(_Units.Units_QtsSequence_IsEmpty)
    Reverse = _swig_new_instance_method(_Units.Units_QtsSequence_Reverse)
    Exchange = _swig_new_instance_method(_Units.Units_QtsSequence_Exchange)
    delNode = _swig_new_static_method(_Units.Units_QtsSequence_delNode)
    Clear = _swig_new_instance_method(_Units.Units_QtsSequence_Clear)
    Assign = _swig_new_instance_method(_Units.Units_QtsSequence_Assign)
    Set = _swig_new_instance_method(_Units.Units_QtsSequence_Set)
    Remove = _swig_new_instance_method(_Units.Units_QtsSequence_Remove)
    Append = _swig_new_instance_method(_Units.Units_QtsSequence_Append)
    Prepend = _swig_new_instance_method(_Units.Units_QtsSequence_Prepend)
    InsertBefore = _swig_new_instance_method(_Units.Units_QtsSequence_InsertBefore)
    InsertAfter = _swig_new_instance_method(_Units.Units_QtsSequence_InsertAfter)
    Split = _swig_new_instance_method(_Units.Units_QtsSequence_Split)
    First = _swig_new_instance_method(_Units.Units_QtsSequence_First)
    ChangeFirst = _swig_new_instance_method(_Units.Units_QtsSequence_ChangeFirst)
    Last = _swig_new_instance_method(_Units.Units_QtsSequence_Last)
    ChangeLast = _swig_new_instance_method(_Units.Units_QtsSequence_ChangeLast)
    Value = _swig_new_instance_method(_Units.Units_QtsSequence_Value)
    ChangeValue = _swig_new_instance_method(_Units.Units_QtsSequence_ChangeValue)
    __call__ = _swig_new_instance_method(_Units.Units_QtsSequence___call__)
    SetValue = _swig_new_instance_method(_Units.Units_QtsSequence_SetValue)
    __swig_destroy__ = _Units.delete_Units_QtsSequence

# Register Units_QtsSequence in _Units:
_Units.Units_QtsSequence_swigregister(Units_QtsSequence)
Units_QtsSequence_delNode = _Units.Units_QtsSequence_delNode

class Units_UtsSequence(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Units.Units_UtsSequence_begin)
    end = _swig_new_instance_method(_Units.Units_UtsSequence_end)
    cbegin = _swig_new_instance_method(_Units.Units_UtsSequence_cbegin)
    cend = _swig_new_instance_method(_Units.Units_UtsSequence_cend)

    def __init__(self, *args):
        _Units.Units_UtsSequence_swiginit(self, _Units.new_Units_UtsSequence(*args))
    Size = _swig_new_instance_method(_Units.Units_UtsSequence_Size)
    Length = _swig_new_instance_method(_Units.Units_UtsSequence_Length)
    Lower = _swig_new_instance_method(_Units.Units_UtsSequence_Lower)
    Upper = _swig_new_instance_method(_Units.Units_UtsSequence_Upper)
    IsEmpty = _swig_new_instance_method(_Units.Units_UtsSequence_IsEmpty)
    Reverse = _swig_new_instance_method(_Units.Units_UtsSequence_Reverse)
    Exchange = _swig_new_instance_method(_Units.Units_UtsSequence_Exchange)
    delNode = _swig_new_static_method(_Units.Units_UtsSequence_delNode)
    Clear = _swig_new_instance_method(_Units.Units_UtsSequence_Clear)
    Assign = _swig_new_instance_method(_Units.Units_UtsSequence_Assign)
    Set = _swig_new_instance_method(_Units.Units_UtsSequence_Set)
    Remove = _swig_new_instance_method(_Units.Units_UtsSequence_Remove)
    Append = _swig_new_instance_method(_Units.Units_UtsSequence_Append)
    Prepend = _swig_new_instance_method(_Units.Units_UtsSequence_Prepend)
    InsertBefore = _swig_new_instance_method(_Units.Units_UtsSequence_InsertBefore)
    InsertAfter = _swig_new_instance_method(_Units.Units_UtsSequence_InsertAfter)
    Split = _swig_new_instance_method(_Units.Units_UtsSequence_Split)
    First = _swig_new_instance_method(_Units.Units_UtsSequence_First)
    ChangeFirst = _swig_new_instance_method(_Units.Units_UtsSequence_ChangeFirst)
    Last = _swig_new_instance_method(_Units.Units_UtsSequence_Last)
    ChangeLast = _swig_new_instance_method(_Units.Units_UtsSequence_ChangeLast)
    Value = _swig_new_instance_method(_Units.Units_UtsSequence_Value)
    ChangeValue = _swig_new_instance_method(_Units.Units_UtsSequence_ChangeValue)
    __call__ = _swig_new_instance_method(_Units.Units_UtsSequence___call__)
    SetValue = _swig_new_instance_method(_Units.Units_UtsSequence_SetValue)
    __swig_destroy__ = _Units.delete_Units_UtsSequence

# Register Units_UtsSequence in _Units:
_Units.Units_UtsSequence_swigregister(Units_UtsSequence)
Units_UtsSequence_delNode = _Units.Units_UtsSequence_delNode

class units(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Convert = _swig_new_static_method(_Units.units_Convert)
    DictionaryOfUnits = _swig_new_static_method(_Units.units_DictionaryOfUnits)
    Dimensions = _swig_new_static_method(_Units.units_Dimensions)
    FirstQuantity = _swig_new_static_method(_Units.units_FirstQuantity)
    FromSI = _swig_new_static_method(_Units.units_FromSI)
    LexiconFile = _swig_new_static_method(_Units.units_LexiconFile)
    LexiconFormula = _swig_new_static_method(_Units.units_LexiconFormula)
    LexiconUnits = _swig_new_static_method(_Units.units_LexiconUnits)
    NullDimensions = _swig_new_static_method(_Units.units_NullDimensions)
    Quantity = _swig_new_static_method(_Units.units_Quantity)
    ToSI = _swig_new_static_method(_Units.units_ToSI)
    UnitsFile = _swig_new_static_method(_Units.units_UnitsFile)

    __repr__ = _dumps_object


    def __init__(self):
        _Units.units_swiginit(self, _Units.new_units())
    __swig_destroy__ = _Units.delete_units

# Register units in _Units:
_Units.units_swigregister(units)
units_Convert = _Units.units_Convert
units_DictionaryOfUnits = _Units.units_DictionaryOfUnits
units_Dimensions = _Units.units_Dimensions
units_FirstQuantity = _Units.units_FirstQuantity
units_FromSI = _Units.units_FromSI
units_LexiconFile = _Units.units_LexiconFile
units_LexiconFormula = _Units.units_LexiconFormula
units_LexiconUnits = _Units.units_LexiconUnits
units_NullDimensions = _Units.units_NullDimensions
units_Quantity = _Units.units_Quantity
units_ToSI = _Units.units_ToSI
units_UnitsFile = _Units.units_UnitsFile

class Units_Explorer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Init = _swig_new_instance_method(_Units.Units_Explorer_Init)
    IsActive = _swig_new_instance_method(_Units.Units_Explorer_IsActive)
    MoreQuantity = _swig_new_instance_method(_Units.Units_Explorer_MoreQuantity)
    MoreUnit = _swig_new_instance_method(_Units.Units_Explorer_MoreUnit)
    NextQuantity = _swig_new_instance_method(_Units.Units_Explorer_NextQuantity)
    NextUnit = _swig_new_instance_method(_Units.Units_Explorer_NextUnit)
    Quantity = _swig_new_instance_method(_Units.Units_Explorer_Quantity)
    Unit = _swig_new_instance_method(_Units.Units_Explorer_Unit)

    def __init__(self, *args):
        r"""
        * Empty contructor of the class.
        	:rtype: None* Creates a new instance of the class, initialized with the UnitsSystem <aunitssystem>.
        	:param aunitssystem:
        	:type aunitssystem: Units_UnitsSystem
        	:rtype: None* Creates a new instance of the class, initialized with the UnitsDictionary <aunitsdictionary>.
        	:param aunitsdictionary:
        	:type aunitsdictionary: Units_UnitsDictionary
        	:rtype: None* Creates a new instance of the class, initialized with the UnitsSystem <aunitssystem> and positioned at the quantity <aquantity>.
        	:param aunitssystem:
        	:type aunitssystem: Units_UnitsSystem
        	:param aquantity:
        	:type aquantity: char *
        	:rtype: None* Creates a new instance of the class, initialized with the UnitsDictionary <aunitsdictionary> and positioned at the quantity <aquantity>.
        	:param aunitsdictionary:
        	:type aunitsdictionary: Units_UnitsDictionary
        	:param aquantity:
        	:type aquantity: char *
        	:rtype: None
        """
        _Units.Units_Explorer_swiginit(self, _Units.new_Units_Explorer(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_Explorer

# Register Units_Explorer in _Units:
_Units.Units_Explorer_swigregister(Units_Explorer)

class Units_Lexicon(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddToken = _swig_new_instance_method(_Units.Units_Lexicon_AddToken)
    Creates = _swig_new_instance_method(_Units.Units_Lexicon_Creates)
    Dump = _swig_new_instance_method(_Units.Units_Lexicon_Dump)
    Sequence = _swig_new_instance_method(_Units.Units_Lexicon_Sequence)

    def __init__(self, *args):
        r"""
        * Creates an empty instance of Lexicon.
        	:rtype: None
        """
        _Units.Units_Lexicon_swiginit(self, _Units.new_Units_Lexicon(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Units_Lexicon_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_Lexicon

# Register Units_Lexicon in _Units:
_Units.Units_Lexicon_swigregister(Units_Lexicon)

class Units_Measurement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_Units.Units_Measurement_Add)
    Convert = _swig_new_instance_method(_Units.Units_Measurement_Convert)
    Divide = _swig_new_instance_method(_Units.Units_Measurement_Divide)
    Dump = _swig_new_instance_method(_Units.Units_Measurement_Dump)
    Fractional = _swig_new_instance_method(_Units.Units_Measurement_Fractional)
    HasToken = _swig_new_instance_method(_Units.Units_Measurement_HasToken)
    Integer = _swig_new_instance_method(_Units.Units_Measurement_Integer)
    Measurement = _swig_new_instance_method(_Units.Units_Measurement_Measurement)
    Multiply = _swig_new_instance_method(_Units.Units_Measurement_Multiply)
    Power = _swig_new_instance_method(_Units.Units_Measurement_Power)
    Subtract = _swig_new_instance_method(_Units.Units_Measurement_Subtract)
    Token = _swig_new_instance_method(_Units.Units_Measurement_Token)

    def __init__(self, *args):
        r"""
        * It is the empty constructor of the class.
        	:rtype: None* Returns an instance of this class. <avalue> defines the measurement, and <atoken> the token which defines the unit used.
        	:param avalue:
        	:type avalue: float
        	:param atoken:
        	:type atoken: Units_Token
        	:rtype: None* Returns an instance of this class. <avalue> defines the measurement, and <aunit> the unit used, described in natural language.
        	:param avalue:
        	:type avalue: float
        	:param aunit:
        	:type aunit: char *
        	:rtype: None
        """
        _Units.Units_Measurement_swiginit(self, _Units.new_Units_Measurement(*args))
    __mul__ = _swig_new_instance_method(_Units.Units_Measurement___mul__)
    __add__ = _swig_new_instance_method(_Units.Units_Measurement___add__)
    __sub__ = _swig_new_instance_method(_Units.Units_Measurement___sub__)

    def __truediv__(self, *args):
        return _Units.Units_Measurement___truediv__(self, *args)
    __div__ = __truediv__



    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_Measurement

# Register Units_Measurement in _Units:
_Units.Units_Measurement_swigregister(Units_Measurement)

class Units_Sentence(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Dump = _swig_new_instance_method(_Units.Units_Sentence_Dump)
    Evaluate = _swig_new_instance_method(_Units.Units_Sentence_Evaluate)
    IsDone = _swig_new_instance_method(_Units.Units_Sentence_IsDone)
    Sequence = _swig_new_instance_method(_Units.Units_Sentence_Sequence)
    SetConstants = _swig_new_instance_method(_Units.Units_Sentence_SetConstants)

    def __init__(self, *args):
        r"""
        * Creates and returns a Sentence, by analyzing the string <astring> with the lexicon <alexicon>.
        	:param alexicon:
        	:type alexicon: Units_Lexicon
        	:param astring:
        	:type astring: char *
        	:rtype: None
        """
        _Units.Units_Sentence_swiginit(self, _Units.new_Units_Sentence(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_Sentence

# Register Units_Sentence in _Units:
_Units.Units_Sentence_swigregister(Units_Sentence)

class Units_Token(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_Units.Units_Token_Add)
    Creates = _swig_new_instance_method(_Units.Units_Token_Creates)
    Dimensions = _swig_new_instance_method(_Units.Units_Token_Dimensions)
    Divide = _swig_new_instance_method(_Units.Units_Token_Divide)
    Divided = _swig_new_instance_method(_Units.Units_Token_Divided)
    Dump = _swig_new_instance_method(_Units.Units_Token_Dump)
    IsEqual = _swig_new_instance_method(_Units.Units_Token_IsEqual)
    IsGreater = _swig_new_instance_method(_Units.Units_Token_IsGreater)
    IsGreaterOrEqual = _swig_new_instance_method(_Units.Units_Token_IsGreaterOrEqual)
    IsLessOrEqual = _swig_new_instance_method(_Units.Units_Token_IsLessOrEqual)
    IsNotEqual = _swig_new_instance_method(_Units.Units_Token_IsNotEqual)
    Length = _swig_new_instance_method(_Units.Units_Token_Length)
    Mean = _swig_new_instance_method(_Units.Units_Token_Mean)
    Multiplied = _swig_new_instance_method(_Units.Units_Token_Multiplied)
    Multiply = _swig_new_instance_method(_Units.Units_Token_Multiply)
    Power = _swig_new_instance_method(_Units.Units_Token_Power)
    Subtract = _swig_new_instance_method(_Units.Units_Token_Subtract)

    def __init__(self, *args):
        r"""
        * Creates and returns a empty token.
        	:rtype: None* Creates and returns a token. <aword> is a string containing the available word.
        	:param aword:
        	:type aword: char *
        	:rtype: None* Creates and returns a token. <atoken> is copied in the returned token.
        	:param atoken:
        	:type atoken: Units_Token
        	:rtype: None* Creates and returns a token. <aword> is a string containing the available word and <amean> gives the signification of the token.
        	:param aword:
        	:type aword: char *
        	:param amean:
        	:type amean: char *
        	:rtype: None* Creates and returns a token. <aword> is a string containing the available word, <amean> gives the signification of the token and <avalue> is the numeric value of the dimension.
        	:param aword:
        	:type aword: char *
        	:param amean:
        	:type amean: char *
        	:param avalue:
        	:type avalue: float
        	:rtype: None* Creates and returns a token. <aword> is a string containing the available word, <amean> gives the signification of the token, <avalue> is the numeric value of the dimension, and <adimensions> is the dimension of the given word <aword>.
        	:param aword:
        	:type aword: char *
        	:param amean:
        	:type amean: char *
        	:param avalue:
        	:type avalue: float
        	:param adimension:
        	:type adimension: Units_Dimensions
        	:rtype: None
        """
        _Units.Units_Token_swiginit(self, _Units.new_Units_Token(*args))
    Update = _swig_new_instance_method(_Units.Units_Token_Update)
    Value = _swig_new_instance_method(_Units.Units_Token_Value)
    Word = _swig_new_instance_method(_Units.Units_Token_Word)


    @staticmethod
    def DownCast(t):
      return Handle_Units_Token_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_Token

# Register Units_Token in _Units:
_Units.Units_Token_swigregister(Units_Token)

class Units_Unit(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Dump = _swig_new_instance_method(_Units.Units_Unit_Dump)
    IsEqual = _swig_new_instance_method(_Units.Units_Unit_IsEqual)
    Name = _swig_new_instance_method(_Units.Units_Unit_Name)
    Quantity = _swig_new_instance_method(_Units.Units_Unit_Quantity)
    Symbol = _swig_new_instance_method(_Units.Units_Unit_Symbol)
    SymbolsSequence = _swig_new_instance_method(_Units.Units_Unit_SymbolsSequence)
    Token = _swig_new_instance_method(_Units.Units_Unit_Token)

    def __init__(self, *args):
        r"""
        * Creates and returns a unit. <aname> is the name of the unit, <asymbol> is the usual abbreviation of the unit, and <avalue> is the value in relation to the International System of Units.
        	:param aname:
        	:type aname: char *
        	:param asymbol:
        	:type asymbol: char *
        	:param avalue:
        	:type avalue: float
        	:param aquantity:
        	:type aquantity: Units_Quantity
        	:rtype: None* Creates and returns a unit. <aname> is the name of the unit, <asymbol> is the usual abbreviation of the unit.
        	:param aname:
        	:type aname: char *
        	:param asymbol:
        	:type asymbol: char *
        	:rtype: None* Creates and returns a unit. <aname> is the name of the unit.
        	:param aname:
        	:type aname: char *
        	:rtype: None
        """
        _Units.Units_Unit_swiginit(self, _Units.new_Units_Unit(*args))
    Value = _swig_new_instance_method(_Units.Units_Unit_Value)


    @staticmethod
    def DownCast(t):
      return Handle_Units_Unit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_Unit

# Register Units_Unit in _Units:
_Units.Units_Unit_swigregister(Units_Unit)

class Units_UnitsDictionary(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ActiveUnit = _swig_new_instance_method(_Units.Units_UnitsDictionary_ActiveUnit)
    Creates = _swig_new_instance_method(_Units.Units_UnitsDictionary_Creates)
    Dump = _swig_new_instance_method(_Units.Units_UnitsDictionary_Dump)
    Sequence = _swig_new_instance_method(_Units.Units_UnitsDictionary_Sequence)

    def __init__(self, *args):
        r"""
        * Returns an empty instance of UnitsDictionary.
        	:rtype: None
        """
        _Units.Units_UnitsDictionary_swiginit(self, _Units.new_Units_UnitsDictionary(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Units_UnitsDictionary_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_UnitsDictionary

# Register Units_UnitsDictionary in _Units:
_Units.Units_UnitsDictionary_swigregister(Units_UnitsDictionary)

class Units_UnitsSystem(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Activate = _swig_new_instance_method(_Units.Units_UnitsSystem_Activate)
    Activates = _swig_new_instance_method(_Units.Units_UnitsSystem_Activates)
    ActiveUnit = _swig_new_instance_method(_Units.Units_UnitsSystem_ActiveUnit)
    ActiveUnitsSequence = _swig_new_instance_method(_Units.Units_UnitsSystem_ActiveUnitsSequence)
    ConvertSIValueToUserSystem = _swig_new_instance_method(_Units.Units_UnitsSystem_ConvertSIValueToUserSystem)
    ConvertUserSystemValueToSI = _swig_new_instance_method(_Units.Units_UnitsSystem_ConvertUserSystemValueToSI)
    ConvertValueToUserSystem = _swig_new_instance_method(_Units.Units_UnitsSystem_ConvertValueToUserSystem)
    Dump = _swig_new_instance_method(_Units.Units_UnitsSystem_Dump)
    IsEmpty = _swig_new_instance_method(_Units.Units_UnitsSystem_IsEmpty)
    QuantitiesSequence = _swig_new_instance_method(_Units.Units_UnitsSystem_QuantitiesSequence)
    Remove = _swig_new_instance_method(_Units.Units_UnitsSystem_Remove)
    Specify = _swig_new_instance_method(_Units.Units_UnitsSystem_Specify)

    def __init__(self, *args):
        r"""
        * Returns an instance of UnitsSystem initialized to the S.I. units system.
        	:rtype: None* Returns an instance of UnitsSystem initialized to the S.I. units system upgraded by the base system units decription file. Attempts to find the four following files: $CSF_`aName`Defaults/.aName $CSF_`aName`SiteDefaults/.aName $CSF_`aName`GroupDefaults/.aName $CSF_`aName`UserDefaults/.aName See : Resource_Manager for the description of this file.
        	:param aName:
        	:type aName: char *
        	:param Verbose: default value is Standard_False
        	:type Verbose: bool
        	:rtype: None
        """
        _Units.Units_UnitsSystem_swiginit(self, _Units.new_Units_UnitsSystem(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Units_UnitsSystem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_UnitsSystem

# Register Units_UnitsSystem in _Units:
_Units.Units_UnitsSystem_swigregister(Units_UnitsSystem)

class Units_MathSentence(Units_Sentence):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates and returns a MathSentence object. The string <astring> describes an algebraic formula in natural language.
        	:param astring:
        	:type astring: char *
        	:rtype: None
        """
        _Units.Units_MathSentence_swiginit(self, _Units.new_Units_MathSentence(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_MathSentence

# Register Units_MathSentence in _Units:
_Units.Units_MathSentence_swigregister(Units_MathSentence)

class Units_ShiftedToken(Units_Token):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Move = _swig_new_instance_method(_Units.Units_ShiftedToken_Move)

    def __init__(self, *args):
        r"""
        * Creates and returns a shifted token. <aword> is a string containing the available word, <amean> gives the signification of the token, <avalue> is the numeric value of the dimension, <amove> is the gap, and <adimensions> is the dimension of the given word <aword>.
        	:param aword:
        	:type aword: char *
        	:param amean:
        	:type amean: char *
        	:param avalue:
        	:type avalue: float
        	:param amove:
        	:type amove: float
        	:param adimensions:
        	:type adimensions: Units_Dimensions
        	:rtype: None
        """
        _Units.Units_ShiftedToken_swiginit(self, _Units.new_Units_ShiftedToken(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Units_ShiftedToken_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_ShiftedToken

# Register Units_ShiftedToken in _Units:
_Units.Units_ShiftedToken_swigregister(Units_ShiftedToken)

class Units_ShiftedUnit(Units_Unit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Move = _swig_new_instance_method(_Units.Units_ShiftedUnit_Move)

    def __init__(self, *args):
        r"""
        * Creates and returns a shifted unit. <aname> is the name of the unit, <asymbol> is the usual abbreviation of the unit, <avalue> is the value in relation to the International System of Units, and <amove> is the gap in relation to another unit. //! For example Celcius dregee of temperature is an instance of ShiftedUnit with <avalue> equal to 1. and <amove> equal to 273.15.
        	:param aname:
        	:type aname: char *
        	:param asymbol:
        	:type asymbol: char *
        	:param avalue:
        	:type avalue: float
        	:param amove:
        	:type amove: float
        	:param aquantity:
        	:type aquantity: Units_Quantity
        	:rtype: None* Creates and returns a unit. <aname> is the name of the unit, <asymbol> is the usual abbreviation of the unit.
        	:param aname:
        	:type aname: char *
        	:param asymbol:
        	:type asymbol: char *
        	:rtype: None* Creates and returns a unit. <aname> is the name of the unit.
        	:param aname:
        	:type aname: char *
        	:rtype: None
        """
        _Units.Units_ShiftedUnit_swiginit(self, _Units.new_Units_ShiftedUnit(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Units_ShiftedUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_ShiftedUnit

# Register Units_ShiftedUnit in _Units:
_Units.Units_ShiftedUnit_swigregister(Units_ShiftedUnit)

class Units_UnitSentence(Units_Sentence):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Analyse = _swig_new_instance_method(_Units.Units_UnitSentence_Analyse)
    SetUnits = _swig_new_instance_method(_Units.Units_UnitSentence_SetUnits)

    def __init__(self, *args):
        r"""
        * Creates and returns a UnitSentence. The string <astring> describes in natural language the unit or the composed unit to be analysed.
        	:param astring:
        	:type astring: char *
        	:rtype: None* Creates and returns a UnitSentence. The string <astring> describes in natural language the unit to be analysed. The sequence of physical quantities <asequenceofquantities> describes the available dictionary of units you want to use.
        	:param astring:
        	:type astring: char *
        	:param aquantitiessequence:
        	:type aquantitiessequence: Units_QuantitiesSequence
        	:rtype: None
        """
        _Units.Units_UnitSentence_swiginit(self, _Units.new_Units_UnitSentence(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_UnitSentence

# Register Units_UnitSentence in _Units:
_Units.Units_UnitSentence_swigregister(Units_UnitSentence)

class Units_UnitsLexicon(Units_Lexicon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Creates = _swig_new_instance_method(_Units.Units_UnitsLexicon_Creates)
    Dump = _swig_new_instance_method(_Units.Units_UnitsLexicon_Dump)

    def __init__(self, *args):
        r"""
        * Returns an empty instance of UnitsLexicon
        	:rtype: None
        """
        _Units.Units_UnitsLexicon_swiginit(self, _Units.new_Units_UnitsLexicon(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Units_UnitsLexicon_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Units.delete_Units_UnitsLexicon

# Register Units_UnitsLexicon in _Units:
_Units.Units_UnitsLexicon_swigregister(Units_UnitsLexicon)

class Units_TokensSequence(Units_TksSequence, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Units.Units_TokensSequence_swiginit(self, _Units.new_Units_TokensSequence(*args))
    Sequence = _swig_new_instance_method(_Units.Units_TokensSequence_Sequence)
    Append = _swig_new_instance_method(_Units.Units_TokensSequence_Append)
    ChangeSequence = _swig_new_instance_method(_Units.Units_TokensSequence_ChangeSequence)


    @staticmethod
    def DownCast(t):
      return Handle_Units_TokensSequence_DownCast(t)

    __swig_destroy__ = _Units.delete_Units_TokensSequence

# Register Units_TokensSequence in _Units:
_Units.Units_TokensSequence_swigregister(Units_TokensSequence)

class Units_QuantitiesSequence(Units_QtsSequence, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Units.Units_QuantitiesSequence_swiginit(self, _Units.new_Units_QuantitiesSequence(*args))
    Sequence = _swig_new_instance_method(_Units.Units_QuantitiesSequence_Sequence)
    Append = _swig_new_instance_method(_Units.Units_QuantitiesSequence_Append)
    ChangeSequence = _swig_new_instance_method(_Units.Units_QuantitiesSequence_ChangeSequence)


    @staticmethod
    def DownCast(t):
      return Handle_Units_QuantitiesSequence_DownCast(t)

    __swig_destroy__ = _Units.delete_Units_QuantitiesSequence

# Register Units_QuantitiesSequence in _Units:
_Units.Units_QuantitiesSequence_swigregister(Units_QuantitiesSequence)

class Units_UnitsSequence(Units_UtsSequence, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Units.Units_UnitsSequence_swiginit(self, _Units.new_Units_UnitsSequence(*args))
    Sequence = _swig_new_instance_method(_Units.Units_UnitsSequence_Sequence)
    Append = _swig_new_instance_method(_Units.Units_UnitsSequence_Append)
    ChangeSequence = _swig_new_instance_method(_Units.Units_UnitsSequence_ChangeSequence)


    @staticmethod
    def DownCast(t):
      return Handle_Units_UnitsSequence_DownCast(t)

    __swig_destroy__ = _Units.delete_Units_UnitsSequence

# Register Units_UnitsSequence in _Units:
_Units.Units_UnitsSequence_swigregister(Units_UnitsSequence)



