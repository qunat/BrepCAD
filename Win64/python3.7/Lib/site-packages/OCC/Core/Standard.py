# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Standard module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_standard.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Standard
else:
    import _Standard

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _Standard.SWIG_PyInstanceMethod_New
_swig_new_static_method = _Standard.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Standard.delete_SwigPyIterator
    value = _swig_new_instance_method(_Standard.SwigPyIterator_value)
    incr = _swig_new_instance_method(_Standard.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_Standard.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_Standard.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_Standard.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_Standard.SwigPyIterator_copy)
    next = _swig_new_instance_method(_Standard.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_Standard.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_Standard.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_Standard.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_Standard.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_Standard.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_Standard.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_Standard.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_Standard.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_Standard.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Standard:
_Standard.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

Standard_HandlerVoid = _Standard.Standard_HandlerVoid
Standard_HandlerJumped = _Standard.Standard_HandlerJumped
Standard_HandlerProcessed = _Standard.Standard_HandlerProcessed
Handle_Standard_Transient_Create = _Standard.Handle_Standard_Transient_Create
Handle_Standard_Transient_DownCast = _Standard.Handle_Standard_Transient_DownCast
Handle_Standard_Transient_IsNull = _Standard.Handle_Standard_Transient_IsNull
Handle_Standard_OutOfMemory_Create = _Standard.Handle_Standard_OutOfMemory_Create
Handle_Standard_OutOfMemory_DownCast = _Standard.Handle_Standard_OutOfMemory_DownCast
Handle_Standard_OutOfMemory_IsNull = _Standard.Handle_Standard_OutOfMemory_IsNull
Handle_Standard_Persistent_Create = _Standard.Handle_Standard_Persistent_Create
Handle_Standard_Persistent_DownCast = _Standard.Handle_Standard_Persistent_DownCast
Handle_Standard_Persistent_IsNull = _Standard.Handle_Standard_Persistent_IsNull
class standard(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Allocate = _swig_new_static_method(_Standard.standard_Allocate)
    AllocateAligned = _swig_new_static_method(_Standard.standard_AllocateAligned)
    Purge = _swig_new_static_method(_Standard.standard_Purge)
    Reallocate = _swig_new_static_method(_Standard.standard_Reallocate)

    __repr__ = _dumps_object


    def __init__(self):
        _Standard.standard_swiginit(self, _Standard.new_standard())
    __swig_destroy__ = _Standard.delete_standard

# Register standard in _Standard:
_Standard.standard_swigregister(standard)
standard_Allocate = _Standard.standard_Allocate
standard_AllocateAligned = _Standard.standard_AllocateAligned
standard_Purge = _Standard.standard_Purge
standard_Reallocate = _Standard.standard_Reallocate

class Standard_ArrayStreamBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Init = _swig_new_instance_method(_Standard.Standard_ArrayStreamBuffer_Init)

    def __init__(self, *args):
        r"""
        * Main constructor. Passed pointer is stored as is (memory is NOT copied nor released with destructor). @param theBegin pointer to the beggining of pre-allocated buffer @param theSize length of pre-allocated buffer
        	:param theBegin:
        	:type theBegin: char *
        	:param theSize:
        	:type theSize: size_t
        	:rtype: None
        """
        _Standard.Standard_ArrayStreamBuffer_swiginit(self, _Standard.new_Standard_ArrayStreamBuffer(*args))
    xsgetn = _swig_new_instance_method(_Standard.Standard_ArrayStreamBuffer_xsgetn)

    __repr__ = _dumps_object

    __swig_destroy__ = _Standard.delete_Standard_ArrayStreamBuffer

# Register Standard_ArrayStreamBuffer in _Standard:
_Standard.Standard_ArrayStreamBuffer_swigregister(Standard_ArrayStreamBuffer)

class Standard_Condition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Check = _swig_new_instance_method(_Standard.Standard_Condition_Check)
    CheckReset = _swig_new_instance_method(_Standard.Standard_Condition_CheckReset)
    Reset = _swig_new_instance_method(_Standard.Standard_Condition_Reset)
    Set = _swig_new_instance_method(_Standard.Standard_Condition_Set)

    def __init__(self, *args):
        r"""
        * Default constructor. @param theIsSet Initial flag state
        	:param theIsSet:
        	:type theIsSet: bool
        	:rtype: None
        """
        _Standard.Standard_Condition_swiginit(self, _Standard.new_Standard_Condition(*args))
    Wait = _swig_new_instance_method(_Standard.Standard_Condition_Wait)

    __repr__ = _dumps_object

    __swig_destroy__ = _Standard.delete_Standard_Condition

# Register Standard_Condition in _Standard:
_Standard.Standard_Condition_swigregister(Standard_Condition)

class Standard_ErrorHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Catches = _swig_new_instance_method(_Standard.Standard_ErrorHandler_Catches)
    Destroy = _swig_new_instance_method(_Standard.Standard_ErrorHandler_Destroy)
    Error = _swig_new_instance_method(_Standard.Standard_ErrorHandler_Error)
    IsInTryBlock = _swig_new_static_method(_Standard.Standard_ErrorHandler_IsInTryBlock)
    Label = _swig_new_instance_method(_Standard.Standard_ErrorHandler_Label)
    LastCaughtError = _swig_new_static_method(_Standard.Standard_ErrorHandler_LastCaughtError)

    def __init__(self, *args):
        r"""
        * Create a ErrorHandler (to be used with try{}catch(){}). It uses the 'setjmp' and 'longjmp' routines.
        	:rtype: None
        """
        _Standard.Standard_ErrorHandler_swiginit(self, _Standard.new_Standard_ErrorHandler(*args))
    Unlink = _swig_new_instance_method(_Standard.Standard_ErrorHandler_Unlink)

    __repr__ = _dumps_object

    __swig_destroy__ = _Standard.delete_Standard_ErrorHandler

# Register Standard_ErrorHandler in _Standard:
_Standard.Standard_ErrorHandler_swigregister(Standard_ErrorHandler)
Standard_ErrorHandler_IsInTryBlock = _Standard.Standard_ErrorHandler_IsInTryBlock
Standard_ErrorHandler_LastCaughtError = _Standard.Standard_ErrorHandler_LastCaughtError

class Standard_GUID(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Assign = _swig_new_instance_method(_Standard.Standard_GUID_Assign)
    CheckGUIDFormat = _swig_new_static_method(_Standard.Standard_GUID_CheckGUIDFormat)
    Hash = _swig_new_instance_method(_Standard.Standard_GUID_Hash)
    HashCode = _swig_new_static_method(_Standard.Standard_GUID_HashCode)
    IsEqual = _swig_new_static_method(_Standard.Standard_GUID_IsEqual)
    IsNotSame = _swig_new_instance_method(_Standard.Standard_GUID_IsNotSame)
    IsSame = _swig_new_instance_method(_Standard.Standard_GUID_IsSame)
    ShallowDumpToString = _swig_new_instance_method(_Standard.Standard_GUID_ShallowDumpToString)

    def __init__(self, *args):
        r"""
        :rtype: None* build a GUID from an ascii string with the following format: Length : 36 char '00000000-0000-0000-0000-000000000000'
        	:param aGuid:
        	:type aGuid: char *
        	:rtype: None* build a GUID from an unicode string with the following format: //! '00000000-0000-0000-0000-000000000000'
        	:param aGuid:
        	:type aGuid: Standard_ExtString
        	:rtype: None:param a32b:
        	:type a32b: int
        	:param a16b1:
        	:type a16b1: Standard_ExtCharacter
        	:param a16b2:
        	:type a16b2: Standard_ExtCharacter
        	:param a16b3:
        	:type a16b3: Standard_ExtCharacter
        	:param a8b1:
        	:type a8b1: Standard_Byte
        	:param a8b2:
        	:type a8b2: Standard_Byte
        	:param a8b3:
        	:type a8b3: Standard_Byte
        	:param a8b4:
        	:type a8b4: Standard_Byte
        	:param a8b5:
        	:type a8b5: Standard_Byte
        	:param a8b6:
        	:type a8b6: Standard_Byte
        	:rtype: None:param aGuid:
        	:type aGuid: Standard_UUID
        	:rtype: None:param aGuid:
        	:type aGuid: Standard_GUID
        	:rtype: None
        """
        _Standard.Standard_GUID_swiginit(self, _Standard.new_Standard_GUID(*args))
    ToCString = _swig_new_instance_method(_Standard.Standard_GUID_ToCString)
    ToExtString = _swig_new_instance_method(_Standard.Standard_GUID_ToExtString)
    ToUUID = _swig_new_instance_method(_Standard.Standard_GUID_ToUUID)
    Set = _swig_new_instance_method(_Standard.Standard_GUID_Set)
    __eq_wrapper__ = _swig_new_instance_method(_Standard.Standard_GUID___eq_wrapper__)

    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    __repr__ = _dumps_object

    __swig_destroy__ = _Standard.delete_Standard_GUID

# Register Standard_GUID in _Standard:
_Standard.Standard_GUID_swigregister(Standard_GUID)
Standard_GUID_CheckGUIDFormat = _Standard.Standard_GUID_CheckGUIDFormat
Standard_GUID_HashCode = _Standard.Standard_GUID_HashCode
Standard_GUID_IsEqual = _Standard.Standard_GUID_IsEqual

class Standard_MMgrRoot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Allocate = _swig_new_instance_method(_Standard.Standard_MMgrRoot_Allocate)
    Free = _swig_new_instance_method(_Standard.Standard_MMgrRoot_Free)
    Purge = _swig_new_instance_method(_Standard.Standard_MMgrRoot_Purge)
    Reallocate = _swig_new_instance_method(_Standard.Standard_MMgrRoot_Reallocate)

    __repr__ = _dumps_object

    __swig_destroy__ = _Standard.delete_Standard_MMgrRoot

# Register Standard_MMgrRoot in _Standard:
_Standard.Standard_MMgrRoot_swigregister(Standard_MMgrRoot)

class Standard_Transient(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DecrementRefCounter = _swig_new_instance_method(_Standard.Standard_Transient_DecrementRefCounter)
    Delete = _swig_new_instance_method(_Standard.Standard_Transient_Delete)
    DynamicType = _swig_new_instance_method(_Standard.Standard_Transient_DynamicType)
    GetRefCount = _swig_new_instance_method(_Standard.Standard_Transient_GetRefCount)
    IncrementRefCounter = _swig_new_instance_method(_Standard.Standard_Transient_IncrementRefCounter)
    IsInstance = _swig_new_instance_method(_Standard.Standard_Transient_IsInstance)
    IsKind = _swig_new_instance_method(_Standard.Standard_Transient_IsKind)

    def __init__(self, *args):
        r"""
        * Empty constructor
        	:rtype: None* Copy constructor -- does nothing
        	:param &:
        	:type &: Standard_Transient
        	:rtype: None
        """
        _Standard.Standard_Transient_swiginit(self, _Standard.new_Standard_Transient(*args))
    This = _swig_new_instance_method(_Standard.Standard_Transient_This)
    get_type_descriptor = _swig_new_static_method(_Standard.Standard_Transient_get_type_descriptor)
    get_type_name = _swig_new_static_method(_Standard.Standard_Transient_get_type_name)


    @staticmethod
    def DownCast(t):
      return Handle_Standard_Transient_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Standard.delete_Standard_Transient

# Register Standard_Transient in _Standard:
_Standard.Standard_Transient_swigregister(Standard_Transient)
Standard_Transient_get_type_descriptor = _Standard.Standard_Transient_get_type_descriptor
Standard_Transient_get_type_name = _Standard.Standard_Transient_get_type_name

class Standard_MMgrOpt(Standard_MMgrRoot):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructor. If aClear is True, the allocated emmory will be nullified. For description of other parameters, see description of the class above.
        	:param aClear: default value is Standard_True
        	:type aClear: bool
        	:param aMMap: default value is Standard_True
        	:type aMMap: bool
        	:param aCellSize: default value is 200
        	:type aCellSize: Standard_Size
        	:param aNbPages: default value is 10000
        	:type aNbPages: int
        	:param aThreshold: default value is 40000
        	:type aThreshold: Standard_Size
        	:rtype: None
        """
        _Standard.Standard_MMgrOpt_swiginit(self, _Standard.new_Standard_MMgrOpt(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Standard.delete_Standard_MMgrOpt

# Register Standard_MMgrOpt in _Standard:
_Standard.Standard_MMgrOpt_swigregister(Standard_MMgrOpt)

class Standard_MMgrRaw(Standard_MMgrRoot):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructor; if aClear is True, the memory will be nullified upon allocation.
        	:param aClear: default value is Standard_False
        	:type aClear: bool
        	:rtype: None
        """
        _Standard.Standard_MMgrRaw_swiginit(self, _Standard.new_Standard_MMgrRaw(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Standard.delete_Standard_MMgrRaw

# Register Standard_MMgrRaw in _Standard:
_Standard.Standard_MMgrRaw_swigregister(Standard_MMgrRaw)

class Standard_MMgrTBBalloc(Standard_MMgrRoot):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructor; if aClear is True, the memory will be nullified upon allocation.
        	:param aClear: default value is Standard_False
        	:type aClear: bool
        	:rtype: None
        """
        _Standard.Standard_MMgrTBBalloc_swiginit(self, _Standard.new_Standard_MMgrTBBalloc(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Standard.delete_Standard_MMgrTBBalloc

# Register Standard_MMgrTBBalloc in _Standard:
_Standard.Standard_MMgrTBBalloc_swigregister(Standard_MMgrTBBalloc)

class Standard_OutOfMemory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GetMessageString = _swig_new_instance_method(_Standard.Standard_OutOfMemory_GetMessageString)
    NewInstance = _swig_new_static_method(_Standard.Standard_OutOfMemory_NewInstance)
    Raise = _swig_new_static_method(_Standard.Standard_OutOfMemory_Raise)
    SetMessageString = _swig_new_instance_method(_Standard.Standard_OutOfMemory_SetMessageString)

    def __init__(self, *args):
        r"""
        * Constructor is kept public for backward compatibility
        	:param theMessage: default value is 0
        	:type theMessage: char *
        	:rtype: None
        """
        _Standard.Standard_OutOfMemory_swiginit(self, _Standard.new_Standard_OutOfMemory(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Standard_OutOfMemory_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Standard.delete_Standard_OutOfMemory

# Register Standard_OutOfMemory in _Standard:
_Standard.Standard_OutOfMemory_swigregister(Standard_OutOfMemory)
Standard_OutOfMemory_NewInstance = _Standard.Standard_OutOfMemory_NewInstance
Standard_OutOfMemory_Raise = _Standard.Standard_OutOfMemory_Raise

class Standard_Persistent(Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""":rtype: None"""
        _Standard.Standard_Persistent_swiginit(self, _Standard.new_Standard_Persistent(*args))
    GetTypeNum = _swig_new_instance_method(_Standard.Standard_Persistent_GetTypeNum)
    SetTypeNum = _swig_new_instance_method(_Standard.Standard_Persistent_SetTypeNum)


    @staticmethod
    def DownCast(t):
      return Handle_Standard_Persistent_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Standard.delete_Standard_Persistent

# Register Standard_Persistent in _Standard:
_Standard.Standard_Persistent_swigregister(Standard_Persistent)



