# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
STEPConstruct module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_stepconstruct.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _STEPConstruct
else:
    import _STEPConstruct

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _STEPConstruct.SWIG_PyInstanceMethod_New
_swig_new_static_method = _STEPConstruct.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _STEPConstruct.delete_SwigPyIterator
    value = _swig_new_instance_method(_STEPConstruct.SwigPyIterator_value)
    incr = _swig_new_instance_method(_STEPConstruct.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_STEPConstruct.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_STEPConstruct.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_STEPConstruct.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_STEPConstruct.SwigPyIterator_copy)
    next = _swig_new_instance_method(_STEPConstruct.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_STEPConstruct.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_STEPConstruct.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_STEPConstruct.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_STEPConstruct.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_STEPConstruct.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_STEPConstruct.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_STEPConstruct.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_STEPConstruct.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_STEPConstruct.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _STEPConstruct:
_STEPConstruct.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Transfer
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
import OCC.Core.StepShape
import OCC.Core.StepGeom
import OCC.Core.StepData
import OCC.Core.StepRepr
import OCC.Core.StepBasic
import OCC.Core.StepAP203
import OCC.Core.XSControl
import OCC.Core.IFSelect
import OCC.Core.TopTools
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2d
import OCC.Core.StepVisual
import OCC.Core.Quantity
class STEPConstruct_DataMapOfAsciiStringTransient(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_begin)
    end = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_end)
    cbegin = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_cbegin)
    cend = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_cend)

    def __init__(self, *args):
        _STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_swiginit(self, _STEPConstruct.new_STEPConstruct_DataMapOfAsciiStringTransient(*args))
    Exchange = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_Exchange)
    Assign = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_Assign)
    Set = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_Set)
    ReSize = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_ReSize)
    Bind = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_Bind)
    Bound = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_Bound)
    IsBound = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_IsBound)
    UnBind = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_UnBind)
    Seek = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_Seek)
    Find = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_Find)
    ChangeSeek = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_ChangeFind)
    __call__ = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient___call__)
    Clear = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_Clear)
    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_DataMapOfAsciiStringTransient
    Size = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_Size)

# Register STEPConstruct_DataMapOfAsciiStringTransient in _STEPConstruct:
_STEPConstruct.STEPConstruct_DataMapOfAsciiStringTransient_swigregister(STEPConstruct_DataMapOfAsciiStringTransient)

class STEPConstruct_DataMapOfPointTransient(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_begin)
    end = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_end)
    cbegin = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_cbegin)
    cend = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_cend)

    def __init__(self, *args):
        _STEPConstruct.STEPConstruct_DataMapOfPointTransient_swiginit(self, _STEPConstruct.new_STEPConstruct_DataMapOfPointTransient(*args))
    Exchange = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_Exchange)
    Assign = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_Assign)
    Set = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_Set)
    ReSize = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_ReSize)
    Bind = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_Bind)
    Bound = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_Bound)
    IsBound = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_IsBound)
    UnBind = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_UnBind)
    Seek = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_Seek)
    Find = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_Find)
    ChangeSeek = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_ChangeFind)
    __call__ = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfPointTransient___call__)
    Clear = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_Clear)
    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_DataMapOfPointTransient
    Size = _swig_new_instance_method(_STEPConstruct.STEPConstruct_DataMapOfPointTransient_Size)

# Register STEPConstruct_DataMapOfPointTransient in _STEPConstruct:
_STEPConstruct.STEPConstruct_DataMapOfPointTransient_swigregister(STEPConstruct_DataMapOfPointTransient)

class stepconstruct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FindCDSR = _swig_new_static_method(_STEPConstruct.stepconstruct_FindCDSR)
    FindEntity = _swig_new_static_method(_STEPConstruct.stepconstruct_FindEntity)
    FindShape = _swig_new_static_method(_STEPConstruct.stepconstruct_FindShape)

    __repr__ = _dumps_object


    def __init__(self):
        _STEPConstruct.stepconstruct_swiginit(self, _STEPConstruct.new_stepconstruct())
    __swig_destroy__ = _STEPConstruct.delete_stepconstruct

# Register stepconstruct in _STEPConstruct:
_STEPConstruct.stepconstruct_swigregister(stepconstruct)
stepconstruct_FindCDSR = _STEPConstruct.stepconstruct_FindCDSR
stepconstruct_FindEntity = _STEPConstruct.stepconstruct_FindEntity
stepconstruct_FindShape = _STEPConstruct.stepconstruct_FindShape

class STEPConstruct_AP203Context(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Clear = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_Clear)
    DefaultApproval = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_DefaultApproval)
    DefaultDateAndTime = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_DefaultDateAndTime)
    DefaultPersonAndOrganization = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_DefaultPersonAndOrganization)
    DefaultSecurityClassificationLevel = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_DefaultSecurityClassificationLevel)
    GetApproval = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_GetApproval)
    GetApprovalDateTime = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_GetApprovalDateTime)
    GetApprover = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_GetApprover)
    GetClassificationDate = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_GetClassificationDate)
    GetClassificationOfficer = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_GetClassificationOfficer)
    GetCreationDate = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_GetCreationDate)
    GetCreator = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_GetCreator)
    GetDesignOwner = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_GetDesignOwner)
    GetDesignSupplier = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_GetDesignSupplier)
    GetProductCategoryRelationship = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_GetProductCategoryRelationship)
    GetSecurity = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_GetSecurity)
    Init = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_Init)
    InitApprovalRequisites = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_InitApprovalRequisites)
    InitAssembly = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_InitAssembly)
    InitRoles = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_InitRoles)
    InitSecurityRequisites = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_InitSecurityRequisites)
    RoleApprover = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_RoleApprover)
    RoleClassificationDate = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_RoleClassificationDate)
    RoleClassificationOfficer = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_RoleClassificationOfficer)
    RoleCreationDate = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_RoleCreationDate)
    RoleCreator = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_RoleCreator)
    RoleDesignOwner = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_RoleDesignOwner)
    RoleDesignSupplier = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_RoleDesignSupplier)

    def __init__(self, *args):
        r"""
        * Creates tool and fills constant fields
        	:rtype: None
        """
        _STEPConstruct.STEPConstruct_AP203Context_swiginit(self, _STEPConstruct.new_STEPConstruct_AP203Context(*args))
    SetDefaultApproval = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_SetDefaultApproval)
    SetDefaultDateAndTime = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_SetDefaultDateAndTime)
    SetDefaultPersonAndOrganization = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_SetDefaultPersonAndOrganization)
    SetDefaultSecurityClassificationLevel = _swig_new_instance_method(_STEPConstruct.STEPConstruct_AP203Context_SetDefaultSecurityClassificationLevel)

    __repr__ = _dumps_object

    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_AP203Context

# Register STEPConstruct_AP203Context in _STEPConstruct:
_STEPConstruct.STEPConstruct_AP203Context_swigregister(STEPConstruct_AP203Context)

class STEPConstruct_Assembly(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CheckSRRReversesNAUO = _swig_new_static_method(_STEPConstruct.STEPConstruct_Assembly_CheckSRRReversesNAUO)
    GetNAUO = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Assembly_GetNAUO)
    Init = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Assembly_Init)
    ItemLocation = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Assembly_ItemLocation)
    ItemValue = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Assembly_ItemValue)
    MakeRelationship = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Assembly_MakeRelationship)

    def __init__(self, *args):
        r""":rtype: None"""
        _STEPConstruct.STEPConstruct_Assembly_swiginit(self, _STEPConstruct.new_STEPConstruct_Assembly(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_Assembly

# Register STEPConstruct_Assembly in _STEPConstruct:
_STEPConstruct.STEPConstruct_Assembly_swigregister(STEPConstruct_Assembly)
STEPConstruct_Assembly_CheckSRRReversesNAUO = _STEPConstruct.STEPConstruct_Assembly_CheckSRRReversesNAUO

class STEPConstruct_ContextTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AP203Context = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_AP203Context)
    AddAPD = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_AddAPD)
    GetACname = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_GetACname)
    GetACschemaName = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_GetACschemaName)
    GetACstatus = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_GetACstatus)
    GetACyear = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_GetACyear)
    GetAPD = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_GetAPD)
    GetDefaultAxis = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_GetDefaultAxis)
    GetProductName = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_GetProductName)
    GetRootsForAssemblyLink = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_GetRootsForAssemblyLink)
    GetRootsForPart = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_GetRootsForPart)
    Index = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_Index)
    IsAP203 = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_IsAP203)
    IsAP214 = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_IsAP214)
    IsAP242 = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_IsAP242)
    Level = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_Level)
    NextIndex = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_NextIndex)
    NextLevel = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_NextLevel)
    PrevIndex = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_PrevIndex)
    PrevLevel = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_PrevLevel)

    def __init__(self, *args):
        r"""
        :rtype: None:param aStepModel:
        	:type aStepModel: StepData_StepModel
        	:rtype: None
        """
        _STEPConstruct.STEPConstruct_ContextTool_swiginit(self, _STEPConstruct.new_STEPConstruct_ContextTool(*args))
    SetACname = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_SetACname)
    SetACschemaName = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_SetACschemaName)
    SetACstatus = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_SetACstatus)
    SetACyear = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_SetACyear)
    SetIndex = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_SetIndex)
    SetLevel = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_SetLevel)
    SetModel = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ContextTool_SetModel)

    __repr__ = _dumps_object

    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_ContextTool

# Register STEPConstruct_ContextTool in _STEPConstruct:
_STEPConstruct.STEPConstruct_ContextTool_swigregister(STEPConstruct_ContextTool)

class STEPConstruct_Part(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AC = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_AC)
    ACapplication = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_ACapplication)
    IsDone = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_IsDone)
    MakeSDR = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_MakeSDR)
    PC = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_PC)
    PCdisciplineType = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_PCdisciplineType)
    PCname = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_PCname)
    PD = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_PD)
    PDC = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_PDC)
    PDCname = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_PDCname)
    PDCstage = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_PDCstage)
    PDF = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_PDF)
    PDFdescription = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_PDFdescription)
    PDFid = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_PDFid)
    PDS = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_PDS)
    PDSdescription = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_PDSdescription)
    PDSname = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_PDSname)
    PDdescription = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_PDdescription)
    PRPC = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_PRPC)
    PRPCdescription = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_PRPCdescription)
    PRPCname = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_PRPCname)
    Pdescription = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_Pdescription)
    Pid = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_Pid)
    Pname = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_Pname)
    Product = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_Product)
    ReadSDR = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_ReadSDR)
    SDRValue = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_SDRValue)
    SRValue = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_SRValue)

    def __init__(self, *args):
        r""":rtype: None"""
        _STEPConstruct.STEPConstruct_Part_swiginit(self, _STEPConstruct.new_STEPConstruct_Part(*args))
    SetACapplication = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_SetACapplication)
    SetPCdisciplineType = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_SetPCdisciplineType)
    SetPCname = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_SetPCname)
    SetPDCname = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_SetPDCname)
    SetPDCstage = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_SetPDCstage)
    SetPDFdescription = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_SetPDFdescription)
    SetPDFid = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_SetPDFid)
    SetPDSdescription = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_SetPDSdescription)
    SetPDSname = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_SetPDSname)
    SetPDdescription = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_SetPDdescription)
    SetPRPCdescription = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_SetPRPCdescription)
    SetPRPCname = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_SetPRPCname)
    SetPdescription = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_SetPdescription)
    SetPid = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_SetPid)
    SetPname = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Part_SetPname)

    __repr__ = _dumps_object

    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_Part

# Register STEPConstruct_Part in _STEPConstruct:
_STEPConstruct.STEPConstruct_Part_swigregister(STEPConstruct_Part)

class STEPConstruct_PointHasher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HashCode = _swig_new_static_method(_STEPConstruct.STEPConstruct_PointHasher_HashCode)
    IsEqual = _swig_new_static_method(_STEPConstruct.STEPConstruct_PointHasher_IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        _STEPConstruct.STEPConstruct_PointHasher_swiginit(self, _STEPConstruct.new_STEPConstruct_PointHasher())
    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_PointHasher

# Register STEPConstruct_PointHasher in _STEPConstruct:
_STEPConstruct.STEPConstruct_PointHasher_swigregister(STEPConstruct_PointHasher)
STEPConstruct_PointHasher_HashCode = _STEPConstruct.STEPConstruct_PointHasher_HashCode
STEPConstruct_PointHasher_IsEqual = _STEPConstruct.STEPConstruct_PointHasher_IsEqual

class STEPConstruct_Tool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FinderProcess = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Tool_FinderProcess)
    Graph = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Tool_Graph)
    Model = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Tool_Model)

    def __init__(self, *args):
        r"""
        * Creates an empty tool
        	:rtype: None* Creates a tool and loads it with worksession
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:rtype: None
        """
        _STEPConstruct.STEPConstruct_Tool_swiginit(self, _STEPConstruct.new_STEPConstruct_Tool(*args))
    TransientProcess = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Tool_TransientProcess)
    WS = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Tool_WS)

    __repr__ = _dumps_object

    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_Tool

# Register STEPConstruct_Tool in _STEPConstruct:
_STEPConstruct.STEPConstruct_Tool_swigregister(STEPConstruct_Tool)

class STEPConstruct_UnitContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AreaDone = _swig_new_instance_method(_STEPConstruct.STEPConstruct_UnitContext_AreaDone)
    AreaFactor = _swig_new_instance_method(_STEPConstruct.STEPConstruct_UnitContext_AreaFactor)
    ComputeFactors = _swig_new_instance_method(_STEPConstruct.STEPConstruct_UnitContext_ComputeFactors)
    ComputeTolerance = _swig_new_instance_method(_STEPConstruct.STEPConstruct_UnitContext_ComputeTolerance)
    ConvertSiPrefix = _swig_new_static_method(_STEPConstruct.STEPConstruct_UnitContext_ConvertSiPrefix)
    HasUncertainty = _swig_new_instance_method(_STEPConstruct.STEPConstruct_UnitContext_HasUncertainty)
    Init = _swig_new_instance_method(_STEPConstruct.STEPConstruct_UnitContext_Init)
    IsDone = _swig_new_instance_method(_STEPConstruct.STEPConstruct_UnitContext_IsDone)
    LengthDone = _swig_new_instance_method(_STEPConstruct.STEPConstruct_UnitContext_LengthDone)
    LengthFactor = _swig_new_instance_method(_STEPConstruct.STEPConstruct_UnitContext_LengthFactor)
    PlaneAngleDone = _swig_new_instance_method(_STEPConstruct.STEPConstruct_UnitContext_PlaneAngleDone)
    PlaneAngleFactor = _swig_new_instance_method(_STEPConstruct.STEPConstruct_UnitContext_PlaneAngleFactor)

    def __init__(self, *args):
        r"""
        * Creates empty tool
        	:rtype: None
        """
        _STEPConstruct.STEPConstruct_UnitContext_swiginit(self, _STEPConstruct.new_STEPConstruct_UnitContext(*args))
    SolidAngleDone = _swig_new_instance_method(_STEPConstruct.STEPConstruct_UnitContext_SolidAngleDone)
    SolidAngleFactor = _swig_new_instance_method(_STEPConstruct.STEPConstruct_UnitContext_SolidAngleFactor)
    StatusMessage = _swig_new_instance_method(_STEPConstruct.STEPConstruct_UnitContext_StatusMessage)
    Uncertainty = _swig_new_instance_method(_STEPConstruct.STEPConstruct_UnitContext_Uncertainty)
    Value = _swig_new_instance_method(_STEPConstruct.STEPConstruct_UnitContext_Value)
    VolumeDone = _swig_new_instance_method(_STEPConstruct.STEPConstruct_UnitContext_VolumeDone)
    VolumeFactor = _swig_new_instance_method(_STEPConstruct.STEPConstruct_UnitContext_VolumeFactor)

    __repr__ = _dumps_object

    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_UnitContext

# Register STEPConstruct_UnitContext in _STEPConstruct:
_STEPConstruct.STEPConstruct_UnitContext_swigregister(STEPConstruct_UnitContext)
STEPConstruct_UnitContext_ConvertSiPrefix = _STEPConstruct.STEPConstruct_UnitContext_ConvertSiPrefix

class STEPConstruct_ExternRefs(STEPConstruct_Tool):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddExternRef = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ExternRefs_AddExternRef)
    Clear = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ExternRefs_Clear)
    FileName = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ExternRefs_FileName)
    Format = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ExternRefs_Format)
    GetAP214APD = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ExternRefs_GetAP214APD)
    Init = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ExternRefs_Init)
    LoadExternRefs = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ExternRefs_LoadExternRefs)
    NbExternRefs = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ExternRefs_NbExternRefs)
    ProdDef = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ExternRefs_ProdDef)

    def __init__(self, *args):
        r"""
        * Creates an empty tool
        	:rtype: None* Creates a tool and initializes it
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:rtype: None
        """
        _STEPConstruct.STEPConstruct_ExternRefs_swiginit(self, _STEPConstruct.new_STEPConstruct_ExternRefs(*args))
    SetAP214APD = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ExternRefs_SetAP214APD)
    WriteExternRefs = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ExternRefs_WriteExternRefs)
    checkAP214Shared = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ExternRefs_checkAP214Shared)

    __repr__ = _dumps_object

    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_ExternRefs

# Register STEPConstruct_ExternRefs in _STEPConstruct:
_STEPConstruct.STEPConstruct_ExternRefs_swigregister(STEPConstruct_ExternRefs)

class STEPConstruct_Styles(STEPConstruct_Tool):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddStyle = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Styles_AddStyle)
    ClearStyles = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Styles_ClearStyles)
    CreateMDGPR = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Styles_CreateMDGPR)
    CreateNAUOSRD = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Styles_CreateNAUOSRD)
    DecodeColor = _swig_new_static_method(_STEPConstruct.STEPConstruct_Styles_DecodeColor)
    EncodeColor = _swig_new_static_method(_STEPConstruct.STEPConstruct_Styles_EncodeColor)
    FindContext = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Styles_FindContext)
    GetColorPSA = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Styles_GetColorPSA)
    GetColors = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Styles_GetColors)
    Init = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Styles_Init)
    LoadInvisStyles = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Styles_LoadInvisStyles)
    LoadStyles = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Styles_LoadStyles)
    MakeColorPSA = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Styles_MakeColorPSA)
    NbStyles = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Styles_NbStyles)

    def __init__(self, *args):
        r"""
        * Creates an empty tool
        	:rtype: None* Creates a tool and initializes it
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:rtype: None
        """
        _STEPConstruct.STEPConstruct_Styles_swiginit(self, _STEPConstruct.new_STEPConstruct_Styles(*args))
    Style = _swig_new_instance_method(_STEPConstruct.STEPConstruct_Styles_Style)

    __repr__ = _dumps_object

    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_Styles

# Register STEPConstruct_Styles in _STEPConstruct:
_STEPConstruct.STEPConstruct_Styles_swigregister(STEPConstruct_Styles)
STEPConstruct_Styles_DecodeColor = _STEPConstruct.STEPConstruct_Styles_DecodeColor
STEPConstruct_Styles_EncodeColor = _STEPConstruct.STEPConstruct_Styles_EncodeColor

class STEPConstruct_ValidationProps(STEPConstruct_Tool):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddArea = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ValidationProps_AddArea)
    AddCentroid = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ValidationProps_AddCentroid)
    AddProp = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ValidationProps_AddProp)
    AddVolume = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ValidationProps_AddVolume)
    FindTarget = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ValidationProps_FindTarget)
    GetPropNAUO = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ValidationProps_GetPropNAUO)
    GetPropPD = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ValidationProps_GetPropPD)
    GetPropPnt = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ValidationProps_GetPropPnt)
    GetPropReal = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ValidationProps_GetPropReal)
    GetPropShape = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ValidationProps_GetPropShape)
    Init = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ValidationProps_Init)
    LoadProps = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ValidationProps_LoadProps)

    def __init__(self, *args):
        r"""
        * Creates an empty tool
        	:rtype: None* Creates a tool and loads it with worksession
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:rtype: None
        """
        _STEPConstruct.STEPConstruct_ValidationProps_swiginit(self, _STEPConstruct.new_STEPConstruct_ValidationProps(*args))
    SetAssemblyShape = _swig_new_instance_method(_STEPConstruct.STEPConstruct_ValidationProps_SetAssemblyShape)

    __repr__ = _dumps_object

    __swig_destroy__ = _STEPConstruct.delete_STEPConstruct_ValidationProps

# Register STEPConstruct_ValidationProps in _STEPConstruct:
_STEPConstruct.STEPConstruct_ValidationProps_swigregister(STEPConstruct_ValidationProps)



