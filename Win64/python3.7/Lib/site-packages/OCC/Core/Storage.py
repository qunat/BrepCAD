# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Storage module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_storage.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Storage
else:
    import _Storage

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _Storage.SWIG_PyInstanceMethod_New
_swig_new_static_method = _Storage.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Storage.delete_SwigPyIterator
    value = _swig_new_instance_method(_Storage.SwigPyIterator_value)
    incr = _swig_new_instance_method(_Storage.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_Storage.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_Storage.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_Storage.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_Storage.SwigPyIterator_copy)
    next = _swig_new_instance_method(_Storage.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_Storage.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_Storage.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_Storage.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_Storage.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_Storage.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_Storage.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_Storage.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_Storage.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_Storage.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Storage:
_Storage.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
Storage_AddSolve = _Storage.Storage_AddSolve
Storage_WriteSolve = _Storage.Storage_WriteSolve
Storage_ReadSolve = _Storage.Storage_ReadSolve
Storage_VSOk = _Storage.Storage_VSOk
Storage_VSOpenError = _Storage.Storage_VSOpenError
Storage_VSModeError = _Storage.Storage_VSModeError
Storage_VSCloseError = _Storage.Storage_VSCloseError
Storage_VSAlreadyOpen = _Storage.Storage_VSAlreadyOpen
Storage_VSNotOpen = _Storage.Storage_VSNotOpen
Storage_VSSectionNotFound = _Storage.Storage_VSSectionNotFound
Storage_VSWriteError = _Storage.Storage_VSWriteError
Storage_VSFormatError = _Storage.Storage_VSFormatError
Storage_VSUnknownType = _Storage.Storage_VSUnknownType
Storage_VSTypeMismatch = _Storage.Storage_VSTypeMismatch
Storage_VSInternalError = _Storage.Storage_VSInternalError
Storage_VSExtCharParityError = _Storage.Storage_VSExtCharParityError
Storage_VSWrongFileDriver = _Storage.Storage_VSWrongFileDriver
Storage_VSNone = _Storage.Storage_VSNone
Storage_VSRead = _Storage.Storage_VSRead
Storage_VSWrite = _Storage.Storage_VSWrite
Storage_VSReadWrite = _Storage.Storage_VSReadWrite
class Storage_PType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Storage.Storage_PType_begin)
    end = _swig_new_instance_method(_Storage.Storage_PType_end)
    cbegin = _swig_new_instance_method(_Storage.Storage_PType_cbegin)
    cend = _swig_new_instance_method(_Storage.Storage_PType_cend)

    def __init__(self, *args):
        _Storage.Storage_PType_swiginit(self, _Storage.new_Storage_PType(*args))
    Exchange = _swig_new_instance_method(_Storage.Storage_PType_Exchange)
    Assign = _swig_new_instance_method(_Storage.Storage_PType_Assign)
    Set = _swig_new_instance_method(_Storage.Storage_PType_Set)
    ReSize = _swig_new_instance_method(_Storage.Storage_PType_ReSize)
    Add = _swig_new_instance_method(_Storage.Storage_PType_Add)
    Contains = _swig_new_instance_method(_Storage.Storage_PType_Contains)
    Substitute = _swig_new_instance_method(_Storage.Storage_PType_Substitute)
    Swap = _swig_new_instance_method(_Storage.Storage_PType_Swap)
    RemoveLast = _swig_new_instance_method(_Storage.Storage_PType_RemoveLast)
    RemoveFromIndex = _swig_new_instance_method(_Storage.Storage_PType_RemoveFromIndex)
    RemoveKey = _swig_new_instance_method(_Storage.Storage_PType_RemoveKey)
    FindKey = _swig_new_instance_method(_Storage.Storage_PType_FindKey)
    FindFromIndex = _swig_new_instance_method(_Storage.Storage_PType_FindFromIndex)
    ChangeFromIndex = _swig_new_instance_method(_Storage.Storage_PType_ChangeFromIndex)
    __call__ = _swig_new_instance_method(_Storage.Storage_PType___call__)
    FindIndex = _swig_new_instance_method(_Storage.Storage_PType_FindIndex)
    ChangeFromKey = _swig_new_instance_method(_Storage.Storage_PType_ChangeFromKey)
    Seek = _swig_new_instance_method(_Storage.Storage_PType_Seek)
    ChangeSeek = _swig_new_instance_method(_Storage.Storage_PType_ChangeSeek)
    FindFromKey = _swig_new_instance_method(_Storage.Storage_PType_FindFromKey)
    Clear = _swig_new_instance_method(_Storage.Storage_PType_Clear)
    __swig_destroy__ = _Storage.delete_Storage_PType
    Size = _swig_new_instance_method(_Storage.Storage_PType_Size)

# Register Storage_PType in _Storage:
_Storage.Storage_PType_swigregister(Storage_PType)

class Storage_ArrayOfCallBack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_begin)
    end = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_end)
    cbegin = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_cbegin)
    cend = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_cend)

    def __init__(self, *args):
        _Storage.Storage_ArrayOfCallBack_swiginit(self, _Storage.new_Storage_ArrayOfCallBack(*args))
    Init = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_Init)
    Size = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_Size)
    Length = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_Length)
    IsEmpty = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_IsEmpty)
    Lower = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_Lower)
    Upper = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_Upper)
    IsDeletable = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_IsDeletable)
    IsAllocated = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_IsAllocated)
    Assign = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_Assign)
    Move = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_Move)
    Set = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_Set)
    First = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_First)
    ChangeFirst = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_ChangeFirst)
    Last = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_Last)
    ChangeLast = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_ChangeLast)
    Value = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_Value)
    ChangeValue = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_ChangeValue)
    __call__ = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack___call__)
    SetValue = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_SetValue)
    Resize = _swig_new_instance_method(_Storage.Storage_ArrayOfCallBack_Resize)
    __swig_destroy__ = _Storage.delete_Storage_ArrayOfCallBack

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register Storage_ArrayOfCallBack in _Storage:
_Storage.Storage_ArrayOfCallBack_swigregister(Storage_ArrayOfCallBack)

class Storage_MapOfPers(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Storage.Storage_MapOfPers_begin)
    end = _swig_new_instance_method(_Storage.Storage_MapOfPers_end)
    cbegin = _swig_new_instance_method(_Storage.Storage_MapOfPers_cbegin)
    cend = _swig_new_instance_method(_Storage.Storage_MapOfPers_cend)

    def __init__(self, *args):
        _Storage.Storage_MapOfPers_swiginit(self, _Storage.new_Storage_MapOfPers(*args))
    Exchange = _swig_new_instance_method(_Storage.Storage_MapOfPers_Exchange)
    Assign = _swig_new_instance_method(_Storage.Storage_MapOfPers_Assign)
    Set = _swig_new_instance_method(_Storage.Storage_MapOfPers_Set)
    ReSize = _swig_new_instance_method(_Storage.Storage_MapOfPers_ReSize)
    Bind = _swig_new_instance_method(_Storage.Storage_MapOfPers_Bind)
    Bound = _swig_new_instance_method(_Storage.Storage_MapOfPers_Bound)
    IsBound = _swig_new_instance_method(_Storage.Storage_MapOfPers_IsBound)
    UnBind = _swig_new_instance_method(_Storage.Storage_MapOfPers_UnBind)
    Seek = _swig_new_instance_method(_Storage.Storage_MapOfPers_Seek)
    Find = _swig_new_instance_method(_Storage.Storage_MapOfPers_Find)
    ChangeSeek = _swig_new_instance_method(_Storage.Storage_MapOfPers_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_Storage.Storage_MapOfPers_ChangeFind)
    __call__ = _swig_new_instance_method(_Storage.Storage_MapOfPers___call__)
    Clear = _swig_new_instance_method(_Storage.Storage_MapOfPers_Clear)
    __swig_destroy__ = _Storage.delete_Storage_MapOfPers
    Size = _swig_new_instance_method(_Storage.Storage_MapOfPers_Size)

# Register Storage_MapOfPers in _Storage:
_Storage.Storage_MapOfPers_swigregister(Storage_MapOfPers)

class Storage_MapOfCallBack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Storage.Storage_MapOfCallBack_begin)
    end = _swig_new_instance_method(_Storage.Storage_MapOfCallBack_end)
    cbegin = _swig_new_instance_method(_Storage.Storage_MapOfCallBack_cbegin)
    cend = _swig_new_instance_method(_Storage.Storage_MapOfCallBack_cend)

    def __init__(self, *args):
        _Storage.Storage_MapOfCallBack_swiginit(self, _Storage.new_Storage_MapOfCallBack(*args))
    Exchange = _swig_new_instance_method(_Storage.Storage_MapOfCallBack_Exchange)
    Assign = _swig_new_instance_method(_Storage.Storage_MapOfCallBack_Assign)
    Set = _swig_new_instance_method(_Storage.Storage_MapOfCallBack_Set)
    ReSize = _swig_new_instance_method(_Storage.Storage_MapOfCallBack_ReSize)
    Bind = _swig_new_instance_method(_Storage.Storage_MapOfCallBack_Bind)
    Bound = _swig_new_instance_method(_Storage.Storage_MapOfCallBack_Bound)
    IsBound = _swig_new_instance_method(_Storage.Storage_MapOfCallBack_IsBound)
    UnBind = _swig_new_instance_method(_Storage.Storage_MapOfCallBack_UnBind)
    Seek = _swig_new_instance_method(_Storage.Storage_MapOfCallBack_Seek)
    Find = _swig_new_instance_method(_Storage.Storage_MapOfCallBack_Find)
    ChangeSeek = _swig_new_instance_method(_Storage.Storage_MapOfCallBack_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_Storage.Storage_MapOfCallBack_ChangeFind)
    __call__ = _swig_new_instance_method(_Storage.Storage_MapOfCallBack___call__)
    Clear = _swig_new_instance_method(_Storage.Storage_MapOfCallBack_Clear)
    __swig_destroy__ = _Storage.delete_Storage_MapOfCallBack
    Size = _swig_new_instance_method(_Storage.Storage_MapOfCallBack_Size)

# Register Storage_MapOfCallBack in _Storage:
_Storage.Storage_MapOfCallBack_swigregister(Storage_MapOfCallBack)

class Storage_ArrayOfSchema(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_begin)
    end = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_end)
    cbegin = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_cbegin)
    cend = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_cend)

    def __init__(self, *args):
        _Storage.Storage_ArrayOfSchema_swiginit(self, _Storage.new_Storage_ArrayOfSchema(*args))
    Init = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_Init)
    Size = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_Size)
    Length = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_Length)
    IsEmpty = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_IsEmpty)
    Lower = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_Lower)
    Upper = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_Upper)
    IsDeletable = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_IsDeletable)
    IsAllocated = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_IsAllocated)
    Assign = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_Assign)
    Move = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_Move)
    Set = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_Set)
    First = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_First)
    ChangeFirst = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_ChangeFirst)
    Last = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_Last)
    ChangeLast = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_ChangeLast)
    Value = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_Value)
    ChangeValue = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_ChangeValue)
    __call__ = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema___call__)
    SetValue = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_SetValue)
    Resize = _swig_new_instance_method(_Storage.Storage_ArrayOfSchema_Resize)
    __swig_destroy__ = _Storage.delete_Storage_ArrayOfSchema

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register Storage_ArrayOfSchema in _Storage:
_Storage.Storage_ArrayOfSchema_swigregister(Storage_ArrayOfSchema)

class Storage_SeqOfRoot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_begin)
    end = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_end)
    cbegin = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_cbegin)
    cend = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_cend)

    def __init__(self, *args):
        _Storage.Storage_SeqOfRoot_swiginit(self, _Storage.new_Storage_SeqOfRoot(*args))
    Size = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_Size)
    Length = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_Length)
    Lower = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_Lower)
    Upper = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_Upper)
    IsEmpty = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_IsEmpty)
    Reverse = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_Reverse)
    Exchange = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_Exchange)
    delNode = _swig_new_static_method(_Storage.Storage_SeqOfRoot_delNode)
    Clear = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_Clear)
    Assign = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_Assign)
    Set = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_Set)
    Remove = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_Remove)
    Append = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_Append)
    Prepend = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_Prepend)
    InsertBefore = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_InsertBefore)
    InsertAfter = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_InsertAfter)
    Split = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_Split)
    First = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_First)
    ChangeFirst = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_ChangeFirst)
    Last = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_Last)
    ChangeLast = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_ChangeLast)
    Value = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_Value)
    ChangeValue = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_ChangeValue)
    __call__ = _swig_new_instance_method(_Storage.Storage_SeqOfRoot___call__)
    SetValue = _swig_new_instance_method(_Storage.Storage_SeqOfRoot_SetValue)
    __swig_destroy__ = _Storage.delete_Storage_SeqOfRoot

# Register Storage_SeqOfRoot in _Storage:
_Storage.Storage_SeqOfRoot_swigregister(Storage_SeqOfRoot)
Storage_SeqOfRoot_delNode = _Storage.Storage_SeqOfRoot_delNode

class Storage_HArrayOfSchema(Storage_ArrayOfSchema, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Storage_HArrayOfSchema_swiginit(self, _Storage.new_Storage_HArrayOfSchema(*args))
    Array1 = _swig_new_instance_method(_Storage.Storage_HArrayOfSchema_Array1)
    ChangeArray1 = _swig_new_instance_method(_Storage.Storage_HArrayOfSchema_ChangeArray1)
    __swig_destroy__ = _Storage.delete_Storage_HArrayOfSchema

# Register Storage_HArrayOfSchema in _Storage:
_Storage.Storage_HArrayOfSchema_swigregister(Storage_HArrayOfSchema)

class Storage_HPArray(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Storage_HPArray_swiginit(self, _Storage.new_Storage_HPArray(*args))
    Array1 = _swig_new_instance_method(_Storage.Storage_HPArray_Array1)
    ChangeArray1 = _swig_new_instance_method(_Storage.Storage_HPArray_ChangeArray1)
    __swig_destroy__ = _Storage.delete_Storage_HPArray

# Register Storage_HPArray in _Storage:
_Storage.Storage_HPArray_swigregister(Storage_HPArray)

class Storage_HArrayOfCallBack(Storage_ArrayOfCallBack, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Storage_HArrayOfCallBack_swiginit(self, _Storage.new_Storage_HArrayOfCallBack(*args))
    Array1 = _swig_new_instance_method(_Storage.Storage_HArrayOfCallBack_Array1)
    ChangeArray1 = _swig_new_instance_method(_Storage.Storage_HArrayOfCallBack_ChangeArray1)
    __swig_destroy__ = _Storage.delete_Storage_HArrayOfCallBack

# Register Storage_HArrayOfCallBack in _Storage:
_Storage.Storage_HArrayOfCallBack_swigregister(Storage_HArrayOfCallBack)

class Storage_HSeqOfRoot(Storage_SeqOfRoot, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Storage.Storage_HSeqOfRoot_swiginit(self, _Storage.new_Storage_HSeqOfRoot(*args))
    Sequence = _swig_new_instance_method(_Storage.Storage_HSeqOfRoot_Sequence)
    Append = _swig_new_instance_method(_Storage.Storage_HSeqOfRoot_Append)
    ChangeSequence = _swig_new_instance_method(_Storage.Storage_HSeqOfRoot_ChangeSequence)
    __swig_destroy__ = _Storage.delete_Storage_HSeqOfRoot

# Register Storage_HSeqOfRoot in _Storage:
_Storage.Storage_HSeqOfRoot_swigregister(Storage_HSeqOfRoot)



