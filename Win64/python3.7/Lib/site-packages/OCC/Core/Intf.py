# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Intf module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_intf.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Intf
else:
    import _Intf

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _Intf.SWIG_PyInstanceMethod_New
_swig_new_static_method = _Intf.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Intf.delete_SwigPyIterator
    value = _swig_new_instance_method(_Intf.SwigPyIterator_value)
    incr = _swig_new_instance_method(_Intf.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_Intf.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_Intf.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_Intf.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_Intf.SwigPyIterator_copy)
    next = _swig_new_instance_method(_Intf.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_Intf.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_Intf.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_Intf.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_Intf.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_Intf.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_Intf.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_Intf.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_Intf.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_Intf.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Intf:
_Intf.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.Bnd
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TColgp
import OCC.Core.BVH
Intf_EXTERNAL = _Intf.Intf_EXTERNAL
Intf_FACE = _Intf.Intf_FACE
Intf_EDGE = _Intf.Intf_EDGE
Intf_VERTEX = _Intf.Intf_VERTEX
class Intf_SeqOfSectionLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_begin)
    end = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_end)
    cbegin = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_cbegin)
    cend = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_cend)

    def __init__(self, *args):
        _Intf.Intf_SeqOfSectionLine_swiginit(self, _Intf.new_Intf_SeqOfSectionLine(*args))
    Size = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_Size)
    Length = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_Length)
    Lower = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_Lower)
    Upper = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_Upper)
    IsEmpty = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_IsEmpty)
    Reverse = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_Reverse)
    Exchange = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_Exchange)
    delNode = _swig_new_static_method(_Intf.Intf_SeqOfSectionLine_delNode)
    Clear = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_Clear)
    Assign = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_Assign)
    Set = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_Set)
    Remove = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_Remove)
    Append = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_Append)
    Prepend = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_Prepend)
    InsertBefore = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_InsertBefore)
    InsertAfter = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_InsertAfter)
    Split = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_Split)
    First = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_First)
    ChangeFirst = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_ChangeFirst)
    Last = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_Last)
    ChangeLast = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_ChangeLast)
    Value = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_Value)
    ChangeValue = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_ChangeValue)
    __call__ = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine___call__)
    SetValue = _swig_new_instance_method(_Intf.Intf_SeqOfSectionLine_SetValue)
    __swig_destroy__ = _Intf.delete_Intf_SeqOfSectionLine

# Register Intf_SeqOfSectionLine in _Intf:
_Intf.Intf_SeqOfSectionLine_swigregister(Intf_SeqOfSectionLine)
Intf_SeqOfSectionLine_delNode = _Intf.Intf_SeqOfSectionLine_delNode

class Intf_SeqOfTangentZone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_begin)
    end = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_end)
    cbegin = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_cbegin)
    cend = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_cend)

    def __init__(self, *args):
        _Intf.Intf_SeqOfTangentZone_swiginit(self, _Intf.new_Intf_SeqOfTangentZone(*args))
    Size = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_Size)
    Length = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_Length)
    Lower = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_Lower)
    Upper = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_Upper)
    IsEmpty = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_IsEmpty)
    Reverse = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_Reverse)
    Exchange = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_Exchange)
    delNode = _swig_new_static_method(_Intf.Intf_SeqOfTangentZone_delNode)
    Clear = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_Clear)
    Assign = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_Assign)
    Set = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_Set)
    Remove = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_Remove)
    Append = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_Append)
    Prepend = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_Prepend)
    InsertBefore = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_InsertBefore)
    InsertAfter = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_InsertAfter)
    Split = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_Split)
    First = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_First)
    ChangeFirst = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_ChangeFirst)
    Last = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_Last)
    ChangeLast = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_ChangeLast)
    Value = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_Value)
    ChangeValue = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_ChangeValue)
    __call__ = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone___call__)
    SetValue = _swig_new_instance_method(_Intf.Intf_SeqOfTangentZone_SetValue)
    __swig_destroy__ = _Intf.delete_Intf_SeqOfTangentZone

# Register Intf_SeqOfTangentZone in _Intf:
_Intf.Intf_SeqOfTangentZone_swigregister(Intf_SeqOfTangentZone)
Intf_SeqOfTangentZone_delNode = _Intf.Intf_SeqOfTangentZone_delNode

class Intf_SeqOfSectionPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_begin)
    end = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_end)
    cbegin = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_cbegin)
    cend = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_cend)

    def __init__(self, *args):
        _Intf.Intf_SeqOfSectionPoint_swiginit(self, _Intf.new_Intf_SeqOfSectionPoint(*args))
    Size = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_Size)
    Length = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_Length)
    Lower = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_Lower)
    Upper = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_Upper)
    IsEmpty = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_IsEmpty)
    Reverse = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_Reverse)
    Exchange = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_Exchange)
    delNode = _swig_new_static_method(_Intf.Intf_SeqOfSectionPoint_delNode)
    Clear = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_Clear)
    Assign = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_Assign)
    Set = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_Set)
    Remove = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_Remove)
    Append = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_Append)
    Prepend = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_Prepend)
    InsertBefore = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_InsertBefore)
    InsertAfter = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_InsertAfter)
    Split = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_Split)
    First = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_First)
    ChangeFirst = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_ChangeFirst)
    Last = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_Last)
    ChangeLast = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_ChangeLast)
    Value = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_Value)
    ChangeValue = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_ChangeValue)
    __call__ = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint___call__)
    SetValue = _swig_new_instance_method(_Intf.Intf_SeqOfSectionPoint_SetValue)
    __swig_destroy__ = _Intf.delete_Intf_SeqOfSectionPoint

# Register Intf_SeqOfSectionPoint in _Intf:
_Intf.Intf_SeqOfSectionPoint_swigregister(Intf_SeqOfSectionPoint)
Intf_SeqOfSectionPoint_delNode = _Intf.Intf_SeqOfSectionPoint_delNode

class Intf_Array1OfLin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Intf.Intf_Array1OfLin_begin)
    end = _swig_new_instance_method(_Intf.Intf_Array1OfLin_end)
    cbegin = _swig_new_instance_method(_Intf.Intf_Array1OfLin_cbegin)
    cend = _swig_new_instance_method(_Intf.Intf_Array1OfLin_cend)

    def __init__(self, *args):
        _Intf.Intf_Array1OfLin_swiginit(self, _Intf.new_Intf_Array1OfLin(*args))
    Init = _swig_new_instance_method(_Intf.Intf_Array1OfLin_Init)
    Size = _swig_new_instance_method(_Intf.Intf_Array1OfLin_Size)
    Length = _swig_new_instance_method(_Intf.Intf_Array1OfLin_Length)
    IsEmpty = _swig_new_instance_method(_Intf.Intf_Array1OfLin_IsEmpty)
    Lower = _swig_new_instance_method(_Intf.Intf_Array1OfLin_Lower)
    Upper = _swig_new_instance_method(_Intf.Intf_Array1OfLin_Upper)
    IsDeletable = _swig_new_instance_method(_Intf.Intf_Array1OfLin_IsDeletable)
    IsAllocated = _swig_new_instance_method(_Intf.Intf_Array1OfLin_IsAllocated)
    Assign = _swig_new_instance_method(_Intf.Intf_Array1OfLin_Assign)
    Move = _swig_new_instance_method(_Intf.Intf_Array1OfLin_Move)
    Set = _swig_new_instance_method(_Intf.Intf_Array1OfLin_Set)
    First = _swig_new_instance_method(_Intf.Intf_Array1OfLin_First)
    ChangeFirst = _swig_new_instance_method(_Intf.Intf_Array1OfLin_ChangeFirst)
    Last = _swig_new_instance_method(_Intf.Intf_Array1OfLin_Last)
    ChangeLast = _swig_new_instance_method(_Intf.Intf_Array1OfLin_ChangeLast)
    Value = _swig_new_instance_method(_Intf.Intf_Array1OfLin_Value)
    ChangeValue = _swig_new_instance_method(_Intf.Intf_Array1OfLin_ChangeValue)
    __call__ = _swig_new_instance_method(_Intf.Intf_Array1OfLin___call__)
    SetValue = _swig_new_instance_method(_Intf.Intf_Array1OfLin_SetValue)
    Resize = _swig_new_instance_method(_Intf.Intf_Array1OfLin_Resize)
    __swig_destroy__ = _Intf.delete_Intf_Array1OfLin

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register Intf_Array1OfLin in _Intf:
_Intf.Intf_Array1OfLin_swigregister(Intf_Array1OfLin)

class intf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Contain = _swig_new_static_method(_Intf.intf_Contain)
    PlaneEquation = _swig_new_static_method(_Intf.intf_PlaneEquation)

    __repr__ = _dumps_object


    def __init__(self):
        _Intf.intf_swiginit(self, _Intf.new_intf())
    __swig_destroy__ = _Intf.delete_intf

# Register intf in _Intf:
_Intf.intf_swigregister(intf)
intf_Contain = _Intf.intf_Contain
intf_PlaneEquation = _Intf.intf_PlaneEquation

class Intf_Interference(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Contains = _swig_new_instance_method(_Intf.Intf_Interference_Contains)
    Dump = _swig_new_instance_method(_Intf.Intf_Interference_Dump)
    GetTolerance = _swig_new_instance_method(_Intf.Intf_Interference_GetTolerance)
    Insert = _swig_new_instance_method(_Intf.Intf_Interference_Insert)
    LineValue = _swig_new_instance_method(_Intf.Intf_Interference_LineValue)
    NbSectionLines = _swig_new_instance_method(_Intf.Intf_Interference_NbSectionLines)
    NbSectionPoints = _swig_new_instance_method(_Intf.Intf_Interference_NbSectionPoints)
    NbTangentZones = _swig_new_instance_method(_Intf.Intf_Interference_NbTangentZones)
    PntValue = _swig_new_instance_method(_Intf.Intf_Interference_PntValue)
    ZoneValue = _swig_new_instance_method(_Intf.Intf_Interference_ZoneValue)

    __repr__ = _dumps_object


# Register Intf_Interference in _Intf:
_Intf.Intf_Interference_swigregister(Intf_Interference)

class Intf_Polygon2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Bounding = _swig_new_instance_method(_Intf.Intf_Polygon2d_Bounding)
    Closed = _swig_new_instance_method(_Intf.Intf_Polygon2d_Closed)
    DeflectionOverEstimation = _swig_new_instance_method(_Intf.Intf_Polygon2d_DeflectionOverEstimation)
    NbSegments = _swig_new_instance_method(_Intf.Intf_Polygon2d_NbSegments)
    Segment = _swig_new_instance_method(_Intf.Intf_Polygon2d_Segment)

    __repr__ = _dumps_object

    __swig_destroy__ = _Intf.delete_Intf_Polygon2d

# Register Intf_Polygon2d in _Intf:
_Intf.Intf_Polygon2d_swigregister(Intf_Polygon2d)

class Intf_SectionLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Append = _swig_new_instance_method(_Intf.Intf_SectionLine_Append)
    Close = _swig_new_instance_method(_Intf.Intf_SectionLine_Close)
    Contains = _swig_new_instance_method(_Intf.Intf_SectionLine_Contains)
    Dump = _swig_new_instance_method(_Intf.Intf_SectionLine_Dump)
    GetPoint = _swig_new_instance_method(_Intf.Intf_SectionLine_GetPoint)

    def __init__(self, *args):
        r"""
        * Constructs an empty SectionLine.
        	:rtype: None* Copies a SectionLine.
        	:param Other:
        	:type Other: Intf_SectionLine
        	:rtype: None
        """
        _Intf.Intf_SectionLine_swiginit(self, _Intf.new_Intf_SectionLine(*args))
    IsClosed = _swig_new_instance_method(_Intf.Intf_SectionLine_IsClosed)
    IsEnd = _swig_new_instance_method(_Intf.Intf_SectionLine_IsEnd)
    IsEqual = _swig_new_instance_method(_Intf.Intf_SectionLine_IsEqual)
    NumberOfPoints = _swig_new_instance_method(_Intf.Intf_SectionLine_NumberOfPoints)
    Prepend = _swig_new_instance_method(_Intf.Intf_SectionLine_Prepend)
    Reverse = _swig_new_instance_method(_Intf.Intf_SectionLine_Reverse)
    __eq_wrapper__ = _swig_new_instance_method(_Intf.Intf_SectionLine___eq_wrapper__)

    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    __repr__ = _dumps_object

    __swig_destroy__ = _Intf.delete_Intf_SectionLine

# Register Intf_SectionLine in _Intf:
_Intf.Intf_SectionLine_swigregister(Intf_SectionLine)

class Intf_SectionPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Dump = _swig_new_instance_method(_Intf.Intf_SectionPoint_Dump)
    Incidence = _swig_new_instance_method(_Intf.Intf_SectionPoint_Incidence)
    InfoFirst = _swig_new_instance_method(_Intf.Intf_SectionPoint_InfoFirst)
    InfoSecond = _swig_new_instance_method(_Intf.Intf_SectionPoint_InfoSecond)

    def __init__(self, *args):
        r"""
        :rtype: None* Builds a SectionPoint with the respective dimensions (vertex edge or face) of the concerned arguments and their addresses in the Topological structure.
        	:param Where:
        	:type Where: gp_Pnt
        	:param DimeO:
        	:type DimeO: Intf_PIType
        	:param AddrO1:
        	:type AddrO1: int
        	:param AddrO2:
        	:type AddrO2: int
        	:param ParamO:
        	:type ParamO: float
        	:param DimeT:
        	:type DimeT: Intf_PIType
        	:param AddrT1:
        	:type AddrT1: int
        	:param AddrT2:
        	:type AddrT2: int
        	:param ParamT:
        	:type ParamT: float
        	:param Incid:
        	:type Incid: float
        	:rtype: None* Builds a SectionPoint 2d with the respective dimensions (vertex or edge) of the concerned arguments and their addresses in the Topological structure.
        	:param Where:
        	:type Where: gp_Pnt2d
        	:param DimeO:
        	:type DimeO: Intf_PIType
        	:param AddrO1:
        	:type AddrO1: int
        	:param ParamO:
        	:type ParamO: float
        	:param DimeT:
        	:type DimeT: Intf_PIType
        	:param AddrT1:
        	:type AddrT1: int
        	:param ParamT:
        	:type ParamT: float
        	:param Incid:
        	:type Incid: float
        	:rtype: None
        """
        _Intf.Intf_SectionPoint_swiginit(self, _Intf.new_Intf_SectionPoint(*args))
    IsEqual = _swig_new_instance_method(_Intf.Intf_SectionPoint_IsEqual)
    IsOnSameEdge = _swig_new_instance_method(_Intf.Intf_SectionPoint_IsOnSameEdge)
    Merge = _swig_new_instance_method(_Intf.Intf_SectionPoint_Merge)
    ParamOnFirst = _swig_new_instance_method(_Intf.Intf_SectionPoint_ParamOnFirst)
    ParamOnSecond = _swig_new_instance_method(_Intf.Intf_SectionPoint_ParamOnSecond)
    Pnt = _swig_new_instance_method(_Intf.Intf_SectionPoint_Pnt)
    TypeOnFirst = _swig_new_instance_method(_Intf.Intf_SectionPoint_TypeOnFirst)
    TypeOnSecond = _swig_new_instance_method(_Intf.Intf_SectionPoint_TypeOnSecond)
    __eq_wrapper__ = _swig_new_instance_method(_Intf.Intf_SectionPoint___eq_wrapper__)

    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    __repr__ = _dumps_object

    __swig_destroy__ = _Intf.delete_Intf_SectionPoint

# Register Intf_SectionPoint in _Intf:
_Intf.Intf_SectionPoint_swigregister(Intf_SectionPoint)

class Intf_TangentZone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Append = _swig_new_instance_method(_Intf.Intf_TangentZone_Append)
    Contains = _swig_new_instance_method(_Intf.Intf_TangentZone_Contains)
    Dump = _swig_new_instance_method(_Intf.Intf_TangentZone_Dump)
    GetPoint = _swig_new_instance_method(_Intf.Intf_TangentZone_GetPoint)
    HasCommonRange = _swig_new_instance_method(_Intf.Intf_TangentZone_HasCommonRange)
    InfoFirst = _swig_new_instance_method(_Intf.Intf_TangentZone_InfoFirst)
    InfoSecond = _swig_new_instance_method(_Intf.Intf_TangentZone_InfoSecond)
    Insert = _swig_new_instance_method(_Intf.Intf_TangentZone_Insert)
    InsertAfter = _swig_new_instance_method(_Intf.Intf_TangentZone_InsertAfter)
    InsertBefore = _swig_new_instance_method(_Intf.Intf_TangentZone_InsertBefore)

    def __init__(self, *args):
        r"""
        * Builds an empty tangent zone.
        	:rtype: None* Copies a Tangent zone.
        	:param Other:
        	:type Other: Intf_TangentZone
        	:rtype: None
        """
        _Intf.Intf_TangentZone_swiginit(self, _Intf.new_Intf_TangentZone(*args))
    IsEqual = _swig_new_instance_method(_Intf.Intf_TangentZone_IsEqual)
    NumberOfPoints = _swig_new_instance_method(_Intf.Intf_TangentZone_NumberOfPoints)
    ParamOnFirst = _swig_new_instance_method(_Intf.Intf_TangentZone_ParamOnFirst)
    ParamOnSecond = _swig_new_instance_method(_Intf.Intf_TangentZone_ParamOnSecond)
    PolygonInsert = _swig_new_instance_method(_Intf.Intf_TangentZone_PolygonInsert)
    RangeContains = _swig_new_instance_method(_Intf.Intf_TangentZone_RangeContains)
    __eq_wrapper__ = _swig_new_instance_method(_Intf.Intf_TangentZone___eq_wrapper__)

    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    __repr__ = _dumps_object

    __swig_destroy__ = _Intf.delete_Intf_TangentZone

# Register Intf_TangentZone in _Intf:
_Intf.Intf_TangentZone_swigregister(Intf_TangentZone)

class Intf_Tool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BeginParam = _swig_new_instance_method(_Intf.Intf_Tool_BeginParam)
    EndParam = _swig_new_instance_method(_Intf.Intf_Tool_EndParam)
    Hypr2dBox = _swig_new_instance_method(_Intf.Intf_Tool_Hypr2dBox)
    HyprBox = _swig_new_instance_method(_Intf.Intf_Tool_HyprBox)

    def __init__(self, *args):
        r""":rtype: None"""
        _Intf.Intf_Tool_swiginit(self, _Intf.new_Intf_Tool(*args))
    Lin2dBox = _swig_new_instance_method(_Intf.Intf_Tool_Lin2dBox)
    LinBox = _swig_new_instance_method(_Intf.Intf_Tool_LinBox)
    NbSegments = _swig_new_instance_method(_Intf.Intf_Tool_NbSegments)
    Parab2dBox = _swig_new_instance_method(_Intf.Intf_Tool_Parab2dBox)
    ParabBox = _swig_new_instance_method(_Intf.Intf_Tool_ParabBox)

    __repr__ = _dumps_object

    __swig_destroy__ = _Intf.delete_Intf_Tool

# Register Intf_Tool in _Intf:
_Intf.Intf_Tool_swigregister(Intf_Tool)

class Intf_InterferencePolygon2d(Intf_Interference):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructs an empty interference of Polygon.
        	:rtype: None* Constructs and computes an interference between two Polygons.
        	:param Obje1:
        	:type Obje1: Intf_Polygon2d
        	:param Obje2:
        	:type Obje2: Intf_Polygon2d
        	:rtype: None* Constructs and computes the auto interference of a Polygon.
        	:param Obje:
        	:type Obje: Intf_Polygon2d
        	:rtype: None
        """
        _Intf.Intf_InterferencePolygon2d_swiginit(self, _Intf.new_Intf_InterferencePolygon2d(*args))
    Perform = _swig_new_instance_method(_Intf.Intf_InterferencePolygon2d_Perform)
    Pnt2dValue = _swig_new_instance_method(_Intf.Intf_InterferencePolygon2d_Pnt2dValue)

    __repr__ = _dumps_object

    __swig_destroy__ = _Intf.delete_Intf_InterferencePolygon2d

# Register Intf_InterferencePolygon2d in _Intf:
_Intf.Intf_InterferencePolygon2d_swigregister(Intf_InterferencePolygon2d)



