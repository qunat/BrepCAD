# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Interface module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_interface.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Interface
else:
    import _Interface

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _Interface.SWIG_PyInstanceMethod_New
_swig_new_static_method = _Interface.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Interface.delete_SwigPyIterator
    value = _swig_new_instance_method(_Interface.SwigPyIterator_value)
    incr = _swig_new_instance_method(_Interface.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_Interface.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_Interface.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_Interface.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_Interface.SwigPyIterator_copy)
    next = _swig_new_instance_method(_Interface.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_Interface.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_Interface.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_Interface.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_Interface.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_Interface.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_Interface.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_Interface.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_Interface.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_Interface.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Interface:
_Interface.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
Interface_ParamMisc = _Interface.Interface_ParamMisc
Interface_ParamInteger = _Interface.Interface_ParamInteger
Interface_ParamReal = _Interface.Interface_ParamReal
Interface_ParamIdent = _Interface.Interface_ParamIdent
Interface_ParamVoid = _Interface.Interface_ParamVoid
Interface_ParamText = _Interface.Interface_ParamText
Interface_ParamEnum = _Interface.Interface_ParamEnum
Interface_ParamLogical = _Interface.Interface_ParamLogical
Interface_ParamSub = _Interface.Interface_ParamSub
Interface_ParamHexa = _Interface.Interface_ParamHexa
Interface_ParamBinary = _Interface.Interface_ParamBinary
Interface_StateOK = _Interface.Interface_StateOK
Interface_LoadWarning = _Interface.Interface_LoadWarning
Interface_LoadFail = _Interface.Interface_LoadFail
Interface_DataWarning = _Interface.Interface_DataWarning
Interface_DataFail = _Interface.Interface_DataFail
Interface_StateUnloaded = _Interface.Interface_StateUnloaded
Interface_StateUnknown = _Interface.Interface_StateUnknown
Interface_CheckOK = _Interface.Interface_CheckOK
Interface_CheckWarning = _Interface.Interface_CheckWarning
Interface_CheckFail = _Interface.Interface_CheckFail
Interface_CheckAny = _Interface.Interface_CheckAny
Interface_CheckMessage = _Interface.Interface_CheckMessage
Interface_CheckNoFail = _Interface.Interface_CheckNoFail
Handle_Interface_Check_Create = _Interface.Handle_Interface_Check_Create
Handle_Interface_Check_DownCast = _Interface.Handle_Interface_Check_DownCast
Handle_Interface_Check_IsNull = _Interface.Handle_Interface_Check_IsNull
Handle_Interface_CopyControl_Create = _Interface.Handle_Interface_CopyControl_Create
Handle_Interface_CopyControl_DownCast = _Interface.Handle_Interface_CopyControl_DownCast
Handle_Interface_CopyControl_IsNull = _Interface.Handle_Interface_CopyControl_IsNull
Handle_Interface_EntityCluster_Create = _Interface.Handle_Interface_EntityCluster_Create
Handle_Interface_EntityCluster_DownCast = _Interface.Handle_Interface_EntityCluster_DownCast
Handle_Interface_EntityCluster_IsNull = _Interface.Handle_Interface_EntityCluster_IsNull
Handle_Interface_FileReaderData_Create = _Interface.Handle_Interface_FileReaderData_Create
Handle_Interface_FileReaderData_DownCast = _Interface.Handle_Interface_FileReaderData_DownCast
Handle_Interface_FileReaderData_IsNull = _Interface.Handle_Interface_FileReaderData_IsNull
Handle_Interface_GTool_Create = _Interface.Handle_Interface_GTool_Create
Handle_Interface_GTool_DownCast = _Interface.Handle_Interface_GTool_DownCast
Handle_Interface_GTool_IsNull = _Interface.Handle_Interface_GTool_IsNull
Handle_Interface_GeneralModule_Create = _Interface.Handle_Interface_GeneralModule_Create
Handle_Interface_GeneralModule_DownCast = _Interface.Handle_Interface_GeneralModule_DownCast
Handle_Interface_GeneralModule_IsNull = _Interface.Handle_Interface_GeneralModule_IsNull
Handle_Interface_GlobalNodeOfGeneralLib_Create = _Interface.Handle_Interface_GlobalNodeOfGeneralLib_Create
Handle_Interface_GlobalNodeOfGeneralLib_DownCast = _Interface.Handle_Interface_GlobalNodeOfGeneralLib_DownCast
Handle_Interface_GlobalNodeOfGeneralLib_IsNull = _Interface.Handle_Interface_GlobalNodeOfGeneralLib_IsNull
Handle_Interface_GlobalNodeOfReaderLib_Create = _Interface.Handle_Interface_GlobalNodeOfReaderLib_Create
Handle_Interface_GlobalNodeOfReaderLib_DownCast = _Interface.Handle_Interface_GlobalNodeOfReaderLib_DownCast
Handle_Interface_GlobalNodeOfReaderLib_IsNull = _Interface.Handle_Interface_GlobalNodeOfReaderLib_IsNull
Handle_Interface_HGraph_Create = _Interface.Handle_Interface_HGraph_Create
Handle_Interface_HGraph_DownCast = _Interface.Handle_Interface_HGraph_DownCast
Handle_Interface_HGraph_IsNull = _Interface.Handle_Interface_HGraph_IsNull
Handle_Interface_IntVal_Create = _Interface.Handle_Interface_IntVal_Create
Handle_Interface_IntVal_DownCast = _Interface.Handle_Interface_IntVal_DownCast
Handle_Interface_IntVal_IsNull = _Interface.Handle_Interface_IntVal_IsNull
Handle_Interface_InterfaceModel_Create = _Interface.Handle_Interface_InterfaceModel_Create
Handle_Interface_InterfaceModel_DownCast = _Interface.Handle_Interface_InterfaceModel_DownCast
Handle_Interface_InterfaceModel_IsNull = _Interface.Handle_Interface_InterfaceModel_IsNull
Handle_Interface_NodeOfGeneralLib_Create = _Interface.Handle_Interface_NodeOfGeneralLib_Create
Handle_Interface_NodeOfGeneralLib_DownCast = _Interface.Handle_Interface_NodeOfGeneralLib_DownCast
Handle_Interface_NodeOfGeneralLib_IsNull = _Interface.Handle_Interface_NodeOfGeneralLib_IsNull
Handle_Interface_NodeOfReaderLib_Create = _Interface.Handle_Interface_NodeOfReaderLib_Create
Handle_Interface_NodeOfReaderLib_DownCast = _Interface.Handle_Interface_NodeOfReaderLib_DownCast
Handle_Interface_NodeOfReaderLib_IsNull = _Interface.Handle_Interface_NodeOfReaderLib_IsNull
Handle_Interface_ParamList_Create = _Interface.Handle_Interface_ParamList_Create
Handle_Interface_ParamList_DownCast = _Interface.Handle_Interface_ParamList_DownCast
Handle_Interface_ParamList_IsNull = _Interface.Handle_Interface_ParamList_IsNull
Handle_Interface_ParamSet_Create = _Interface.Handle_Interface_ParamSet_Create
Handle_Interface_ParamSet_DownCast = _Interface.Handle_Interface_ParamSet_DownCast
Handle_Interface_ParamSet_IsNull = _Interface.Handle_Interface_ParamSet_IsNull
Handle_Interface_Protocol_Create = _Interface.Handle_Interface_Protocol_Create
Handle_Interface_Protocol_DownCast = _Interface.Handle_Interface_Protocol_DownCast
Handle_Interface_Protocol_IsNull = _Interface.Handle_Interface_Protocol_IsNull
Handle_Interface_ReaderModule_Create = _Interface.Handle_Interface_ReaderModule_Create
Handle_Interface_ReaderModule_DownCast = _Interface.Handle_Interface_ReaderModule_DownCast
Handle_Interface_ReaderModule_IsNull = _Interface.Handle_Interface_ReaderModule_IsNull
Handle_Interface_ReportEntity_Create = _Interface.Handle_Interface_ReportEntity_Create
Handle_Interface_ReportEntity_DownCast = _Interface.Handle_Interface_ReportEntity_DownCast
Handle_Interface_ReportEntity_IsNull = _Interface.Handle_Interface_ReportEntity_IsNull
Handle_Interface_SignLabel_Create = _Interface.Handle_Interface_SignLabel_Create
Handle_Interface_SignLabel_DownCast = _Interface.Handle_Interface_SignLabel_DownCast
Handle_Interface_SignLabel_IsNull = _Interface.Handle_Interface_SignLabel_IsNull
Handle_Interface_SignType_Create = _Interface.Handle_Interface_SignType_Create
Handle_Interface_SignType_DownCast = _Interface.Handle_Interface_SignType_DownCast
Handle_Interface_SignType_IsNull = _Interface.Handle_Interface_SignType_IsNull
Handle_Interface_TypedValue_Create = _Interface.Handle_Interface_TypedValue_Create
Handle_Interface_TypedValue_DownCast = _Interface.Handle_Interface_TypedValue_DownCast
Handle_Interface_TypedValue_IsNull = _Interface.Handle_Interface_TypedValue_IsNull
Handle_Interface_UndefinedContent_Create = _Interface.Handle_Interface_UndefinedContent_Create
Handle_Interface_UndefinedContent_DownCast = _Interface.Handle_Interface_UndefinedContent_DownCast
Handle_Interface_UndefinedContent_IsNull = _Interface.Handle_Interface_UndefinedContent_IsNull
Handle_Interface_CopyMap_Create = _Interface.Handle_Interface_CopyMap_Create
Handle_Interface_CopyMap_DownCast = _Interface.Handle_Interface_CopyMap_DownCast
Handle_Interface_CopyMap_IsNull = _Interface.Handle_Interface_CopyMap_IsNull
Handle_Interface_Static_Create = _Interface.Handle_Interface_Static_Create
Handle_Interface_Static_DownCast = _Interface.Handle_Interface_Static_DownCast
Handle_Interface_Static_IsNull = _Interface.Handle_Interface_Static_IsNull
Handle_Interface_HArray1OfHAsciiString_Create = _Interface.Handle_Interface_HArray1OfHAsciiString_Create
Handle_Interface_HArray1OfHAsciiString_DownCast = _Interface.Handle_Interface_HArray1OfHAsciiString_DownCast
Handle_Interface_HArray1OfHAsciiString_IsNull = _Interface.Handle_Interface_HArray1OfHAsciiString_IsNull
Handle_Interface_HSequenceOfCheck_Create = _Interface.Handle_Interface_HSequenceOfCheck_Create
Handle_Interface_HSequenceOfCheck_DownCast = _Interface.Handle_Interface_HSequenceOfCheck_DownCast
Handle_Interface_HSequenceOfCheck_IsNull = _Interface.Handle_Interface_HSequenceOfCheck_IsNull
class Interface_VectorOfFileParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_begin)
    end = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_end)
    cbegin = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_cbegin)
    cend = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_cend)

    def __init__(self, *args):
        _Interface.Interface_VectorOfFileParameter_swiginit(self, _Interface.new_Interface_VectorOfFileParameter(*args))
    __swig_destroy__ = _Interface.delete_Interface_VectorOfFileParameter
    Length = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_Length)
    Size = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_Size)
    Lower = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_Lower)
    Upper = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_Upper)
    IsEmpty = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_IsEmpty)
    Assign = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_Assign)
    Set = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_Set)
    Append = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_Append)
    Appended = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_Appended)
    Value = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_Value)
    First = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_First)
    ChangeFirst = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_ChangeFirst)
    Last = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_Last)
    ChangeLast = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_ChangeLast)
    __call__ = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter___call__)
    ChangeValue = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_ChangeValue)
    SetValue = _swig_new_instance_method(_Interface.Interface_VectorOfFileParameter_SetValue)

# Register Interface_VectorOfFileParameter in _Interface:
_Interface.Interface_VectorOfFileParameter_swigregister(Interface_VectorOfFileParameter)

class Interface_Array1OfFileParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_begin)
    end = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_end)
    cbegin = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_cbegin)
    cend = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_cend)

    def __init__(self, *args):
        _Interface.Interface_Array1OfFileParameter_swiginit(self, _Interface.new_Interface_Array1OfFileParameter(*args))
    Init = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_Init)
    Size = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_Size)
    Length = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_Length)
    IsEmpty = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_IsEmpty)
    Lower = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_Lower)
    Upper = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_Upper)
    IsDeletable = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_IsDeletable)
    IsAllocated = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_IsAllocated)
    Assign = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_Assign)
    Move = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_Move)
    Set = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_Set)
    First = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_First)
    ChangeFirst = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_ChangeFirst)
    Last = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_Last)
    ChangeLast = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_ChangeLast)
    Value = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_Value)
    ChangeValue = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_ChangeValue)
    __call__ = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter___call__)
    SetValue = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_SetValue)
    Resize = _swig_new_instance_method(_Interface.Interface_Array1OfFileParameter_Resize)
    __swig_destroy__ = _Interface.delete_Interface_Array1OfFileParameter

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register Interface_Array1OfFileParameter in _Interface:
_Interface.Interface_Array1OfFileParameter_swigregister(Interface_Array1OfFileParameter)

class Interface_Array1OfHAsciiString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_begin)
    end = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_end)
    cbegin = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_cbegin)
    cend = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_cend)

    def __init__(self, *args):
        _Interface.Interface_Array1OfHAsciiString_swiginit(self, _Interface.new_Interface_Array1OfHAsciiString(*args))
    Init = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_Init)
    Size = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_Size)
    Length = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_Length)
    IsEmpty = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_IsEmpty)
    Lower = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_Lower)
    Upper = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_Upper)
    IsDeletable = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_IsDeletable)
    IsAllocated = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_IsAllocated)
    Assign = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_Assign)
    Move = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_Move)
    Set = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_Set)
    First = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_First)
    ChangeFirst = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_ChangeFirst)
    Last = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_Last)
    ChangeLast = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_ChangeLast)
    Value = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_Value)
    ChangeValue = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_ChangeValue)
    __call__ = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString___call__)
    SetValue = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_SetValue)
    Resize = _swig_new_instance_method(_Interface.Interface_Array1OfHAsciiString_Resize)
    __swig_destroy__ = _Interface.delete_Interface_Array1OfHAsciiString

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register Interface_Array1OfHAsciiString in _Interface:
_Interface.Interface_Array1OfHAsciiString_swigregister(Interface_Array1OfHAsciiString)

class Interface_SequenceOfCheck(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_begin)
    end = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_end)
    cbegin = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_cbegin)
    cend = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_cend)

    def __init__(self, *args):
        _Interface.Interface_SequenceOfCheck_swiginit(self, _Interface.new_Interface_SequenceOfCheck(*args))
    Size = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_Size)
    Length = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_Length)
    Lower = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_Lower)
    Upper = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_Upper)
    IsEmpty = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_IsEmpty)
    Reverse = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_Reverse)
    Exchange = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_Exchange)
    delNode = _swig_new_static_method(_Interface.Interface_SequenceOfCheck_delNode)
    Clear = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_Clear)
    Assign = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_Assign)
    Set = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_Set)
    Remove = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_Remove)
    Append = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_Append)
    Prepend = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_Prepend)
    InsertBefore = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_InsertBefore)
    InsertAfter = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_InsertAfter)
    Split = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_Split)
    First = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_First)
    ChangeFirst = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_ChangeFirst)
    Last = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_Last)
    ChangeLast = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_ChangeLast)
    Value = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_Value)
    ChangeValue = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_ChangeValue)
    __call__ = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck___call__)
    SetValue = _swig_new_instance_method(_Interface.Interface_SequenceOfCheck_SetValue)
    __swig_destroy__ = _Interface.delete_Interface_SequenceOfCheck

# Register Interface_SequenceOfCheck in _Interface:
_Interface.Interface_SequenceOfCheck_swigregister(Interface_SequenceOfCheck)
Interface_SequenceOfCheck_delNode = _Interface.Interface_SequenceOfCheck_delNode

class Interface_DataMapOfTransientInteger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Interface.Interface_DataMapOfTransientInteger_begin)
    end = _swig_new_instance_method(_Interface.Interface_DataMapOfTransientInteger_end)
    cbegin = _swig_new_instance_method(_Interface.Interface_DataMapOfTransientInteger_cbegin)
    cend = _swig_new_instance_method(_Interface.Interface_DataMapOfTransientInteger_cend)

    def __init__(self, *args):
        _Interface.Interface_DataMapOfTransientInteger_swiginit(self, _Interface.new_Interface_DataMapOfTransientInteger(*args))
    Exchange = _swig_new_instance_method(_Interface.Interface_DataMapOfTransientInteger_Exchange)
    Assign = _swig_new_instance_method(_Interface.Interface_DataMapOfTransientInteger_Assign)
    Set = _swig_new_instance_method(_Interface.Interface_DataMapOfTransientInteger_Set)
    ReSize = _swig_new_instance_method(_Interface.Interface_DataMapOfTransientInteger_ReSize)
    Bind = _swig_new_instance_method(_Interface.Interface_DataMapOfTransientInteger_Bind)
    Bound = _swig_new_instance_method(_Interface.Interface_DataMapOfTransientInteger_Bound)
    IsBound = _swig_new_instance_method(_Interface.Interface_DataMapOfTransientInteger_IsBound)
    UnBind = _swig_new_instance_method(_Interface.Interface_DataMapOfTransientInteger_UnBind)
    Seek = _swig_new_instance_method(_Interface.Interface_DataMapOfTransientInteger_Seek)
    Find = _swig_new_instance_method(_Interface.Interface_DataMapOfTransientInteger_Find)
    ChangeSeek = _swig_new_instance_method(_Interface.Interface_DataMapOfTransientInteger_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_Interface.Interface_DataMapOfTransientInteger_ChangeFind)
    __call__ = _swig_new_instance_method(_Interface.Interface_DataMapOfTransientInteger___call__)
    Clear = _swig_new_instance_method(_Interface.Interface_DataMapOfTransientInteger_Clear)
    __swig_destroy__ = _Interface.delete_Interface_DataMapOfTransientInteger
    Size = _swig_new_instance_method(_Interface.Interface_DataMapOfTransientInteger_Size)

# Register Interface_DataMapOfTransientInteger in _Interface:
_Interface.Interface_DataMapOfTransientInteger_swigregister(Interface_DataMapOfTransientInteger)

class Interface_IndexedMapOfAsciiString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cbegin = _swig_new_instance_method(_Interface.Interface_IndexedMapOfAsciiString_cbegin)
    cend = _swig_new_instance_method(_Interface.Interface_IndexedMapOfAsciiString_cend)

    def __init__(self, *args):
        _Interface.Interface_IndexedMapOfAsciiString_swiginit(self, _Interface.new_Interface_IndexedMapOfAsciiString(*args))
    Exchange = _swig_new_instance_method(_Interface.Interface_IndexedMapOfAsciiString_Exchange)
    Assign = _swig_new_instance_method(_Interface.Interface_IndexedMapOfAsciiString_Assign)
    Set = _swig_new_instance_method(_Interface.Interface_IndexedMapOfAsciiString_Set)
    ReSize = _swig_new_instance_method(_Interface.Interface_IndexedMapOfAsciiString_ReSize)
    Add = _swig_new_instance_method(_Interface.Interface_IndexedMapOfAsciiString_Add)
    Contains = _swig_new_instance_method(_Interface.Interface_IndexedMapOfAsciiString_Contains)
    Substitute = _swig_new_instance_method(_Interface.Interface_IndexedMapOfAsciiString_Substitute)
    Swap = _swig_new_instance_method(_Interface.Interface_IndexedMapOfAsciiString_Swap)
    RemoveLast = _swig_new_instance_method(_Interface.Interface_IndexedMapOfAsciiString_RemoveLast)
    RemoveFromIndex = _swig_new_instance_method(_Interface.Interface_IndexedMapOfAsciiString_RemoveFromIndex)
    RemoveKey = _swig_new_instance_method(_Interface.Interface_IndexedMapOfAsciiString_RemoveKey)
    FindKey = _swig_new_instance_method(_Interface.Interface_IndexedMapOfAsciiString_FindKey)
    __call__ = _swig_new_instance_method(_Interface.Interface_IndexedMapOfAsciiString___call__)
    FindIndex = _swig_new_instance_method(_Interface.Interface_IndexedMapOfAsciiString_FindIndex)
    Clear = _swig_new_instance_method(_Interface.Interface_IndexedMapOfAsciiString_Clear)
    __swig_destroy__ = _Interface.delete_Interface_IndexedMapOfAsciiString
    Size = _swig_new_instance_method(_Interface.Interface_IndexedMapOfAsciiString_Size)

# Register Interface_IndexedMapOfAsciiString in _Interface:
_Interface.Interface_IndexedMapOfAsciiString_swigregister(Interface_IndexedMapOfAsciiString)

class Interface_BitMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddFlag = _swig_new_instance_method(_Interface.Interface_BitMap_AddFlag)
    AddSomeFlags = _swig_new_instance_method(_Interface.Interface_BitMap_AddSomeFlags)
    CFalse = _swig_new_instance_method(_Interface.Interface_BitMap_CFalse)
    CTrue = _swig_new_instance_method(_Interface.Interface_BitMap_CTrue)
    Clear = _swig_new_instance_method(_Interface.Interface_BitMap_Clear)
    FlagName = _swig_new_instance_method(_Interface.Interface_BitMap_FlagName)
    FlagNumber = _swig_new_instance_method(_Interface.Interface_BitMap_FlagNumber)
    Init = _swig_new_instance_method(_Interface.Interface_BitMap_Init)
    Initialize = _swig_new_instance_method(_Interface.Interface_BitMap_Initialize)

    def __init__(self, *args):
        r"""
        * Creates a empty BitMap
        	:rtype: None* Creates a BitMap for <nbitems> items One flag is defined, n0 0 <resflags> prepares allocation for <resflags> more flags Flags values start at false
        	:param nbitems:
        	:type nbitems: int
        	:param resflags: default value is 0
        	:type resflags: int
        	:rtype: None* Creates a BitMap from another one if <copied> is True, copies data else, data are not copied, only the header object is
        	:param other:
        	:type other: Interface_BitMap
        	:param copied: default value is Standard_False
        	:type copied: bool
        	:rtype: None
        """
        _Interface.Interface_BitMap_swiginit(self, _Interface.new_Interface_BitMap(*args))
    Internals = _swig_new_instance_method(_Interface.Interface_BitMap_Internals)
    Length = _swig_new_instance_method(_Interface.Interface_BitMap_Length)
    NbFlags = _swig_new_instance_method(_Interface.Interface_BitMap_NbFlags)
    RemoveFlag = _swig_new_instance_method(_Interface.Interface_BitMap_RemoveFlag)
    Reservate = _swig_new_instance_method(_Interface.Interface_BitMap_Reservate)
    SetFalse = _swig_new_instance_method(_Interface.Interface_BitMap_SetFalse)
    SetFlagName = _swig_new_instance_method(_Interface.Interface_BitMap_SetFlagName)
    SetLength = _swig_new_instance_method(_Interface.Interface_BitMap_SetLength)
    SetTrue = _swig_new_instance_method(_Interface.Interface_BitMap_SetTrue)
    SetValue = _swig_new_instance_method(_Interface.Interface_BitMap_SetValue)
    Value = _swig_new_instance_method(_Interface.Interface_BitMap_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_BitMap

# Register Interface_BitMap in _Interface:
_Interface.Interface_BitMap_swigregister(Interface_BitMap)

class Interface_Category(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddCategory = _swig_new_static_method(_Interface.Interface_Category_AddCategory)
    CatNum = _swig_new_instance_method(_Interface.Interface_Category_CatNum)
    ClearNums = _swig_new_instance_method(_Interface.Interface_Category_ClearNums)
    Compute = _swig_new_instance_method(_Interface.Interface_Category_Compute)
    Init = _swig_new_static_method(_Interface.Interface_Category_Init)

    def __init__(self, *args):
        r"""
        * Creates a Category, with no protocol yet
        	:rtype: None* Creates a Category with a given protocol
        	:param theProtocol:
        	:type theProtocol: Interface_Protocol
        	:rtype: None* Creates a Category with a given GTool
        	:param theGTool:
        	:type theGTool: Interface_GTool
        	:rtype: None
        """
        _Interface.Interface_Category_swiginit(self, _Interface.new_Interface_Category(*args))
    Name = _swig_new_static_method(_Interface.Interface_Category_Name)
    NbCategories = _swig_new_static_method(_Interface.Interface_Category_NbCategories)
    Num = _swig_new_instance_method(_Interface.Interface_Category_Num)
    Number = _swig_new_static_method(_Interface.Interface_Category_Number)
    SetProtocol = _swig_new_instance_method(_Interface.Interface_Category_SetProtocol)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_Category

# Register Interface_Category in _Interface:
_Interface.Interface_Category_swigregister(Interface_Category)
Interface_Category_AddCategory = _Interface.Interface_Category_AddCategory
Interface_Category_Init = _Interface.Interface_Category_Init
Interface_Category_Name = _Interface.Interface_Category_Name
Interface_Category_NbCategories = _Interface.Interface_Category_NbCategories
Interface_Category_Number = _Interface.Interface_Category_Number

class Interface_Check(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddFail = _swig_new_instance_method(_Interface.Interface_Check_AddFail)
    AddWarning = _swig_new_instance_method(_Interface.Interface_Check_AddWarning)
    CFail = _swig_new_instance_method(_Interface.Interface_Check_CFail)
    CInfoMsg = _swig_new_instance_method(_Interface.Interface_Check_CInfoMsg)
    CWarning = _swig_new_instance_method(_Interface.Interface_Check_CWarning)
    Clear = _swig_new_instance_method(_Interface.Interface_Check_Clear)
    ClearFails = _swig_new_instance_method(_Interface.Interface_Check_ClearFails)
    ClearInfoMsgs = _swig_new_instance_method(_Interface.Interface_Check_ClearInfoMsgs)
    ClearWarnings = _swig_new_instance_method(_Interface.Interface_Check_ClearWarnings)
    Complies = _swig_new_instance_method(_Interface.Interface_Check_Complies)
    Entity = _swig_new_instance_method(_Interface.Interface_Check_Entity)
    Fail = _swig_new_instance_method(_Interface.Interface_Check_Fail)
    Fails = _swig_new_instance_method(_Interface.Interface_Check_Fails)
    GetAsWarning = _swig_new_instance_method(_Interface.Interface_Check_GetAsWarning)
    GetEntity = _swig_new_instance_method(_Interface.Interface_Check_GetEntity)
    GetMessages = _swig_new_instance_method(_Interface.Interface_Check_GetMessages)
    HasEntity = _swig_new_instance_method(_Interface.Interface_Check_HasEntity)
    HasFailed = _swig_new_instance_method(_Interface.Interface_Check_HasFailed)
    HasWarnings = _swig_new_instance_method(_Interface.Interface_Check_HasWarnings)
    InfoMsg = _swig_new_instance_method(_Interface.Interface_Check_InfoMsg)
    InfoMsgs = _swig_new_instance_method(_Interface.Interface_Check_InfoMsgs)

    def __init__(self, *args):
        r"""
        * Allows definition of a Sequence. Used also for Global Check of an InterfaceModel (which stores global messages for file)
        	:rtype: None* Defines a Check on an Entity
        	:param anentity:
        	:type anentity: Standard_Transient
        	:rtype: None
        """
        _Interface.Interface_Check_swiginit(self, _Interface.new_Interface_Check(*args))
    Mend = _swig_new_instance_method(_Interface.Interface_Check_Mend)
    NbFails = _swig_new_instance_method(_Interface.Interface_Check_NbFails)
    NbInfoMsgs = _swig_new_instance_method(_Interface.Interface_Check_NbInfoMsgs)
    NbWarnings = _swig_new_instance_method(_Interface.Interface_Check_NbWarnings)
    Print = _swig_new_instance_method(_Interface.Interface_Check_Print)
    Remove = _swig_new_instance_method(_Interface.Interface_Check_Remove)
    SendFail = _swig_new_instance_method(_Interface.Interface_Check_SendFail)
    SendMsg = _swig_new_instance_method(_Interface.Interface_Check_SendMsg)
    SendWarning = _swig_new_instance_method(_Interface.Interface_Check_SendWarning)
    SetEntity = _swig_new_instance_method(_Interface.Interface_Check_SetEntity)
    Status = _swig_new_instance_method(_Interface.Interface_Check_Status)
    Trace = _swig_new_instance_method(_Interface.Interface_Check_Trace)
    Warning = _swig_new_instance_method(_Interface.Interface_Check_Warning)
    Warnings = _swig_new_instance_method(_Interface.Interface_Check_Warnings)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_Check_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_Check

# Register Interface_Check in _Interface:
_Interface.Interface_Check_swigregister(Interface_Check)

class Interface_CheckIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_Interface.Interface_CheckIterator_Add)
    CCheck = _swig_new_instance_method(_Interface.Interface_CheckIterator_CCheck)
    Check = _swig_new_instance_method(_Interface.Interface_CheckIterator_Check)
    Checkeds = _swig_new_instance_method(_Interface.Interface_CheckIterator_Checkeds)
    Clear = _swig_new_instance_method(_Interface.Interface_CheckIterator_Clear)
    Complies = _swig_new_instance_method(_Interface.Interface_CheckIterator_Complies)
    Destroy = _swig_new_instance_method(_Interface.Interface_CheckIterator_Destroy)
    Extract = _swig_new_instance_method(_Interface.Interface_CheckIterator_Extract)

    def __init__(self, *args):
        r"""
        * Creates an empty CheckIterator
        	:rtype: None* Creates a CheckIterator with a name (displayed by Print as a title)
        	:param name:
        	:type name: char *
        	:rtype: None
        """
        _Interface.Interface_CheckIterator_swiginit(self, _Interface.new_Interface_CheckIterator(*args))
    IsEmpty = _swig_new_instance_method(_Interface.Interface_CheckIterator_IsEmpty)
    Merge = _swig_new_instance_method(_Interface.Interface_CheckIterator_Merge)
    Model = _swig_new_instance_method(_Interface.Interface_CheckIterator_Model)
    More = _swig_new_instance_method(_Interface.Interface_CheckIterator_More)
    Name = _swig_new_instance_method(_Interface.Interface_CheckIterator_Name)
    Next = _swig_new_instance_method(_Interface.Interface_CheckIterator_Next)
    Number = _swig_new_instance_method(_Interface.Interface_CheckIterator_Number)
    Print = _swig_new_instance_method(_Interface.Interface_CheckIterator_Print)
    Remove = _swig_new_instance_method(_Interface.Interface_CheckIterator_Remove)
    SetModel = _swig_new_instance_method(_Interface.Interface_CheckIterator_SetModel)
    SetName = _swig_new_instance_method(_Interface.Interface_CheckIterator_SetName)
    Start = _swig_new_instance_method(_Interface.Interface_CheckIterator_Start)
    Status = _swig_new_instance_method(_Interface.Interface_CheckIterator_Status)
    Value = _swig_new_instance_method(_Interface.Interface_CheckIterator_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_CheckIterator

# Register Interface_CheckIterator in _Interface:
_Interface.Interface_CheckIterator_swigregister(Interface_CheckIterator)

class Interface_CheckTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AnalyseCheckList = _swig_new_instance_method(_Interface.Interface_CheckTool_AnalyseCheckList)
    Check = _swig_new_instance_method(_Interface.Interface_CheckTool_Check)
    CheckList = _swig_new_instance_method(_Interface.Interface_CheckTool_CheckList)
    CheckSuccess = _swig_new_instance_method(_Interface.Interface_CheckTool_CheckSuccess)
    CompleteCheckList = _swig_new_instance_method(_Interface.Interface_CheckTool_CompleteCheckList)
    FillCheck = _swig_new_instance_method(_Interface.Interface_CheckTool_FillCheck)

    def __init__(self, *args):
        r"""
        * Creates a CheckTool, by calling the General Service Library and Modules, selected through a Protocol, to work on a Model Moreover, Protocol recognizes Unknown Entities
        	:param model:
        	:type model: Interface_InterfaceModel
        	:param protocol:
        	:type protocol: Interface_Protocol
        	:rtype: None* Creates a CheckTool, by calling the General Service Library and Modules, selected through a Protocol, to work on a Model Protocol and so on are taken from the Model (its GTool)
        	:param model:
        	:type model: Interface_InterfaceModel
        	:rtype: None* Creates a CheckTool from a Graph. The Graph contains a Model which designates a Protocol: they are used to create ShareTool
        	:param graph:
        	:type graph: Interface_Graph
        	:rtype: None:param hgraph:
        	:type hgraph: Interface_HGraph
        	:rtype: None
        """
        _Interface.Interface_CheckTool_swiginit(self, _Interface.new_Interface_CheckTool(*args))
    Print = _swig_new_instance_method(_Interface.Interface_CheckTool_Print)
    UnknownEntities = _swig_new_instance_method(_Interface.Interface_CheckTool_UnknownEntities)
    VerifyCheckList = _swig_new_instance_method(_Interface.Interface_CheckTool_VerifyCheckList)
    WarningCheckList = _swig_new_instance_method(_Interface.Interface_CheckTool_WarningCheckList)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_CheckTool

# Register Interface_CheckTool in _Interface:
_Interface.Interface_CheckTool_swigregister(Interface_CheckTool)

class Interface_CopyControl(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Bind = _swig_new_instance_method(_Interface.Interface_CopyControl_Bind)
    Clear = _swig_new_instance_method(_Interface.Interface_CopyControl_Clear)
    Search = _swig_new_instance_method(_Interface.Interface_CopyControl_Search)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_CopyControl_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_CopyControl

# Register Interface_CopyControl in _Interface:
_Interface.Interface_CopyControl_swigregister(Interface_CopyControl)

class Interface_CopyTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Bind = _swig_new_instance_method(_Interface.Interface_CopyTool_Bind)
    Clear = _swig_new_instance_method(_Interface.Interface_CopyTool_Clear)
    ClearLastFlags = _swig_new_instance_method(_Interface.Interface_CopyTool_ClearLastFlags)
    CompleteResult = _swig_new_instance_method(_Interface.Interface_CopyTool_CompleteResult)
    Control = _swig_new_instance_method(_Interface.Interface_CopyTool_Control)
    Copy = _swig_new_instance_method(_Interface.Interface_CopyTool_Copy)
    FillModel = _swig_new_instance_method(_Interface.Interface_CopyTool_FillModel)

    def __init__(self, *args):
        r"""
        * Creates a CopyTool adapted to work from a Model. Works with a General Service Library, given as an argument
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param lib:
        	:type lib: Interface_GeneralLib
        	:rtype: None* Same as above, but Library is defined through a Protocol
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param protocol:
        	:type protocol: Interface_Protocol
        	:rtype: None* Same as above, but works with the Active Protocol
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:rtype: None
        """
        _Interface.Interface_CopyTool_swiginit(self, _Interface.new_Interface_CopyTool(*args))
    LastCopiedAfter = _swig_new_instance_method(_Interface.Interface_CopyTool_LastCopiedAfter)
    Model = _swig_new_instance_method(_Interface.Interface_CopyTool_Model)
    RenewImpliedRefs = _swig_new_instance_method(_Interface.Interface_CopyTool_RenewImpliedRefs)
    RootResult = _swig_new_instance_method(_Interface.Interface_CopyTool_RootResult)
    Search = _swig_new_instance_method(_Interface.Interface_CopyTool_Search)
    SetControl = _swig_new_instance_method(_Interface.Interface_CopyTool_SetControl)
    TransferEntity = _swig_new_instance_method(_Interface.Interface_CopyTool_TransferEntity)
    Transferred = _swig_new_instance_method(_Interface.Interface_CopyTool_Transferred)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_CopyTool

# Register Interface_CopyTool in _Interface:
_Interface.Interface_CopyTool_swigregister(Interface_CopyTool)

class Interface_EntityCluster(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Append = _swig_new_instance_method(_Interface.Interface_EntityCluster_Append)
    FillIterator = _swig_new_instance_method(_Interface.Interface_EntityCluster_FillIterator)

    def __init__(self, *args):
        r"""
        * Creates an empty, non-chained, EntityCluster
        	:rtype: None* Creates a non-chained EntityCluster, filled with one Entity
        	:param ent:
        	:type ent: Standard_Transient
        	:rtype: None* Creates an empty EntityCluster, chained with another one (that is, put BEFORE this other one in the list)
        	:param ec:
        	:type ec: Interface_EntityCluster
        	:rtype: None* Creates an EntityCluster, filled with a first Entity, and chained to another EntityCluster (BEFORE it, as above)
        	:param ant:
        	:type ant: Standard_Transient
        	:param ec:
        	:type ec: Interface_EntityCluster
        	:rtype: None
        """
        _Interface.Interface_EntityCluster_swiginit(self, _Interface.new_Interface_EntityCluster(*args))
    NbEntities = _swig_new_instance_method(_Interface.Interface_EntityCluster_NbEntities)
    Remove = _swig_new_instance_method(_Interface.Interface_EntityCluster_Remove)
    SetValue = _swig_new_instance_method(_Interface.Interface_EntityCluster_SetValue)
    Value = _swig_new_instance_method(_Interface.Interface_EntityCluster_Value)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_EntityCluster_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_EntityCluster

# Register Interface_EntityCluster in _Interface:
_Interface.Interface_EntityCluster_swigregister(Interface_EntityCluster)

class Interface_EntityIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddItem = _swig_new_instance_method(_Interface.Interface_EntityIterator_AddItem)
    AddList = _swig_new_instance_method(_Interface.Interface_EntityIterator_AddList)
    Content = _swig_new_instance_method(_Interface.Interface_EntityIterator_Content)
    Destroy = _swig_new_instance_method(_Interface.Interface_EntityIterator_Destroy)
    GetOneItem = _swig_new_instance_method(_Interface.Interface_EntityIterator_GetOneItem)

    def __init__(self, *args):
        r"""
        * Defines an empty iterator (see AddList & AddItem)
        	:rtype: None* Defines an iterator on a list, directly i.e. without copying it
        	:param list:
        	:type list: TColStd_HSequenceOfTransient
        	:rtype: None
        """
        _Interface.Interface_EntityIterator_swiginit(self, _Interface.new_Interface_EntityIterator(*args))
    More = _swig_new_instance_method(_Interface.Interface_EntityIterator_More)
    NbEntities = _swig_new_instance_method(_Interface.Interface_EntityIterator_NbEntities)
    NbTyped = _swig_new_instance_method(_Interface.Interface_EntityIterator_NbTyped)
    Next = _swig_new_instance_method(_Interface.Interface_EntityIterator_Next)
    SelectType = _swig_new_instance_method(_Interface.Interface_EntityIterator_SelectType)
    Start = _swig_new_instance_method(_Interface.Interface_EntityIterator_Start)
    Typed = _swig_new_instance_method(_Interface.Interface_EntityIterator_Typed)
    Value = _swig_new_instance_method(_Interface.Interface_EntityIterator_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_EntityIterator

# Register Interface_EntityIterator in _Interface:
_Interface.Interface_EntityIterator_swigregister(Interface_EntityIterator)

class Interface_EntityList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_Interface.Interface_EntityList_Add)
    Append = _swig_new_instance_method(_Interface.Interface_EntityList_Append)
    Clear = _swig_new_instance_method(_Interface.Interface_EntityList_Clear)
    FillIterator = _swig_new_instance_method(_Interface.Interface_EntityList_FillIterator)

    def __init__(self, *args):
        r"""
        * Creates a List as beeing empty
        	:rtype: None
        """
        _Interface.Interface_EntityList_swiginit(self, _Interface.new_Interface_EntityList(*args))
    IsEmpty = _swig_new_instance_method(_Interface.Interface_EntityList_IsEmpty)
    NbEntities = _swig_new_instance_method(_Interface.Interface_EntityList_NbEntities)
    NbTypedEntities = _swig_new_instance_method(_Interface.Interface_EntityList_NbTypedEntities)
    Remove = _swig_new_instance_method(_Interface.Interface_EntityList_Remove)
    SetValue = _swig_new_instance_method(_Interface.Interface_EntityList_SetValue)
    TypedEntity = _swig_new_instance_method(_Interface.Interface_EntityList_TypedEntity)
    Value = _swig_new_instance_method(_Interface.Interface_EntityList_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_EntityList

# Register Interface_EntityList in _Interface:
_Interface.Interface_EntityList_swigregister(Interface_EntityList)

class Interface_FileParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CValue = _swig_new_instance_method(_Interface.Interface_FileParameter_CValue)
    Clear = _swig_new_instance_method(_Interface.Interface_FileParameter_Clear)
    Destroy = _swig_new_instance_method(_Interface.Interface_FileParameter_Destroy)
    EntityNumber = _swig_new_instance_method(_Interface.Interface_FileParameter_EntityNumber)
    Init = _swig_new_instance_method(_Interface.Interface_FileParameter_Init)

    def __init__(self, *args):
        r""":rtype: None"""
        _Interface.Interface_FileParameter_swiginit(self, _Interface.new_Interface_FileParameter(*args))
    ParamType = _swig_new_instance_method(_Interface.Interface_FileParameter_ParamType)
    SetEntityNumber = _swig_new_instance_method(_Interface.Interface_FileParameter_SetEntityNumber)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_FileParameter

# Register Interface_FileParameter in _Interface:
_Interface.Interface_FileParameter_swigregister(Interface_FileParameter)

class Interface_FileReaderData(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    AddParam = _swig_new_instance_method(_Interface.Interface_FileReaderData_AddParam)
    BindEntity = _swig_new_instance_method(_Interface.Interface_FileReaderData_BindEntity)
    BoundEntity = _swig_new_instance_method(_Interface.Interface_FileReaderData_BoundEntity)
    ChangeParam = _swig_new_instance_method(_Interface.Interface_FileReaderData_ChangeParam)
    Destroy = _swig_new_instance_method(_Interface.Interface_FileReaderData_Destroy)
    Fastof = _swig_new_static_method(_Interface.Interface_FileReaderData_Fastof)
    FindNextRecord = _swig_new_instance_method(_Interface.Interface_FileReaderData_FindNextRecord)
    InitParams = _swig_new_instance_method(_Interface.Interface_FileReaderData_InitParams)
    IsErrorLoad = _swig_new_instance_method(_Interface.Interface_FileReaderData_IsErrorLoad)
    IsParamDefined = _swig_new_instance_method(_Interface.Interface_FileReaderData_IsParamDefined)
    NbEntities = _swig_new_instance_method(_Interface.Interface_FileReaderData_NbEntities)
    NbParams = _swig_new_instance_method(_Interface.Interface_FileReaderData_NbParams)
    NbRecords = _swig_new_instance_method(_Interface.Interface_FileReaderData_NbRecords)
    Param = _swig_new_instance_method(_Interface.Interface_FileReaderData_Param)
    ParamCValue = _swig_new_instance_method(_Interface.Interface_FileReaderData_ParamCValue)
    ParamEntity = _swig_new_instance_method(_Interface.Interface_FileReaderData_ParamEntity)
    ParamFirstRank = _swig_new_instance_method(_Interface.Interface_FileReaderData_ParamFirstRank)
    ParamNumber = _swig_new_instance_method(_Interface.Interface_FileReaderData_ParamNumber)
    ParamType = _swig_new_instance_method(_Interface.Interface_FileReaderData_ParamType)
    Params = _swig_new_instance_method(_Interface.Interface_FileReaderData_Params)
    ResetErrorLoad = _swig_new_instance_method(_Interface.Interface_FileReaderData_ResetErrorLoad)
    SetErrorLoad = _swig_new_instance_method(_Interface.Interface_FileReaderData_SetErrorLoad)
    SetParam = _swig_new_instance_method(_Interface.Interface_FileReaderData_SetParam)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_FileReaderData_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_FileReaderData

# Register Interface_FileReaderData in _Interface:
_Interface.Interface_FileReaderData_swigregister(Interface_FileReaderData)
Interface_FileReaderData_Fastof = _Interface.Interface_FileReaderData_Fastof

class Interface_FileReaderTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    AnalyseRecord = _swig_new_instance_method(_Interface.Interface_FileReaderTool_AnalyseRecord)
    BeginRead = _swig_new_instance_method(_Interface.Interface_FileReaderTool_BeginRead)
    Clear = _swig_new_instance_method(_Interface.Interface_FileReaderTool_Clear)
    Data = _swig_new_instance_method(_Interface.Interface_FileReaderTool_Data)
    EndRead = _swig_new_instance_method(_Interface.Interface_FileReaderTool_EndRead)
    LoadModel = _swig_new_instance_method(_Interface.Interface_FileReaderTool_LoadModel)
    LoadedEntity = _swig_new_instance_method(_Interface.Interface_FileReaderTool_LoadedEntity)
    Messenger = _swig_new_instance_method(_Interface.Interface_FileReaderTool_Messenger)
    Model = _swig_new_instance_method(_Interface.Interface_FileReaderTool_Model)
    NewModel = _swig_new_instance_method(_Interface.Interface_FileReaderTool_NewModel)
    Protocol = _swig_new_instance_method(_Interface.Interface_FileReaderTool_Protocol)
    Recognize = _swig_new_instance_method(_Interface.Interface_FileReaderTool_Recognize)
    RecognizeByLib = _swig_new_instance_method(_Interface.Interface_FileReaderTool_RecognizeByLib)
    SetData = _swig_new_instance_method(_Interface.Interface_FileReaderTool_SetData)
    SetEntities = _swig_new_instance_method(_Interface.Interface_FileReaderTool_SetEntities)
    SetMessenger = _swig_new_instance_method(_Interface.Interface_FileReaderTool_SetMessenger)
    SetModel = _swig_new_instance_method(_Interface.Interface_FileReaderTool_SetModel)
    SetTraceLevel = _swig_new_instance_method(_Interface.Interface_FileReaderTool_SetTraceLevel)
    TraceLevel = _swig_new_instance_method(_Interface.Interface_FileReaderTool_TraceLevel)
    UnknownEntity = _swig_new_instance_method(_Interface.Interface_FileReaderTool_UnknownEntity)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_FileReaderTool

# Register Interface_FileReaderTool in _Interface:
_Interface.Interface_FileReaderTool_swigregister(Interface_FileReaderTool)

class Interface_FloatWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Convert = _swig_new_static_method(_Interface.Interface_FloatWriter_Convert)
    FormatForRange = _swig_new_instance_method(_Interface.Interface_FloatWriter_FormatForRange)

    def __init__(self, *args):
        r"""
        * Creates a FloatWriter ready to work, with default options - - zero suppress option is set - main format is set to '%E' - secondary format is set to '%f' for values between 0.1 and 1000. in absolute values If <chars> is given (and positive), it will produce options to produce this count of characters : '%<chars>f','%<chars>%E'
        	:param chars: default value is 0
        	:type chars: int
        	:rtype: None
        """
        _Interface.Interface_FloatWriter_swiginit(self, _Interface.new_Interface_FloatWriter(*args))
    MainFormat = _swig_new_instance_method(_Interface.Interface_FloatWriter_MainFormat)
    Options = _swig_new_instance_method(_Interface.Interface_FloatWriter_Options)
    SetDefaults = _swig_new_instance_method(_Interface.Interface_FloatWriter_SetDefaults)
    SetFormat = _swig_new_instance_method(_Interface.Interface_FloatWriter_SetFormat)
    SetFormatForRange = _swig_new_instance_method(_Interface.Interface_FloatWriter_SetFormatForRange)
    SetZeroSuppress = _swig_new_instance_method(_Interface.Interface_FloatWriter_SetZeroSuppress)
    Write = _swig_new_instance_method(_Interface.Interface_FloatWriter_Write)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_FloatWriter

# Register Interface_FloatWriter in _Interface:
_Interface.Interface_FloatWriter_swigregister(Interface_FloatWriter)
Interface_FloatWriter_Convert = _Interface.Interface_FloatWriter_Convert

class Interface_GTool(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ClearEntities = _swig_new_instance_method(_Interface.Interface_GTool_ClearEntities)

    def __init__(self, *args):
        r"""
        * Creates an empty, not set, GTool
        	:rtype: None* Creates a GTool from a Protocol Optional starting count of entities
        	:param proto:
        	:type proto: Interface_Protocol
        	:param nbent: default value is 0
        	:type nbent: int
        	:rtype: None
        """
        _Interface.Interface_GTool_swiginit(self, _Interface.new_Interface_GTool(*args))
    Lib = _swig_new_instance_method(_Interface.Interface_GTool_Lib)
    Protocol = _swig_new_instance_method(_Interface.Interface_GTool_Protocol)
    Reservate = _swig_new_instance_method(_Interface.Interface_GTool_Reservate)
    Select = _swig_new_instance_method(_Interface.Interface_GTool_Select)
    SetProtocol = _swig_new_instance_method(_Interface.Interface_GTool_SetProtocol)
    SetSignType = _swig_new_instance_method(_Interface.Interface_GTool_SetSignType)
    SignName = _swig_new_instance_method(_Interface.Interface_GTool_SignName)
    SignType = _swig_new_instance_method(_Interface.Interface_GTool_SignType)
    SignValue = _swig_new_instance_method(_Interface.Interface_GTool_SignValue)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_GTool_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_GTool

# Register Interface_GTool in _Interface:
_Interface.Interface_GTool_swigregister(Interface_GTool)

class Interface_GeneralLib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddProtocol = _swig_new_instance_method(_Interface.Interface_GeneralLib_AddProtocol)
    Clear = _swig_new_instance_method(_Interface.Interface_GeneralLib_Clear)

    def __init__(self, *args):
        r"""
        * Creates a Library which complies with a Protocol, that is : Same class (criterium IsInstance) This creation gets the Modules from the global set, those which are bound to the given Protocol and its Resources
        	:param aprotocol:
        	:type aprotocol: Interface_Protocol
        	:rtype: None* Creates an empty Library : it will later by filled by method AddProtocol
        	:rtype: None
        """
        _Interface.Interface_GeneralLib_swiginit(self, _Interface.new_Interface_GeneralLib(*args))
    Module = _swig_new_instance_method(_Interface.Interface_GeneralLib_Module)
    More = _swig_new_instance_method(_Interface.Interface_GeneralLib_More)
    Next = _swig_new_instance_method(_Interface.Interface_GeneralLib_Next)
    Protocol = _swig_new_instance_method(_Interface.Interface_GeneralLib_Protocol)
    Select = _swig_new_instance_method(_Interface.Interface_GeneralLib_Select)
    SetComplete = _swig_new_instance_method(_Interface.Interface_GeneralLib_SetComplete)
    SetGlobal = _swig_new_static_method(_Interface.Interface_GeneralLib_SetGlobal)
    Start = _swig_new_instance_method(_Interface.Interface_GeneralLib_Start)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_GeneralLib

# Register Interface_GeneralLib in _Interface:
_Interface.Interface_GeneralLib_swigregister(Interface_GeneralLib)
Interface_GeneralLib_SetGlobal = _Interface.Interface_GeneralLib_SetGlobal

class Interface_GeneralModule(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    CanCopy = _swig_new_instance_method(_Interface.Interface_GeneralModule_CanCopy)
    CategoryNumber = _swig_new_instance_method(_Interface.Interface_GeneralModule_CategoryNumber)
    CheckCase = _swig_new_instance_method(_Interface.Interface_GeneralModule_CheckCase)
    CopyCase = _swig_new_instance_method(_Interface.Interface_GeneralModule_CopyCase)
    Dispatch = _swig_new_instance_method(_Interface.Interface_GeneralModule_Dispatch)
    FillShared = _swig_new_instance_method(_Interface.Interface_GeneralModule_FillShared)
    FillSharedCase = _swig_new_instance_method(_Interface.Interface_GeneralModule_FillSharedCase)
    ListImplied = _swig_new_instance_method(_Interface.Interface_GeneralModule_ListImplied)
    ListImpliedCase = _swig_new_instance_method(_Interface.Interface_GeneralModule_ListImpliedCase)
    Name = _swig_new_instance_method(_Interface.Interface_GeneralModule_Name)
    NewCopiedCase = _swig_new_instance_method(_Interface.Interface_GeneralModule_NewCopiedCase)
    NewVoid = _swig_new_instance_method(_Interface.Interface_GeneralModule_NewVoid)
    RenewImpliedCase = _swig_new_instance_method(_Interface.Interface_GeneralModule_RenewImpliedCase)
    Share = _swig_new_instance_method(_Interface.Interface_GeneralModule_Share)
    WhenDeleteCase = _swig_new_instance_method(_Interface.Interface_GeneralModule_WhenDeleteCase)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_GeneralModule_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_GeneralModule

# Register Interface_GeneralModule in _Interface:
_Interface.Interface_GeneralModule_swigregister(Interface_GeneralModule)

class Interface_GlobalNodeOfGeneralLib(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_Interface.Interface_GlobalNodeOfGeneralLib_Add)

    def __init__(self, *args):
        r"""
        * Creates an empty GlobalNode, with no Next
        	:rtype: None
        """
        _Interface.Interface_GlobalNodeOfGeneralLib_swiginit(self, _Interface.new_Interface_GlobalNodeOfGeneralLib(*args))
    Module = _swig_new_instance_method(_Interface.Interface_GlobalNodeOfGeneralLib_Module)
    Next = _swig_new_instance_method(_Interface.Interface_GlobalNodeOfGeneralLib_Next)
    Protocol = _swig_new_instance_method(_Interface.Interface_GlobalNodeOfGeneralLib_Protocol)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_GlobalNodeOfGeneralLib_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_GlobalNodeOfGeneralLib

# Register Interface_GlobalNodeOfGeneralLib in _Interface:
_Interface.Interface_GlobalNodeOfGeneralLib_swigregister(Interface_GlobalNodeOfGeneralLib)

class Interface_GlobalNodeOfReaderLib(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_Interface.Interface_GlobalNodeOfReaderLib_Add)

    def __init__(self, *args):
        r"""
        * Creates an empty GlobalNode, with no Next
        	:rtype: None
        """
        _Interface.Interface_GlobalNodeOfReaderLib_swiginit(self, _Interface.new_Interface_GlobalNodeOfReaderLib(*args))
    Module = _swig_new_instance_method(_Interface.Interface_GlobalNodeOfReaderLib_Module)
    Next = _swig_new_instance_method(_Interface.Interface_GlobalNodeOfReaderLib_Next)
    Protocol = _swig_new_instance_method(_Interface.Interface_GlobalNodeOfReaderLib_Protocol)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_GlobalNodeOfReaderLib_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_GlobalNodeOfReaderLib

# Register Interface_GlobalNodeOfReaderLib in _Interface:
_Interface.Interface_GlobalNodeOfReaderLib_swigregister(Interface_GlobalNodeOfReaderLib)

class Interface_Graph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BitMap = _swig_new_instance_method(_Interface.Interface_Graph_BitMap)
    CBitMap = _swig_new_instance_method(_Interface.Interface_Graph_CBitMap)
    ChangeStatus = _swig_new_instance_method(_Interface.Interface_Graph_ChangeStatus)
    Entity = _swig_new_instance_method(_Interface.Interface_Graph_Entity)
    EntityNumber = _swig_new_instance_method(_Interface.Interface_Graph_EntityNumber)
    GetFromEntity = _swig_new_instance_method(_Interface.Interface_Graph_GetFromEntity)
    GetFromGraph = _swig_new_instance_method(_Interface.Interface_Graph_GetFromGraph)
    GetFromIter = _swig_new_instance_method(_Interface.Interface_Graph_GetFromIter)
    GetFromModel = _swig_new_instance_method(_Interface.Interface_Graph_GetFromModel)
    GetShareds = _swig_new_instance_method(_Interface.Interface_Graph_GetShareds)
    GetSharings = _swig_new_instance_method(_Interface.Interface_Graph_GetSharings)
    HasShareErrors = _swig_new_instance_method(_Interface.Interface_Graph_HasShareErrors)

    def __init__(self, *args):
        r"""
        * Creates an empty graph, ready to receive Entities from amodel Note that this way of Creation allows <self> to verify that Entities to work with are contained in <amodel> Basic Shared and Sharing lists are obtained from a General Services Library, given directly as an argument
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param lib:
        	:type lib: Interface_GeneralLib
        	:param theModeStats: default value is Standard_True
        	:type theModeStats: bool
        	:rtype: None* Same as above, but the Library is defined through a Protocol
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param protocol:
        	:type protocol: Interface_Protocol
        	:param theModeStats: default value is Standard_True
        	:type theModeStats: bool
        	:rtype: None* Same as above, but the Library is defined through a Protocol
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param gtool:
        	:type gtool: Interface_GTool
        	:param theModeStats: default value is Standard_True
        	:type theModeStats: bool
        	:rtype: None* Same a above but works with the Protocol recorded in the Model
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param theModeStats: default value is Standard_True
        	:type theModeStats: bool
        	:rtype: None* Creates a Graph from another one, getting all its data Remark that status are copied from <agraph>, but the other lists (sharing/shared) are copied only if <copied> = True
        	:param agraph:
        	:type agraph: Interface_Graph
        	:param copied: default value is Standard_False
        	:type copied: bool
        	:rtype: None
        """
        _Interface.Interface_Graph_swiginit(self, _Interface.new_Interface_Graph(*args))
    IsPresent = _swig_new_instance_method(_Interface.Interface_Graph_IsPresent)
    ModeStat = _swig_new_instance_method(_Interface.Interface_Graph_ModeStat)
    Model = _swig_new_instance_method(_Interface.Interface_Graph_Model)
    Name = _swig_new_instance_method(_Interface.Interface_Graph_Name)
    NbStatuses = _swig_new_instance_method(_Interface.Interface_Graph_NbStatuses)
    RemoveItem = _swig_new_instance_method(_Interface.Interface_Graph_RemoveItem)
    RemoveStatus = _swig_new_instance_method(_Interface.Interface_Graph_RemoveStatus)
    Reset = _swig_new_instance_method(_Interface.Interface_Graph_Reset)
    ResetStatus = _swig_new_instance_method(_Interface.Interface_Graph_ResetStatus)
    RootEntities = _swig_new_instance_method(_Interface.Interface_Graph_RootEntities)
    SetStatus = _swig_new_instance_method(_Interface.Interface_Graph_SetStatus)
    Shareds = _swig_new_instance_method(_Interface.Interface_Graph_Shareds)
    SharingTable = _swig_new_instance_method(_Interface.Interface_Graph_SharingTable)
    Sharings = _swig_new_instance_method(_Interface.Interface_Graph_Sharings)
    Size = _swig_new_instance_method(_Interface.Interface_Graph_Size)
    Status = _swig_new_instance_method(_Interface.Interface_Graph_Status)
    TypedSharings = _swig_new_instance_method(_Interface.Interface_Graph_TypedSharings)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_Graph

# Register Interface_Graph in _Interface:
_Interface.Interface_Graph_swigregister(Interface_Graph)

class Interface_HGraph(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CGraph = _swig_new_instance_method(_Interface.Interface_HGraph_CGraph)
    Graph = _swig_new_instance_method(_Interface.Interface_HGraph_Graph)

    def __init__(self, *args):
        r"""
        * Creates an HGraph directly from a Graph. Remark that the starting Graph is duplicated
        	:param agraph:
        	:type agraph: Interface_Graph
        	:rtype: None* Creates an HGraph with a Graph created from <amodel> and <lib>
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param lib:
        	:type lib: Interface_GeneralLib
        	:param theModeStats: default value is Standard_True
        	:type theModeStats: bool
        	:rtype: None* Creates an HGraph with a graph itself created from <amodel> and <protocol>
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param protocol:
        	:type protocol: Interface_Protocol
        	:param theModeStats: default value is Standard_True
        	:type theModeStats: bool
        	:rtype: None* Creates an HGraph with a graph itself created from <amodel> and <protocol>
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param gtool:
        	:type gtool: Interface_GTool
        	:param theModeStats: default value is Standard_True
        	:type theModeStats: bool
        	:rtype: None* Same a above, but works with the GTool in the model
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param theModeStats: default value is Standard_True
        	:type theModeStats: bool
        	:rtype: None
        """
        _Interface.Interface_HGraph_swiginit(self, _Interface.new_Interface_HGraph(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Interface_HGraph_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_HGraph

# Register Interface_HGraph in _Interface:
_Interface.Interface_HGraph_swigregister(Interface_HGraph)

class Interface_IntList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_Interface.Interface_IntList_Add)
    AdjustSize = _swig_new_instance_method(_Interface.Interface_IntList_AdjustSize)
    Clear = _swig_new_instance_method(_Interface.Interface_IntList_Clear)
    Initialize = _swig_new_instance_method(_Interface.Interface_IntList_Initialize)

    def __init__(self, *args):
        r"""
        * Creates empty IntList.
        	:rtype: None* Creates an IntList for <nbe> entities
        	:param nbe:
        	:type nbe: int
        	:rtype: None* Creates an IntList from another one. if <copied> is True, copies data else, data are not copied, only the header object is
        	:param other:
        	:type other: Interface_IntList
        	:param copied:
        	:type copied: bool
        	:rtype: None
        """
        _Interface.Interface_IntList_swiginit(self, _Interface.new_Interface_IntList(*args))
    Internals = _swig_new_instance_method(_Interface.Interface_IntList_Internals)
    IsRedefined = _swig_new_instance_method(_Interface.Interface_IntList_IsRedefined)
    Length = _swig_new_instance_method(_Interface.Interface_IntList_Length)
    List = _swig_new_instance_method(_Interface.Interface_IntList_List)
    NbEntities = _swig_new_instance_method(_Interface.Interface_IntList_NbEntities)
    Number = _swig_new_instance_method(_Interface.Interface_IntList_Number)
    Remove = _swig_new_instance_method(_Interface.Interface_IntList_Remove)
    Reservate = _swig_new_instance_method(_Interface.Interface_IntList_Reservate)
    SetNbEntities = _swig_new_instance_method(_Interface.Interface_IntList_SetNbEntities)
    SetNumber = _swig_new_instance_method(_Interface.Interface_IntList_SetNumber)
    SetRedefined = _swig_new_instance_method(_Interface.Interface_IntList_SetRedefined)
    Value = _swig_new_instance_method(_Interface.Interface_IntList_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_IntList

# Register Interface_IntList in _Interface:
_Interface.Interface_IntList_swigregister(Interface_IntList)

class Interface_IntVal(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GetCValue = _swig_new_instance_method(_Interface.Interface_IntVal_GetCValue)
    SetCValue = _swig_new_instance_method(_Interface.Interface_IntVal_SetCValue)

    def __init__(self, *args):
        r""":rtype: None"""
        _Interface.Interface_IntVal_swiginit(self, _Interface.new_Interface_IntVal(*args))
    Value = _swig_new_instance_method(_Interface.Interface_IntVal_Value)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_IntVal_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_IntVal

# Register Interface_IntVal in _Interface:
_Interface.Interface_IntVal_swigregister(Interface_IntVal)

class Interface_InterfaceModel(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    AddEntity = _swig_new_instance_method(_Interface.Interface_InterfaceModel_AddEntity)
    AddReportEntity = _swig_new_instance_method(_Interface.Interface_InterfaceModel_AddReportEntity)
    AddWithRefs = _swig_new_instance_method(_Interface.Interface_InterfaceModel_AddWithRefs)
    CategoryNumber = _swig_new_instance_method(_Interface.Interface_InterfaceModel_CategoryNumber)
    ChangeOrder = _swig_new_instance_method(_Interface.Interface_InterfaceModel_ChangeOrder)
    Check = _swig_new_instance_method(_Interface.Interface_InterfaceModel_Check)
    ClassName = _swig_new_static_method(_Interface.Interface_InterfaceModel_ClassName)
    Clear = _swig_new_instance_method(_Interface.Interface_InterfaceModel_Clear)
    ClearEntities = _swig_new_instance_method(_Interface.Interface_InterfaceModel_ClearEntities)
    ClearHeader = _swig_new_instance_method(_Interface.Interface_InterfaceModel_ClearHeader)
    ClearLabels = _swig_new_instance_method(_Interface.Interface_InterfaceModel_ClearLabels)
    ClearReportEntity = _swig_new_instance_method(_Interface.Interface_InterfaceModel_ClearReportEntity)
    Contains = _swig_new_instance_method(_Interface.Interface_InterfaceModel_Contains)
    Destroy = _swig_new_instance_method(_Interface.Interface_InterfaceModel_Destroy)
    GetDispatchStatus = _swig_new_instance_method(_Interface.Interface_InterfaceModel_GetDispatchStatus)
    SetDispatchStatus = _swig_new_instance_method(_Interface.Interface_InterfaceModel_SetDispatchStatus)
    DumpHeader = _swig_new_instance_method(_Interface.Interface_InterfaceModel_DumpHeader)
    Entities = _swig_new_instance_method(_Interface.Interface_InterfaceModel_Entities)
    EntityState = _swig_new_instance_method(_Interface.Interface_InterfaceModel_EntityState)
    FillIterator = _swig_new_instance_method(_Interface.Interface_InterfaceModel_FillIterator)
    FillSemanticChecks = _swig_new_instance_method(_Interface.Interface_InterfaceModel_FillSemanticChecks)
    GTool = _swig_new_instance_method(_Interface.Interface_InterfaceModel_GTool)
    GetFromAnother = _swig_new_instance_method(_Interface.Interface_InterfaceModel_GetFromAnother)
    GetFromTransfer = _swig_new_instance_method(_Interface.Interface_InterfaceModel_GetFromTransfer)
    GlobalCheck = _swig_new_instance_method(_Interface.Interface_InterfaceModel_GlobalCheck)
    HasSemanticChecks = _swig_new_instance_method(_Interface.Interface_InterfaceModel_HasSemanticChecks)
    HasTemplate = _swig_new_static_method(_Interface.Interface_InterfaceModel_HasTemplate)
    IsErrorEntity = _swig_new_instance_method(_Interface.Interface_InterfaceModel_IsErrorEntity)
    IsRedefinedContent = _swig_new_instance_method(_Interface.Interface_InterfaceModel_IsRedefinedContent)
    IsReportEntity = _swig_new_instance_method(_Interface.Interface_InterfaceModel_IsReportEntity)
    IsUnknownEntity = _swig_new_instance_method(_Interface.Interface_InterfaceModel_IsUnknownEntity)
    ListTemplates = _swig_new_static_method(_Interface.Interface_InterfaceModel_ListTemplates)
    NbEntities = _swig_new_instance_method(_Interface.Interface_InterfaceModel_NbEntities)
    NbTypes = _swig_new_instance_method(_Interface.Interface_InterfaceModel_NbTypes)
    NewEmptyModel = _swig_new_instance_method(_Interface.Interface_InterfaceModel_NewEmptyModel)
    NextNumberForLabel = _swig_new_instance_method(_Interface.Interface_InterfaceModel_NextNumberForLabel)
    Number = _swig_new_instance_method(_Interface.Interface_InterfaceModel_Number)
    Print = _swig_new_instance_method(_Interface.Interface_InterfaceModel_Print)
    PrintLabel = _swig_new_instance_method(_Interface.Interface_InterfaceModel_PrintLabel)
    PrintToLog = _swig_new_instance_method(_Interface.Interface_InterfaceModel_PrintToLog)
    Protocol = _swig_new_instance_method(_Interface.Interface_InterfaceModel_Protocol)
    Redefineds = _swig_new_instance_method(_Interface.Interface_InterfaceModel_Redefineds)
    ReplaceEntity = _swig_new_instance_method(_Interface.Interface_InterfaceModel_ReplaceEntity)
    ReportEntity = _swig_new_instance_method(_Interface.Interface_InterfaceModel_ReportEntity)
    Reports = _swig_new_instance_method(_Interface.Interface_InterfaceModel_Reports)
    Reservate = _swig_new_instance_method(_Interface.Interface_InterfaceModel_Reservate)
    ReverseOrders = _swig_new_instance_method(_Interface.Interface_InterfaceModel_ReverseOrders)
    SetCategoryNumber = _swig_new_instance_method(_Interface.Interface_InterfaceModel_SetCategoryNumber)
    SetGTool = _swig_new_instance_method(_Interface.Interface_InterfaceModel_SetGTool)
    SetGlobalCheck = _swig_new_instance_method(_Interface.Interface_InterfaceModel_SetGlobalCheck)
    SetProtocol = _swig_new_instance_method(_Interface.Interface_InterfaceModel_SetProtocol)
    SetReportEntity = _swig_new_instance_method(_Interface.Interface_InterfaceModel_SetReportEntity)
    SetTemplate = _swig_new_static_method(_Interface.Interface_InterfaceModel_SetTemplate)
    StringLabel = _swig_new_instance_method(_Interface.Interface_InterfaceModel_StringLabel)
    Template = _swig_new_static_method(_Interface.Interface_InterfaceModel_Template)
    Type = _swig_new_instance_method(_Interface.Interface_InterfaceModel_Type)
    TypeName = _swig_new_instance_method(_Interface.Interface_InterfaceModel_TypeName)
    Value = _swig_new_instance_method(_Interface.Interface_InterfaceModel_Value)
    VerifyCheck = _swig_new_instance_method(_Interface.Interface_InterfaceModel_VerifyCheck)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_InterfaceModel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_InterfaceModel

# Register Interface_InterfaceModel in _Interface:
_Interface.Interface_InterfaceModel_swigregister(Interface_InterfaceModel)
Interface_InterfaceModel_ClassName = _Interface.Interface_InterfaceModel_ClassName
Interface_InterfaceModel_HasTemplate = _Interface.Interface_InterfaceModel_HasTemplate
Interface_InterfaceModel_ListTemplates = _Interface.Interface_InterfaceModel_ListTemplates
Interface_InterfaceModel_SetTemplate = _Interface.Interface_InterfaceModel_SetTemplate
Interface_InterfaceModel_Template = _Interface.Interface_InterfaceModel_Template

class Interface_LineBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_Interface.Interface_LineBuffer_Add)
    CanGet = _swig_new_instance_method(_Interface.Interface_LineBuffer_CanGet)
    Clear = _swig_new_instance_method(_Interface.Interface_LineBuffer_Clear)
    Content = _swig_new_instance_method(_Interface.Interface_LineBuffer_Content)
    FreezeInitial = _swig_new_instance_method(_Interface.Interface_LineBuffer_FreezeInitial)

    def __init__(self, *args):
        r"""
        * Creates a LineBuffer with an absolute maximum size (Default value is only to satisfy compiler requirement)
        	:param size: default value is 10
        	:type size: int
        	:rtype: None
        """
        _Interface.Interface_LineBuffer_swiginit(self, _Interface.new_Interface_LineBuffer(*args))
    Length = _swig_new_instance_method(_Interface.Interface_LineBuffer_Length)
    Move = _swig_new_instance_method(_Interface.Interface_LineBuffer_Move)
    Moved = _swig_new_instance_method(_Interface.Interface_LineBuffer_Moved)
    SetInitial = _swig_new_instance_method(_Interface.Interface_LineBuffer_SetInitial)
    SetKeep = _swig_new_instance_method(_Interface.Interface_LineBuffer_SetKeep)
    SetMax = _swig_new_instance_method(_Interface.Interface_LineBuffer_SetMax)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_LineBuffer

# Register Interface_LineBuffer in _Interface:
_Interface.Interface_LineBuffer_swigregister(Interface_LineBuffer)

class Interface_MSG(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Blanks = _swig_new_static_method(_Interface.Interface_MSG_Blanks)
    CDate = _swig_new_static_method(_Interface.Interface_MSG_CDate)
    Destroy = _swig_new_instance_method(_Interface.Interface_MSG_Destroy)

    def __init__(self, *args):
        r"""
        * A MSG is created to write a 'functional code' in conjunction with operator () attached to Value Then, to have a translated message, write in C++ : //! Interface_MSG('...mykey...') which returns a CString See also some help which follow
        	:param key:
        	:type key: char *
        	:rtype: None* Translates a message which contains one integer variable It is just a help which avoid the following : char mess[100]; sprintf(mess,Interface_MSG('code'),ival); then AddFail(mess); replaced by AddFail (Interface_MSG('code',ival)); //! The basic message is intended to be in C-sprintf format, with one %d form in it
        	:param key:
        	:type key: char *
        	:param i1:
        	:type i1: int
        	:rtype: None* Translates a message which contains two integer variables As for one integer, it is just a writing help //! The basic message is intended to be in C-sprintf format with two %d forms in it
        	:param key:
        	:type key: char *
        	:param i1:
        	:type i1: int
        	:param i2:
        	:type i2: int
        	:rtype: None* Translates a message which contains one real variable <intervals> if set, commands the variable to be rounded to an interval (see below, method Intervals) As for one integer, it is just a writing help //! The basic message is intended to be in C-sprintf format with one %f form (or equivalent : %e etc) in it
        	:param key:
        	:type key: char *
        	:param r1:
        	:type r1: float
        	:param intervals: default value is -1
        	:type intervals: int
        	:rtype: None* Translates a message which contains one string variable As for one integer, it is just a writing help //! The basic message is intended to be in C-sprintf format with one %s form in it
        	:param key:
        	:type key: char *
        	:param str:
        	:type str: char *
        	:rtype: None* Translates a message which contains one integer and one string variables As for one integer, it is just a writing help Used for instance to say 'Param n0.<ival> i.e. <str> is not..' //! The basic message is intended to be in C-sprintf format with one %d then one %s forms in it
        	:param key:
        	:type key: char *
        	:param ival:
        	:type ival: int
        	:param str:
        	:type str: char *
        	:rtype: None
        """
        _Interface.Interface_MSG_swiginit(self, _Interface.new_Interface_MSG(*args))
    Intervalled = _swig_new_static_method(_Interface.Interface_MSG_Intervalled)
    IsKey = _swig_new_static_method(_Interface.Interface_MSG_IsKey)
    NDate = _swig_new_static_method(_Interface.Interface_MSG_NDate)
    Print = _swig_new_static_method(_Interface.Interface_MSG_Print)
    PrintTraceToString = _swig_new_instance_method(_Interface.Interface_MSG_PrintTraceToString)
    ReadFromString = _swig_new_instance_method(_Interface.Interface_MSG_ReadFromString)
    Read = _swig_new_static_method(_Interface.Interface_MSG_Read)
    Record = _swig_new_static_method(_Interface.Interface_MSG_Record)
    SetMode = _swig_new_static_method(_Interface.Interface_MSG_SetMode)
    SetTrace = _swig_new_static_method(_Interface.Interface_MSG_SetTrace)
    TDate = _swig_new_static_method(_Interface.Interface_MSG_TDate)
    Translated = _swig_new_static_method(_Interface.Interface_MSG_Translated)
    Value = _swig_new_instance_method(_Interface.Interface_MSG_Value)
    Write = _swig_new_static_method(_Interface.Interface_MSG_Write)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_MSG

# Register Interface_MSG in _Interface:
_Interface.Interface_MSG_swigregister(Interface_MSG)
Interface_MSG_Blanks = _Interface.Interface_MSG_Blanks
Interface_MSG_CDate = _Interface.Interface_MSG_CDate
Interface_MSG_Intervalled = _Interface.Interface_MSG_Intervalled
Interface_MSG_IsKey = _Interface.Interface_MSG_IsKey
Interface_MSG_NDate = _Interface.Interface_MSG_NDate
Interface_MSG_Print = _Interface.Interface_MSG_Print
Interface_MSG_Read = _Interface.Interface_MSG_Read
Interface_MSG_Record = _Interface.Interface_MSG_Record
Interface_MSG_SetMode = _Interface.Interface_MSG_SetMode
Interface_MSG_SetTrace = _Interface.Interface_MSG_SetTrace
Interface_MSG_TDate = _Interface.Interface_MSG_TDate
Interface_MSG_Translated = _Interface.Interface_MSG_Translated
Interface_MSG_Write = _Interface.Interface_MSG_Write

class Interface_MapAsciiStringHasher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HashCode = _swig_new_static_method(_Interface.Interface_MapAsciiStringHasher_HashCode)
    IsEqual = _swig_new_static_method(_Interface.Interface_MapAsciiStringHasher_IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        _Interface.Interface_MapAsciiStringHasher_swiginit(self, _Interface.new_Interface_MapAsciiStringHasher())
    __swig_destroy__ = _Interface.delete_Interface_MapAsciiStringHasher

# Register Interface_MapAsciiStringHasher in _Interface:
_Interface.Interface_MapAsciiStringHasher_swigregister(Interface_MapAsciiStringHasher)
Interface_MapAsciiStringHasher_HashCode = _Interface.Interface_MapAsciiStringHasher_HashCode
Interface_MapAsciiStringHasher_IsEqual = _Interface.Interface_MapAsciiStringHasher_IsEqual

class Interface_NodeOfGeneralLib(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddNode = _swig_new_instance_method(_Interface.Interface_NodeOfGeneralLib_AddNode)

    def __init__(self, *args):
        r"""
        * Creates an empty Node, with no Next
        	:rtype: None
        """
        _Interface.Interface_NodeOfGeneralLib_swiginit(self, _Interface.new_Interface_NodeOfGeneralLib(*args))
    Module = _swig_new_instance_method(_Interface.Interface_NodeOfGeneralLib_Module)
    Next = _swig_new_instance_method(_Interface.Interface_NodeOfGeneralLib_Next)
    Protocol = _swig_new_instance_method(_Interface.Interface_NodeOfGeneralLib_Protocol)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_NodeOfGeneralLib_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_NodeOfGeneralLib

# Register Interface_NodeOfGeneralLib in _Interface:
_Interface.Interface_NodeOfGeneralLib_swigregister(Interface_NodeOfGeneralLib)

class Interface_NodeOfReaderLib(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddNode = _swig_new_instance_method(_Interface.Interface_NodeOfReaderLib_AddNode)

    def __init__(self, *args):
        r"""
        * Creates an empty Node, with no Next
        	:rtype: None
        """
        _Interface.Interface_NodeOfReaderLib_swiginit(self, _Interface.new_Interface_NodeOfReaderLib(*args))
    Module = _swig_new_instance_method(_Interface.Interface_NodeOfReaderLib_Module)
    Next = _swig_new_instance_method(_Interface.Interface_NodeOfReaderLib_Next)
    Protocol = _swig_new_instance_method(_Interface.Interface_NodeOfReaderLib_Protocol)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_NodeOfReaderLib_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_NodeOfReaderLib

# Register Interface_NodeOfReaderLib in _Interface:
_Interface.Interface_NodeOfReaderLib_swigregister(Interface_NodeOfReaderLib)

class Interface_ParamList(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ChangeValue = _swig_new_instance_method(_Interface.Interface_ParamList_ChangeValue)
    Clear = _swig_new_instance_method(_Interface.Interface_ParamList_Clear)

    def __init__(self, *args):
        r"""
        * Creates an vector with size of memmory blok equal to theIncrement
        	:param theIncrement: default value is 256
        	:type theIncrement: int
        	:rtype: None
        """
        _Interface.Interface_ParamList_swiginit(self, _Interface.new_Interface_ParamList(*args))
    Length = _swig_new_instance_method(_Interface.Interface_ParamList_Length)
    Lower = _swig_new_instance_method(_Interface.Interface_ParamList_Lower)
    SetValue = _swig_new_instance_method(_Interface.Interface_ParamList_SetValue)
    Upper = _swig_new_instance_method(_Interface.Interface_ParamList_Upper)
    Value = _swig_new_instance_method(_Interface.Interface_ParamList_Value)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_ParamList_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_ParamList

# Register Interface_ParamList in _Interface:
_Interface.Interface_ParamList_swigregister(Interface_ParamList)

class Interface_ParamSet(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Append = _swig_new_instance_method(_Interface.Interface_ParamSet_Append)
    ChangeParam = _swig_new_instance_method(_Interface.Interface_ParamSet_ChangeParam)
    Destroy = _swig_new_instance_method(_Interface.Interface_ParamSet_Destroy)

    def __init__(self, *args):
        r"""
        * Creates an empty ParamSet, beginning at number 'nst' and of initial reservation 'nres' : the 'nres' first parameters which follow 'ndeb' (included) will be put in an Array (a ParamList). The remainders are set in Next(s) ParamSet(s)
        	:param nres:
        	:type nres: int
        	:param nst: default value is 1
        	:type nst: int
        	:rtype: None
        """
        _Interface.Interface_ParamSet_swiginit(self, _Interface.new_Interface_ParamSet(*args))
    NbParams = _swig_new_instance_method(_Interface.Interface_ParamSet_NbParams)
    Param = _swig_new_instance_method(_Interface.Interface_ParamSet_Param)
    Params = _swig_new_instance_method(_Interface.Interface_ParamSet_Params)
    SetParam = _swig_new_instance_method(_Interface.Interface_ParamSet_SetParam)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_ParamSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_ParamSet

# Register Interface_ParamSet in _Interface:
_Interface.Interface_ParamSet_swigregister(Interface_ParamSet)

class Interface_Protocol(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Active = _swig_new_static_method(_Interface.Interface_Protocol_Active)
    CaseNumber = _swig_new_instance_method(_Interface.Interface_Protocol_CaseNumber)
    ClearActive = _swig_new_static_method(_Interface.Interface_Protocol_ClearActive)
    GlobalCheck = _swig_new_instance_method(_Interface.Interface_Protocol_GlobalCheck)
    IsDynamicType = _swig_new_instance_method(_Interface.Interface_Protocol_IsDynamicType)
    IsSuitableModel = _swig_new_instance_method(_Interface.Interface_Protocol_IsSuitableModel)
    IsUnknownEntity = _swig_new_instance_method(_Interface.Interface_Protocol_IsUnknownEntity)
    NbResources = _swig_new_instance_method(_Interface.Interface_Protocol_NbResources)
    NbTypes = _swig_new_instance_method(_Interface.Interface_Protocol_NbTypes)
    NewModel = _swig_new_instance_method(_Interface.Interface_Protocol_NewModel)
    Resource = _swig_new_instance_method(_Interface.Interface_Protocol_Resource)
    SetActive = _swig_new_static_method(_Interface.Interface_Protocol_SetActive)
    Type = _swig_new_instance_method(_Interface.Interface_Protocol_Type)
    TypeNumber = _swig_new_instance_method(_Interface.Interface_Protocol_TypeNumber)
    UnknownEntity = _swig_new_instance_method(_Interface.Interface_Protocol_UnknownEntity)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_Protocol_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_Protocol

# Register Interface_Protocol in _Interface:
_Interface.Interface_Protocol_swigregister(Interface_Protocol)
Interface_Protocol_Active = _Interface.Interface_Protocol_Active
Interface_Protocol_ClearActive = _Interface.Interface_Protocol_ClearActive
Interface_Protocol_SetActive = _Interface.Interface_Protocol_SetActive

class Interface_ReaderLib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddProtocol = _swig_new_instance_method(_Interface.Interface_ReaderLib_AddProtocol)
    Clear = _swig_new_instance_method(_Interface.Interface_ReaderLib_Clear)

    def __init__(self, *args):
        r"""
        * Creates a Library which complies with a Protocol, that is : Same class (criterium IsInstance) This creation gets the Modules from the global set, those which are bound to the given Protocol and its Resources
        	:param aprotocol:
        	:type aprotocol: Interface_Protocol
        	:rtype: None* Creates an empty Library : it will later by filled by method AddProtocol
        	:rtype: None
        """
        _Interface.Interface_ReaderLib_swiginit(self, _Interface.new_Interface_ReaderLib(*args))
    Module = _swig_new_instance_method(_Interface.Interface_ReaderLib_Module)
    More = _swig_new_instance_method(_Interface.Interface_ReaderLib_More)
    Next = _swig_new_instance_method(_Interface.Interface_ReaderLib_Next)
    Protocol = _swig_new_instance_method(_Interface.Interface_ReaderLib_Protocol)
    Select = _swig_new_instance_method(_Interface.Interface_ReaderLib_Select)
    SetComplete = _swig_new_instance_method(_Interface.Interface_ReaderLib_SetComplete)
    SetGlobal = _swig_new_static_method(_Interface.Interface_ReaderLib_SetGlobal)
    Start = _swig_new_instance_method(_Interface.Interface_ReaderLib_Start)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_ReaderLib

# Register Interface_ReaderLib in _Interface:
_Interface.Interface_ReaderLib_swigregister(Interface_ReaderLib)
Interface_ReaderLib_SetGlobal = _Interface.Interface_ReaderLib_SetGlobal

class Interface_ReaderModule(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    CaseNum = _swig_new_instance_method(_Interface.Interface_ReaderModule_CaseNum)
    NewRead = _swig_new_instance_method(_Interface.Interface_ReaderModule_NewRead)
    Read = _swig_new_instance_method(_Interface.Interface_ReaderModule_Read)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_ReaderModule_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_ReaderModule

# Register Interface_ReaderModule in _Interface:
_Interface.Interface_ReaderModule_swigregister(Interface_ReaderModule)

class Interface_ReportEntity(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CCheck = _swig_new_instance_method(_Interface.Interface_ReportEntity_CCheck)
    Check = _swig_new_instance_method(_Interface.Interface_ReportEntity_Check)
    Concerned = _swig_new_instance_method(_Interface.Interface_ReportEntity_Concerned)
    Content = _swig_new_instance_method(_Interface.Interface_ReportEntity_Content)
    HasContent = _swig_new_instance_method(_Interface.Interface_ReportEntity_HasContent)
    HasNewContent = _swig_new_instance_method(_Interface.Interface_ReportEntity_HasNewContent)

    def __init__(self, *args):
        r"""
        * Creates a ReportEntity for an Unknown Entity : Check is empty, and Concerned equates Content (i.e. the Unknown Entity)
        	:param unknown:
        	:type unknown: Standard_Transient
        	:rtype: None* Creates a ReportEntity with its features : - <acheck> is the Check to be memorised - <concerned> is the Entity to which the Check is bound Later, a Content can be set : it is required for an Error
        	:param acheck:
        	:type acheck: Interface_Check
        	:param concerned:
        	:type concerned: Standard_Transient
        	:rtype: None
        """
        _Interface.Interface_ReportEntity_swiginit(self, _Interface.new_Interface_ReportEntity(*args))
    IsError = _swig_new_instance_method(_Interface.Interface_ReportEntity_IsError)
    IsUnknown = _swig_new_instance_method(_Interface.Interface_ReportEntity_IsUnknown)
    SetContent = _swig_new_instance_method(_Interface.Interface_ReportEntity_SetContent)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_ReportEntity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_ReportEntity

# Register Interface_ReportEntity in _Interface:
_Interface.Interface_ReportEntity_swigregister(Interface_ReportEntity)

class Interface_STAT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddPhase = _swig_new_instance_method(_Interface.Interface_STAT_AddPhase)
    AddStep = _swig_new_instance_method(_Interface.Interface_STAT_AddStep)
    Description = _swig_new_instance_method(_Interface.Interface_STAT_Description)
    End = _swig_new_static_method(_Interface.Interface_STAT_End)

    def __init__(self, *args):
        r"""
        * Creates a STAT form. At start, one default phase is defined, with one default step. Then, it suffises to start with a count of items (and cycles if several) then record items, to have a queryable report.
        	:param title: default value is 
        	:type title: char *
        	:rtype: None* used when starting
        	:param other:
        	:type other: Interface_STAT
        	:rtype: None
        """
        _Interface.Interface_STAT_swiginit(self, _Interface.new_Interface_STAT(*args))
    Internals = _swig_new_instance_method(_Interface.Interface_STAT_Internals)
    NextCycle = _swig_new_static_method(_Interface.Interface_STAT_NextCycle)
    NextItem = _swig_new_static_method(_Interface.Interface_STAT_NextItem)
    NextPhase = _swig_new_static_method(_Interface.Interface_STAT_NextPhase)
    NextStep = _swig_new_static_method(_Interface.Interface_STAT_NextStep)
    Percent = _swig_new_static_method(_Interface.Interface_STAT_Percent)
    Phase = _swig_new_instance_method(_Interface.Interface_STAT_Phase)
    SetPhase = _swig_new_static_method(_Interface.Interface_STAT_SetPhase)
    Start = _swig_new_instance_method(_Interface.Interface_STAT_Start)
    StartCount = _swig_new_static_method(_Interface.Interface_STAT_StartCount)
    Step = _swig_new_instance_method(_Interface.Interface_STAT_Step)
    Where = _swig_new_static_method(_Interface.Interface_STAT_Where)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_STAT

# Register Interface_STAT in _Interface:
_Interface.Interface_STAT_swigregister(Interface_STAT)
Interface_STAT_End = _Interface.Interface_STAT_End
Interface_STAT_NextCycle = _Interface.Interface_STAT_NextCycle
Interface_STAT_NextItem = _Interface.Interface_STAT_NextItem
Interface_STAT_NextPhase = _Interface.Interface_STAT_NextPhase
Interface_STAT_NextStep = _Interface.Interface_STAT_NextStep
Interface_STAT_Percent = _Interface.Interface_STAT_Percent
Interface_STAT_SetPhase = _Interface.Interface_STAT_SetPhase
Interface_STAT_StartCount = _Interface.Interface_STAT_StartCount
Interface_STAT_Where = _Interface.Interface_STAT_Where

class Interface_ShareFlags(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates a ShareFlags from a Model and builds required data (flags) by calling the General Service Library given as argument <lib>
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param lib:
        	:type lib: Interface_GeneralLib
        	:rtype: None* Same as above, but GeneralLib is detained by a GTool
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param gtool:
        	:type gtool: Interface_GTool
        	:rtype: None* Same as above, but GeneralLib is defined through a Protocol
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param protocol:
        	:type protocol: Interface_Protocol
        	:rtype: None* Same as above, but works with the GTool of the Model
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:rtype: None* Creates a ShareFlags by querying informations from a Graph (remark that Graph also has a method IsShared)
        	:param agraph:
        	:type agraph: Interface_Graph
        	:rtype: None
        """
        _Interface.Interface_ShareFlags_swiginit(self, _Interface.new_Interface_ShareFlags(*args))
    IsShared = _swig_new_instance_method(_Interface.Interface_ShareFlags_IsShared)
    Model = _swig_new_instance_method(_Interface.Interface_ShareFlags_Model)
    NbRoots = _swig_new_instance_method(_Interface.Interface_ShareFlags_NbRoots)
    Root = _swig_new_instance_method(_Interface.Interface_ShareFlags_Root)
    RootEntities = _swig_new_instance_method(_Interface.Interface_ShareFlags_RootEntities)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_ShareFlags

# Register Interface_ShareFlags in _Interface:
_Interface.Interface_ShareFlags_swigregister(Interface_ShareFlags)

class Interface_ShareTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    All = _swig_new_instance_method(_Interface.Interface_ShareTool_All)
    Graph = _swig_new_instance_method(_Interface.Interface_ShareTool_Graph)

    def __init__(self, *args):
        r"""
        * Creates a ShareTool from a Model and builds all required data, by calling the General Service Library and Modules (GeneralLib given as an argument)
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param lib:
        	:type lib: Interface_GeneralLib
        	:rtype: None* Same a above, but GeneralLib is detained by a GTool
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param gtool:
        	:type gtool: Interface_GTool
        	:rtype: None* Same a above, but GeneralLib is defined through a Protocol Protocol is used to build the working library
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param protocol:
        	:type protocol: Interface_Protocol
        	:rtype: None* Same as above, but works with the GTool of the Model
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:rtype: None* Creates a ShareTool from an already defined Graph Remark that the data of the Graph are copied
        	:param agraph:
        	:type agraph: Interface_Graph
        	:rtype: None* Completes the Graph by Adding Implied References. Hence, they are considered as Sharing References in all the other queries
        	:param ahgraph:
        	:type ahgraph: Interface_HGraph
        	:rtype: None
        """
        _Interface.Interface_ShareTool_swiginit(self, _Interface.new_Interface_ShareTool(*args))
    IsShared = _swig_new_instance_method(_Interface.Interface_ShareTool_IsShared)
    Model = _swig_new_instance_method(_Interface.Interface_ShareTool_Model)
    NbTypedSharings = _swig_new_instance_method(_Interface.Interface_ShareTool_NbTypedSharings)
    Print = _swig_new_instance_method(_Interface.Interface_ShareTool_Print)
    RootEntities = _swig_new_instance_method(_Interface.Interface_ShareTool_RootEntities)
    Shareds = _swig_new_instance_method(_Interface.Interface_ShareTool_Shareds)
    Sharings = _swig_new_instance_method(_Interface.Interface_ShareTool_Sharings)
    TypedSharing = _swig_new_instance_method(_Interface.Interface_ShareTool_TypedSharing)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_ShareTool

# Register Interface_ShareTool in _Interface:
_Interface.Interface_ShareTool_swigregister(Interface_ShareTool)

class Interface_SignLabel(OCC.Core.MoniTool.MoniTool_SignText):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""":rtype: None"""
        _Interface.Interface_SignLabel_swiginit(self, _Interface.new_Interface_SignLabel(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Interface_SignLabel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_SignLabel

# Register Interface_SignLabel in _Interface:
_Interface.Interface_SignLabel_swigregister(Interface_SignLabel)

class Interface_SignType(OCC.Core.MoniTool.MoniTool_SignText):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ClassName = _swig_new_static_method(_Interface.Interface_SignType_ClassName)
    Value = _swig_new_instance_method(_Interface.Interface_SignType_Value)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_SignType_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_SignType

# Register Interface_SignType in _Interface:
_Interface.Interface_SignType_swigregister(Interface_SignType)
Interface_SignType_ClassName = _Interface.Interface_SignType_ClassName

class Interface_TypedValue(OCC.Core.MoniTool.MoniTool_TypedValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates a TypedValue, with a name //! type gives the type of the parameter, default is free text Also available : Integer, Real, Enum, Entity (i.e. Object) More precise specifications, titles, can be given to the TypedValue once created //! init gives an initial value. If it is not given, the TypedValue begins as 'not set', its value is empty
        	:param name:
        	:type name: char *
        	:param type: default value is Interface_ParamText
        	:type type: Interface_ParamType
        	:param init: default value is 
        	:type init: char *
        	:rtype: None
        """
        _Interface.Interface_TypedValue_swiginit(self, _Interface.new_Interface_TypedValue(*args))
    ParamTypeToValueType = _swig_new_static_method(_Interface.Interface_TypedValue_ParamTypeToValueType)
    Type = _swig_new_instance_method(_Interface.Interface_TypedValue_Type)
    ValueTypeToParamType = _swig_new_static_method(_Interface.Interface_TypedValue_ValueTypeToParamType)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_TypedValue_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_TypedValue

# Register Interface_TypedValue in _Interface:
_Interface.Interface_TypedValue_swigregister(Interface_TypedValue)
Interface_TypedValue_ParamTypeToValueType = _Interface.Interface_TypedValue_ParamTypeToValueType
Interface_TypedValue_ValueTypeToParamType = _Interface.Interface_TypedValue_ValueTypeToParamType

class Interface_UndefinedContent(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddEntity = _swig_new_instance_method(_Interface.Interface_UndefinedContent_AddEntity)
    AddLiteral = _swig_new_instance_method(_Interface.Interface_UndefinedContent_AddLiteral)
    EntityList = _swig_new_instance_method(_Interface.Interface_UndefinedContent_EntityList)
    GetFromAnother = _swig_new_instance_method(_Interface.Interface_UndefinedContent_GetFromAnother)

    def __init__(self, *args):
        r"""
        * Defines an empty UndefinedContent
        	:rtype: None
        """
        _Interface.Interface_UndefinedContent_swiginit(self, _Interface.new_Interface_UndefinedContent(*args))
    IsParamEntity = _swig_new_instance_method(_Interface.Interface_UndefinedContent_IsParamEntity)
    NbLiterals = _swig_new_instance_method(_Interface.Interface_UndefinedContent_NbLiterals)
    NbParams = _swig_new_instance_method(_Interface.Interface_UndefinedContent_NbParams)
    ParamData = _swig_new_instance_method(_Interface.Interface_UndefinedContent_ParamData)
    ParamEntity = _swig_new_instance_method(_Interface.Interface_UndefinedContent_ParamEntity)
    ParamType = _swig_new_instance_method(_Interface.Interface_UndefinedContent_ParamType)
    ParamValue = _swig_new_instance_method(_Interface.Interface_UndefinedContent_ParamValue)
    RemoveParam = _swig_new_instance_method(_Interface.Interface_UndefinedContent_RemoveParam)
    Reservate = _swig_new_instance_method(_Interface.Interface_UndefinedContent_Reservate)
    SetEntity = _swig_new_instance_method(_Interface.Interface_UndefinedContent_SetEntity)
    SetLiteral = _swig_new_instance_method(_Interface.Interface_UndefinedContent_SetLiteral)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_UndefinedContent_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_UndefinedContent

# Register Interface_UndefinedContent in _Interface:
_Interface.Interface_UndefinedContent_swigregister(Interface_UndefinedContent)

class Interface_CopyMap(Interface_CopyControl):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates a CopyMap adapted to work from a Model
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:rtype: None
        """
        _Interface.Interface_CopyMap_swiginit(self, _Interface.new_Interface_CopyMap(*args))
    Model = _swig_new_instance_method(_Interface.Interface_CopyMap_Model)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_CopyMap_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_CopyMap

# Register Interface_CopyMap in _Interface:
_Interface.Interface_CopyMap_swigregister(Interface_CopyMap)

class Interface_GraphContent(Interface_EntityIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Begin = _swig_new_instance_method(_Interface.Interface_GraphContent_Begin)
    Evaluate = _swig_new_instance_method(_Interface.Interface_GraphContent_Evaluate)
    GetFromGraph = _swig_new_instance_method(_Interface.Interface_GraphContent_GetFromGraph)

    def __init__(self, *args):
        r"""
        * Creates an empty GraphContent, ready to be filled
        	:rtype: None* Creates with all entities designated by a Graph
        	:param agraph:
        	:type agraph: Interface_Graph
        	:rtype: None* Creates with entities having specific Status value in a Graph
        	:param agraph:
        	:type agraph: Interface_Graph
        	:param stat:
        	:type stat: int
        	:rtype: None* Creates an Iterator with Shared entities of an entity (equivalente to EntityIterator but with a Graph)
        	:param agraph:
        	:type agraph: Interface_Graph
        	:param ent:
        	:type ent: Standard_Transient
        	:rtype: None
        """
        _Interface.Interface_GraphContent_swiginit(self, _Interface.new_Interface_GraphContent(*args))
    Result = _swig_new_instance_method(_Interface.Interface_GraphContent_Result)

    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_GraphContent

# Register Interface_GraphContent in _Interface:
_Interface.Interface_GraphContent_swigregister(Interface_GraphContent)

class Interface_Static(Interface_TypedValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CDef = _swig_new_static_method(_Interface.Interface_Static_CDef)
    CVal = _swig_new_static_method(_Interface.Interface_Static_CVal)
    Family = _swig_new_instance_method(_Interface.Interface_Static_Family)
    IDef = _swig_new_static_method(_Interface.Interface_Static_IDef)
    IVal = _swig_new_static_method(_Interface.Interface_Static_IVal)
    Init = _swig_new_static_method(_Interface.Interface_Static_Init)

    def __init__(self, *args):
        r"""
        * Creates and records a Static, with a family and a name family can report to a name of ressource or to a system or internal definition. The name must be unique. //! type gives the type of the parameter, default is free text Also available : Integer, Real, Enum, Entity (i.e. Object) More precise specifications, titles, can be given to the Static once created //! init gives an initial value. If it is not given, the Static begin as 'not set', its value is empty
        	:param family:
        	:type family: char *
        	:param name:
        	:type name: char *
        	:param type: default value is Interface_ParamText
        	:type type: Interface_ParamType
        	:param init: default value is 
        	:type init: char *
        	:rtype: None* Creates a new Static with same definition as another one (value is copied, except for Entity : it remains null)
        	:param family:
        	:type family: char *
        	:param name:
        	:type name: char *
        	:param other:
        	:type other: Interface_Static
        	:rtype: None
        """
        _Interface.Interface_Static_swiginit(self, _Interface.new_Interface_Static(*args))
    IsPresent = _swig_new_static_method(_Interface.Interface_Static_IsPresent)
    IsSet = _swig_new_static_method(_Interface.Interface_Static_IsSet)
    IsUpdated = _swig_new_static_method(_Interface.Interface_Static_IsUpdated)
    Items = _swig_new_static_method(_Interface.Interface_Static_Items)
    PrintStatic = _swig_new_instance_method(_Interface.Interface_Static_PrintStatic)
    RVal = _swig_new_static_method(_Interface.Interface_Static_RVal)
    SetCVal = _swig_new_static_method(_Interface.Interface_Static_SetCVal)
    SetIVal = _swig_new_static_method(_Interface.Interface_Static_SetIVal)
    SetRVal = _swig_new_static_method(_Interface.Interface_Static_SetRVal)
    SetUptodate = _swig_new_instance_method(_Interface.Interface_Static_SetUptodate)
    SetWild = _swig_new_instance_method(_Interface.Interface_Static_SetWild)
    Standards = _swig_new_static_method(_Interface.Interface_Static_Standards)
    Static = _swig_new_static_method(_Interface.Interface_Static_Static)
    Update = _swig_new_static_method(_Interface.Interface_Static_Update)
    UpdatedStatus = _swig_new_instance_method(_Interface.Interface_Static_UpdatedStatus)
    Wild = _swig_new_instance_method(_Interface.Interface_Static_Wild)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_Static_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Interface.delete_Interface_Static

# Register Interface_Static in _Interface:
_Interface.Interface_Static_swigregister(Interface_Static)
Interface_Static_CDef = _Interface.Interface_Static_CDef
Interface_Static_CVal = _Interface.Interface_Static_CVal
Interface_Static_IDef = _Interface.Interface_Static_IDef
Interface_Static_IVal = _Interface.Interface_Static_IVal
Interface_Static_Init = _Interface.Interface_Static_Init
Interface_Static_IsPresent = _Interface.Interface_Static_IsPresent
Interface_Static_IsSet = _Interface.Interface_Static_IsSet
Interface_Static_IsUpdated = _Interface.Interface_Static_IsUpdated
Interface_Static_Items = _Interface.Interface_Static_Items
Interface_Static_RVal = _Interface.Interface_Static_RVal
Interface_Static_SetCVal = _Interface.Interface_Static_SetCVal
Interface_Static_SetIVal = _Interface.Interface_Static_SetIVal
Interface_Static_SetRVal = _Interface.Interface_Static_SetRVal
Interface_Static_Standards = _Interface.Interface_Static_Standards
Interface_Static_Static = _Interface.Interface_Static_Static
Interface_Static_Update = _Interface.Interface_Static_Update

class Interface_HArray1OfHAsciiString(Interface_Array1OfHAsciiString, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Interface.Interface_HArray1OfHAsciiString_swiginit(self, _Interface.new_Interface_HArray1OfHAsciiString(*args))
    Array1 = _swig_new_instance_method(_Interface.Interface_HArray1OfHAsciiString_Array1)
    ChangeArray1 = _swig_new_instance_method(_Interface.Interface_HArray1OfHAsciiString_ChangeArray1)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_HArray1OfHAsciiString_DownCast(t)

    __swig_destroy__ = _Interface.delete_Interface_HArray1OfHAsciiString

# Register Interface_HArray1OfHAsciiString in _Interface:
_Interface.Interface_HArray1OfHAsciiString_swigregister(Interface_HArray1OfHAsciiString)

class Interface_HSequenceOfCheck(Interface_SequenceOfCheck, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Interface.Interface_HSequenceOfCheck_swiginit(self, _Interface.new_Interface_HSequenceOfCheck(*args))
    Sequence = _swig_new_instance_method(_Interface.Interface_HSequenceOfCheck_Sequence)
    Append = _swig_new_instance_method(_Interface.Interface_HSequenceOfCheck_Append)
    ChangeSequence = _swig_new_instance_method(_Interface.Interface_HSequenceOfCheck_ChangeSequence)


    @staticmethod
    def DownCast(t):
      return Handle_Interface_HSequenceOfCheck_DownCast(t)

    __swig_destroy__ = _Interface.delete_Interface_HSequenceOfCheck

# Register Interface_HSequenceOfCheck in _Interface:
_Interface.Interface_HSequenceOfCheck_swigregister(Interface_HSequenceOfCheck)



