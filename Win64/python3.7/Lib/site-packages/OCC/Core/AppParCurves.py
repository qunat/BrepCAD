# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
AppParCurves module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_appparcurves.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _AppParCurves
else:
    import _AppParCurves

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _AppParCurves.SWIG_PyInstanceMethod_New
_swig_new_static_method = _AppParCurves.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AppParCurves.delete_SwigPyIterator
    value = _swig_new_instance_method(_AppParCurves.SwigPyIterator_value)
    incr = _swig_new_instance_method(_AppParCurves.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_AppParCurves.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_AppParCurves.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_AppParCurves.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_AppParCurves.SwigPyIterator_copy)
    next = _swig_new_instance_method(_AppParCurves.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_AppParCurves.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_AppParCurves.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_AppParCurves.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_AppParCurves.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_AppParCurves.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_AppParCurves.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_AppParCurves.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_AppParCurves.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_AppParCurves.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AppParCurves:
_AppParCurves.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.math
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.gp
import OCC.Core.TColgp
AppParCurves_NoConstraint = _AppParCurves.AppParCurves_NoConstraint
AppParCurves_PassPoint = _AppParCurves.AppParCurves_PassPoint
AppParCurves_TangencyPoint = _AppParCurves.AppParCurves_TangencyPoint
AppParCurves_CurvaturePoint = _AppParCurves.AppParCurves_CurvaturePoint
Handle_AppParCurves_HArray1OfMultiCurve_Create = _AppParCurves.Handle_AppParCurves_HArray1OfMultiCurve_Create
Handle_AppParCurves_HArray1OfMultiCurve_DownCast = _AppParCurves.Handle_AppParCurves_HArray1OfMultiCurve_DownCast
Handle_AppParCurves_HArray1OfMultiCurve_IsNull = _AppParCurves.Handle_AppParCurves_HArray1OfMultiCurve_IsNull
Handle_AppParCurves_HArray1OfConstraintCouple_Create = _AppParCurves.Handle_AppParCurves_HArray1OfConstraintCouple_Create
Handle_AppParCurves_HArray1OfConstraintCouple_DownCast = _AppParCurves.Handle_AppParCurves_HArray1OfConstraintCouple_DownCast
Handle_AppParCurves_HArray1OfConstraintCouple_IsNull = _AppParCurves.Handle_AppParCurves_HArray1OfConstraintCouple_IsNull
Handle_AppParCurves_HArray1OfMultiPoint_Create = _AppParCurves.Handle_AppParCurves_HArray1OfMultiPoint_Create
Handle_AppParCurves_HArray1OfMultiPoint_DownCast = _AppParCurves.Handle_AppParCurves_HArray1OfMultiPoint_DownCast
Handle_AppParCurves_HArray1OfMultiPoint_IsNull = _AppParCurves.Handle_AppParCurves_HArray1OfMultiPoint_IsNull
Handle_AppParCurves_HArray1OfMultiBSpCurve_Create = _AppParCurves.Handle_AppParCurves_HArray1OfMultiBSpCurve_Create
Handle_AppParCurves_HArray1OfMultiBSpCurve_DownCast = _AppParCurves.Handle_AppParCurves_HArray1OfMultiBSpCurve_DownCast
Handle_AppParCurves_HArray1OfMultiBSpCurve_IsNull = _AppParCurves.Handle_AppParCurves_HArray1OfMultiBSpCurve_IsNull
class AppParCurves_Array1OfMultiCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_begin)
    end = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_end)
    cbegin = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_cbegin)
    cend = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_cend)

    def __init__(self, *args):
        _AppParCurves.AppParCurves_Array1OfMultiCurve_swiginit(self, _AppParCurves.new_AppParCurves_Array1OfMultiCurve(*args))
    Init = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_Init)
    Size = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_Size)
    Length = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_Length)
    IsEmpty = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_IsEmpty)
    Lower = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_Lower)
    Upper = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_Upper)
    IsDeletable = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_IsDeletable)
    IsAllocated = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_IsAllocated)
    Assign = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_Assign)
    Move = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_Move)
    Set = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_Set)
    First = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_First)
    ChangeFirst = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_ChangeFirst)
    Last = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_Last)
    ChangeLast = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_ChangeLast)
    Value = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_Value)
    ChangeValue = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_ChangeValue)
    __call__ = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve___call__)
    SetValue = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_SetValue)
    Resize = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiCurve_Resize)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_Array1OfMultiCurve

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register AppParCurves_Array1OfMultiCurve in _AppParCurves:
_AppParCurves.AppParCurves_Array1OfMultiCurve_swigregister(AppParCurves_Array1OfMultiCurve)

class AppParCurves_Array1OfConstraintCouple(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_begin)
    end = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_end)
    cbegin = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_cbegin)
    cend = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_cend)

    def __init__(self, *args):
        _AppParCurves.AppParCurves_Array1OfConstraintCouple_swiginit(self, _AppParCurves.new_AppParCurves_Array1OfConstraintCouple(*args))
    Init = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Init)
    Size = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Size)
    Length = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Length)
    IsEmpty = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_IsEmpty)
    Lower = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Lower)
    Upper = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Upper)
    IsDeletable = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_IsDeletable)
    IsAllocated = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_IsAllocated)
    Assign = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Assign)
    Move = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Move)
    Set = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Set)
    First = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_First)
    ChangeFirst = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_ChangeFirst)
    Last = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Last)
    ChangeLast = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_ChangeLast)
    Value = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Value)
    ChangeValue = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_ChangeValue)
    __call__ = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple___call__)
    SetValue = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_SetValue)
    Resize = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfConstraintCouple_Resize)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_Array1OfConstraintCouple

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register AppParCurves_Array1OfConstraintCouple in _AppParCurves:
_AppParCurves.AppParCurves_Array1OfConstraintCouple_swigregister(AppParCurves_Array1OfConstraintCouple)

class AppParCurves_SequenceOfMultiCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_begin)
    end = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_end)
    cbegin = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_cbegin)
    cend = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_cend)

    def __init__(self, *args):
        _AppParCurves.AppParCurves_SequenceOfMultiCurve_swiginit(self, _AppParCurves.new_AppParCurves_SequenceOfMultiCurve(*args))
    Size = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Size)
    Length = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Length)
    Lower = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Lower)
    Upper = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Upper)
    IsEmpty = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_IsEmpty)
    Reverse = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Reverse)
    Exchange = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Exchange)
    delNode = _swig_new_static_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_delNode)
    Clear = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Clear)
    Assign = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Assign)
    Set = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Set)
    Remove = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Remove)
    Append = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Append)
    Prepend = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Prepend)
    InsertBefore = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_InsertBefore)
    InsertAfter = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_InsertAfter)
    Split = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Split)
    First = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_First)
    ChangeFirst = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_ChangeFirst)
    Last = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Last)
    ChangeLast = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_ChangeLast)
    Value = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_Value)
    ChangeValue = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_ChangeValue)
    __call__ = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve___call__)
    SetValue = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiCurve_SetValue)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_SequenceOfMultiCurve

# Register AppParCurves_SequenceOfMultiCurve in _AppParCurves:
_AppParCurves.AppParCurves_SequenceOfMultiCurve_swigregister(AppParCurves_SequenceOfMultiCurve)
AppParCurves_SequenceOfMultiCurve_delNode = _AppParCurves.AppParCurves_SequenceOfMultiCurve_delNode

class AppParCurves_SequenceOfMultiBSpCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_begin)
    end = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_end)
    cbegin = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_cbegin)
    cend = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_cend)

    def __init__(self, *args):
        _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_swiginit(self, _AppParCurves.new_AppParCurves_SequenceOfMultiBSpCurve(*args))
    Size = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Size)
    Length = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Length)
    Lower = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Lower)
    Upper = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Upper)
    IsEmpty = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_IsEmpty)
    Reverse = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Reverse)
    Exchange = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Exchange)
    delNode = _swig_new_static_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_delNode)
    Clear = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Clear)
    Assign = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Assign)
    Set = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Set)
    Remove = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Remove)
    Append = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Append)
    Prepend = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Prepend)
    InsertBefore = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_InsertBefore)
    InsertAfter = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_InsertAfter)
    Split = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Split)
    First = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_First)
    ChangeFirst = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_ChangeFirst)
    Last = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Last)
    ChangeLast = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_ChangeLast)
    Value = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Value)
    ChangeValue = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_ChangeValue)
    __call__ = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve___call__)
    SetValue = _swig_new_instance_method(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_SetValue)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_SequenceOfMultiBSpCurve

# Register AppParCurves_SequenceOfMultiBSpCurve in _AppParCurves:
_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_swigregister(AppParCurves_SequenceOfMultiBSpCurve)
AppParCurves_SequenceOfMultiBSpCurve_delNode = _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_delNode

class AppParCurves_Array1OfMultiBSpCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_begin)
    end = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_end)
    cbegin = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_cbegin)
    cend = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_cend)

    def __init__(self, *args):
        _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_swiginit(self, _AppParCurves.new_AppParCurves_Array1OfMultiBSpCurve(*args))
    Init = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Init)
    Size = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Size)
    Length = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Length)
    IsEmpty = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_IsEmpty)
    Lower = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Lower)
    Upper = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Upper)
    IsDeletable = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_IsDeletable)
    IsAllocated = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_IsAllocated)
    Assign = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Assign)
    Move = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Move)
    Set = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Set)
    First = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_First)
    ChangeFirst = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_ChangeFirst)
    Last = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Last)
    ChangeLast = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_ChangeLast)
    Value = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Value)
    ChangeValue = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_ChangeValue)
    __call__ = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve___call__)
    SetValue = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_SetValue)
    Resize = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Resize)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_Array1OfMultiBSpCurve

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register AppParCurves_Array1OfMultiBSpCurve in _AppParCurves:
_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_swigregister(AppParCurves_Array1OfMultiBSpCurve)

class AppParCurves_Array1OfMultiPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_begin)
    end = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_end)
    cbegin = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_cbegin)
    cend = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_cend)

    def __init__(self, *args):
        _AppParCurves.AppParCurves_Array1OfMultiPoint_swiginit(self, _AppParCurves.new_AppParCurves_Array1OfMultiPoint(*args))
    Init = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_Init)
    Size = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_Size)
    Length = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_Length)
    IsEmpty = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_IsEmpty)
    Lower = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_Lower)
    Upper = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_Upper)
    IsDeletable = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_IsDeletable)
    IsAllocated = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_IsAllocated)
    Assign = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_Assign)
    Move = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_Move)
    Set = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_Set)
    First = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_First)
    ChangeFirst = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_ChangeFirst)
    Last = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_Last)
    ChangeLast = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_ChangeLast)
    Value = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_Value)
    ChangeValue = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_ChangeValue)
    __call__ = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint___call__)
    SetValue = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_SetValue)
    Resize = _swig_new_instance_method(_AppParCurves.AppParCurves_Array1OfMultiPoint_Resize)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_Array1OfMultiPoint

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register AppParCurves_Array1OfMultiPoint in _AppParCurves:
_AppParCurves.AppParCurves_Array1OfMultiPoint_swigregister(AppParCurves_Array1OfMultiPoint)

class appparcurves(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Bernstein = _swig_new_static_method(_AppParCurves.appparcurves_Bernstein)
    BernsteinMatrix = _swig_new_static_method(_AppParCurves.appparcurves_BernsteinMatrix)
    SecondDerivativeBernstein = _swig_new_static_method(_AppParCurves.appparcurves_SecondDerivativeBernstein)
    SplineFunction = _swig_new_static_method(_AppParCurves.appparcurves_SplineFunction)

    __repr__ = _dumps_object


    def __init__(self):
        _AppParCurves.appparcurves_swiginit(self, _AppParCurves.new_appparcurves())
    __swig_destroy__ = _AppParCurves.delete_appparcurves

# Register appparcurves in _AppParCurves:
_AppParCurves.appparcurves_swigregister(appparcurves)
appparcurves_Bernstein = _AppParCurves.appparcurves_Bernstein
appparcurves_BernsteinMatrix = _AppParCurves.appparcurves_BernsteinMatrix
appparcurves_SecondDerivativeBernstein = _AppParCurves.appparcurves_SecondDerivativeBernstein
appparcurves_SplineFunction = _AppParCurves.appparcurves_SplineFunction

class AppParCurves_ConstraintCouple(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * returns an indefinite ConstraintCouple.
        	:rtype: None* Create a couple the object <Index> will have the constraint <Cons>.
        	:param TheIndex:
        	:type TheIndex: int
        	:param Cons:
        	:type Cons: AppParCurves_Constraint
        	:rtype: None
        """
        _AppParCurves.AppParCurves_ConstraintCouple_swiginit(self, _AppParCurves.new_AppParCurves_ConstraintCouple(*args))
    Constraint = _swig_new_instance_method(_AppParCurves.AppParCurves_ConstraintCouple_Constraint)
    Index = _swig_new_instance_method(_AppParCurves.AppParCurves_ConstraintCouple_Index)
    SetConstraint = _swig_new_instance_method(_AppParCurves.AppParCurves_ConstraintCouple_SetConstraint)
    SetIndex = _swig_new_instance_method(_AppParCurves.AppParCurves_ConstraintCouple_SetIndex)

    __repr__ = _dumps_object

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_ConstraintCouple

# Register AppParCurves_ConstraintCouple in _AppParCurves:
_AppParCurves.AppParCurves_ConstraintCouple_swigregister(AppParCurves_ConstraintCouple)

class AppParCurves_MultiCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * returns an indefinite MultiCurve.
        	:rtype: None* creates a MultiCurve, describing Bezier curves all containing the same number of MultiPoint. An exception is raised if Degree < 0.
        	:param NbPol:
        	:type NbPol: int
        	:rtype: None* creates a MultiCurve, describing Bezier curves all containing the same number of MultiPoint. Each MultiPoint must have NbCurves Poles.
        	:param tabMU:
        	:type tabMU: AppParCurves_Array1OfMultiPoint
        	:rtype: None
        """
        _AppParCurves.AppParCurves_MultiCurve_swiginit(self, _AppParCurves.new_AppParCurves_MultiCurve(*args))
    Curve = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiCurve_Curve)
    D1 = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiCurve_D1)
    D2 = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiCurve_D2)
    Degree = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiCurve_Degree)
    Dimension = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiCurve_Dimension)
    DumpToString = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiCurve_DumpToString)
    NbCurves = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiCurve_NbCurves)
    NbPoles = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiCurve_NbPoles)
    Pole = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiCurve_Pole)
    Pole2d = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiCurve_Pole2d)
    SetNbPoles = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiCurve_SetNbPoles)
    SetValue = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiCurve_SetValue)
    Transform = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiCurve_Transform)
    Transform2d = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiCurve_Transform2d)
    Value = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiCurve_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_MultiCurve

# Register AppParCurves_MultiCurve in _AppParCurves:
_AppParCurves.AppParCurves_MultiCurve_swigregister(AppParCurves_MultiCurve)

class AppParCurves_MultiPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * creates an indefinite MultiPoint.
        	:rtype: None* constructs a set of Points used to approximate a Multiline. These Points can be of 2 or 3 dimensions. Points will be initialized with SetPoint and SetPoint2d. NbPoints is the number of 3D Points. NbPoints2d is the number of 2D Points.
        	:param NbPoints:
        	:type NbPoints: int
        	:param NbPoints2d:
        	:type NbPoints2d: int
        	:rtype: None* creates a MultiPoint only composed of 3D points.
        	:param tabP:
        	:type tabP: TColgp_Array1OfPnt
        	:rtype: None* creates a MultiPoint only composed of 2D points.
        	:param tabP2d:
        	:type tabP2d: TColgp_Array1OfPnt2d
        	:rtype: None* constructs a set of Points used to approximate a Multiline. These Points can be of 2 or 3 dimensions. Points will be initialized with SetPoint and SetPoint2d. NbPoints is the total number of Points.
        	:param tabP:
        	:type tabP: TColgp_Array1OfPnt
        	:param tabP2d:
        	:type tabP2d: TColgp_Array1OfPnt2d
        	:rtype: None
        """
        _AppParCurves.AppParCurves_MultiPoint_swiginit(self, _AppParCurves.new_AppParCurves_MultiPoint(*args))
    Dimension = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiPoint_Dimension)
    DumpToString = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiPoint_DumpToString)
    NbPoints = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiPoint_NbPoints)
    NbPoints2d = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiPoint_NbPoints2d)
    Point = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiPoint_Point)
    Point2d = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiPoint_Point2d)
    SetPoint = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiPoint_SetPoint)
    SetPoint2d = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiPoint_SetPoint2d)
    Transform = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiPoint_Transform)
    Transform2d = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiPoint_Transform2d)

    __repr__ = _dumps_object

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_MultiPoint

# Register AppParCurves_MultiPoint in _AppParCurves:
_AppParCurves.AppParCurves_MultiPoint_swigregister(AppParCurves_MultiPoint)

class AppParCurves_MultiBSpCurve(AppParCurves_MultiCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * returns an indefinite MultiBSpCurve.
        	:rtype: None* creates a MultiBSpCurve, describing BSpline curves all containing the same number of MultiPoint. An exception is raised if Degree < 0.
        	:param NbPol:
        	:type NbPol: int
        	:rtype: None* creates a MultiBSpCurve, describing BSpline curves all containing the same number of MultiPoint. Each MultiPoint must have NbCurves Poles.
        	:param tabMU:
        	:type tabMU: AppParCurves_Array1OfMultiPoint
        	:param Knots:
        	:type Knots: TColStd_Array1OfReal
        	:param Mults:
        	:type Mults: TColStd_Array1OfInteger
        	:rtype: None* creates a MultiBSpCurve, describing BSpline curves, taking control points from <SC>.
        	:param SC:
        	:type SC: AppParCurves_MultiCurve
        	:param Knots:
        	:type Knots: TColStd_Array1OfReal
        	:param Mults:
        	:type Mults: TColStd_Array1OfInteger
        	:rtype: None
        """
        _AppParCurves.AppParCurves_MultiBSpCurve_swiginit(self, _AppParCurves.new_AppParCurves_MultiBSpCurve(*args))
    D1 = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiBSpCurve_D1)
    D2 = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiBSpCurve_D2)
    DumpToString = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiBSpCurve_DumpToString)
    Knots = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiBSpCurve_Knots)
    Multiplicities = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiBSpCurve_Multiplicities)
    SetKnots = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiBSpCurve_SetKnots)
    SetMultiplicities = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiBSpCurve_SetMultiplicities)
    Value = _swig_new_instance_method(_AppParCurves.AppParCurves_MultiBSpCurve_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_MultiBSpCurve

# Register AppParCurves_MultiBSpCurve in _AppParCurves:
_AppParCurves.AppParCurves_MultiBSpCurve_swigregister(AppParCurves_MultiBSpCurve)

class AppParCurves_HArray1OfMultiCurve(AppParCurves_Array1OfMultiCurve, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AppParCurves.AppParCurves_HArray1OfMultiCurve_swiginit(self, _AppParCurves.new_AppParCurves_HArray1OfMultiCurve(*args))
    Array1 = _swig_new_instance_method(_AppParCurves.AppParCurves_HArray1OfMultiCurve_Array1)
    ChangeArray1 = _swig_new_instance_method(_AppParCurves.AppParCurves_HArray1OfMultiCurve_ChangeArray1)


    @staticmethod
    def DownCast(t):
      return Handle_AppParCurves_HArray1OfMultiCurve_DownCast(t)

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_HArray1OfMultiCurve

# Register AppParCurves_HArray1OfMultiCurve in _AppParCurves:
_AppParCurves.AppParCurves_HArray1OfMultiCurve_swigregister(AppParCurves_HArray1OfMultiCurve)

class AppParCurves_HArray1OfConstraintCouple(AppParCurves_Array1OfConstraintCouple, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AppParCurves.AppParCurves_HArray1OfConstraintCouple_swiginit(self, _AppParCurves.new_AppParCurves_HArray1OfConstraintCouple(*args))
    Array1 = _swig_new_instance_method(_AppParCurves.AppParCurves_HArray1OfConstraintCouple_Array1)
    ChangeArray1 = _swig_new_instance_method(_AppParCurves.AppParCurves_HArray1OfConstraintCouple_ChangeArray1)


    @staticmethod
    def DownCast(t):
      return Handle_AppParCurves_HArray1OfConstraintCouple_DownCast(t)

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_HArray1OfConstraintCouple

# Register AppParCurves_HArray1OfConstraintCouple in _AppParCurves:
_AppParCurves.AppParCurves_HArray1OfConstraintCouple_swigregister(AppParCurves_HArray1OfConstraintCouple)

class AppParCurves_HArray1OfMultiPoint(AppParCurves_Array1OfMultiPoint, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AppParCurves.AppParCurves_HArray1OfMultiPoint_swiginit(self, _AppParCurves.new_AppParCurves_HArray1OfMultiPoint(*args))
    Array1 = _swig_new_instance_method(_AppParCurves.AppParCurves_HArray1OfMultiPoint_Array1)
    ChangeArray1 = _swig_new_instance_method(_AppParCurves.AppParCurves_HArray1OfMultiPoint_ChangeArray1)


    @staticmethod
    def DownCast(t):
      return Handle_AppParCurves_HArray1OfMultiPoint_DownCast(t)

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_HArray1OfMultiPoint

# Register AppParCurves_HArray1OfMultiPoint in _AppParCurves:
_AppParCurves.AppParCurves_HArray1OfMultiPoint_swigregister(AppParCurves_HArray1OfMultiPoint)

class AppParCurves_HArray1OfMultiBSpCurve(AppParCurves_Array1OfMultiBSpCurve, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AppParCurves.AppParCurves_HArray1OfMultiBSpCurve_swiginit(self, _AppParCurves.new_AppParCurves_HArray1OfMultiBSpCurve(*args))
    Array1 = _swig_new_instance_method(_AppParCurves.AppParCurves_HArray1OfMultiBSpCurve_Array1)
    ChangeArray1 = _swig_new_instance_method(_AppParCurves.AppParCurves_HArray1OfMultiBSpCurve_ChangeArray1)


    @staticmethod
    def DownCast(t):
      return Handle_AppParCurves_HArray1OfMultiBSpCurve_DownCast(t)

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_HArray1OfMultiBSpCurve

# Register AppParCurves_HArray1OfMultiBSpCurve in _AppParCurves:
_AppParCurves.AppParCurves_HArray1OfMultiBSpCurve_swigregister(AppParCurves_HArray1OfMultiBSpCurve)



