# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepFill module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brepfill.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BRepFill
else:
    import _BRepFill

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _BRepFill.SWIG_PyInstanceMethod_New
_swig_new_static_method = _BRepFill.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepFill.delete_SwigPyIterator
    value = _swig_new_instance_method(_BRepFill.SwigPyIterator_value)
    incr = _swig_new_instance_method(_BRepFill.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_BRepFill.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_BRepFill.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_BRepFill.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_BRepFill.SwigPyIterator_copy)
    next = _swig_new_instance_method(_BRepFill.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_BRepFill.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_BRepFill.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_BRepFill.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_BRepFill.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_BRepFill.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_BRepFill.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_BRepFill.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_BRepFill.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_BRepFill.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BRepFill:
_BRepFill.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopTools
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.TCollection
import OCC.Core.MAT
import OCC.Core.TColStd
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2d
import OCC.Core.AppParCurves
import OCC.Core.math
import OCC.Core.GeomPlate
import OCC.Core.Adaptor3d
import OCC.Core.Adaptor2d
import OCC.Core.TColGeom2d
import OCC.Core.GeomLProp
import OCC.Core.Law
import OCC.Core.AdvApp2Var
import OCC.Core.AdvApprox
import OCC.Core.PLib
import OCC.Core.Plate
import OCC.Core.GeomFill
import OCC.Core.Convert
import OCC.Core.AppBlend
import OCC.Core.Approx
import OCC.Core.AppCont
import OCC.Core.TColGeom
import OCC.Core.BRepMAT2d
import OCC.Core.Bisector
import OCC.Core.IntRes2d
BRepFill_NoContact = _BRepFill.BRepFill_NoContact
BRepFill_Contact = _BRepFill.BRepFill_Contact
BRepFill_ContactOnBorder = _BRepFill.BRepFill_ContactOnBorder
BRepFill_Modified = _BRepFill.BRepFill_Modified
BRepFill_Right = _BRepFill.BRepFill_Right
BRepFill_Round = _BRepFill.BRepFill_Round
Handle_BRepFill_CurveConstraint_Create = _BRepFill.Handle_BRepFill_CurveConstraint_Create
Handle_BRepFill_CurveConstraint_DownCast = _BRepFill.Handle_BRepFill_CurveConstraint_DownCast
Handle_BRepFill_CurveConstraint_IsNull = _BRepFill.Handle_BRepFill_CurveConstraint_IsNull
Handle_BRepFill_LocationLaw_Create = _BRepFill.Handle_BRepFill_LocationLaw_Create
Handle_BRepFill_LocationLaw_DownCast = _BRepFill.Handle_BRepFill_LocationLaw_DownCast
Handle_BRepFill_LocationLaw_IsNull = _BRepFill.Handle_BRepFill_LocationLaw_IsNull
Handle_BRepFill_PipeShell_Create = _BRepFill.Handle_BRepFill_PipeShell_Create
Handle_BRepFill_PipeShell_DownCast = _BRepFill.Handle_BRepFill_PipeShell_DownCast
Handle_BRepFill_PipeShell_IsNull = _BRepFill.Handle_BRepFill_PipeShell_IsNull
Handle_BRepFill_SectionLaw_Create = _BRepFill.Handle_BRepFill_SectionLaw_Create
Handle_BRepFill_SectionLaw_DownCast = _BRepFill.Handle_BRepFill_SectionLaw_DownCast
Handle_BRepFill_SectionLaw_IsNull = _BRepFill.Handle_BRepFill_SectionLaw_IsNull
Handle_BRepFill_ACRLaw_Create = _BRepFill.Handle_BRepFill_ACRLaw_Create
Handle_BRepFill_ACRLaw_DownCast = _BRepFill.Handle_BRepFill_ACRLaw_DownCast
Handle_BRepFill_ACRLaw_IsNull = _BRepFill.Handle_BRepFill_ACRLaw_IsNull
Handle_BRepFill_Edge3DLaw_Create = _BRepFill.Handle_BRepFill_Edge3DLaw_Create
Handle_BRepFill_Edge3DLaw_DownCast = _BRepFill.Handle_BRepFill_Edge3DLaw_DownCast
Handle_BRepFill_Edge3DLaw_IsNull = _BRepFill.Handle_BRepFill_Edge3DLaw_IsNull
Handle_BRepFill_EdgeOnSurfLaw_Create = _BRepFill.Handle_BRepFill_EdgeOnSurfLaw_Create
Handle_BRepFill_EdgeOnSurfLaw_DownCast = _BRepFill.Handle_BRepFill_EdgeOnSurfLaw_DownCast
Handle_BRepFill_EdgeOnSurfLaw_IsNull = _BRepFill.Handle_BRepFill_EdgeOnSurfLaw_IsNull
Handle_BRepFill_NSections_Create = _BRepFill.Handle_BRepFill_NSections_Create
Handle_BRepFill_NSections_DownCast = _BRepFill.Handle_BRepFill_NSections_DownCast
Handle_BRepFill_NSections_IsNull = _BRepFill.Handle_BRepFill_NSections_IsNull
Handle_BRepFill_ShapeLaw_Create = _BRepFill.Handle_BRepFill_ShapeLaw_Create
Handle_BRepFill_ShapeLaw_DownCast = _BRepFill.Handle_BRepFill_ShapeLaw_DownCast
Handle_BRepFill_ShapeLaw_IsNull = _BRepFill.Handle_BRepFill_ShapeLaw_IsNull
Handle_BRepFill_DraftLaw_Create = _BRepFill.Handle_BRepFill_DraftLaw_Create
Handle_BRepFill_DraftLaw_DownCast = _BRepFill.Handle_BRepFill_DraftLaw_DownCast
Handle_BRepFill_DraftLaw_IsNull = _BRepFill.Handle_BRepFill_DraftLaw_IsNull
class BRepFill_IndexedDataMapOfOrientedShapeListOfShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_begin)
    end = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_end)
    cbegin = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_cbegin)
    cend = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_cend)

    def __init__(self, *args):
        _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_swiginit(self, _BRepFill.new_BRepFill_IndexedDataMapOfOrientedShapeListOfShape(*args))
    Exchange = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Exchange)
    Assign = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Assign)
    Set = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Set)
    ReSize = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ReSize)
    Add = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Add)
    Contains = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Contains)
    Substitute = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Substitute)
    Swap = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Swap)
    RemoveLast = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_RemoveLast)
    RemoveFromIndex = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_RemoveFromIndex)
    RemoveKey = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_RemoveKey)
    FindKey = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindKey)
    FindFromIndex = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindFromIndex)
    ChangeFromIndex = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ChangeFromIndex)
    __call__ = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape___call__)
    FindIndex = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindIndex)
    ChangeFromKey = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ChangeFromKey)
    Seek = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Seek)
    ChangeSeek = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ChangeSeek)
    FindFromKey = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindFromKey)
    Clear = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Clear)
    __swig_destroy__ = _BRepFill.delete_BRepFill_IndexedDataMapOfOrientedShapeListOfShape
    Size = _swig_new_instance_method(_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Size)

# Register BRepFill_IndexedDataMapOfOrientedShapeListOfShape in _BRepFill:
_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_swigregister(BRepFill_IndexedDataMapOfOrientedShapeListOfShape)

class BRepFill_DataMapOfShapeHArray2OfShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_begin)
    end = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_end)
    cbegin = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_cbegin)
    cend = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_cend)

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfShapeHArray2OfShape(*args))
    Exchange = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Exchange)
    Assign = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Assign)
    Set = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Set)
    ReSize = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_ReSize)
    Bind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Bind)
    Bound = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Bound)
    IsBound = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_IsBound)
    UnBind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_UnBind)
    Seek = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Seek)
    Find = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Find)
    ChangeSeek = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_ChangeFind)
    __call__ = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape___call__)
    Clear = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Clear)
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfShapeHArray2OfShape
    Size = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Size)

# Register BRepFill_DataMapOfShapeHArray2OfShape in _BRepFill:
_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_swigregister(BRepFill_DataMapOfShapeHArray2OfShape)

class BRepFill_ListOfOffsetWire(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_BRepFill.BRepFill_ListOfOffsetWire_begin)
    end = _swig_new_instance_method(_BRepFill.BRepFill_ListOfOffsetWire_end)
    cbegin = _swig_new_instance_method(_BRepFill.BRepFill_ListOfOffsetWire_cbegin)
    cend = _swig_new_instance_method(_BRepFill.BRepFill_ListOfOffsetWire_cend)

    def __init__(self, *args):
        _BRepFill.BRepFill_ListOfOffsetWire_swiginit(self, _BRepFill.new_BRepFill_ListOfOffsetWire(*args))
    Size = _swig_new_instance_method(_BRepFill.BRepFill_ListOfOffsetWire_Size)
    Assign = _swig_new_instance_method(_BRepFill.BRepFill_ListOfOffsetWire_Assign)
    Set = _swig_new_instance_method(_BRepFill.BRepFill_ListOfOffsetWire_Set)
    Clear = _swig_new_instance_method(_BRepFill.BRepFill_ListOfOffsetWire_Clear)
    First = _swig_new_instance_method(_BRepFill.BRepFill_ListOfOffsetWire_First)
    Last = _swig_new_instance_method(_BRepFill.BRepFill_ListOfOffsetWire_Last)
    Append = _swig_new_instance_method(_BRepFill.BRepFill_ListOfOffsetWire_Append)
    Prepend = _swig_new_instance_method(_BRepFill.BRepFill_ListOfOffsetWire_Prepend)
    RemoveFirst = _swig_new_instance_method(_BRepFill.BRepFill_ListOfOffsetWire_RemoveFirst)
    Remove = _swig_new_instance_method(_BRepFill.BRepFill_ListOfOffsetWire_Remove)
    InsertBefore = _swig_new_instance_method(_BRepFill.BRepFill_ListOfOffsetWire_InsertBefore)
    InsertAfter = _swig_new_instance_method(_BRepFill.BRepFill_ListOfOffsetWire_InsertAfter)
    Reverse = _swig_new_instance_method(_BRepFill.BRepFill_ListOfOffsetWire_Reverse)
    __swig_destroy__ = _BRepFill.delete_BRepFill_ListOfOffsetWire

# Register BRepFill_ListOfOffsetWire in _BRepFill:
_BRepFill.BRepFill_ListOfOffsetWire_swigregister(BRepFill_ListOfOffsetWire)

class BRepFill_ListIteratorOfListOfOffsetWire(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_swiginit(self, _BRepFill.new_BRepFill_ListIteratorOfListOfOffsetWire(*args))
    More = _swig_new_instance_method(_BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_More)
    Next = _swig_new_instance_method(_BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_Next)
    Value = _swig_new_instance_method(_BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_Value)
    ChangeValue = _swig_new_instance_method(_BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_ChangeValue)
    __swig_destroy__ = _BRepFill.delete_BRepFill_ListIteratorOfListOfOffsetWire

# Register BRepFill_ListIteratorOfListOfOffsetWire in _BRepFill:
_BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_swigregister(BRepFill_ListIteratorOfListOfOffsetWire)

class BRepFill_DataMapOfShapeSequenceOfPnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_begin)
    end = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_end)
    cbegin = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_cbegin)
    cend = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_cend)

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_swiginit(self, _BRepFill.new_BRepFill_DataMapOfShapeSequenceOfPnt(*args))
    Exchange = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Exchange)
    Assign = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Assign)
    Set = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Set)
    ReSize = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_ReSize)
    Bind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Bind)
    Bound = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Bound)
    IsBound = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_IsBound)
    UnBind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_UnBind)
    Seek = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Seek)
    Find = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Find)
    ChangeSeek = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_ChangeFind)
    __call__ = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt___call__)
    Clear = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Clear)
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfShapeSequenceOfPnt
    Size = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Size)

# Register BRepFill_DataMapOfShapeSequenceOfPnt in _BRepFill:
_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_swigregister(BRepFill_DataMapOfShapeSequenceOfPnt)

class BRepFill_DataMapOfNodeDataMapOfShapeShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_begin)
    end = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_end)
    cbegin = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_cbegin)
    cend = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_cend)

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfNodeDataMapOfShapeShape(*args))
    Exchange = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Exchange)
    Assign = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Assign)
    Set = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Set)
    ReSize = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_ReSize)
    Bind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Bind)
    Bound = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Bound)
    IsBound = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_IsBound)
    UnBind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_UnBind)
    Seek = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Seek)
    Find = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Find)
    ChangeSeek = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_ChangeFind)
    __call__ = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape___call__)
    Clear = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Clear)
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfNodeDataMapOfShapeShape
    Size = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Size)

# Register BRepFill_DataMapOfNodeDataMapOfShapeShape in _BRepFill:
_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_swigregister(BRepFill_DataMapOfNodeDataMapOfShapeShape)

class BRepFill_DataMapOfShapeDataMapOfShapeListOfShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_begin)
    end = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_end)
    cbegin = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_cbegin)
    cend = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_cend)

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfShapeDataMapOfShapeListOfShape(*args))
    Exchange = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Exchange)
    Assign = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Assign)
    Set = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Set)
    ReSize = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_ReSize)
    Bind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Bind)
    Bound = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Bound)
    IsBound = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_IsBound)
    UnBind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_UnBind)
    Seek = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Seek)
    Find = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Find)
    ChangeSeek = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_ChangeFind)
    __call__ = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape___call__)
    Clear = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Clear)
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfShapeDataMapOfShapeListOfShape
    Size = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Size)

# Register BRepFill_DataMapOfShapeDataMapOfShapeListOfShape in _BRepFill:
_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_swigregister(BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)

class BRepFill_SequenceOfSection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_begin)
    end = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_end)
    cbegin = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_cbegin)
    cend = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_cend)

    def __init__(self, *args):
        _BRepFill.BRepFill_SequenceOfSection_swiginit(self, _BRepFill.new_BRepFill_SequenceOfSection(*args))
    Size = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_Size)
    Length = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_Length)
    Lower = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_Lower)
    Upper = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_Upper)
    IsEmpty = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_IsEmpty)
    Reverse = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_Reverse)
    Exchange = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_Exchange)
    delNode = _swig_new_static_method(_BRepFill.BRepFill_SequenceOfSection_delNode)
    Clear = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_Clear)
    Assign = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_Assign)
    Set = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_Set)
    Remove = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_Remove)
    Append = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_Append)
    Prepend = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_Prepend)
    InsertBefore = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_InsertBefore)
    InsertAfter = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_InsertAfter)
    Split = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_Split)
    First = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_First)
    ChangeFirst = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_ChangeFirst)
    Last = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_Last)
    ChangeLast = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_ChangeLast)
    Value = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_Value)
    ChangeValue = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_ChangeValue)
    __call__ = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection___call__)
    SetValue = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfSection_SetValue)
    __swig_destroy__ = _BRepFill.delete_BRepFill_SequenceOfSection

# Register BRepFill_SequenceOfSection in _BRepFill:
_BRepFill.BRepFill_SequenceOfSection_swigregister(BRepFill_SequenceOfSection)
BRepFill_SequenceOfSection_delNode = _BRepFill.BRepFill_SequenceOfSection_delNode

class BRepFill_DataMapOfOrientedShapeListOfShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_begin)
    end = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_end)
    cbegin = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_cbegin)
    cend = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_cend)

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfOrientedShapeListOfShape(*args))
    Exchange = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Exchange)
    Assign = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Assign)
    Set = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Set)
    ReSize = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_ReSize)
    Bind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Bind)
    Bound = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Bound)
    IsBound = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_IsBound)
    UnBind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_UnBind)
    Seek = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Seek)
    Find = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Find)
    ChangeSeek = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_ChangeFind)
    __call__ = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape___call__)
    Clear = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Clear)
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfOrientedShapeListOfShape
    Size = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Size)

# Register BRepFill_DataMapOfOrientedShapeListOfShape in _BRepFill:
_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_swigregister(BRepFill_DataMapOfOrientedShapeListOfShape)

class BRepFill_DataMapOfNodeShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeShape_begin)
    end = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeShape_end)
    cbegin = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeShape_cbegin)
    cend = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeShape_cend)

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfNodeShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfNodeShape(*args))
    Exchange = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeShape_Exchange)
    Assign = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeShape_Assign)
    Set = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeShape_Set)
    ReSize = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeShape_ReSize)
    Bind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeShape_Bind)
    Bound = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeShape_Bound)
    IsBound = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeShape_IsBound)
    UnBind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeShape_UnBind)
    Seek = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeShape_Seek)
    Find = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeShape_Find)
    ChangeSeek = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeShape_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeShape_ChangeFind)
    __call__ = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeShape___call__)
    Clear = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeShape_Clear)
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfNodeShape
    Size = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfNodeShape_Size)

# Register BRepFill_DataMapOfNodeShape in _BRepFill:
_BRepFill.BRepFill_DataMapOfNodeShape_swigregister(BRepFill_DataMapOfNodeShape)

class BRepFill_SequenceOfFaceAndOrder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_begin)
    end = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_end)
    cbegin = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_cbegin)
    cend = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_cend)

    def __init__(self, *args):
        _BRepFill.BRepFill_SequenceOfFaceAndOrder_swiginit(self, _BRepFill.new_BRepFill_SequenceOfFaceAndOrder(*args))
    Size = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Size)
    Length = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Length)
    Lower = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Lower)
    Upper = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Upper)
    IsEmpty = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_IsEmpty)
    Reverse = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Reverse)
    Exchange = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Exchange)
    delNode = _swig_new_static_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_delNode)
    Clear = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Clear)
    Assign = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Assign)
    Set = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Set)
    Remove = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Remove)
    Append = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Append)
    Prepend = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Prepend)
    InsertBefore = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_InsertBefore)
    InsertAfter = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_InsertAfter)
    Split = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Split)
    First = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_First)
    ChangeFirst = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_ChangeFirst)
    Last = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Last)
    ChangeLast = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_ChangeLast)
    Value = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_Value)
    ChangeValue = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_ChangeValue)
    __call__ = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder___call__)
    SetValue = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfFaceAndOrder_SetValue)
    __swig_destroy__ = _BRepFill.delete_BRepFill_SequenceOfFaceAndOrder

# Register BRepFill_SequenceOfFaceAndOrder in _BRepFill:
_BRepFill.BRepFill_SequenceOfFaceAndOrder_swigregister(BRepFill_SequenceOfFaceAndOrder)
BRepFill_SequenceOfFaceAndOrder_delNode = _BRepFill.BRepFill_SequenceOfFaceAndOrder_delNode

class BRepFill_DataMapOfShapeSequenceOfReal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_begin)
    end = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_end)
    cbegin = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_cbegin)
    cend = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_cend)

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_swiginit(self, _BRepFill.new_BRepFill_DataMapOfShapeSequenceOfReal(*args))
    Exchange = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Exchange)
    Assign = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Assign)
    Set = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Set)
    ReSize = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_ReSize)
    Bind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Bind)
    Bound = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Bound)
    IsBound = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_IsBound)
    UnBind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_UnBind)
    Seek = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Seek)
    Find = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Find)
    ChangeSeek = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_ChangeFind)
    __call__ = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal___call__)
    Clear = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Clear)
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfShapeSequenceOfReal
    Size = _swig_new_instance_method(_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Size)

# Register BRepFill_DataMapOfShapeSequenceOfReal in _BRepFill:
_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_swigregister(BRepFill_DataMapOfShapeSequenceOfReal)

class BRepFill_SequenceOfEdgeFaceAndOrder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_begin)
    end = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_end)
    cbegin = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_cbegin)
    cend = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_cend)

    def __init__(self, *args):
        _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_swiginit(self, _BRepFill.new_BRepFill_SequenceOfEdgeFaceAndOrder(*args))
    Size = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Size)
    Length = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Length)
    Lower = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Lower)
    Upper = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Upper)
    IsEmpty = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_IsEmpty)
    Reverse = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Reverse)
    Exchange = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Exchange)
    delNode = _swig_new_static_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_delNode)
    Clear = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Clear)
    Assign = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Assign)
    Set = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Set)
    Remove = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Remove)
    Append = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Append)
    Prepend = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Prepend)
    InsertBefore = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_InsertBefore)
    InsertAfter = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_InsertAfter)
    Split = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Split)
    First = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_First)
    ChangeFirst = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_ChangeFirst)
    Last = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Last)
    ChangeLast = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_ChangeLast)
    Value = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Value)
    ChangeValue = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_ChangeValue)
    __call__ = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder___call__)
    SetValue = _swig_new_instance_method(_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_SetValue)
    __swig_destroy__ = _BRepFill.delete_BRepFill_SequenceOfEdgeFaceAndOrder

# Register BRepFill_SequenceOfEdgeFaceAndOrder in _BRepFill:
_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_swigregister(BRepFill_SequenceOfEdgeFaceAndOrder)
BRepFill_SequenceOfEdgeFaceAndOrder_delNode = _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_delNode

class brepfill(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Axe = _swig_new_static_method(_BRepFill.brepfill_Axe)
    ComputeACR = _swig_new_static_method(_BRepFill.brepfill_ComputeACR)
    Face = _swig_new_static_method(_BRepFill.brepfill_Face)
    InsertACR = _swig_new_static_method(_BRepFill.brepfill_InsertACR)
    Shell = _swig_new_static_method(_BRepFill.brepfill_Shell)

    __repr__ = _dumps_object


    def __init__(self):
        _BRepFill.brepfill_swiginit(self, _BRepFill.new_brepfill())
    __swig_destroy__ = _BRepFill.delete_brepfill

# Register brepfill in _BRepFill:
_BRepFill.brepfill_swigregister(brepfill)
brepfill_Axe = _BRepFill.brepfill_Axe
brepfill_ComputeACR = _BRepFill.brepfill_ComputeACR
brepfill_Face = _BRepFill.brepfill_Face
brepfill_InsertACR = _BRepFill.brepfill_InsertACR
brepfill_Shell = _BRepFill.brepfill_Shell

class BRepFill_AdvancedEvolved(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructor
        	:rtype: None
        """
        _BRepFill.BRepFill_AdvancedEvolved_swiginit(self, _BRepFill.new_BRepFill_AdvancedEvolved(*args))
    IsDone = _swig_new_instance_method(_BRepFill.BRepFill_AdvancedEvolved_IsDone)
    Perform = _swig_new_instance_method(_BRepFill.BRepFill_AdvancedEvolved_Perform)
    SetParallelMode = _swig_new_instance_method(_BRepFill.BRepFill_AdvancedEvolved_SetParallelMode)
    SetTemporaryDirectory = _swig_new_instance_method(_BRepFill.BRepFill_AdvancedEvolved_SetTemporaryDirectory)
    Shape = _swig_new_instance_method(_BRepFill.BRepFill_AdvancedEvolved_Shape)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_AdvancedEvolved

# Register BRepFill_AdvancedEvolved in _BRepFill:
_BRepFill.BRepFill_AdvancedEvolved_swigregister(BRepFill_AdvancedEvolved)

class BRepFill_ApproxSeewing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param ML:
        	:type ML: BRepFill_MultiLine
        	:rtype: None
        """
        _BRepFill.BRepFill_ApproxSeewing_swiginit(self, _BRepFill.new_BRepFill_ApproxSeewing(*args))
    Curve = _swig_new_instance_method(_BRepFill.BRepFill_ApproxSeewing_Curve)
    CurveOnF1 = _swig_new_instance_method(_BRepFill.BRepFill_ApproxSeewing_CurveOnF1)
    CurveOnF2 = _swig_new_instance_method(_BRepFill.BRepFill_ApproxSeewing_CurveOnF2)
    IsDone = _swig_new_instance_method(_BRepFill.BRepFill_ApproxSeewing_IsDone)
    Perform = _swig_new_instance_method(_BRepFill.BRepFill_ApproxSeewing_Perform)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_ApproxSeewing

# Register BRepFill_ApproxSeewing in _BRepFill:
_BRepFill.BRepFill_ApproxSeewing_swigregister(BRepFill_ApproxSeewing)

class BRepFill_CompatibleWires(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param Sections:
        	:type Sections: TopTools_SequenceOfShape
        	:rtype: None
        """
        _BRepFill.BRepFill_CompatibleWires_swiginit(self, _BRepFill.new_BRepFill_CompatibleWires(*args))
    Generated = _swig_new_instance_method(_BRepFill.BRepFill_CompatibleWires_Generated)
    GeneratedShapes = _swig_new_instance_method(_BRepFill.BRepFill_CompatibleWires_GeneratedShapes)
    Init = _swig_new_instance_method(_BRepFill.BRepFill_CompatibleWires_Init)
    IsDegeneratedFirstSection = _swig_new_instance_method(_BRepFill.BRepFill_CompatibleWires_IsDegeneratedFirstSection)
    IsDegeneratedLastSection = _swig_new_instance_method(_BRepFill.BRepFill_CompatibleWires_IsDegeneratedLastSection)
    IsDone = _swig_new_instance_method(_BRepFill.BRepFill_CompatibleWires_IsDone)
    Perform = _swig_new_instance_method(_BRepFill.BRepFill_CompatibleWires_Perform)
    SetPercent = _swig_new_instance_method(_BRepFill.BRepFill_CompatibleWires_SetPercent)
    Shape = _swig_new_instance_method(_BRepFill.BRepFill_CompatibleWires_Shape)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_CompatibleWires

# Register BRepFill_CompatibleWires in _BRepFill:
_BRepFill.BRepFill_CompatibleWires_swigregister(BRepFill_CompatibleWires)

class BRepFill_ComputeCLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * The MultiLine <Line> will be approximated until tolerances will be reached. The approximation will be done from degreemin to degreemax with a cutting if the corresponding boolean is True.
        	:param Line:
        	:type Line: BRepFill_MultiLine
        	:param degreemin: default value is 3
        	:type degreemin: int
        	:param degreemax: default value is 8
        	:type degreemax: int
        	:param Tolerance3d: default value is 1.0e-5
        	:type Tolerance3d: float
        	:param Tolerance2d: default value is 1.0e-5
        	:type Tolerance2d: float
        	:param cutting: default value is Standard_False
        	:type cutting: bool
        	:param FirstC: default value is AppParCurves_TangencyPoint
        	:type FirstC: AppParCurves_Constraint
        	:param LastC: default value is AppParCurves_TangencyPoint
        	:type LastC: AppParCurves_Constraint
        	:rtype: None* Initializes the fields of the algorithm.
        	:param degreemin: default value is 3
        	:type degreemin: int
        	:param degreemax: default value is 8
        	:type degreemax: int
        	:param Tolerance3d: default value is 1.0e-05
        	:type Tolerance3d: float
        	:param Tolerance2d: default value is 1.0e-05
        	:type Tolerance2d: float
        	:param cutting: default value is Standard_False
        	:type cutting: bool
        	:param FirstC: default value is AppParCurves_TangencyPoint
        	:type FirstC: AppParCurves_Constraint
        	:param LastC: default value is AppParCurves_TangencyPoint
        	:type LastC: AppParCurves_Constraint
        	:rtype: None
        """
        _BRepFill.BRepFill_ComputeCLine_swiginit(self, _BRepFill.new_BRepFill_ComputeCLine(*args))
    Error = _swig_new_instance_method(_BRepFill.BRepFill_ComputeCLine_Error)
    IsAllApproximated = _swig_new_instance_method(_BRepFill.BRepFill_ComputeCLine_IsAllApproximated)
    IsToleranceReached = _swig_new_instance_method(_BRepFill.BRepFill_ComputeCLine_IsToleranceReached)
    NbMultiCurves = _swig_new_instance_method(_BRepFill.BRepFill_ComputeCLine_NbMultiCurves)
    Parameters = _swig_new_instance_method(_BRepFill.BRepFill_ComputeCLine_Parameters)
    Perform = _swig_new_instance_method(_BRepFill.BRepFill_ComputeCLine_Perform)
    SetConstraints = _swig_new_instance_method(_BRepFill.BRepFill_ComputeCLine_SetConstraints)
    SetDegrees = _swig_new_instance_method(_BRepFill.BRepFill_ComputeCLine_SetDegrees)
    SetInvOrder = _swig_new_instance_method(_BRepFill.BRepFill_ComputeCLine_SetInvOrder)
    SetMaxSegments = _swig_new_instance_method(_BRepFill.BRepFill_ComputeCLine_SetMaxSegments)
    SetTolerances = _swig_new_instance_method(_BRepFill.BRepFill_ComputeCLine_SetTolerances)
    Value = _swig_new_instance_method(_BRepFill.BRepFill_ComputeCLine_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_ComputeCLine

# Register BRepFill_ComputeCLine in _BRepFill:
_BRepFill.BRepFill_ComputeCLine_swigregister(BRepFill_ComputeCLine)

class BRepFill_CurveConstraint(OCC.Core.GeomPlate.GeomPlate_CurveConstraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Create a constraint Order is the order of the constraint. The possible values for order are -1,0,1,2. Order i means constraints Gi Npt is the number of points associated with the constraint. TolDist is the maximum error to satisfy for G0 constraints TolAng is the maximum error to satisfy for G1 constraints TolCurv is the maximum error to satisfy for G2 constraints These errors can be replaced by laws of criterion.
        	:param Boundary:
        	:type Boundary: Adaptor3d_HCurveOnSurface
        	:param Order:
        	:type Order: int
        	:param NPt: default value is 10
        	:type NPt: int
        	:param TolDist: default value is 0.0001
        	:type TolDist: float
        	:param TolAng: default value is 0.01
        	:type TolAng: float
        	:param TolCurv: default value is 0.1
        	:type TolCurv: float
        	:rtype: None:param Boundary:
        	:type Boundary: Adaptor3d_HCurve
        	:param Tang:
        	:type Tang: int
        	:param NPt: default value is 10
        	:type NPt: int
        	:param TolDist: default value is 0.0001
        	:type TolDist: float
        	:rtype: None
        """
        _BRepFill.BRepFill_CurveConstraint_swiginit(self, _BRepFill.new_BRepFill_CurveConstraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_CurveConstraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_CurveConstraint

# Register BRepFill_CurveConstraint in _BRepFill:
_BRepFill.BRepFill_CurveConstraint_swigregister(BRepFill_CurveConstraint)

class BRepFill_Draft(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param Shape:
        	:type Shape: TopoDS_Shape
        	:param Dir:
        	:type Dir: gp_Dir
        	:param Angle:
        	:type Angle: float
        	:rtype: None
        """
        _BRepFill.BRepFill_Draft_swiginit(self, _BRepFill.new_BRepFill_Draft(*args))
    Generated = _swig_new_instance_method(_BRepFill.BRepFill_Draft_Generated)
    IsDone = _swig_new_instance_method(_BRepFill.BRepFill_Draft_IsDone)
    Perform = _swig_new_instance_method(_BRepFill.BRepFill_Draft_Perform)
    SetDraft = _swig_new_instance_method(_BRepFill.BRepFill_Draft_SetDraft)
    SetOptions = _swig_new_instance_method(_BRepFill.BRepFill_Draft_SetOptions)
    Shape = _swig_new_instance_method(_BRepFill.BRepFill_Draft_Shape)
    Shell = _swig_new_instance_method(_BRepFill.BRepFill_Draft_Shell)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Draft

# Register BRepFill_Draft in _BRepFill:
_BRepFill.BRepFill_Draft_swigregister(BRepFill_Draft)

class BRepFill_EdgeFaceAndOrder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param anEdge:
        	:type anEdge: TopoDS_Edge
        	:param aFace:
        	:type aFace: TopoDS_Face
        	:param anOrder:
        	:type anOrder: GeomAbs_Shape
        	:rtype: None
        """
        _BRepFill.BRepFill_EdgeFaceAndOrder_swiginit(self, _BRepFill.new_BRepFill_EdgeFaceAndOrder(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_EdgeFaceAndOrder

# Register BRepFill_EdgeFaceAndOrder in _BRepFill:
_BRepFill.BRepFill_EdgeFaceAndOrder_swigregister(BRepFill_EdgeFaceAndOrder)

class BRepFill_Evolved(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None* Creates an evolved shape by sweeping the <Profile> along the <Spine>. <AxeProf> is used to set the position of <Profile> along <Spine> as follows: <AxeProf> slides on the profile with direction colinear to the normal to <Spine>, and its <XDirection> mixed with the tangent to <Spine>.
        	:param Spine:
        	:type Spine: TopoDS_Wire
        	:param Profile:
        	:type Profile: TopoDS_Wire
        	:param AxeProf:
        	:type AxeProf: gp_Ax3
        	:param Join: default value is GeomAbs_Arc
        	:type Join: GeomAbs_JoinType
        	:param Solid: default value is Standard_False
        	:type Solid: bool
        	:rtype: None* Creates an evolved shape by sweeping the <Profile> along the <Spine>
        	:param Spine:
        	:type Spine: TopoDS_Face
        	:param Profile:
        	:type Profile: TopoDS_Wire
        	:param AxeProf:
        	:type AxeProf: gp_Ax3
        	:param Join: default value is GeomAbs_Arc
        	:type Join: GeomAbs_JoinType
        	:param Solid: default value is Standard_False
        	:type Solid: bool
        	:rtype: None
        """
        _BRepFill.BRepFill_Evolved_swiginit(self, _BRepFill.new_BRepFill_Evolved(*args))
    Bottom = _swig_new_instance_method(_BRepFill.BRepFill_Evolved_Bottom)
    GeneratedShapes = _swig_new_instance_method(_BRepFill.BRepFill_Evolved_GeneratedShapes)
    IsDone = _swig_new_instance_method(_BRepFill.BRepFill_Evolved_IsDone)
    JoinType = _swig_new_instance_method(_BRepFill.BRepFill_Evolved_JoinType)
    Perform = _swig_new_instance_method(_BRepFill.BRepFill_Evolved_Perform)
    Shape = _swig_new_instance_method(_BRepFill.BRepFill_Evolved_Shape)
    Top = _swig_new_instance_method(_BRepFill.BRepFill_Evolved_Top)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Evolved

# Register BRepFill_Evolved in _BRepFill:
_BRepFill.BRepFill_Evolved_swigregister(BRepFill_Evolved)

class BRepFill_FaceAndOrder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param aFace:
        	:type aFace: TopoDS_Face
        	:param anOrder:
        	:type anOrder: GeomAbs_Shape
        	:rtype: None
        """
        _BRepFill.BRepFill_FaceAndOrder_swiginit(self, _BRepFill.new_BRepFill_FaceAndOrder(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_FaceAndOrder

# Register BRepFill_FaceAndOrder in _BRepFill:
_BRepFill.BRepFill_FaceAndOrder_swigregister(BRepFill_FaceAndOrder)

class BRepFill_Filling(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_BRepFill.BRepFill_Filling_Add)

    def __init__(self, *args):
        r"""
        * Constructor
        	:param Degree: default value is 3
        	:type Degree: int
        	:param NbPtsOnCur: default value is 15
        	:type NbPtsOnCur: int
        	:param NbIter: default value is 2
        	:type NbIter: int
        	:param Anisotropie: default value is Standard_False
        	:type Anisotropie: bool
        	:param Tol2d: default value is 0.00001
        	:type Tol2d: float
        	:param Tol3d: default value is 0.0001
        	:type Tol3d: float
        	:param TolAng: default value is 0.01
        	:type TolAng: float
        	:param TolCurv: default value is 0.1
        	:type TolCurv: float
        	:param MaxDeg: default value is 8
        	:type MaxDeg: int
        	:param MaxSegments: default value is 9
        	:type MaxSegments: int
        	:rtype: None
        """
        _BRepFill.BRepFill_Filling_swiginit(self, _BRepFill.new_BRepFill_Filling(*args))
    Build = _swig_new_instance_method(_BRepFill.BRepFill_Filling_Build)
    Face = _swig_new_instance_method(_BRepFill.BRepFill_Filling_Face)
    G0Error = _swig_new_instance_method(_BRepFill.BRepFill_Filling_G0Error)
    G1Error = _swig_new_instance_method(_BRepFill.BRepFill_Filling_G1Error)
    G2Error = _swig_new_instance_method(_BRepFill.BRepFill_Filling_G2Error)
    Generated = _swig_new_instance_method(_BRepFill.BRepFill_Filling_Generated)
    IsDone = _swig_new_instance_method(_BRepFill.BRepFill_Filling_IsDone)
    LoadInitSurface = _swig_new_instance_method(_BRepFill.BRepFill_Filling_LoadInitSurface)
    SetApproxParam = _swig_new_instance_method(_BRepFill.BRepFill_Filling_SetApproxParam)
    SetConstrParam = _swig_new_instance_method(_BRepFill.BRepFill_Filling_SetConstrParam)
    SetResolParam = _swig_new_instance_method(_BRepFill.BRepFill_Filling_SetResolParam)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Filling

# Register BRepFill_Filling in _BRepFill:
_BRepFill.BRepFill_Filling_swigregister(BRepFill_Filling)

class BRepFill_Generator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddWire = _swig_new_instance_method(_BRepFill.BRepFill_Generator_AddWire)

    def __init__(self, *args):
        r""":rtype: None"""
        _BRepFill.BRepFill_Generator_swiginit(self, _BRepFill.new_BRepFill_Generator(*args))
    Generated = _swig_new_instance_method(_BRepFill.BRepFill_Generator_Generated)
    GeneratedShapes = _swig_new_instance_method(_BRepFill.BRepFill_Generator_GeneratedShapes)
    Perform = _swig_new_instance_method(_BRepFill.BRepFill_Generator_Perform)
    Shell = _swig_new_instance_method(_BRepFill.BRepFill_Generator_Shell)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Generator

# Register BRepFill_Generator in _BRepFill:
_BRepFill.BRepFill_Generator_swigregister(BRepFill_Generator)

class BRepFill_LocationLaw(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Abscissa = _swig_new_instance_method(_BRepFill.BRepFill_LocationLaw_Abscissa)
    CurvilinearBounds = _swig_new_instance_method(_BRepFill.BRepFill_LocationLaw_CurvilinearBounds)
    D0 = _swig_new_instance_method(_BRepFill.BRepFill_LocationLaw_D0)
    DeleteTransform = _swig_new_instance_method(_BRepFill.BRepFill_LocationLaw_DeleteTransform)
    Edge = _swig_new_instance_method(_BRepFill.BRepFill_LocationLaw_Edge)
    GetStatus = _swig_new_instance_method(_BRepFill.BRepFill_LocationLaw_GetStatus)
    Holes = _swig_new_instance_method(_BRepFill.BRepFill_LocationLaw_Holes)
    IsClosed = _swig_new_instance_method(_BRepFill.BRepFill_LocationLaw_IsClosed)
    IsG1 = _swig_new_instance_method(_BRepFill.BRepFill_LocationLaw_IsG1)
    law = _swig_new_instance_method(_BRepFill.BRepFill_LocationLaw_law)
    NbHoles = _swig_new_instance_method(_BRepFill.BRepFill_LocationLaw_NbHoles)
    NbLaw = _swig_new_instance_method(_BRepFill.BRepFill_LocationLaw_NbLaw)
    Parameter = _swig_new_instance_method(_BRepFill.BRepFill_LocationLaw_Parameter)
    PerformVertex = _swig_new_instance_method(_BRepFill.BRepFill_LocationLaw_PerformVertex)
    TransformInCompatibleLaw = _swig_new_instance_method(_BRepFill.BRepFill_LocationLaw_TransformInCompatibleLaw)
    TransformInG0Law = _swig_new_instance_method(_BRepFill.BRepFill_LocationLaw_TransformInG0Law)
    Vertex = _swig_new_instance_method(_BRepFill.BRepFill_LocationLaw_Vertex)
    Wire = _swig_new_instance_method(_BRepFill.BRepFill_LocationLaw_Wire)


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_LocationLaw_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        _BRepFill.BRepFill_LocationLaw_swiginit(self, _BRepFill.new_BRepFill_LocationLaw())
    __swig_destroy__ = _BRepFill.delete_BRepFill_LocationLaw

# Register BRepFill_LocationLaw in _BRepFill:
_BRepFill.BRepFill_LocationLaw_swigregister(BRepFill_LocationLaw)

class BRepFill_MultiLine(OCC.Core.AppCont.AppCont_Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param Face1:
        	:type Face1: TopoDS_Face
        	:param Face2:
        	:type Face2: TopoDS_Face
        	:param Edge1:
        	:type Edge1: TopoDS_Edge
        	:param Edge2:
        	:type Edge2: TopoDS_Edge
        	:param Inv1:
        	:type Inv1: bool
        	:param Inv2:
        	:type Inv2: bool
        	:param Bissec:
        	:type Bissec: Geom2d_Curve
        	:rtype: None
        """
        _BRepFill.BRepFill_MultiLine_swiginit(self, _BRepFill.new_BRepFill_MultiLine(*args))
    Continuity = _swig_new_instance_method(_BRepFill.BRepFill_MultiLine_Continuity)
    Curves = _swig_new_instance_method(_BRepFill.BRepFill_MultiLine_Curves)
    D1 = _swig_new_instance_method(_BRepFill.BRepFill_MultiLine_D1)
    FirstParameter = _swig_new_instance_method(_BRepFill.BRepFill_MultiLine_FirstParameter)
    IsParticularCase = _swig_new_instance_method(_BRepFill.BRepFill_MultiLine_IsParticularCase)
    LastParameter = _swig_new_instance_method(_BRepFill.BRepFill_MultiLine_LastParameter)
    Value = _swig_new_instance_method(_BRepFill.BRepFill_MultiLine_Value)
    Value3dOnF1OnF2 = _swig_new_instance_method(_BRepFill.BRepFill_MultiLine_Value3dOnF1OnF2)
    ValueOnF1 = _swig_new_instance_method(_BRepFill.BRepFill_MultiLine_ValueOnF1)
    ValueOnF2 = _swig_new_instance_method(_BRepFill.BRepFill_MultiLine_ValueOnF2)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_MultiLine

# Register BRepFill_MultiLine in _BRepFill:
_BRepFill.BRepFill_MultiLine_swigregister(BRepFill_MultiLine)

class BRepFill_OffsetAncestors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Ancestor = _swig_new_instance_method(_BRepFill.BRepFill_OffsetAncestors_Ancestor)

    def __init__(self, *args):
        r"""
        :rtype: None:param Paral:
        	:type Paral: BRepFill_OffsetWire
        	:rtype: None
        """
        _BRepFill.BRepFill_OffsetAncestors_swiginit(self, _BRepFill.new_BRepFill_OffsetAncestors(*args))
    HasAncestor = _swig_new_instance_method(_BRepFill.BRepFill_OffsetAncestors_HasAncestor)
    IsDone = _swig_new_instance_method(_BRepFill.BRepFill_OffsetAncestors_IsDone)
    Perform = _swig_new_instance_method(_BRepFill.BRepFill_OffsetAncestors_Perform)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_OffsetAncestors

# Register BRepFill_OffsetAncestors in _BRepFill:
_BRepFill.BRepFill_OffsetAncestors_swigregister(BRepFill_OffsetAncestors)

class BRepFill_OffsetWire(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param Spine:
        	:type Spine: TopoDS_Face
        	:param Join: default value is GeomAbs_Arc
        	:type Join: GeomAbs_JoinType
        	:param IsOpenResult: default value is Standard_False
        	:type IsOpenResult: bool
        	:rtype: None
        """
        _BRepFill.BRepFill_OffsetWire_swiginit(self, _BRepFill.new_BRepFill_OffsetWire(*args))
    GeneratedShapes = _swig_new_instance_method(_BRepFill.BRepFill_OffsetWire_GeneratedShapes)
    Init = _swig_new_instance_method(_BRepFill.BRepFill_OffsetWire_Init)
    IsDone = _swig_new_instance_method(_BRepFill.BRepFill_OffsetWire_IsDone)
    JoinType = _swig_new_instance_method(_BRepFill.BRepFill_OffsetWire_JoinType)
    Perform = _swig_new_instance_method(_BRepFill.BRepFill_OffsetWire_Perform)
    PerformWithBiLo = _swig_new_instance_method(_BRepFill.BRepFill_OffsetWire_PerformWithBiLo)
    Shape = _swig_new_instance_method(_BRepFill.BRepFill_OffsetWire_Shape)
    Spine = _swig_new_instance_method(_BRepFill.BRepFill_OffsetWire_Spine)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_OffsetWire

# Register BRepFill_OffsetWire in _BRepFill:
_BRepFill.BRepFill_OffsetWire_swigregister(BRepFill_OffsetWire)

class BRepFill_Pipe(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param Spine:
        	:type Spine: TopoDS_Wire
        	:param Profile:
        	:type Profile: TopoDS_Shape
        	:param aMode: default value is GeomFill_IsCorrectedFrenet
        	:type aMode: GeomFill_Trihedron
        	:param ForceApproxC1: default value is Standard_False
        	:type ForceApproxC1: bool
        	:param GeneratePartCase: default value is Standard_False
        	:type GeneratePartCase: bool
        	:rtype: None
        """
        _BRepFill.BRepFill_Pipe_swiginit(self, _BRepFill.new_BRepFill_Pipe(*args))
    Edge = _swig_new_instance_method(_BRepFill.BRepFill_Pipe_Edge)
    ErrorOnSurface = _swig_new_instance_method(_BRepFill.BRepFill_Pipe_ErrorOnSurface)
    Face = _swig_new_instance_method(_BRepFill.BRepFill_Pipe_Face)
    FirstShape = _swig_new_instance_method(_BRepFill.BRepFill_Pipe_FirstShape)
    Generated = _swig_new_instance_method(_BRepFill.BRepFill_Pipe_Generated)
    LastShape = _swig_new_instance_method(_BRepFill.BRepFill_Pipe_LastShape)
    Perform = _swig_new_instance_method(_BRepFill.BRepFill_Pipe_Perform)
    PipeLine = _swig_new_instance_method(_BRepFill.BRepFill_Pipe_PipeLine)
    Profile = _swig_new_instance_method(_BRepFill.BRepFill_Pipe_Profile)
    Section = _swig_new_instance_method(_BRepFill.BRepFill_Pipe_Section)
    Shape = _swig_new_instance_method(_BRepFill.BRepFill_Pipe_Shape)
    Spine = _swig_new_instance_method(_BRepFill.BRepFill_Pipe_Spine)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Pipe

# Register BRepFill_Pipe in _BRepFill:
_BRepFill.BRepFill_Pipe_swigregister(BRepFill_Pipe)

class BRepFill_PipeShell(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_Add)

    def __init__(self, *args):
        r"""
        * Set an sweep's mode If no mode are setted, the mode use in MakePipe is used
        	:param Spine:
        	:type Spine: TopoDS_Wire
        	:rtype: None
        """
        _BRepFill.BRepFill_PipeShell_swiginit(self, _BRepFill.new_BRepFill_PipeShell(*args))
    Build = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_Build)
    DeleteProfile = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_DeleteProfile)
    ErrorOnSurface = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_ErrorOnSurface)
    FirstShape = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_FirstShape)
    Generated = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_Generated)
    GetStatus = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_GetStatus)
    IsReady = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_IsReady)
    LastShape = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_LastShape)
    MakeSolid = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_MakeSolid)
    Profiles = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_Profiles)
    Set = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_Set)
    SetDiscrete = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_SetDiscrete)
    SetForceApproxC1 = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_SetForceApproxC1)
    SetLaw = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_SetLaw)
    SetMaxDegree = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_SetMaxDegree)
    SetMaxSegments = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_SetMaxSegments)
    SetTolerance = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_SetTolerance)
    SetTransition = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_SetTransition)
    Shape = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_Shape)
    Simulate = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_Simulate)
    Spine = _swig_new_instance_method(_BRepFill.BRepFill_PipeShell_Spine)


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_PipeShell_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_PipeShell

# Register BRepFill_PipeShell in _BRepFill:
_BRepFill.BRepFill_PipeShell_swigregister(BRepFill_PipeShell)

class BRepFill_Section(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param Profile:
        	:type Profile: TopoDS_Shape
        	:param V:
        	:type V: TopoDS_Vertex
        	:param WithContact:
        	:type WithContact: bool
        	:param WithCorrection:
        	:type WithCorrection: bool
        	:rtype: None
        """
        _BRepFill.BRepFill_Section_swiginit(self, _BRepFill.new_BRepFill_Section(*args))
    IsLaw = _swig_new_instance_method(_BRepFill.BRepFill_Section_IsLaw)
    IsPunctual = _swig_new_instance_method(_BRepFill.BRepFill_Section_IsPunctual)
    ModifiedShape = _swig_new_instance_method(_BRepFill.BRepFill_Section_ModifiedShape)
    OriginalShape = _swig_new_instance_method(_BRepFill.BRepFill_Section_OriginalShape)
    Set = _swig_new_instance_method(_BRepFill.BRepFill_Section_Set)
    Vertex = _swig_new_instance_method(_BRepFill.BRepFill_Section_Vertex)
    Wire = _swig_new_instance_method(_BRepFill.BRepFill_Section_Wire)
    WithContact = _swig_new_instance_method(_BRepFill.BRepFill_Section_WithContact)
    WithCorrection = _swig_new_instance_method(_BRepFill.BRepFill_Section_WithCorrection)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Section

# Register BRepFill_Section in _BRepFill:
_BRepFill.BRepFill_Section_swigregister(BRepFill_Section)

class BRepFill_SectionLaw(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ConcatenedLaw = _swig_new_instance_method(_BRepFill.BRepFill_SectionLaw_ConcatenedLaw)
    Continuity = _swig_new_instance_method(_BRepFill.BRepFill_SectionLaw_Continuity)
    CurrentEdge = _swig_new_instance_method(_BRepFill.BRepFill_SectionLaw_CurrentEdge)
    D0 = _swig_new_instance_method(_BRepFill.BRepFill_SectionLaw_D0)
    IndexOfEdge = _swig_new_instance_method(_BRepFill.BRepFill_SectionLaw_IndexOfEdge)
    Init = _swig_new_instance_method(_BRepFill.BRepFill_SectionLaw_Init)
    IsConstant = _swig_new_instance_method(_BRepFill.BRepFill_SectionLaw_IsConstant)
    IsDone = _swig_new_instance_method(_BRepFill.BRepFill_SectionLaw_IsDone)
    IsUClosed = _swig_new_instance_method(_BRepFill.BRepFill_SectionLaw_IsUClosed)
    IsVClosed = _swig_new_instance_method(_BRepFill.BRepFill_SectionLaw_IsVClosed)
    IsVertex = _swig_new_instance_method(_BRepFill.BRepFill_SectionLaw_IsVertex)
    law = _swig_new_instance_method(_BRepFill.BRepFill_SectionLaw_law)
    NbLaw = _swig_new_instance_method(_BRepFill.BRepFill_SectionLaw_NbLaw)
    Vertex = _swig_new_instance_method(_BRepFill.BRepFill_SectionLaw_Vertex)
    VertexTol = _swig_new_instance_method(_BRepFill.BRepFill_SectionLaw_VertexTol)


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_SectionLaw_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_SectionLaw

# Register BRepFill_SectionLaw in _BRepFill:
_BRepFill.BRepFill_SectionLaw_swigregister(BRepFill_SectionLaw)

class BRepFill_SectionPlacement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AbscissaOnPath = _swig_new_instance_method(_BRepFill.BRepFill_SectionPlacement_AbscissaOnPath)

    def __init__(self, *args):
        r"""
        * Automatic placement
        	:param Law:
        	:type Law: BRepFill_LocationLaw
        	:param Section:
        	:type Section: TopoDS_Shape
        	:param WithContact: default value is Standard_False
        	:type WithContact: bool
        	:param WithCorrection: default value is Standard_False
        	:type WithCorrection: bool
        	:rtype: None* Placement on vertex
        	:param Law:
        	:type Law: BRepFill_LocationLaw
        	:param Section:
        	:type Section: TopoDS_Shape
        	:param Vertex:
        	:type Vertex: TopoDS_Shape
        	:param WithContact: default value is Standard_False
        	:type WithContact: bool
        	:param WithCorrection: default value is Standard_False
        	:type WithCorrection: bool
        	:rtype: None
        """
        _BRepFill.BRepFill_SectionPlacement_swiginit(self, _BRepFill.new_BRepFill_SectionPlacement(*args))
    Transformation = _swig_new_instance_method(_BRepFill.BRepFill_SectionPlacement_Transformation)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_SectionPlacement

# Register BRepFill_SectionPlacement in _BRepFill:
_BRepFill.BRepFill_SectionPlacement_swigregister(BRepFill_SectionPlacement)

class BRepFill_Sweep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param Section:
        	:type Section: BRepFill_SectionLaw
        	:param Location:
        	:type Location: BRepFill_LocationLaw
        	:param WithKPart:
        	:type WithKPart: bool
        	:rtype: None
        """
        _BRepFill.BRepFill_Sweep_swiginit(self, _BRepFill.new_BRepFill_Sweep(*args))
    Build = _swig_new_instance_method(_BRepFill.BRepFill_Sweep_Build)
    ErrorOnSurface = _swig_new_instance_method(_BRepFill.BRepFill_Sweep_ErrorOnSurface)
    InterFaces = _swig_new_instance_method(_BRepFill.BRepFill_Sweep_InterFaces)
    IsDone = _swig_new_instance_method(_BRepFill.BRepFill_Sweep_IsDone)
    Sections = _swig_new_instance_method(_BRepFill.BRepFill_Sweep_Sections)
    SetAngularControl = _swig_new_instance_method(_BRepFill.BRepFill_Sweep_SetAngularControl)
    SetBounds = _swig_new_instance_method(_BRepFill.BRepFill_Sweep_SetBounds)
    SetForceApproxC1 = _swig_new_instance_method(_BRepFill.BRepFill_Sweep_SetForceApproxC1)
    SetTolerance = _swig_new_instance_method(_BRepFill.BRepFill_Sweep_SetTolerance)
    Shape = _swig_new_instance_method(_BRepFill.BRepFill_Sweep_Shape)
    SubShape = _swig_new_instance_method(_BRepFill.BRepFill_Sweep_SubShape)
    Tape = _swig_new_instance_method(_BRepFill.BRepFill_Sweep_Tape)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Sweep

# Register BRepFill_Sweep in _BRepFill:
_BRepFill.BRepFill_Sweep_swigregister(BRepFill_Sweep)

class BRepFill_TrimEdgeTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddOrConfuse = _swig_new_instance_method(_BRepFill.BRepFill_TrimEdgeTool_AddOrConfuse)

    def __init__(self, *args):
        r"""
        :rtype: None:param Bisec:
        	:type Bisec: Bisector_Bisec
        	:param S1:
        	:type S1: Geom2d_Geometry
        	:param S2:
        	:type S2: Geom2d_Geometry
        	:param Offset:
        	:type Offset: float
        	:rtype: None
        """
        _BRepFill.BRepFill_TrimEdgeTool_swiginit(self, _BRepFill.new_BRepFill_TrimEdgeTool(*args))
    IntersectWith = _swig_new_instance_method(_BRepFill.BRepFill_TrimEdgeTool_IntersectWith)
    IsInside = _swig_new_instance_method(_BRepFill.BRepFill_TrimEdgeTool_IsInside)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_TrimEdgeTool

# Register BRepFill_TrimEdgeTool in _BRepFill:
_BRepFill.BRepFill_TrimEdgeTool_swigregister(BRepFill_TrimEdgeTool)

class BRepFill_TrimShellCorner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddBounds = _swig_new_instance_method(_BRepFill.BRepFill_TrimShellCorner_AddBounds)
    AddUEdges = _swig_new_instance_method(_BRepFill.BRepFill_TrimShellCorner_AddUEdges)
    AddVEdges = _swig_new_instance_method(_BRepFill.BRepFill_TrimShellCorner_AddVEdges)

    def __init__(self, *args):
        r"""
        * Constructor: takes faces to intersect, type of transition (it can be RightCorner or RoundCorner) and axis of bisector plane
        	:param theFaces:
        	:type theFaces: TopTools_HArray2OfShape
        	:param theTransition:
        	:type theTransition: BRepFill_TransitionStyle
        	:param theAxeOfBisPlane:
        	:type theAxeOfBisPlane: gp_Ax2
        	:rtype: None
        """
        _BRepFill.BRepFill_TrimShellCorner_swiginit(self, _BRepFill.new_BRepFill_TrimShellCorner(*args))
    HasSection = _swig_new_instance_method(_BRepFill.BRepFill_TrimShellCorner_HasSection)
    IsDone = _swig_new_instance_method(_BRepFill.BRepFill_TrimShellCorner_IsDone)
    Modified = _swig_new_instance_method(_BRepFill.BRepFill_TrimShellCorner_Modified)
    Perform = _swig_new_instance_method(_BRepFill.BRepFill_TrimShellCorner_Perform)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_TrimShellCorner

# Register BRepFill_TrimShellCorner in _BRepFill:
_BRepFill.BRepFill_TrimShellCorner_swigregister(BRepFill_TrimShellCorner)

class BRepFill_TrimSurfaceTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param Bis:
        	:type Bis: Geom2d_Curve
        	:param Face1:
        	:type Face1: TopoDS_Face
        	:param Face2:
        	:type Face2: TopoDS_Face
        	:param Edge1:
        	:type Edge1: TopoDS_Edge
        	:param Edge2:
        	:type Edge2: TopoDS_Edge
        	:param Inv1:
        	:type Inv1: bool
        	:param Inv2:
        	:type Inv2: bool
        	:rtype: None
        """
        _BRepFill.BRepFill_TrimSurfaceTool_swiginit(self, _BRepFill.new_BRepFill_TrimSurfaceTool(*args))
    IntersectWith = _swig_new_instance_method(_BRepFill.BRepFill_TrimSurfaceTool_IntersectWith)
    IsOnFace = _swig_new_instance_method(_BRepFill.BRepFill_TrimSurfaceTool_IsOnFace)
    ProjOn = _swig_new_instance_method(_BRepFill.BRepFill_TrimSurfaceTool_ProjOn)
    Project = _swig_new_instance_method(_BRepFill.BRepFill_TrimSurfaceTool_Project)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_TrimSurfaceTool

# Register BRepFill_TrimSurfaceTool in _BRepFill:
_BRepFill.BRepFill_TrimSurfaceTool_swigregister(BRepFill_TrimSurfaceTool)

class BRepFill_ACRLaw(BRepFill_LocationLaw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param Path:
        	:type Path: TopoDS_Wire
        	:param Law:
        	:type Law: GeomFill_LocationGuide
        	:rtype: None
        """
        _BRepFill.BRepFill_ACRLaw_swiginit(self, _BRepFill.new_BRepFill_ACRLaw(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_ACRLaw_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_ACRLaw

# Register BRepFill_ACRLaw in _BRepFill:
_BRepFill.BRepFill_ACRLaw_swigregister(BRepFill_ACRLaw)

class BRepFill_Edge3DLaw(BRepFill_LocationLaw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param Path:
        	:type Path: TopoDS_Wire
        	:param Law:
        	:type Law: GeomFill_LocationLaw
        	:rtype: None
        """
        _BRepFill.BRepFill_Edge3DLaw_swiginit(self, _BRepFill.new_BRepFill_Edge3DLaw(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_Edge3DLaw_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Edge3DLaw

# Register BRepFill_Edge3DLaw in _BRepFill:
_BRepFill.BRepFill_Edge3DLaw_swigregister(BRepFill_Edge3DLaw)

class BRepFill_EdgeOnSurfLaw(BRepFill_LocationLaw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param Path:
        	:type Path: TopoDS_Wire
        	:param Surf:
        	:type Surf: TopoDS_Shape
        	:rtype: None
        """
        _BRepFill.BRepFill_EdgeOnSurfLaw_swiginit(self, _BRepFill.new_BRepFill_EdgeOnSurfLaw(*args))
    HasResult = _swig_new_instance_method(_BRepFill.BRepFill_EdgeOnSurfLaw_HasResult)


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_EdgeOnSurfLaw_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_EdgeOnSurfLaw

# Register BRepFill_EdgeOnSurfLaw in _BRepFill:
_BRepFill.BRepFill_EdgeOnSurfLaw_swigregister(BRepFill_EdgeOnSurfLaw)

class BRepFill_NSections(BRepFill_SectionLaw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Construct
        	:param S:
        	:type S: TopTools_SequenceOfShape
        	:param Build: default value is Standard_True
        	:type Build: bool
        	:rtype: None* Construct
        	:param S:
        	:type S: TopTools_SequenceOfShape
        	:param Trsfs:
        	:type Trsfs: GeomFill_SequenceOfTrsf
        	:param P:
        	:type P: TColStd_SequenceOfReal
        	:param VF:
        	:type VF: float
        	:param VL:
        	:type VL: float
        	:param Build: default value is Standard_True
        	:type Build: bool
        	:rtype: None
        """
        _BRepFill.BRepFill_NSections_swiginit(self, _BRepFill.new_BRepFill_NSections(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_NSections_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_NSections

# Register BRepFill_NSections in _BRepFill:
_BRepFill.BRepFill_NSections_swigregister(BRepFill_NSections)

class BRepFill_ShapeLaw(BRepFill_SectionLaw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Construct an constant Law
        	:param V:
        	:type V: TopoDS_Vertex
        	:param Build: default value is Standard_True
        	:type Build: bool
        	:rtype: None* Construct an constant Law
        	:param W:
        	:type W: TopoDS_Wire
        	:param Build: default value is Standard_True
        	:type Build: bool
        	:rtype: None* Construct an evolutive Law
        	:param W:
        	:type W: TopoDS_Wire
        	:param L:
        	:type L: Law_Function
        	:param Build: default value is Standard_True
        	:type Build: bool
        	:rtype: None
        """
        _BRepFill.BRepFill_ShapeLaw_swiginit(self, _BRepFill.new_BRepFill_ShapeLaw(*args))
    Edge = _swig_new_instance_method(_BRepFill.BRepFill_ShapeLaw_Edge)


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_ShapeLaw_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_ShapeLaw

# Register BRepFill_ShapeLaw in _BRepFill:
_BRepFill.BRepFill_ShapeLaw_swigregister(BRepFill_ShapeLaw)

class BRepFill_DraftLaw(BRepFill_Edge3DLaw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param Path:
        	:type Path: TopoDS_Wire
        	:param Law:
        	:type Law: GeomFill_LocationDraft
        	:rtype: None
        """
        _BRepFill.BRepFill_DraftLaw_swiginit(self, _BRepFill.new_BRepFill_DraftLaw(*args))
    CleanLaw = _swig_new_instance_method(_BRepFill.BRepFill_DraftLaw_CleanLaw)


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_DraftLaw_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_DraftLaw

# Register BRepFill_DraftLaw in _BRepFill:
_BRepFill.BRepFill_DraftLaw_swigregister(BRepFill_DraftLaw)



