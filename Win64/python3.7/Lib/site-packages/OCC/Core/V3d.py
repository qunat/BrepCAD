# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
V3d module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_v3d.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _V3d
else:
    import _V3d

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _V3d.SWIG_PyInstanceMethod_New
_swig_new_static_method = _V3d.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _V3d.delete_SwigPyIterator
    value = _swig_new_instance_method(_V3d.SwigPyIterator_value)
    incr = _swig_new_instance_method(_V3d.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_V3d.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_V3d.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_V3d.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_V3d.SwigPyIterator_copy)
    next = _swig_new_instance_method(_V3d.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_V3d.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_V3d.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_V3d.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_V3d.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_V3d.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_V3d.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_V3d.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_V3d.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_V3d.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _V3d:
_V3d.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Graphic3d
import OCC.Core.BVH
import OCC.Core.Quantity
import OCC.Core.TCollection
import OCC.Core.gp
import OCC.Core.Aspect
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.Bnd
import OCC.Core.Image
import OCC.Core.OSD
V3d_POSITIONCAMERA = _V3d.V3d_POSITIONCAMERA
V3d_SPACECAMERA = _V3d.V3d_SPACECAMERA
V3d_RADIUSTEXTCAMERA = _V3d.V3d_RADIUSTEXTCAMERA
V3d_ExtRADIUSCAMERA = _V3d.V3d_ExtRADIUSCAMERA
V3d_IntRADIUSCAMERA = _V3d.V3d_IntRADIUSCAMERA
V3d_NOTHINGCAMERA = _V3d.V3d_NOTHINGCAMERA
V3d_WIREFRAME = _V3d.V3d_WIREFRAME
V3d_ZBUFFER = _V3d.V3d_ZBUFFER
V3d_ORTHOGRAPHIC = _V3d.V3d_ORTHOGRAPHIC
V3d_PERSPECTIVE = _V3d.V3d_PERSPECTIVE
V3d_SDO_MONO = _V3d.V3d_SDO_MONO
V3d_SDO_LEFT_EYE = _V3d.V3d_SDO_LEFT_EYE
V3d_SDO_RIGHT_EYE = _V3d.V3d_SDO_RIGHT_EYE
V3d_SDO_BLENDED = _V3d.V3d_SDO_BLENDED
V3d_Xpos = _V3d.V3d_Xpos
V3d_Ypos = _V3d.V3d_Ypos
V3d_Zpos = _V3d.V3d_Zpos
V3d_Xneg = _V3d.V3d_Xneg
V3d_Yneg = _V3d.V3d_Yneg
V3d_Zneg = _V3d.V3d_Zneg
V3d_XposYpos = _V3d.V3d_XposYpos
V3d_XposZpos = _V3d.V3d_XposZpos
V3d_YposZpos = _V3d.V3d_YposZpos
V3d_XnegYneg = _V3d.V3d_XnegYneg
V3d_XnegYpos = _V3d.V3d_XnegYpos
V3d_XnegZneg = _V3d.V3d_XnegZneg
V3d_XnegZpos = _V3d.V3d_XnegZpos
V3d_YnegZneg = _V3d.V3d_YnegZneg
V3d_YnegZpos = _V3d.V3d_YnegZpos
V3d_XposYneg = _V3d.V3d_XposYneg
V3d_XposZneg = _V3d.V3d_XposZneg
V3d_YposZneg = _V3d.V3d_YposZneg
V3d_XposYposZpos = _V3d.V3d_XposYposZpos
V3d_XposYnegZpos = _V3d.V3d_XposYnegZpos
V3d_XposYposZneg = _V3d.V3d_XposYposZneg
V3d_XnegYposZpos = _V3d.V3d_XnegYposZpos
V3d_XposYnegZneg = _V3d.V3d_XposYnegZneg
V3d_XnegYposZneg = _V3d.V3d_XnegYposZneg
V3d_XnegYnegZpos = _V3d.V3d_XnegYnegZpos
V3d_XnegYnegZneg = _V3d.V3d_XnegYnegZneg
V3d_TypeOfOrientation_Zup_AxoLeft = _V3d.V3d_TypeOfOrientation_Zup_AxoLeft
V3d_TypeOfOrientation_Zup_AxoRight = _V3d.V3d_TypeOfOrientation_Zup_AxoRight
V3d_TypeOfOrientation_Zup_Front = _V3d.V3d_TypeOfOrientation_Zup_Front
V3d_TypeOfOrientation_Zup_Back = _V3d.V3d_TypeOfOrientation_Zup_Back
V3d_TypeOfOrientation_Zup_Top = _V3d.V3d_TypeOfOrientation_Zup_Top
V3d_TypeOfOrientation_Zup_Bottom = _V3d.V3d_TypeOfOrientation_Zup_Bottom
V3d_TypeOfOrientation_Zup_Left = _V3d.V3d_TypeOfOrientation_Zup_Left
V3d_TypeOfOrientation_Zup_Right = _V3d.V3d_TypeOfOrientation_Zup_Right
V3d_TypeOfOrientation_Yup_AxoLeft = _V3d.V3d_TypeOfOrientation_Yup_AxoLeft
V3d_TypeOfOrientation_Yup_AxoRight = _V3d.V3d_TypeOfOrientation_Yup_AxoRight
V3d_TypeOfOrientation_Yup_Front = _V3d.V3d_TypeOfOrientation_Yup_Front
V3d_TypeOfOrientation_Yup_Back = _V3d.V3d_TypeOfOrientation_Yup_Back
V3d_TypeOfOrientation_Yup_Top = _V3d.V3d_TypeOfOrientation_Yup_Top
V3d_TypeOfOrientation_Yup_Bottom = _V3d.V3d_TypeOfOrientation_Yup_Bottom
V3d_TypeOfOrientation_Yup_Left = _V3d.V3d_TypeOfOrientation_Yup_Left
V3d_TypeOfOrientation_Yup_Right = _V3d.V3d_TypeOfOrientation_Yup_Right
V3d_X = _V3d.V3d_X
V3d_Y = _V3d.V3d_Y
V3d_Z = _V3d.V3d_Z
V3d_SIMPLE = _V3d.V3d_SIMPLE
V3d_COMPLETE = _V3d.V3d_COMPLETE
V3d_PARTIAL = _V3d.V3d_PARTIAL
V3d_SAMELAST = _V3d.V3d_SAMELAST
V3d_TOBM_AUTOMATIC = _V3d.V3d_TOBM_AUTOMATIC
V3d_TOBM_ALWAYS_DISPLAYED = _V3d.V3d_TOBM_ALWAYS_DISPLAYED
V3d_TOBM_NEVER_DISPLAYED = _V3d.V3d_TOBM_NEVER_DISPLAYED
V3d_POSITIONLIGHT = _V3d.V3d_POSITIONLIGHT
V3d_SPACELIGHT = _V3d.V3d_SPACELIGHT
V3d_RADIUSTEXTLIGHT = _V3d.V3d_RADIUSTEXTLIGHT
V3d_ExtRADIUSLIGHT = _V3d.V3d_ExtRADIUSLIGHT
V3d_IntRADIUSLIGHT = _V3d.V3d_IntRADIUSLIGHT
V3d_NOTHING = _V3d.V3d_NOTHING
Handle_V3d_AmbientLight_Create = _V3d.Handle_V3d_AmbientLight_Create
Handle_V3d_AmbientLight_DownCast = _V3d.Handle_V3d_AmbientLight_DownCast
Handle_V3d_AmbientLight_IsNull = _V3d.Handle_V3d_AmbientLight_IsNull
Handle_V3d_CircularGrid_Create = _V3d.Handle_V3d_CircularGrid_Create
Handle_V3d_CircularGrid_DownCast = _V3d.Handle_V3d_CircularGrid_DownCast
Handle_V3d_CircularGrid_IsNull = _V3d.Handle_V3d_CircularGrid_IsNull
Handle_V3d_Plane_Create = _V3d.Handle_V3d_Plane_Create
Handle_V3d_Plane_DownCast = _V3d.Handle_V3d_Plane_DownCast
Handle_V3d_Plane_IsNull = _V3d.Handle_V3d_Plane_IsNull
Handle_V3d_PositionLight_Create = _V3d.Handle_V3d_PositionLight_Create
Handle_V3d_PositionLight_DownCast = _V3d.Handle_V3d_PositionLight_DownCast
Handle_V3d_PositionLight_IsNull = _V3d.Handle_V3d_PositionLight_IsNull
Handle_V3d_RectangularGrid_Create = _V3d.Handle_V3d_RectangularGrid_Create
Handle_V3d_RectangularGrid_DownCast = _V3d.Handle_V3d_RectangularGrid_DownCast
Handle_V3d_RectangularGrid_IsNull = _V3d.Handle_V3d_RectangularGrid_IsNull
Handle_V3d_Trihedron_Create = _V3d.Handle_V3d_Trihedron_Create
Handle_V3d_Trihedron_DownCast = _V3d.Handle_V3d_Trihedron_DownCast
Handle_V3d_Trihedron_IsNull = _V3d.Handle_V3d_Trihedron_IsNull
Handle_V3d_View_Create = _V3d.Handle_V3d_View_Create
Handle_V3d_View_DownCast = _V3d.Handle_V3d_View_DownCast
Handle_V3d_View_IsNull = _V3d.Handle_V3d_View_IsNull
Handle_V3d_Viewer_Create = _V3d.Handle_V3d_Viewer_Create
Handle_V3d_Viewer_DownCast = _V3d.Handle_V3d_Viewer_DownCast
Handle_V3d_Viewer_IsNull = _V3d.Handle_V3d_Viewer_IsNull
Handle_V3d_DirectionalLight_Create = _V3d.Handle_V3d_DirectionalLight_Create
Handle_V3d_DirectionalLight_DownCast = _V3d.Handle_V3d_DirectionalLight_DownCast
Handle_V3d_DirectionalLight_IsNull = _V3d.Handle_V3d_DirectionalLight_IsNull
Handle_V3d_PositionalLight_Create = _V3d.Handle_V3d_PositionalLight_Create
Handle_V3d_PositionalLight_DownCast = _V3d.Handle_V3d_PositionalLight_DownCast
Handle_V3d_PositionalLight_IsNull = _V3d.Handle_V3d_PositionalLight_IsNull
Handle_V3d_SpotLight_Create = _V3d.Handle_V3d_SpotLight_Create
Handle_V3d_SpotLight_DownCast = _V3d.Handle_V3d_SpotLight_DownCast
Handle_V3d_SpotLight_IsNull = _V3d.Handle_V3d_SpotLight_IsNull
class V3d_ListOfLight(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_V3d.V3d_ListOfLight_begin)
    end = _swig_new_instance_method(_V3d.V3d_ListOfLight_end)
    cbegin = _swig_new_instance_method(_V3d.V3d_ListOfLight_cbegin)
    cend = _swig_new_instance_method(_V3d.V3d_ListOfLight_cend)

    def __init__(self, *args):
        _V3d.V3d_ListOfLight_swiginit(self, _V3d.new_V3d_ListOfLight(*args))
    Size = _swig_new_instance_method(_V3d.V3d_ListOfLight_Size)
    Assign = _swig_new_instance_method(_V3d.V3d_ListOfLight_Assign)
    Set = _swig_new_instance_method(_V3d.V3d_ListOfLight_Set)
    Clear = _swig_new_instance_method(_V3d.V3d_ListOfLight_Clear)
    First = _swig_new_instance_method(_V3d.V3d_ListOfLight_First)
    Last = _swig_new_instance_method(_V3d.V3d_ListOfLight_Last)
    Append = _swig_new_instance_method(_V3d.V3d_ListOfLight_Append)
    Prepend = _swig_new_instance_method(_V3d.V3d_ListOfLight_Prepend)
    RemoveFirst = _swig_new_instance_method(_V3d.V3d_ListOfLight_RemoveFirst)
    Remove = _swig_new_instance_method(_V3d.V3d_ListOfLight_Remove)
    InsertBefore = _swig_new_instance_method(_V3d.V3d_ListOfLight_InsertBefore)
    InsertAfter = _swig_new_instance_method(_V3d.V3d_ListOfLight_InsertAfter)
    Reverse = _swig_new_instance_method(_V3d.V3d_ListOfLight_Reverse)
    __swig_destroy__ = _V3d.delete_V3d_ListOfLight

# Register V3d_ListOfLight in _V3d:
_V3d.V3d_ListOfLight_swigregister(V3d_ListOfLight)

class V3d_ListOfView(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_V3d.V3d_ListOfView_begin)
    end = _swig_new_instance_method(_V3d.V3d_ListOfView_end)
    cbegin = _swig_new_instance_method(_V3d.V3d_ListOfView_cbegin)
    cend = _swig_new_instance_method(_V3d.V3d_ListOfView_cend)

    def __init__(self, *args):
        _V3d.V3d_ListOfView_swiginit(self, _V3d.new_V3d_ListOfView(*args))
    Size = _swig_new_instance_method(_V3d.V3d_ListOfView_Size)
    Assign = _swig_new_instance_method(_V3d.V3d_ListOfView_Assign)
    Set = _swig_new_instance_method(_V3d.V3d_ListOfView_Set)
    Clear = _swig_new_instance_method(_V3d.V3d_ListOfView_Clear)
    First = _swig_new_instance_method(_V3d.V3d_ListOfView_First)
    Last = _swig_new_instance_method(_V3d.V3d_ListOfView_Last)
    Append = _swig_new_instance_method(_V3d.V3d_ListOfView_Append)
    Prepend = _swig_new_instance_method(_V3d.V3d_ListOfView_Prepend)
    RemoveFirst = _swig_new_instance_method(_V3d.V3d_ListOfView_RemoveFirst)
    Remove = _swig_new_instance_method(_V3d.V3d_ListOfView_Remove)
    InsertBefore = _swig_new_instance_method(_V3d.V3d_ListOfView_InsertBefore)
    InsertAfter = _swig_new_instance_method(_V3d.V3d_ListOfView_InsertAfter)
    Reverse = _swig_new_instance_method(_V3d.V3d_ListOfView_Reverse)
    __swig_destroy__ = _V3d.delete_V3d_ListOfView

# Register V3d_ListOfView in _V3d:
_V3d.V3d_ListOfView_swigregister(V3d_ListOfView)

class v3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ArrowOfRadius = _swig_new_static_method(_V3d.v3d_ArrowOfRadius)
    CircleInPlane = _swig_new_static_method(_V3d.v3d_CircleInPlane)
    GetProjAxis = _swig_new_static_method(_V3d.v3d_GetProjAxis)
    SwitchViewsinWindow = _swig_new_static_method(_V3d.v3d_SwitchViewsinWindow)
    TypeOfOrientationFromString = _swig_new_static_method(_V3d.v3d_TypeOfOrientationFromString)
    TypeOfOrientationToString = _swig_new_static_method(_V3d.v3d_TypeOfOrientationToString)

    __repr__ = _dumps_object


    def __init__(self):
        _V3d.v3d_swiginit(self, _V3d.new_v3d())
    __swig_destroy__ = _V3d.delete_v3d

# Register v3d in _V3d:
_V3d.v3d_swigregister(v3d)
v3d_ArrowOfRadius = _V3d.v3d_ArrowOfRadius
v3d_CircleInPlane = _V3d.v3d_CircleInPlane
v3d_GetProjAxis = _V3d.v3d_GetProjAxis
v3d_SwitchViewsinWindow = _V3d.v3d_SwitchViewsinWindow
v3d_TypeOfOrientationFromString = _V3d.v3d_TypeOfOrientationFromString
v3d_TypeOfOrientationToString = _V3d.v3d_TypeOfOrientationToString

class V3d_AmbientLight(OCC.Core.Graphic3d.Graphic3d_CLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructs an ambient light source in the viewer. The default Color of this light source is WHITE.
        	:param theColor: default value is Quantity_NOC_WHITE
        	:type theColor: Quantity_Color
        	:rtype: None* Constructs an ambient light source in the viewer. The default Color of this light source is WHITE.
        	:param theViewer:
        	:type theViewer: V3d_Viewer
        	:param theColor: default value is Quantity_NOC_WHITE
        	:type theColor: Quantity_Color
        	:rtype: None
        """
        _V3d.V3d_AmbientLight_swiginit(self, _V3d.new_V3d_AmbientLight(*args))


    @staticmethod
    def DownCast(t):
      return Handle_V3d_AmbientLight_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_AmbientLight

# Register V3d_AmbientLight in _V3d:
_V3d.V3d_AmbientLight_swigregister(V3d_AmbientLight)

class V3d_CircularGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Display = _swig_new_instance_method(_V3d.V3d_CircularGrid_Display)
    Erase = _swig_new_instance_method(_V3d.V3d_CircularGrid_Erase)
    GraphicValues = _swig_new_instance_method(_V3d.V3d_CircularGrid_GraphicValues)
    IsDisplayed = _swig_new_instance_method(_V3d.V3d_CircularGrid_IsDisplayed)
    SetColors = _swig_new_instance_method(_V3d.V3d_CircularGrid_SetColors)
    SetGraphicValues = _swig_new_instance_method(_V3d.V3d_CircularGrid_SetGraphicValues)

    def __init__(self, *args):
        r"""
        :param aViewer:
        	:type aViewer: V3d_ViewerPointer
        	:param aColor:
        	:type aColor: Quantity_Color
        	:param aTenthColor:
        	:type aTenthColor: Quantity_Color
        	:rtype: None
        """
        _V3d.V3d_CircularGrid_swiginit(self, _V3d.new_V3d_CircularGrid(*args))


    @staticmethod
    def DownCast(t):
      return Handle_V3d_CircularGrid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_CircularGrid

# Register V3d_CircularGrid in _V3d:
_V3d.V3d_CircularGrid_swigregister(V3d_CircularGrid)

class V3d_ImageDumpOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Width = property(_V3d.V3d_ImageDumpOptions_Width_get, _V3d.V3d_ImageDumpOptions_Width_set)
    Height = property(_V3d.V3d_ImageDumpOptions_Height_get, _V3d.V3d_ImageDumpOptions_Height_set)
    BufferType = property(_V3d.V3d_ImageDumpOptions_BufferType_get, _V3d.V3d_ImageDumpOptions_BufferType_set)
    StereoOptions = property(_V3d.V3d_ImageDumpOptions_StereoOptions_get, _V3d.V3d_ImageDumpOptions_StereoOptions_set)
    TileSize = property(_V3d.V3d_ImageDumpOptions_TileSize_get, _V3d.V3d_ImageDumpOptions_TileSize_set)
    ToAdjustAspect = property(_V3d.V3d_ImageDumpOptions_ToAdjustAspect_get, _V3d.V3d_ImageDumpOptions_ToAdjustAspect_set)

    def __init__(self, *args):
        r"""
        * //!< flag to override active view aspect ratio by (Width / Height) defined for image dump (True by default) Default constructor.
        	:rtype: None
        """
        _V3d.V3d_ImageDumpOptions_swiginit(self, _V3d.new_V3d_ImageDumpOptions(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_ImageDumpOptions

# Register V3d_ImageDumpOptions in _V3d:
_V3d.V3d_ImageDumpOptions_swigregister(V3d_ImageDumpOptions)

class V3d_Plane(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ClipPlane = _swig_new_instance_method(_V3d.V3d_Plane_ClipPlane)
    Display = _swig_new_instance_method(_V3d.V3d_Plane_Display)
    Erase = _swig_new_instance_method(_V3d.V3d_Plane_Erase)
    IsDisplayed = _swig_new_instance_method(_V3d.V3d_Plane_IsDisplayed)
    Plane = _swig_new_instance_method(_V3d.V3d_Plane_Plane)
    SetPlane = _swig_new_instance_method(_V3d.V3d_Plane_SetPlane)

    def __init__(self, *args):
        r"""
        * Creates a clipping plane from plane coefficients.
        	:param theA: default value is 0.0
        	:type theA: float
        	:param theB: default value is 0.0
        	:type theB: float
        	:param theC: default value is 1.0
        	:type theC: float
        	:param theD: default value is 0.0
        	:type theD: float
        	:rtype: None
        """
        _V3d.V3d_Plane_swiginit(self, _V3d.new_V3d_Plane(*args))


    @staticmethod
    def DownCast(t):
      return Handle_V3d_Plane_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_Plane

# Register V3d_Plane in _V3d:
_V3d.V3d_Plane_swigregister(V3d_Plane)

class V3d_PositionLight(OCC.Core.Graphic3d.Graphic3d_CLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr


    @staticmethod
    def DownCast(t):
      return Handle_V3d_PositionLight_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_PositionLight

# Register V3d_PositionLight in _V3d:
_V3d.V3d_PositionLight_swigregister(V3d_PositionLight)

class V3d_RectangularGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Display = _swig_new_instance_method(_V3d.V3d_RectangularGrid_Display)
    Erase = _swig_new_instance_method(_V3d.V3d_RectangularGrid_Erase)
    GraphicValues = _swig_new_instance_method(_V3d.V3d_RectangularGrid_GraphicValues)
    IsDisplayed = _swig_new_instance_method(_V3d.V3d_RectangularGrid_IsDisplayed)
    SetColors = _swig_new_instance_method(_V3d.V3d_RectangularGrid_SetColors)
    SetGraphicValues = _swig_new_instance_method(_V3d.V3d_RectangularGrid_SetGraphicValues)

    def __init__(self, *args):
        r"""
        :param aViewer:
        	:type aViewer: V3d_ViewerPointer
        	:param aColor:
        	:type aColor: Quantity_Color
        	:param aTenthColor:
        	:type aTenthColor: Quantity_Color
        	:rtype: None
        """
        _V3d.V3d_RectangularGrid_swiginit(self, _V3d.new_V3d_RectangularGrid(*args))


    @staticmethod
    def DownCast(t):
      return Handle_V3d_RectangularGrid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_RectangularGrid

# Register V3d_RectangularGrid in _V3d:
_V3d.V3d_RectangularGrid_swigregister(V3d_RectangularGrid)

class V3d_Trihedron(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Display = _swig_new_instance_method(_V3d.V3d_Trihedron_Display)
    Erase = _swig_new_instance_method(_V3d.V3d_Trihedron_Erase)
    SetArrowDiameter = _swig_new_instance_method(_V3d.V3d_Trihedron_SetArrowDiameter)
    SetArrowsColor = _swig_new_instance_method(_V3d.V3d_Trihedron_SetArrowsColor)
    SetLabelsColor = _swig_new_instance_method(_V3d.V3d_Trihedron_SetLabelsColor)
    SetNbFacets = _swig_new_instance_method(_V3d.V3d_Trihedron_SetNbFacets)
    SetPosition = _swig_new_instance_method(_V3d.V3d_Trihedron_SetPosition)
    SetScale = _swig_new_instance_method(_V3d.V3d_Trihedron_SetScale)
    SetSizeRatio = _swig_new_instance_method(_V3d.V3d_Trihedron_SetSizeRatio)
    SetWireframe = _swig_new_instance_method(_V3d.V3d_Trihedron_SetWireframe)

    def __init__(self, *args):
        r"""
        * Creates a default trihedron.
        	:rtype: None
        """
        _V3d.V3d_Trihedron_swiginit(self, _V3d.new_V3d_Trihedron(*args))


    @staticmethod
    def DownCast(t):
      return Handle_V3d_Trihedron_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_Trihedron

# Register V3d_Trihedron in _V3d:
_V3d.V3d_Trihedron_swigregister(V3d_Trihedron)

class V3d_View(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ActiveLight = _swig_new_instance_method(_V3d.V3d_View_ActiveLight)
    ActiveLightIterator = _swig_new_instance_method(_V3d.V3d_View_ActiveLightIterator)
    AddClipPlane = _swig_new_instance_method(_V3d.V3d_View_AddClipPlane)
    At = _swig_new_instance_method(_V3d.V3d_View_At)
    AutoZFit = _swig_new_instance_method(_V3d.V3d_View_AutoZFit)
    AutoZFitMode = _swig_new_instance_method(_V3d.V3d_View_AutoZFitMode)
    AutoZFitScaleFactor = _swig_new_instance_method(_V3d.V3d_View_AutoZFitScaleFactor)
    AxialScale = _swig_new_instance_method(_V3d.V3d_View_AxialScale)
    BackFacingModel = _swig_new_instance_method(_V3d.V3d_View_BackFacingModel)
    BackgroundColor = _swig_new_instance_method(_V3d.V3d_View_BackgroundColor)
    Camera = _swig_new_instance_method(_V3d.V3d_View_Camera)
    ChangeRenderingParams = _swig_new_instance_method(_V3d.V3d_View_ChangeRenderingParams)
    ClipPlanes = _swig_new_instance_method(_V3d.V3d_View_ClipPlanes)
    ComputedMode = _swig_new_instance_method(_V3d.V3d_View_ComputedMode)
    Convert = _swig_new_instance_method(_V3d.V3d_View_Convert)
    ConvertToGrid = _swig_new_instance_method(_V3d.V3d_View_ConvertToGrid)
    ConvertWithProj = _swig_new_instance_method(_V3d.V3d_View_ConvertWithProj)
    DefaultCamera = _swig_new_instance_method(_V3d.V3d_View_DefaultCamera)
    Depth = _swig_new_instance_method(_V3d.V3d_View_Depth)
    DepthFitAll = _swig_new_instance_method(_V3d.V3d_View_DepthFitAll)
    DiagnosticInformation = _swig_new_instance_method(_V3d.V3d_View_DiagnosticInformation)
    DoMapping = _swig_new_instance_method(_V3d.V3d_View_DoMapping)
    Dump = _swig_new_instance_method(_V3d.V3d_View_Dump)
    Eye = _swig_new_instance_method(_V3d.V3d_View_Eye)
    FitAll = _swig_new_instance_method(_V3d.V3d_View_FitAll)
    FitMinMax = _swig_new_instance_method(_V3d.V3d_View_FitMinMax)
    FocalReferencePoint = _swig_new_instance_method(_V3d.V3d_View_FocalReferencePoint)
    Focale = _swig_new_instance_method(_V3d.V3d_View_Focale)
    GetGraduatedTrihedron = _swig_new_instance_method(_V3d.V3d_View_GetGraduatedTrihedron)
    GradientBackground = _swig_new_instance_method(_V3d.V3d_View_GradientBackground)
    GradientBackgroundColors = _swig_new_instance_method(_V3d.V3d_View_GradientBackgroundColors)
    GraduatedTrihedronDisplay = _swig_new_instance_method(_V3d.V3d_View_GraduatedTrihedronDisplay)
    GraduatedTrihedronErase = _swig_new_instance_method(_V3d.V3d_View_GraduatedTrihedronErase)
    GravityPoint = _swig_new_instance_method(_V3d.V3d_View_GravityPoint)
    IfMoreLights = _swig_new_instance_method(_V3d.V3d_View_IfMoreLights)
    IfWindow = _swig_new_instance_method(_V3d.V3d_View_IfWindow)
    InitActiveLights = _swig_new_instance_method(_V3d.V3d_View_InitActiveLights)
    Invalidate = _swig_new_instance_method(_V3d.V3d_View_Invalidate)
    InvalidateImmediate = _swig_new_instance_method(_V3d.V3d_View_InvalidateImmediate)
    IsActiveLight = _swig_new_instance_method(_V3d.V3d_View_IsActiveLight)
    IsCullingEnabled = _swig_new_instance_method(_V3d.V3d_View_IsCullingEnabled)
    IsEmpty = _swig_new_instance_method(_V3d.V3d_View_IsEmpty)
    IsInvalidated = _swig_new_instance_method(_V3d.V3d_View_IsInvalidated)
    IsInvalidatedImmediate = _swig_new_instance_method(_V3d.V3d_View_IsInvalidatedImmediate)
    LightLimit = _swig_new_instance_method(_V3d.V3d_View_LightLimit)
    MoreActiveLights = _swig_new_instance_method(_V3d.V3d_View_MoreActiveLights)
    Move = _swig_new_instance_method(_V3d.V3d_View_Move)
    MustBeResized = _swig_new_instance_method(_V3d.V3d_View_MustBeResized)
    NextActiveLights = _swig_new_instance_method(_V3d.V3d_View_NextActiveLights)
    Pan = _swig_new_instance_method(_V3d.V3d_View_Pan)
    Panning = _swig_new_instance_method(_V3d.V3d_View_Panning)
    Place = _swig_new_instance_method(_V3d.V3d_View_Place)
    PlaneLimit = _swig_new_instance_method(_V3d.V3d_View_PlaneLimit)
    Proj = _swig_new_instance_method(_V3d.V3d_View_Proj)
    ProjReferenceAxe = _swig_new_instance_method(_V3d.V3d_View_ProjReferenceAxe)
    Project = _swig_new_instance_method(_V3d.V3d_View_Project)
    Redraw = _swig_new_instance_method(_V3d.V3d_View_Redraw)
    RedrawImmediate = _swig_new_instance_method(_V3d.V3d_View_RedrawImmediate)
    Remove = _swig_new_instance_method(_V3d.V3d_View_Remove)
    RemoveClipPlane = _swig_new_instance_method(_V3d.V3d_View_RemoveClipPlane)
    RenderingParams = _swig_new_instance_method(_V3d.V3d_View_RenderingParams)
    Reset = _swig_new_instance_method(_V3d.V3d_View_Reset)
    ResetViewMapping = _swig_new_instance_method(_V3d.V3d_View_ResetViewMapping)
    ResetViewOrientation = _swig_new_instance_method(_V3d.V3d_View_ResetViewOrientation)
    Rotate = _swig_new_instance_method(_V3d.V3d_View_Rotate)
    Rotation = _swig_new_instance_method(_V3d.V3d_View_Rotation)
    Scale = _swig_new_instance_method(_V3d.V3d_View_Scale)
    SetAt = _swig_new_instance_method(_V3d.V3d_View_SetAt)
    SetAutoZFitMode = _swig_new_instance_method(_V3d.V3d_View_SetAutoZFitMode)
    SetAxialScale = _swig_new_instance_method(_V3d.V3d_View_SetAxialScale)
    SetAxis = _swig_new_instance_method(_V3d.V3d_View_SetAxis)
    SetBackFacingModel = _swig_new_instance_method(_V3d.V3d_View_SetBackFacingModel)
    SetBackgroundColor = _swig_new_instance_method(_V3d.V3d_View_SetBackgroundColor)
    SetBackgroundCubeMap = _swig_new_instance_method(_V3d.V3d_View_SetBackgroundCubeMap)
    SetBackgroundImage = _swig_new_instance_method(_V3d.V3d_View_SetBackgroundImage)
    SetBgGradientColors = _swig_new_instance_method(_V3d.V3d_View_SetBgGradientColors)
    SetBgGradientStyle = _swig_new_instance_method(_V3d.V3d_View_SetBgGradientStyle)
    SetBgImageStyle = _swig_new_instance_method(_V3d.V3d_View_SetBgImageStyle)
    SetCamera = _swig_new_instance_method(_V3d.V3d_View_SetCamera)
    SetCenter = _swig_new_instance_method(_V3d.V3d_View_SetCenter)
    SetClipPlanes = _swig_new_instance_method(_V3d.V3d_View_SetClipPlanes)
    SetComputedMode = _swig_new_instance_method(_V3d.V3d_View_SetComputedMode)
    SetDepth = _swig_new_instance_method(_V3d.V3d_View_SetDepth)
    SetEye = _swig_new_instance_method(_V3d.V3d_View_SetEye)
    SetFocale = _swig_new_instance_method(_V3d.V3d_View_SetFocale)
    SetFront = _swig_new_instance_method(_V3d.V3d_View_SetFront)
    SetFrustumCulling = _swig_new_instance_method(_V3d.V3d_View_SetFrustumCulling)
    SetGrid = _swig_new_instance_method(_V3d.V3d_View_SetGrid)
    SetGridActivity = _swig_new_instance_method(_V3d.V3d_View_SetGridActivity)
    SetImmediateUpdate = _swig_new_instance_method(_V3d.V3d_View_SetImmediateUpdate)
    SetLightOff = _swig_new_instance_method(_V3d.V3d_View_SetLightOff)
    SetLightOn = _swig_new_instance_method(_V3d.V3d_View_SetLightOn)
    SetMagnify = _swig_new_instance_method(_V3d.V3d_View_SetMagnify)
    SetProj = _swig_new_instance_method(_V3d.V3d_View_SetProj)
    SetScale = _swig_new_instance_method(_V3d.V3d_View_SetScale)
    SetShadingModel = _swig_new_instance_method(_V3d.V3d_View_SetShadingModel)
    SetSize = _swig_new_instance_method(_V3d.V3d_View_SetSize)
    SetTextureEnv = _swig_new_instance_method(_V3d.V3d_View_SetTextureEnv)
    SetTwist = _swig_new_instance_method(_V3d.V3d_View_SetTwist)
    SetUp = _swig_new_instance_method(_V3d.V3d_View_SetUp)
    SetViewMappingDefault = _swig_new_instance_method(_V3d.V3d_View_SetViewMappingDefault)
    SetViewOrientationDefault = _swig_new_instance_method(_V3d.V3d_View_SetViewOrientationDefault)
    SetVisualization = _swig_new_instance_method(_V3d.V3d_View_SetVisualization)
    SetWindow = _swig_new_instance_method(_V3d.V3d_View_SetWindow)
    SetZSize = _swig_new_instance_method(_V3d.V3d_View_SetZSize)
    SetZoom = _swig_new_instance_method(_V3d.V3d_View_SetZoom)
    ShadingModel = _swig_new_instance_method(_V3d.V3d_View_ShadingModel)
    Size = _swig_new_instance_method(_V3d.V3d_View_Size)
    StartRotation = _swig_new_instance_method(_V3d.V3d_View_StartRotation)
    StartZoomAtPoint = _swig_new_instance_method(_V3d.V3d_View_StartZoomAtPoint)
    StatisticInformation = _swig_new_instance_method(_V3d.V3d_View_StatisticInformation)
    TextureEnv = _swig_new_instance_method(_V3d.V3d_View_TextureEnv)
    ToPixMap = _swig_new_instance_method(_V3d.V3d_View_ToPixMap)
    Translate = _swig_new_instance_method(_V3d.V3d_View_Translate)
    TriedronDisplay = _swig_new_instance_method(_V3d.V3d_View_TriedronDisplay)
    TriedronErase = _swig_new_instance_method(_V3d.V3d_View_TriedronErase)
    Turn = _swig_new_instance_method(_V3d.V3d_View_Turn)
    Twist = _swig_new_instance_method(_V3d.V3d_View_Twist)
    Type = _swig_new_instance_method(_V3d.V3d_View_Type)
    Up = _swig_new_instance_method(_V3d.V3d_View_Up)
    Update = _swig_new_instance_method(_V3d.V3d_View_Update)
    UpdateLights = _swig_new_instance_method(_V3d.V3d_View_UpdateLights)

    def __init__(self, *args):
        r"""
        * Initializes the view.
        	:param theViewer:
        	:type theViewer: V3d_Viewer
        	:param theType: default value is V3d_ORTHOGRAPHIC
        	:type theType: V3d_TypeOfView
        	:rtype: None* Initializes the view by copying.
        	:param theViewer:
        	:type theViewer: V3d_Viewer
        	:param theView:
        	:type theView: V3d_View
        	:rtype: None
        """
        _V3d.V3d_View_swiginit(self, _V3d.new_V3d_View(*args))
    View = _swig_new_instance_method(_V3d.V3d_View_View)
    Viewer = _swig_new_instance_method(_V3d.V3d_View_Viewer)
    Visualization = _swig_new_instance_method(_V3d.V3d_View_Visualization)
    Window = _swig_new_instance_method(_V3d.V3d_View_Window)
    WindowFit = _swig_new_instance_method(_V3d.V3d_View_WindowFit)
    WindowFitAll = _swig_new_instance_method(_V3d.V3d_View_WindowFitAll)
    ZBufferTriedronSetup = _swig_new_instance_method(_V3d.V3d_View_ZBufferTriedronSetup)
    ZFitAll = _swig_new_instance_method(_V3d.V3d_View_ZFitAll)
    ZSize = _swig_new_instance_method(_V3d.V3d_View_ZSize)
    Zoom = _swig_new_instance_method(_V3d.V3d_View_Zoom)
    ZoomAtPoint = _swig_new_instance_method(_V3d.V3d_View_ZoomAtPoint)


    @staticmethod
    def DownCast(t):
      return Handle_V3d_View_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_View

# Register V3d_View in _V3d:
_V3d.V3d_View_swigregister(V3d_View)

class V3d_Viewer(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ActivateGrid = _swig_new_instance_method(_V3d.V3d_Viewer_ActivateGrid)
    ActiveLight = _swig_new_instance_method(_V3d.V3d_Viewer_ActiveLight)
    ActiveLightIterator = _swig_new_instance_method(_V3d.V3d_Viewer_ActiveLightIterator)
    ActiveView = _swig_new_instance_method(_V3d.V3d_Viewer_ActiveView)
    ActiveViewIterator = _swig_new_instance_method(_V3d.V3d_Viewer_ActiveViewIterator)
    AddLight = _swig_new_instance_method(_V3d.V3d_Viewer_AddLight)
    AddZLayer = _swig_new_instance_method(_V3d.V3d_Viewer_AddZLayer)
    CircularGridGraphicValues = _swig_new_instance_method(_V3d.V3d_Viewer_CircularGridGraphicValues)
    CircularGridValues = _swig_new_instance_method(_V3d.V3d_Viewer_CircularGridValues)
    ComputedMode = _swig_new_instance_method(_V3d.V3d_Viewer_ComputedMode)
    CreateView = _swig_new_instance_method(_V3d.V3d_Viewer_CreateView)
    DeactivateGrid = _swig_new_instance_method(_V3d.V3d_Viewer_DeactivateGrid)
    DefaultBackgroundColor = _swig_new_instance_method(_V3d.V3d_Viewer_DefaultBackgroundColor)
    DefaultBgGradientColors = _swig_new_instance_method(_V3d.V3d_Viewer_DefaultBgGradientColors)
    DefaultComputedMode = _swig_new_instance_method(_V3d.V3d_Viewer_DefaultComputedMode)
    DefaultRenderingParams = _swig_new_instance_method(_V3d.V3d_Viewer_DefaultRenderingParams)
    DefaultShadingModel = _swig_new_instance_method(_V3d.V3d_Viewer_DefaultShadingModel)
    DefaultTypeOfView = _swig_new_instance_method(_V3d.V3d_Viewer_DefaultTypeOfView)
    DefaultViewProj = _swig_new_instance_method(_V3d.V3d_Viewer_DefaultViewProj)
    DefaultViewSize = _swig_new_instance_method(_V3d.V3d_Viewer_DefaultViewSize)
    DefaultVisualization = _swig_new_instance_method(_V3d.V3d_Viewer_DefaultVisualization)
    DefinedLight = _swig_new_instance_method(_V3d.V3d_Viewer_DefinedLight)
    DefinedLightIterator = _swig_new_instance_method(_V3d.V3d_Viewer_DefinedLightIterator)
    DefinedView = _swig_new_instance_method(_V3d.V3d_Viewer_DefinedView)
    DefinedViewIterator = _swig_new_instance_method(_V3d.V3d_Viewer_DefinedViewIterator)
    DelLight = _swig_new_instance_method(_V3d.V3d_Viewer_DelLight)
    DisplayPrivilegedPlane = _swig_new_instance_method(_V3d.V3d_Viewer_DisplayPrivilegedPlane)
    Driver = _swig_new_instance_method(_V3d.V3d_Viewer_Driver)
    Erase = _swig_new_instance_method(_V3d.V3d_Viewer_Erase)
    GetAllZLayers = _swig_new_instance_method(_V3d.V3d_Viewer_GetAllZLayers)
    GetGradientBackground = _swig_new_instance_method(_V3d.V3d_Viewer_GetGradientBackground)
    Grid = _swig_new_instance_method(_V3d.V3d_Viewer_Grid)
    GridDrawMode = _swig_new_instance_method(_V3d.V3d_Viewer_GridDrawMode)
    GridEcho = _swig_new_instance_method(_V3d.V3d_Viewer_GridEcho)
    GridType = _swig_new_instance_method(_V3d.V3d_Viewer_GridType)
    HideGridEcho = _swig_new_instance_method(_V3d.V3d_Viewer_HideGridEcho)
    IfMoreViews = _swig_new_instance_method(_V3d.V3d_Viewer_IfMoreViews)
    InitActiveLights = _swig_new_instance_method(_V3d.V3d_Viewer_InitActiveLights)
    InitActiveViews = _swig_new_instance_method(_V3d.V3d_Viewer_InitActiveViews)
    InitDefinedLights = _swig_new_instance_method(_V3d.V3d_Viewer_InitDefinedLights)
    InitDefinedViews = _swig_new_instance_method(_V3d.V3d_Viewer_InitDefinedViews)
    InsertLayerAfter = _swig_new_instance_method(_V3d.V3d_Viewer_InsertLayerAfter)
    InsertLayerBefore = _swig_new_instance_method(_V3d.V3d_Viewer_InsertLayerBefore)
    Invalidate = _swig_new_instance_method(_V3d.V3d_Viewer_Invalidate)
    IsActive = _swig_new_instance_method(_V3d.V3d_Viewer_IsActive)
    IsGlobalLight = _swig_new_instance_method(_V3d.V3d_Viewer_IsGlobalLight)
    LastActiveView = _swig_new_instance_method(_V3d.V3d_Viewer_LastActiveView)
    MoreActiveLights = _swig_new_instance_method(_V3d.V3d_Viewer_MoreActiveLights)
    MoreActiveViews = _swig_new_instance_method(_V3d.V3d_Viewer_MoreActiveViews)
    MoreDefinedLights = _swig_new_instance_method(_V3d.V3d_Viewer_MoreDefinedLights)
    MoreDefinedViews = _swig_new_instance_method(_V3d.V3d_Viewer_MoreDefinedViews)
    NextActiveLights = _swig_new_instance_method(_V3d.V3d_Viewer_NextActiveLights)
    NextActiveViews = _swig_new_instance_method(_V3d.V3d_Viewer_NextActiveViews)
    NextDefinedLights = _swig_new_instance_method(_V3d.V3d_Viewer_NextDefinedLights)
    NextDefinedViews = _swig_new_instance_method(_V3d.V3d_Viewer_NextDefinedViews)
    PrivilegedPlane = _swig_new_instance_method(_V3d.V3d_Viewer_PrivilegedPlane)
    RectangularGridGraphicValues = _swig_new_instance_method(_V3d.V3d_Viewer_RectangularGridGraphicValues)
    RectangularGridValues = _swig_new_instance_method(_V3d.V3d_Viewer_RectangularGridValues)
    Redraw = _swig_new_instance_method(_V3d.V3d_Viewer_Redraw)
    RedrawImmediate = _swig_new_instance_method(_V3d.V3d_Viewer_RedrawImmediate)
    Remove = _swig_new_instance_method(_V3d.V3d_Viewer_Remove)
    RemoveZLayer = _swig_new_instance_method(_V3d.V3d_Viewer_RemoveZLayer)
    SetCircularGridGraphicValues = _swig_new_instance_method(_V3d.V3d_Viewer_SetCircularGridGraphicValues)
    SetCircularGridValues = _swig_new_instance_method(_V3d.V3d_Viewer_SetCircularGridValues)
    SetComputedMode = _swig_new_instance_method(_V3d.V3d_Viewer_SetComputedMode)
    SetDefaultBackgroundColor = _swig_new_instance_method(_V3d.V3d_Viewer_SetDefaultBackgroundColor)
    SetDefaultBgGradientColors = _swig_new_instance_method(_V3d.V3d_Viewer_SetDefaultBgGradientColors)
    SetDefaultComputedMode = _swig_new_instance_method(_V3d.V3d_Viewer_SetDefaultComputedMode)
    SetDefaultLights = _swig_new_instance_method(_V3d.V3d_Viewer_SetDefaultLights)
    SetDefaultRenderingParams = _swig_new_instance_method(_V3d.V3d_Viewer_SetDefaultRenderingParams)
    SetDefaultShadingModel = _swig_new_instance_method(_V3d.V3d_Viewer_SetDefaultShadingModel)
    SetDefaultTypeOfView = _swig_new_instance_method(_V3d.V3d_Viewer_SetDefaultTypeOfView)
    SetDefaultViewProj = _swig_new_instance_method(_V3d.V3d_Viewer_SetDefaultViewProj)
    SetDefaultViewSize = _swig_new_instance_method(_V3d.V3d_Viewer_SetDefaultViewSize)
    SetDefaultVisualization = _swig_new_instance_method(_V3d.V3d_Viewer_SetDefaultVisualization)
    SetGridEcho = _swig_new_instance_method(_V3d.V3d_Viewer_SetGridEcho)
    SetLightOff = _swig_new_instance_method(_V3d.V3d_Viewer_SetLightOff)
    SetLightOn = _swig_new_instance_method(_V3d.V3d_Viewer_SetLightOn)
    SetPrivilegedPlane = _swig_new_instance_method(_V3d.V3d_Viewer_SetPrivilegedPlane)
    SetRectangularGridGraphicValues = _swig_new_instance_method(_V3d.V3d_Viewer_SetRectangularGridGraphicValues)
    SetRectangularGridValues = _swig_new_instance_method(_V3d.V3d_Viewer_SetRectangularGridValues)
    SetViewOff = _swig_new_instance_method(_V3d.V3d_Viewer_SetViewOff)
    SetViewOn = _swig_new_instance_method(_V3d.V3d_Viewer_SetViewOn)
    SetZLayerSettings = _swig_new_instance_method(_V3d.V3d_Viewer_SetZLayerSettings)
    ShowGridEcho = _swig_new_instance_method(_V3d.V3d_Viewer_ShowGridEcho)
    StructureManager = _swig_new_instance_method(_V3d.V3d_Viewer_StructureManager)
    UnHighlight = _swig_new_instance_method(_V3d.V3d_Viewer_UnHighlight)
    Update = _swig_new_instance_method(_V3d.V3d_Viewer_Update)
    UpdateLights = _swig_new_instance_method(_V3d.V3d_Viewer_UpdateLights)

    def __init__(self, *args):
        r"""
        * Create a Viewer with the given graphic driver and with default parameters: - View orientation: V3d_XposYnegZpos - View background: Quantity_NOC_GRAY30 - Shading model: V3d_GOURAUD
        	:param theDriver:
        	:type theDriver: Graphic3d_GraphicDriver
        	:rtype: None* @name deprecated methods
        	:param theDriver:
        	:type theDriver: Graphic3d_GraphicDriver
        	:param theName:
        	:type theName: Standard_ExtString
        	:param theDomain: default value is 
        	:type theDomain: char *
        	:param theViewSize: default value is 1000.0
        	:type theViewSize: float
        	:param theViewProj: default value is V3d_XposYnegZpos
        	:type theViewProj: V3d_TypeOfOrientation
        	:param theViewBackground: default value is Quantity_NOC_GRAY30
        	:type theViewBackground: Quantity_Color
        	:param theVisualization: default value is V3d_ZBUFFER
        	:type theVisualization: V3d_TypeOfVisualization
        	:param theShadingModel: default value is Graphic3d_TOSM_VERTEX
        	:type theShadingModel: Graphic3d_TypeOfShadingModel
        	:param theComputedMode: default value is Standard_True
        	:type theComputedMode: bool
        	:param theDefaultComputedMode: default value is Standard_True
        	:type theDefaultComputedMode: bool
        	:rtype: None
        """
        _V3d.V3d_Viewer_swiginit(self, _V3d.new_V3d_Viewer(*args))
    ZLayerSettings = _swig_new_instance_method(_V3d.V3d_Viewer_ZLayerSettings)


    @staticmethod
    def DownCast(t):
      return Handle_V3d_Viewer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_Viewer

# Register V3d_Viewer in _V3d:
_V3d.V3d_Viewer_swigregister(V3d_Viewer)

class V3d_DirectionalLight(V3d_PositionLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SetDirection = _swig_new_instance_method(_V3d.V3d_DirectionalLight_SetDirection)

    def __init__(self, *args):
        r"""
        * Creates a directional light source in the viewer.
        	:param theDirection: default value is V3d_XposYposZpos
        	:type theDirection: V3d_TypeOfOrientation
        	:param theColor: default value is Quantity_NOC_WHITE
        	:type theColor: Quantity_Color
        	:param theIsHeadlight: default value is Standard_False
        	:type theIsHeadlight: bool
        	:rtype: None* Creates a directional light source in the viewer.
        	:param theDirection:
        	:type theDirection: gp_Dir
        	:param theColor: default value is Quantity_NOC_WHITE
        	:type theColor: Quantity_Color
        	:param theIsHeadlight: default value is Standard_False
        	:type theIsHeadlight: bool
        	:rtype: None:param theViewer:
        	:type theViewer: V3d_Viewer
        	:param theDirection: default value is V3d_XposYposZpos
        	:type theDirection: V3d_TypeOfOrientation
        	:param theColor: default value is Quantity_NOC_WHITE
        	:type theColor: Quantity_Color
        	:param theIsHeadlight: default value is Standard_False
        	:type theIsHeadlight: bool
        	:rtype: None* Creates a directional light source in the viewer. theXt, theYt, theZt : Coordinate of light source Target. theXp, theYp, theZp : Coordinate of light source Position. The others parameters describe before.
        	:param theViewer:
        	:type theViewer: V3d_Viewer
        	:param theXt:
        	:type theXt: float
        	:param theYt:
        	:type theYt: float
        	:param theZt:
        	:type theZt: float
        	:param theXp:
        	:type theXp: float
        	:param theYp:
        	:type theYp: float
        	:param theZp:
        	:type theZp: float
        	:param theColor: default value is Quantity_NOC_WHITE
        	:type theColor: Quantity_Color
        	:param theIsHeadlight: default value is Standard_False
        	:type theIsHeadlight: bool
        	:rtype: None
        """
        _V3d.V3d_DirectionalLight_swiginit(self, _V3d.new_V3d_DirectionalLight(*args))


    @staticmethod
    def DownCast(t):
      return Handle_V3d_DirectionalLight_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_DirectionalLight

# Register V3d_DirectionalLight in _V3d:
_V3d.V3d_DirectionalLight_swigregister(V3d_DirectionalLight)

class V3d_PositionalLight(V3d_PositionLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates an isolated light source in the viewer with default attenuation factors (1.0, 0.0).
        	:param thePos:
        	:type thePos: gp_Pnt
        	:param theColor: default value is Quantity_NOC_WHITE
        	:type theColor: Quantity_Color
        	:rtype: None:param theViewer:
        	:type theViewer: V3d_Viewer
        	:param theX:
        	:type theX: float
        	:param theY:
        	:type theY: float
        	:param theZ:
        	:type theZ: float
        	:param theColor: default value is Quantity_NOC_WHITE
        	:type theColor: Quantity_Color
        	:param theConstAttenuation: default value is 1.0
        	:type theConstAttenuation: float
        	:param theLinearAttenuation: default value is 0.0
        	:type theLinearAttenuation: float
        	:rtype: None
        """
        _V3d.V3d_PositionalLight_swiginit(self, _V3d.new_V3d_PositionalLight(*args))


    @staticmethod
    def DownCast(t):
      return Handle_V3d_PositionalLight_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_PositionalLight

# Register V3d_PositionalLight in _V3d:
_V3d.V3d_PositionalLight_swigregister(V3d_PositionalLight)

class V3d_SpotLight(V3d_PositionLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SetDirection = _swig_new_instance_method(_V3d.V3d_SpotLight_SetDirection)

    def __init__(self, *args):
        r"""
        * Creates a light source of the Spot type in the viewer with default attenuation factors (1.0, 0.0), concentration factor 1.0 and spot angle 30 degrees.
        	:param thePos:
        	:type thePos: gp_Pnt
        	:param theDirection: default value is V3d_XnegYnegZpos
        	:type theDirection: V3d_TypeOfOrientation
        	:param theColor: default value is Quantity_NOC_WHITE
        	:type theColor: Quantity_Color
        	:rtype: None* Creates a light source of the Spot type in the viewer with default attenuation factors (1.0, 0.0), concentration factor 1.0 and spot angle 30 degrees.
        	:param thePos:
        	:type thePos: gp_Pnt
        	:param theDirection:
        	:type theDirection: gp_Dir
        	:param theColor: default value is Quantity_NOC_WHITE
        	:type theColor: Quantity_Color
        	:rtype: None:param theViewer:
        	:type theViewer: V3d_Viewer
        	:param theX:
        	:type theX: float
        	:param theY:
        	:type theY: float
        	:param theZ:
        	:type theZ: float
        	:param theDirection: default value is V3d_XnegYnegZpos
        	:type theDirection: V3d_TypeOfOrientation
        	:param theColor: default value is Quantity_NOC_WHITE
        	:type theColor: Quantity_Color
        	:param theConstAttenuation: default value is 1.0
        	:type theConstAttenuation: float
        	:param theLinearAttenuation: default value is 0.0
        	:type theLinearAttenuation: float
        	:param theConcentration: default value is 1.0
        	:type theConcentration: float
        	:param theAngle: default value is 0.523599
        	:type theAngle: float
        	:rtype: None* theXt, theYt, theZt : Coordinate of light source Target. theXp, theYp, theZp : Coordinate of light source Position.
        	:param theViewer:
        	:type theViewer: V3d_Viewer
        	:param theXt:
        	:type theXt: float
        	:param theYt:
        	:type theYt: float
        	:param theZt:
        	:type theZt: float
        	:param theXp:
        	:type theXp: float
        	:param theYp:
        	:type theYp: float
        	:param theZp:
        	:type theZp: float
        	:param theColor: default value is Quantity_NOC_WHITE
        	:type theColor: Quantity_Color
        	:param theConstAttenuation: default value is 1.0
        	:type theConstAttenuation: float
        	:param theLinearAttenuation: default value is 0.0
        	:type theLinearAttenuation: float
        	:param theConcentration: default value is 1.0
        	:type theConcentration: float
        	:param theAngle: default value is 0.523599
        	:type theAngle: float
        	:rtype: None
        """
        _V3d.V3d_SpotLight_swiginit(self, _V3d.new_V3d_SpotLight(*args))


    @staticmethod
    def DownCast(t):
      return Handle_V3d_SpotLight_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_SpotLight

# Register V3d_SpotLight in _V3d:
_V3d.V3d_SpotLight_swigregister(V3d_SpotLight)



