# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
StepToTopoDS module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_steptotopods.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _StepToTopoDS
else:
    import _StepToTopoDS

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _StepToTopoDS.SWIG_PyInstanceMethod_New
_swig_new_static_method = _StepToTopoDS.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepToTopoDS.delete_SwigPyIterator
    value = _swig_new_instance_method(_StepToTopoDS.SwigPyIterator_value)
    incr = _swig_new_instance_method(_StepToTopoDS.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_StepToTopoDS.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_StepToTopoDS.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_StepToTopoDS.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_StepToTopoDS.SwigPyIterator_copy)
    next = _swig_new_instance_method(_StepToTopoDS.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_StepToTopoDS.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_StepToTopoDS.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_StepToTopoDS.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_StepToTopoDS.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_StepToTopoDS.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_StepToTopoDS.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_StepToTopoDS.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_StepToTopoDS.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_StepToTopoDS.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _StepToTopoDS:
_StepToTopoDS.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.StepRepr
import OCC.Core.TCollection
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
import OCC.Core.StepBasic
import OCC.Core.StepGeom
import OCC.Core.StepShape
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Transfer
import OCC.Core.Geom2d
StepToTopoDS_GeometricToolDone = _StepToTopoDS.StepToTopoDS_GeometricToolDone
StepToTopoDS_GeometricToolIsDegenerated = _StepToTopoDS.StepToTopoDS_GeometricToolIsDegenerated
StepToTopoDS_GeometricToolHasNoPCurve = _StepToTopoDS.StepToTopoDS_GeometricToolHasNoPCurve
StepToTopoDS_GeometricToolWrong3dParameters = _StepToTopoDS.StepToTopoDS_GeometricToolWrong3dParameters
StepToTopoDS_GeometricToolNoProjectiOnCurve = _StepToTopoDS.StepToTopoDS_GeometricToolNoProjectiOnCurve
StepToTopoDS_GeometricToolOther = _StepToTopoDS.StepToTopoDS_GeometricToolOther
StepToTopoDS_TranslateShellDone = _StepToTopoDS.StepToTopoDS_TranslateShellDone
StepToTopoDS_TranslateShellOther = _StepToTopoDS.StepToTopoDS_TranslateShellOther
StepToTopoDS_TranslatePolyLoopDone = _StepToTopoDS.StepToTopoDS_TranslatePolyLoopDone
StepToTopoDS_TranslatePolyLoopOther = _StepToTopoDS.StepToTopoDS_TranslatePolyLoopOther
StepToTopoDS_TranslateEdgeDone = _StepToTopoDS.StepToTopoDS_TranslateEdgeDone
StepToTopoDS_TranslateEdgeOther = _StepToTopoDS.StepToTopoDS_TranslateEdgeOther
StepToTopoDS_BuilderDone = _StepToTopoDS.StepToTopoDS_BuilderDone
StepToTopoDS_BuilderOther = _StepToTopoDS.StepToTopoDS_BuilderOther
StepToTopoDS_TranslateFaceDone = _StepToTopoDS.StepToTopoDS_TranslateFaceDone
StepToTopoDS_TranslateFaceOther = _StepToTopoDS.StepToTopoDS_TranslateFaceOther
StepToTopoDS_TranslateVertexLoopDone = _StepToTopoDS.StepToTopoDS_TranslateVertexLoopDone
StepToTopoDS_TranslateVertexLoopOther = _StepToTopoDS.StepToTopoDS_TranslateVertexLoopOther
StepToTopoDS_TranslateEdgeLoopDone = _StepToTopoDS.StepToTopoDS_TranslateEdgeLoopDone
StepToTopoDS_TranslateEdgeLoopOther = _StepToTopoDS.StepToTopoDS_TranslateEdgeLoopOther
StepToTopoDS_TranslateVertexDone = _StepToTopoDS.StepToTopoDS_TranslateVertexDone
StepToTopoDS_TranslateVertexOther = _StepToTopoDS.StepToTopoDS_TranslateVertexOther
class StepToTopoDS_PointEdgeMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointEdgeMap_begin)
    end = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointEdgeMap_end)
    cbegin = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointEdgeMap_cbegin)
    cend = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointEdgeMap_cend)

    def __init__(self, *args):
        _StepToTopoDS.StepToTopoDS_PointEdgeMap_swiginit(self, _StepToTopoDS.new_StepToTopoDS_PointEdgeMap(*args))
    Exchange = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointEdgeMap_Exchange)
    Assign = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointEdgeMap_Assign)
    Set = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointEdgeMap_Set)
    ReSize = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointEdgeMap_ReSize)
    Bind = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointEdgeMap_Bind)
    Bound = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointEdgeMap_Bound)
    IsBound = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointEdgeMap_IsBound)
    UnBind = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointEdgeMap_UnBind)
    Seek = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointEdgeMap_Seek)
    Find = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointEdgeMap_Find)
    ChangeSeek = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointEdgeMap_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointEdgeMap_ChangeFind)
    __call__ = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointEdgeMap___call__)
    Clear = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointEdgeMap_Clear)
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_PointEdgeMap
    Size = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointEdgeMap_Size)

# Register StepToTopoDS_PointEdgeMap in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_PointEdgeMap_swigregister(StepToTopoDS_PointEdgeMap)

class StepToTopoDS_DataMapOfRI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRI_begin)
    end = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRI_end)
    cbegin = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRI_cbegin)
    cend = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRI_cend)

    def __init__(self, *args):
        _StepToTopoDS.StepToTopoDS_DataMapOfRI_swiginit(self, _StepToTopoDS.new_StepToTopoDS_DataMapOfRI(*args))
    Exchange = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRI_Exchange)
    Assign = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRI_Assign)
    Set = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRI_Set)
    ReSize = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRI_ReSize)
    Bind = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRI_Bind)
    Bound = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRI_Bound)
    IsBound = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRI_IsBound)
    UnBind = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRI_UnBind)
    Seek = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRI_Seek)
    Find = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRI_Find)
    ChangeSeek = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRI_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRI_ChangeFind)
    __call__ = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRI___call__)
    Clear = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRI_Clear)
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_DataMapOfRI
    Size = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRI_Size)

# Register StepToTopoDS_DataMapOfRI in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_DataMapOfRI_swigregister(StepToTopoDS_DataMapOfRI)

class StepToTopoDS_PointVertexMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointVertexMap_begin)
    end = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointVertexMap_end)
    cbegin = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointVertexMap_cbegin)
    cend = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointVertexMap_cend)

    def __init__(self, *args):
        _StepToTopoDS.StepToTopoDS_PointVertexMap_swiginit(self, _StepToTopoDS.new_StepToTopoDS_PointVertexMap(*args))
    Exchange = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointVertexMap_Exchange)
    Assign = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointVertexMap_Assign)
    Set = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointVertexMap_Set)
    ReSize = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointVertexMap_ReSize)
    Bind = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointVertexMap_Bind)
    Bound = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointVertexMap_Bound)
    IsBound = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointVertexMap_IsBound)
    UnBind = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointVertexMap_UnBind)
    Seek = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointVertexMap_Seek)
    Find = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointVertexMap_Find)
    ChangeSeek = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointVertexMap_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointVertexMap_ChangeFind)
    __call__ = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointVertexMap___call__)
    Clear = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointVertexMap_Clear)
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_PointVertexMap
    Size = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_PointVertexMap_Size)

# Register StepToTopoDS_PointVertexMap in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_PointVertexMap_swigregister(StepToTopoDS_PointVertexMap)

class StepToTopoDS_DataMapOfRINames(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_begin)
    end = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_end)
    cbegin = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_cbegin)
    cend = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_cend)

    def __init__(self, *args):
        _StepToTopoDS.StepToTopoDS_DataMapOfRINames_swiginit(self, _StepToTopoDS.new_StepToTopoDS_DataMapOfRINames(*args))
    Exchange = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_Exchange)
    Assign = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_Assign)
    Set = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_Set)
    ReSize = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_ReSize)
    Bind = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_Bind)
    Bound = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_Bound)
    IsBound = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_IsBound)
    UnBind = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_UnBind)
    Seek = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_Seek)
    Find = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_Find)
    ChangeSeek = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_ChangeFind)
    __call__ = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRINames___call__)
    Clear = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_Clear)
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_DataMapOfRINames
    Size = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfRINames_Size)

# Register StepToTopoDS_DataMapOfRINames in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_DataMapOfRINames_swigregister(StepToTopoDS_DataMapOfRINames)

class StepToTopoDS_DataMapOfTRI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_begin)
    end = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_end)
    cbegin = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_cbegin)
    cend = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_cend)

    def __init__(self, *args):
        _StepToTopoDS.StepToTopoDS_DataMapOfTRI_swiginit(self, _StepToTopoDS.new_StepToTopoDS_DataMapOfTRI(*args))
    Exchange = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_Exchange)
    Assign = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_Assign)
    Set = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_Set)
    ReSize = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_ReSize)
    Bind = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_Bind)
    Bound = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_Bound)
    IsBound = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_IsBound)
    UnBind = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_UnBind)
    Seek = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_Seek)
    Find = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_Find)
    ChangeSeek = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_ChangeFind)
    __call__ = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfTRI___call__)
    Clear = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_Clear)
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_DataMapOfTRI
    Size = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_DataMapOfTRI_Size)

# Register StepToTopoDS_DataMapOfTRI in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_DataMapOfTRI_swigregister(StepToTopoDS_DataMapOfTRI)

class steptotopods(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DecodeBuilderError = _swig_new_static_method(_StepToTopoDS.steptotopods_DecodeBuilderError)
    DecodeEdgeError = _swig_new_static_method(_StepToTopoDS.steptotopods_DecodeEdgeError)
    DecodeFaceError = _swig_new_static_method(_StepToTopoDS.steptotopods_DecodeFaceError)
    DecodeGeometricToolError = _swig_new_static_method(_StepToTopoDS.steptotopods_DecodeGeometricToolError)
    DecodePolyLoopError = _swig_new_static_method(_StepToTopoDS.steptotopods_DecodePolyLoopError)
    DecodeShellError = _swig_new_static_method(_StepToTopoDS.steptotopods_DecodeShellError)
    DecodeVertexError = _swig_new_static_method(_StepToTopoDS.steptotopods_DecodeVertexError)
    DecodeVertexLoopError = _swig_new_static_method(_StepToTopoDS.steptotopods_DecodeVertexLoopError)

    __repr__ = _dumps_object


    def __init__(self):
        _StepToTopoDS.steptotopods_swiginit(self, _StepToTopoDS.new_steptotopods())
    __swig_destroy__ = _StepToTopoDS.delete_steptotopods

# Register steptotopods in _StepToTopoDS:
_StepToTopoDS.steptotopods_swigregister(steptotopods)
steptotopods_DecodeBuilderError = _StepToTopoDS.steptotopods_DecodeBuilderError
steptotopods_DecodeEdgeError = _StepToTopoDS.steptotopods_DecodeEdgeError
steptotopods_DecodeFaceError = _StepToTopoDS.steptotopods_DecodeFaceError
steptotopods_DecodeGeometricToolError = _StepToTopoDS.steptotopods_DecodeGeometricToolError
steptotopods_DecodePolyLoopError = _StepToTopoDS.steptotopods_DecodePolyLoopError
steptotopods_DecodeShellError = _StepToTopoDS.steptotopods_DecodeShellError
steptotopods_DecodeVertexError = _StepToTopoDS.steptotopods_DecodeVertexError
steptotopods_DecodeVertexLoopError = _StepToTopoDS.steptotopods_DecodeVertexLoopError

class StepToTopoDS_CartesianPointHasher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HashCode = _swig_new_static_method(_StepToTopoDS.StepToTopoDS_CartesianPointHasher_HashCode)
    IsEqual = _swig_new_static_method(_StepToTopoDS.StepToTopoDS_CartesianPointHasher_IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        _StepToTopoDS.StepToTopoDS_CartesianPointHasher_swiginit(self, _StepToTopoDS.new_StepToTopoDS_CartesianPointHasher())
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_CartesianPointHasher

# Register StepToTopoDS_CartesianPointHasher in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_CartesianPointHasher_swigregister(StepToTopoDS_CartesianPointHasher)
StepToTopoDS_CartesianPointHasher_HashCode = _StepToTopoDS.StepToTopoDS_CartesianPointHasher_HashCode
StepToTopoDS_CartesianPointHasher_IsEqual = _StepToTopoDS.StepToTopoDS_CartesianPointHasher_IsEqual

class StepToTopoDS_GeometricTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IsLikeSeam = _swig_new_static_method(_StepToTopoDS.StepToTopoDS_GeometricTool_IsLikeSeam)
    IsSeamCurve = _swig_new_static_method(_StepToTopoDS.StepToTopoDS_GeometricTool_IsSeamCurve)
    PCurve = _swig_new_static_method(_StepToTopoDS.StepToTopoDS_GeometricTool_PCurve)
    UpdateParam3d = _swig_new_static_method(_StepToTopoDS.StepToTopoDS_GeometricTool_UpdateParam3d)

    __repr__ = _dumps_object


    def __init__(self):
        _StepToTopoDS.StepToTopoDS_GeometricTool_swiginit(self, _StepToTopoDS.new_StepToTopoDS_GeometricTool())
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_GeometricTool

# Register StepToTopoDS_GeometricTool in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_GeometricTool_swigregister(StepToTopoDS_GeometricTool)
StepToTopoDS_GeometricTool_IsLikeSeam = _StepToTopoDS.StepToTopoDS_GeometricTool_IsLikeSeam
StepToTopoDS_GeometricTool_IsSeamCurve = _StepToTopoDS.StepToTopoDS_GeometricTool_IsSeamCurve
StepToTopoDS_GeometricTool_PCurve = _StepToTopoDS.StepToTopoDS_GeometricTool_PCurve
StepToTopoDS_GeometricTool_UpdateParam3d = _StepToTopoDS.StepToTopoDS_GeometricTool_UpdateParam3d

class StepToTopoDS_NMTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Bind = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_NMTool_Bind)
    CleanUp = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_NMTool_CleanUp)
    Find = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_NMTool_Find)
    Init = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_NMTool_Init)
    IsActive = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_NMTool_IsActive)
    IsBound = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_NMTool_IsBound)
    IsIDEASCase = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_NMTool_IsIDEASCase)
    IsPureNMShell = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_NMTool_IsPureNMShell)
    IsSuspectedAsClosing = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_NMTool_IsSuspectedAsClosing)
    RegisterNMEdge = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_NMTool_RegisterNMEdge)
    SetActive = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_NMTool_SetActive)
    SetIDEASCase = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_NMTool_SetIDEASCase)

    def __init__(self, *args):
        r"""
        :rtype: None:param MapOfRI:
        	:type MapOfRI: StepToTopoDS_DataMapOfRI
        	:param MapOfRINames:
        	:type MapOfRINames: StepToTopoDS_DataMapOfRINames
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_NMTool_swiginit(self, _StepToTopoDS.new_StepToTopoDS_NMTool(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_NMTool

# Register StepToTopoDS_NMTool in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_NMTool_swigregister(StepToTopoDS_NMTool)

class StepToTopoDS_PointPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param P1:
        	:type P1: StepGeom_CartesianPoint
        	:param P2:
        	:type P2: StepGeom_CartesianPoint
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_PointPair_swiginit(self, _StepToTopoDS.new_StepToTopoDS_PointPair(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_PointPair

# Register StepToTopoDS_PointPair in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_PointPair_swigregister(StepToTopoDS_PointPair)

class StepToTopoDS_PointPairHasher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HashCode = _swig_new_static_method(_StepToTopoDS.StepToTopoDS_PointPairHasher_HashCode)
    IsEqual = _swig_new_static_method(_StepToTopoDS.StepToTopoDS_PointPairHasher_IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        _StepToTopoDS.StepToTopoDS_PointPairHasher_swiginit(self, _StepToTopoDS.new_StepToTopoDS_PointPairHasher())
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_PointPairHasher

# Register StepToTopoDS_PointPairHasher in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_PointPairHasher_swigregister(StepToTopoDS_PointPairHasher)
StepToTopoDS_PointPairHasher_HashCode = _StepToTopoDS.StepToTopoDS_PointPairHasher_HashCode
StepToTopoDS_PointPairHasher_IsEqual = _StepToTopoDS.StepToTopoDS_PointPairHasher_IsEqual

class StepToTopoDS_Root(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IsDone = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_Root_IsDone)
    MaxTol = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_Root_MaxTol)
    Precision = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_Root_Precision)
    SetMaxTol = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_Root_SetMaxTol)
    SetPrecision = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_Root_SetPrecision)

    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_Root

# Register StepToTopoDS_Root in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_Root_swigregister(StepToTopoDS_Root)

class StepToTopoDS_MakeTransformed(StepToTopoDS_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Compute = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_MakeTransformed_Compute)

    def __init__(self, *args):
        r""":rtype: None"""
        _StepToTopoDS.StepToTopoDS_MakeTransformed_swiginit(self, _StepToTopoDS.new_StepToTopoDS_MakeTransformed(*args))
    Transform = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_MakeTransformed_Transform)
    Transformation = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_MakeTransformed_Transformation)
    TranslateMappedItem = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_MakeTransformed_TranslateMappedItem)

    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_MakeTransformed

# Register StepToTopoDS_MakeTransformed in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_MakeTransformed_swigregister(StepToTopoDS_MakeTransformed)

class StepToTopoDS_TranslateCompositeCurve(StepToTopoDS_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Init = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_Init)
    IsInfiniteSegment = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_IsInfiniteSegment)

    def __init__(self, *args):
        r"""
        * Empty constructor
        	:rtype: None* Translates standalone composite_curve
        	:param CC:
        	:type CC: StepGeom_CompositeCurve
        	:param TP:
        	:type TP: Transfer_TransientProcess
        	:rtype: None* Translates composite_curve lying on surface
        	:param CC:
        	:type CC: StepGeom_CompositeCurve
        	:param TP:
        	:type TP: Transfer_TransientProcess
        	:param S:
        	:type S: StepGeom_Surface
        	:param Surf:
        	:type Surf: Geom_Surface
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateCompositeCurve(*args))
    Value = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateCompositeCurve

# Register StepToTopoDS_TranslateCompositeCurve in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_swigregister(StepToTopoDS_TranslateCompositeCurve)

class StepToTopoDS_TranslateCurveBoundedSurface(StepToTopoDS_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Init = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateCurveBoundedSurface_Init)

    def __init__(self, *args):
        r"""
        * Create empty tool
        	:rtype: None* Translate surface
        	:param CBS:
        	:type CBS: StepGeom_CurveBoundedSurface
        	:param TP:
        	:type TP: Transfer_TransientProcess
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_TranslateCurveBoundedSurface_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateCurveBoundedSurface(*args))
    Value = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateCurveBoundedSurface_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateCurveBoundedSurface

# Register StepToTopoDS_TranslateCurveBoundedSurface in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_TranslateCurveBoundedSurface_swigregister(StepToTopoDS_TranslateCurveBoundedSurface)

class StepToTopoDS_TranslateEdge(StepToTopoDS_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Error = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateEdge_Error)
    Init = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateEdge_Init)
    MakeFromCurve3D = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateEdge_MakeFromCurve3D)
    MakePCurve = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateEdge_MakePCurve)

    def __init__(self, *args):
        r"""
        :rtype: None:param E:
        	:type E: StepShape_Edge
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param NMTool:
        	:type NMTool: StepToTopoDS_NMTool
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_TranslateEdge_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateEdge(*args))
    Value = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateEdge_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateEdge

# Register StepToTopoDS_TranslateEdge in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_TranslateEdge_swigregister(StepToTopoDS_TranslateEdge)

class StepToTopoDS_TranslateEdgeLoop(StepToTopoDS_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Error = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_Error)
    Init = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_Init)

    def __init__(self, *args):
        r"""
        :rtype: None:param FB:
        	:type FB: StepShape_FaceBound
        	:param F:
        	:type F: TopoDS_Face
        	:param S:
        	:type S: Geom_Surface
        	:param SS:
        	:type SS: StepGeom_Surface
        	:param ss:
        	:type ss: bool
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param NMTool:
        	:type NMTool: StepToTopoDS_NMTool
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateEdgeLoop(*args))
    Value = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateEdgeLoop

# Register StepToTopoDS_TranslateEdgeLoop in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_swigregister(StepToTopoDS_TranslateEdgeLoop)

class StepToTopoDS_TranslateFace(StepToTopoDS_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Error = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateFace_Error)
    Init = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateFace_Init)

    def __init__(self, *args):
        r"""
        :rtype: None:param FS:
        	:type FS: StepShape_FaceSurface
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param NMTool:
        	:type NMTool: StepToTopoDS_NMTool
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_TranslateFace_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateFace(*args))
    Value = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateFace_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateFace

# Register StepToTopoDS_TranslateFace in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_TranslateFace_swigregister(StepToTopoDS_TranslateFace)

class StepToTopoDS_TranslatePolyLoop(StepToTopoDS_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Error = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslatePolyLoop_Error)
    Init = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslatePolyLoop_Init)

    def __init__(self, *args):
        r"""
        :rtype: None:param PL:
        	:type PL: StepShape_PolyLoop
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param S:
        	:type S: Geom_Surface
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_TranslatePolyLoop_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslatePolyLoop(*args))
    Value = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslatePolyLoop_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslatePolyLoop

# Register StepToTopoDS_TranslatePolyLoop in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_TranslatePolyLoop_swigregister(StepToTopoDS_TranslatePolyLoop)

class StepToTopoDS_TranslateShell(StepToTopoDS_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Error = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateShell_Error)
    Init = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateShell_Init)

    def __init__(self, *args):
        r"""
        :rtype: None:param CFS:
        	:type CFS: StepShape_ConnectedFaceSet
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param NMTool:
        	:type NMTool: StepToTopoDS_NMTool
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_TranslateShell_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateShell(*args))
    Value = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateShell_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateShell

# Register StepToTopoDS_TranslateShell in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_TranslateShell_swigregister(StepToTopoDS_TranslateShell)

class StepToTopoDS_TranslateVertex(StepToTopoDS_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Error = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateVertex_Error)
    Init = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateVertex_Init)

    def __init__(self, *args):
        r"""
        :rtype: None:param V:
        	:type V: StepShape_Vertex
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param NMTool:
        	:type NMTool: StepToTopoDS_NMTool
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_TranslateVertex_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateVertex(*args))
    Value = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateVertex_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateVertex

# Register StepToTopoDS_TranslateVertex in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_TranslateVertex_swigregister(StepToTopoDS_TranslateVertex)

class StepToTopoDS_TranslateVertexLoop(StepToTopoDS_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Error = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateVertexLoop_Error)
    Init = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateVertexLoop_Init)

    def __init__(self, *args):
        r"""
        :rtype: None:param VL:
        	:type VL: StepShape_VertexLoop
        	:param T:
        	:type T: StepToTopoDS_Tool
        	:param NMTool:
        	:type NMTool: StepToTopoDS_NMTool
        	:rtype: None
        """
        _StepToTopoDS.StepToTopoDS_TranslateVertexLoop_swiginit(self, _StepToTopoDS.new_StepToTopoDS_TranslateVertexLoop(*args))
    Value = _swig_new_instance_method(_StepToTopoDS.StepToTopoDS_TranslateVertexLoop_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateVertexLoop

# Register StepToTopoDS_TranslateVertexLoop in _StepToTopoDS:
_StepToTopoDS.StepToTopoDS_TranslateVertexLoop_swigregister(StepToTopoDS_TranslateVertexLoop)



