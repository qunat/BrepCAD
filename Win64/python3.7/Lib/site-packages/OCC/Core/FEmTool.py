# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
FEmTool module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_femtool.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _FEmTool
else:
    import _FEmTool

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _FEmTool.SWIG_PyInstanceMethod_New
_swig_new_static_method = _FEmTool.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FEmTool.delete_SwigPyIterator
    value = _swig_new_instance_method(_FEmTool.SwigPyIterator_value)
    incr = _swig_new_instance_method(_FEmTool.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_FEmTool.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_FEmTool.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_FEmTool.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_FEmTool.SwigPyIterator_copy)
    next = _swig_new_instance_method(_FEmTool.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_FEmTool.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_FEmTool.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_FEmTool.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_FEmTool.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_FEmTool.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_FEmTool.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_FEmTool.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_FEmTool.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_FEmTool.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _FEmTool:
_FEmTool.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.gp
import OCC.Core.PLib
import OCC.Core.TColgp
import OCC.Core.GeomAbs
Handle_FEmTool_Curve_Create = _FEmTool.Handle_FEmTool_Curve_Create
Handle_FEmTool_Curve_DownCast = _FEmTool.Handle_FEmTool_Curve_DownCast
Handle_FEmTool_Curve_IsNull = _FEmTool.Handle_FEmTool_Curve_IsNull
Handle_FEmTool_ElementaryCriterion_Create = _FEmTool.Handle_FEmTool_ElementaryCriterion_Create
Handle_FEmTool_ElementaryCriterion_DownCast = _FEmTool.Handle_FEmTool_ElementaryCriterion_DownCast
Handle_FEmTool_ElementaryCriterion_IsNull = _FEmTool.Handle_FEmTool_ElementaryCriterion_IsNull
Handle_FEmTool_SparseMatrix_Create = _FEmTool.Handle_FEmTool_SparseMatrix_Create
Handle_FEmTool_SparseMatrix_DownCast = _FEmTool.Handle_FEmTool_SparseMatrix_DownCast
Handle_FEmTool_SparseMatrix_IsNull = _FEmTool.Handle_FEmTool_SparseMatrix_IsNull
Handle_FEmTool_LinearFlexion_Create = _FEmTool.Handle_FEmTool_LinearFlexion_Create
Handle_FEmTool_LinearFlexion_DownCast = _FEmTool.Handle_FEmTool_LinearFlexion_DownCast
Handle_FEmTool_LinearFlexion_IsNull = _FEmTool.Handle_FEmTool_LinearFlexion_IsNull
Handle_FEmTool_LinearJerk_Create = _FEmTool.Handle_FEmTool_LinearJerk_Create
Handle_FEmTool_LinearJerk_DownCast = _FEmTool.Handle_FEmTool_LinearJerk_DownCast
Handle_FEmTool_LinearJerk_IsNull = _FEmTool.Handle_FEmTool_LinearJerk_IsNull
Handle_FEmTool_LinearTension_Create = _FEmTool.Handle_FEmTool_LinearTension_Create
Handle_FEmTool_LinearTension_DownCast = _FEmTool.Handle_FEmTool_LinearTension_DownCast
Handle_FEmTool_LinearTension_IsNull = _FEmTool.Handle_FEmTool_LinearTension_IsNull
Handle_FEmTool_ProfileMatrix_Create = _FEmTool.Handle_FEmTool_ProfileMatrix_Create
Handle_FEmTool_ProfileMatrix_DownCast = _FEmTool.Handle_FEmTool_ProfileMatrix_DownCast
Handle_FEmTool_ProfileMatrix_IsNull = _FEmTool.Handle_FEmTool_ProfileMatrix_IsNull
Handle_FEmTool_HAssemblyTable_Create = _FEmTool.Handle_FEmTool_HAssemblyTable_Create
Handle_FEmTool_HAssemblyTable_DownCast = _FEmTool.Handle_FEmTool_HAssemblyTable_DownCast
Handle_FEmTool_HAssemblyTable_IsNull = _FEmTool.Handle_FEmTool_HAssemblyTable_IsNull
class FEmTool_AssemblyTable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _FEmTool.FEmTool_AssemblyTable_swiginit(self, _FEmTool.new_FEmTool_AssemblyTable(*args))
    Init = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable_Init)
    Size = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable_Size)
    Length = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable_Length)
    NbRows = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable_NbRows)
    NbColumns = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable_NbColumns)
    RowLength = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable_RowLength)
    ColLength = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable_ColLength)
    LowerRow = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable_LowerRow)
    UpperRow = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable_UpperRow)
    LowerCol = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable_LowerCol)
    UpperCol = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable_UpperCol)
    IsDeletable = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable_IsDeletable)
    Assign = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable_Assign)
    Move = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable_Move)
    Set = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable_Set)
    Value = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable_Value)
    ChangeValue = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable_ChangeValue)
    __call__ = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable___call__)
    SetValue = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable_SetValue)
    Resize = _swig_new_instance_method(_FEmTool.FEmTool_AssemblyTable_Resize)
    __swig_destroy__ = _FEmTool.delete_FEmTool_AssemblyTable

# Register FEmTool_AssemblyTable in _FEmTool:
_FEmTool.FEmTool_AssemblyTable_swigregister(FEmTool_AssemblyTable)

class FEmTool_SeqOfLinConstr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_begin)
    end = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_end)
    cbegin = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_cbegin)
    cend = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_cend)

    def __init__(self, *args):
        _FEmTool.FEmTool_SeqOfLinConstr_swiginit(self, _FEmTool.new_FEmTool_SeqOfLinConstr(*args))
    Size = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_Size)
    Length = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_Length)
    Lower = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_Lower)
    Upper = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_Upper)
    IsEmpty = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_IsEmpty)
    Reverse = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_Reverse)
    Exchange = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_Exchange)
    delNode = _swig_new_static_method(_FEmTool.FEmTool_SeqOfLinConstr_delNode)
    Clear = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_Clear)
    Assign = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_Assign)
    Set = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_Set)
    Remove = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_Remove)
    Append = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_Append)
    Prepend = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_Prepend)
    InsertBefore = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_InsertBefore)
    InsertAfter = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_InsertAfter)
    Split = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_Split)
    First = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_First)
    ChangeFirst = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_ChangeFirst)
    Last = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_Last)
    ChangeLast = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_ChangeLast)
    Value = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_Value)
    ChangeValue = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_ChangeValue)
    __call__ = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr___call__)
    SetValue = _swig_new_instance_method(_FEmTool.FEmTool_SeqOfLinConstr_SetValue)
    __swig_destroy__ = _FEmTool.delete_FEmTool_SeqOfLinConstr

# Register FEmTool_SeqOfLinConstr in _FEmTool:
_FEmTool.FEmTool_SeqOfLinConstr_swigregister(FEmTool_SeqOfLinConstr)
FEmTool_SeqOfLinConstr_delNode = _FEmTool.FEmTool_SeqOfLinConstr_delNode

class FEmTool_ListOfVectors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_FEmTool.FEmTool_ListOfVectors_begin)
    end = _swig_new_instance_method(_FEmTool.FEmTool_ListOfVectors_end)
    cbegin = _swig_new_instance_method(_FEmTool.FEmTool_ListOfVectors_cbegin)
    cend = _swig_new_instance_method(_FEmTool.FEmTool_ListOfVectors_cend)

    def __init__(self, *args):
        _FEmTool.FEmTool_ListOfVectors_swiginit(self, _FEmTool.new_FEmTool_ListOfVectors(*args))
    Size = _swig_new_instance_method(_FEmTool.FEmTool_ListOfVectors_Size)
    Assign = _swig_new_instance_method(_FEmTool.FEmTool_ListOfVectors_Assign)
    Set = _swig_new_instance_method(_FEmTool.FEmTool_ListOfVectors_Set)
    Clear = _swig_new_instance_method(_FEmTool.FEmTool_ListOfVectors_Clear)
    First = _swig_new_instance_method(_FEmTool.FEmTool_ListOfVectors_First)
    Last = _swig_new_instance_method(_FEmTool.FEmTool_ListOfVectors_Last)
    Append = _swig_new_instance_method(_FEmTool.FEmTool_ListOfVectors_Append)
    Prepend = _swig_new_instance_method(_FEmTool.FEmTool_ListOfVectors_Prepend)
    RemoveFirst = _swig_new_instance_method(_FEmTool.FEmTool_ListOfVectors_RemoveFirst)
    Remove = _swig_new_instance_method(_FEmTool.FEmTool_ListOfVectors_Remove)
    InsertBefore = _swig_new_instance_method(_FEmTool.FEmTool_ListOfVectors_InsertBefore)
    InsertAfter = _swig_new_instance_method(_FEmTool.FEmTool_ListOfVectors_InsertAfter)
    Reverse = _swig_new_instance_method(_FEmTool.FEmTool_ListOfVectors_Reverse)
    __swig_destroy__ = _FEmTool.delete_FEmTool_ListOfVectors

# Register FEmTool_ListOfVectors in _FEmTool:
_FEmTool.FEmTool_ListOfVectors_swigregister(FEmTool_ListOfVectors)

class FEmTool_ListIteratorOfListOfVectors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _FEmTool.FEmTool_ListIteratorOfListOfVectors_swiginit(self, _FEmTool.new_FEmTool_ListIteratorOfListOfVectors(*args))
    More = _swig_new_instance_method(_FEmTool.FEmTool_ListIteratorOfListOfVectors_More)
    Next = _swig_new_instance_method(_FEmTool.FEmTool_ListIteratorOfListOfVectors_Next)
    Value = _swig_new_instance_method(_FEmTool.FEmTool_ListIteratorOfListOfVectors_Value)
    ChangeValue = _swig_new_instance_method(_FEmTool.FEmTool_ListIteratorOfListOfVectors_ChangeValue)
    __swig_destroy__ = _FEmTool.delete_FEmTool_ListIteratorOfListOfVectors

# Register FEmTool_ListIteratorOfListOfVectors in _FEmTool:
_FEmTool.FEmTool_ListIteratorOfListOfVectors_swigregister(FEmTool_ListIteratorOfListOfVectors)

class FEmTool_Assembly(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddConstraint = _swig_new_instance_method(_FEmTool.FEmTool_Assembly_AddConstraint)
    AddMatrix = _swig_new_instance_method(_FEmTool.FEmTool_Assembly_AddMatrix)
    AddVector = _swig_new_instance_method(_FEmTool.FEmTool_Assembly_AddVector)

    def __init__(self, *args):
        r"""
        :param Dependence:
        	:type Dependence: TColStd_Array2OfInteger
        	:param Table:
        	:type Table: FEmTool_HAssemblyTable
        	:rtype: None
        """
        _FEmTool.FEmTool_Assembly_swiginit(self, _FEmTool.new_FEmTool_Assembly(*args))
    GetAssemblyTable = _swig_new_instance_method(_FEmTool.FEmTool_Assembly_GetAssemblyTable)
    NbGlobVar = _swig_new_instance_method(_FEmTool.FEmTool_Assembly_NbGlobVar)
    NullifyConstraint = _swig_new_instance_method(_FEmTool.FEmTool_Assembly_NullifyConstraint)
    NullifyMatrix = _swig_new_instance_method(_FEmTool.FEmTool_Assembly_NullifyMatrix)
    NullifyVector = _swig_new_instance_method(_FEmTool.FEmTool_Assembly_NullifyVector)
    ResetConstraint = _swig_new_instance_method(_FEmTool.FEmTool_Assembly_ResetConstraint)
    Solution = _swig_new_instance_method(_FEmTool.FEmTool_Assembly_Solution)
    Solve = _swig_new_instance_method(_FEmTool.FEmTool_Assembly_Solve)

    __repr__ = _dumps_object

    __swig_destroy__ = _FEmTool.delete_FEmTool_Assembly

# Register FEmTool_Assembly in _FEmTool:
_FEmTool.FEmTool_Assembly_swigregister(FEmTool_Assembly)

class FEmTool_Curve(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Base = _swig_new_instance_method(_FEmTool.FEmTool_Curve_Base)
    D0 = _swig_new_instance_method(_FEmTool.FEmTool_Curve_D0)
    D1 = _swig_new_instance_method(_FEmTool.FEmTool_Curve_D1)
    D2 = _swig_new_instance_method(_FEmTool.FEmTool_Curve_D2)
    Degree = _swig_new_instance_method(_FEmTool.FEmTool_Curve_Degree)
    Dimension = _swig_new_instance_method(_FEmTool.FEmTool_Curve_Dimension)

    def __init__(self, *args):
        r"""
        :param Dimension:
        	:type Dimension: int
        	:param NbElements:
        	:type NbElements: int
        	:param TheBase:
        	:type TheBase: PLib_Base
        	:param Tolerance:
        	:type Tolerance: float
        	:rtype: None
        """
        _FEmTool.FEmTool_Curve_swiginit(self, _FEmTool.new_FEmTool_Curve(*args))
    GetElement = _swig_new_instance_method(_FEmTool.FEmTool_Curve_GetElement)
    GetPolynom = _swig_new_instance_method(_FEmTool.FEmTool_Curve_GetPolynom)
    Knots = _swig_new_instance_method(_FEmTool.FEmTool_Curve_Knots)
    Length = _swig_new_instance_method(_FEmTool.FEmTool_Curve_Length)
    NbElements = _swig_new_instance_method(_FEmTool.FEmTool_Curve_NbElements)
    ReduceDegree = _swig_new_instance_method(_FEmTool.FEmTool_Curve_ReduceDegree)
    SetDegree = _swig_new_instance_method(_FEmTool.FEmTool_Curve_SetDegree)
    SetElement = _swig_new_instance_method(_FEmTool.FEmTool_Curve_SetElement)


    @staticmethod
    def DownCast(t):
      return Handle_FEmTool_Curve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _FEmTool.delete_FEmTool_Curve

# Register FEmTool_Curve in _FEmTool:
_FEmTool.FEmTool_Curve_swigregister(FEmTool_Curve)

class FEmTool_ElementaryCriterion(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    DependenceTable = _swig_new_instance_method(_FEmTool.FEmTool_ElementaryCriterion_DependenceTable)
    Gradient = _swig_new_instance_method(_FEmTool.FEmTool_ElementaryCriterion_Gradient)
    Hessian = _swig_new_instance_method(_FEmTool.FEmTool_ElementaryCriterion_Hessian)
    Set = _swig_new_instance_method(_FEmTool.FEmTool_ElementaryCriterion_Set)
    Value = _swig_new_instance_method(_FEmTool.FEmTool_ElementaryCriterion_Value)


    @staticmethod
    def DownCast(t):
      return Handle_FEmTool_ElementaryCriterion_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _FEmTool.delete_FEmTool_ElementaryCriterion

# Register FEmTool_ElementaryCriterion in _FEmTool:
_FEmTool.FEmTool_ElementaryCriterion_swigregister(FEmTool_ElementaryCriterion)

class FEmTool_ElementsOfRefMatrix(OCC.Core.math.math_FunctionSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param TheBase:
        	:type TheBase: PLib_Base
        	:param DerOrder:
        	:type DerOrder: int
        	:rtype: None
        """
        _FEmTool.FEmTool_ElementsOfRefMatrix_swiginit(self, _FEmTool.new_FEmTool_ElementsOfRefMatrix(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _FEmTool.delete_FEmTool_ElementsOfRefMatrix

# Register FEmTool_ElementsOfRefMatrix in _FEmTool:
_FEmTool.FEmTool_ElementsOfRefMatrix_swigregister(FEmTool_ElementsOfRefMatrix)

class FEmTool_SparseMatrix(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ChangeValue = _swig_new_instance_method(_FEmTool.FEmTool_SparseMatrix_ChangeValue)
    ColNumber = _swig_new_instance_method(_FEmTool.FEmTool_SparseMatrix_ColNumber)
    Decompose = _swig_new_instance_method(_FEmTool.FEmTool_SparseMatrix_Decompose)
    Init = _swig_new_instance_method(_FEmTool.FEmTool_SparseMatrix_Init)
    Multiplied = _swig_new_instance_method(_FEmTool.FEmTool_SparseMatrix_Multiplied)
    Prepare = _swig_new_instance_method(_FEmTool.FEmTool_SparseMatrix_Prepare)
    RowNumber = _swig_new_instance_method(_FEmTool.FEmTool_SparseMatrix_RowNumber)
    Solve = _swig_new_instance_method(_FEmTool.FEmTool_SparseMatrix_Solve)


    @staticmethod
    def DownCast(t):
      return Handle_FEmTool_SparseMatrix_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _FEmTool.delete_FEmTool_SparseMatrix

# Register FEmTool_SparseMatrix in _FEmTool:
_FEmTool.FEmTool_SparseMatrix_swigregister(FEmTool_SparseMatrix)

class FEmTool_LinearFlexion(FEmTool_ElementaryCriterion):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param WorkDegree:
        	:type WorkDegree: int
        	:param ConstraintOrder:
        	:type ConstraintOrder: GeomAbs_Shape
        	:rtype: None
        """
        _FEmTool.FEmTool_LinearFlexion_swiginit(self, _FEmTool.new_FEmTool_LinearFlexion(*args))


    @staticmethod
    def DownCast(t):
      return Handle_FEmTool_LinearFlexion_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _FEmTool.delete_FEmTool_LinearFlexion

# Register FEmTool_LinearFlexion in _FEmTool:
_FEmTool.FEmTool_LinearFlexion_swigregister(FEmTool_LinearFlexion)

class FEmTool_LinearJerk(FEmTool_ElementaryCriterion):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param WorkDegree:
        	:type WorkDegree: int
        	:param ConstraintOrder:
        	:type ConstraintOrder: GeomAbs_Shape
        	:rtype: None
        """
        _FEmTool.FEmTool_LinearJerk_swiginit(self, _FEmTool.new_FEmTool_LinearJerk(*args))


    @staticmethod
    def DownCast(t):
      return Handle_FEmTool_LinearJerk_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _FEmTool.delete_FEmTool_LinearJerk

# Register FEmTool_LinearJerk in _FEmTool:
_FEmTool.FEmTool_LinearJerk_swigregister(FEmTool_LinearJerk)

class FEmTool_LinearTension(FEmTool_ElementaryCriterion):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param WorkDegree:
        	:type WorkDegree: int
        	:param ConstraintOrder:
        	:type ConstraintOrder: GeomAbs_Shape
        	:rtype: None
        """
        _FEmTool.FEmTool_LinearTension_swiginit(self, _FEmTool.new_FEmTool_LinearTension(*args))


    @staticmethod
    def DownCast(t):
      return Handle_FEmTool_LinearTension_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _FEmTool.delete_FEmTool_LinearTension

# Register FEmTool_LinearTension in _FEmTool:
_FEmTool.FEmTool_LinearTension_swigregister(FEmTool_LinearTension)

class FEmTool_ProfileMatrix(FEmTool_SparseMatrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GetChangeValue = _swig_new_instance_method(_FEmTool.FEmTool_ProfileMatrix_GetChangeValue)
    SetChangeValue = _swig_new_instance_method(_FEmTool.FEmTool_ProfileMatrix_SetChangeValue)

    def __init__(self, *args):
        r"""
        :param FirstIndexes:
        	:type FirstIndexes: TColStd_Array1OfInteger
        	:rtype: None
        """
        _FEmTool.FEmTool_ProfileMatrix_swiginit(self, _FEmTool.new_FEmTool_ProfileMatrix(*args))
    IsInProfile = _swig_new_instance_method(_FEmTool.FEmTool_ProfileMatrix_IsInProfile)
    OutM = _swig_new_instance_method(_FEmTool.FEmTool_ProfileMatrix_OutM)
    OutS = _swig_new_instance_method(_FEmTool.FEmTool_ProfileMatrix_OutS)
    Solve = _swig_new_instance_method(_FEmTool.FEmTool_ProfileMatrix_Solve)


    @staticmethod
    def DownCast(t):
      return Handle_FEmTool_ProfileMatrix_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _FEmTool.delete_FEmTool_ProfileMatrix

# Register FEmTool_ProfileMatrix in _FEmTool:
_FEmTool.FEmTool_ProfileMatrix_swigregister(FEmTool_ProfileMatrix)

class FEmTool_HAssemblyTable(FEmTool_AssemblyTable, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _FEmTool.FEmTool_HAssemblyTable_swiginit(self, _FEmTool.new_FEmTool_HAssemblyTable(*args))
    Array2 = _swig_new_instance_method(_FEmTool.FEmTool_HAssemblyTable_Array2)
    ChangeArray2 = _swig_new_instance_method(_FEmTool.FEmTool_HAssemblyTable_ChangeArray2)


    @staticmethod
    def DownCast(t):
      return Handle_FEmTool_HAssemblyTable_DownCast(t)

    __swig_destroy__ = _FEmTool.delete_FEmTool_HAssemblyTable

# Register FEmTool_HAssemblyTable in _FEmTool:
_FEmTool.FEmTool_HAssemblyTable_swigregister(FEmTool_HAssemblyTable)



