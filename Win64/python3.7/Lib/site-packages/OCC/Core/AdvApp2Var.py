# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
AdvApp2Var module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_advapp2var.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _AdvApp2Var
else:
    import _AdvApp2Var

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _AdvApp2Var.SWIG_PyInstanceMethod_New
_swig_new_static_method = _AdvApp2Var.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AdvApp2Var.delete_SwigPyIterator
    value = _swig_new_instance_method(_AdvApp2Var.SwigPyIterator_value)
    incr = _swig_new_instance_method(_AdvApp2Var.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_AdvApp2Var.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_AdvApp2Var.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_AdvApp2Var.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_AdvApp2Var.SwigPyIterator_copy)
    next = _swig_new_instance_method(_AdvApp2Var.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_AdvApp2Var.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_AdvApp2Var.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_AdvApp2Var.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_AdvApp2Var.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_AdvApp2Var.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_AdvApp2Var.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_AdvApp2Var.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_AdvApp2Var.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_AdvApp2Var.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AdvApp2Var:
_AdvApp2Var.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.AdvApprox
import OCC.Core.TColgp
import OCC.Core.PLib
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.gp
import OCC.Core.Geom
AdvApp2Var_Regular = _AdvApp2Var.AdvApp2Var_Regular
AdvApp2Var_Incremental = _AdvApp2Var.AdvApp2Var_Incremental
AdvApp2Var_Absolute = _AdvApp2Var.AdvApp2Var_Absolute
AdvApp2Var_Relative = _AdvApp2Var.AdvApp2Var_Relative
class AdvApp2Var_SequenceOfPatch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_begin)
    end = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_end)
    cbegin = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_cbegin)
    cend = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_cend)

    def __init__(self, *args):
        _AdvApp2Var.AdvApp2Var_SequenceOfPatch_swiginit(self, _AdvApp2Var.new_AdvApp2Var_SequenceOfPatch(*args))
    Size = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Size)
    Length = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Length)
    Lower = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Lower)
    Upper = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Upper)
    IsEmpty = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_IsEmpty)
    Reverse = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Reverse)
    Exchange = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Exchange)
    delNode = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_delNode)
    Clear = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Clear)
    Assign = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Assign)
    Set = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Set)
    Remove = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Remove)
    Append = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Append)
    Prepend = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Prepend)
    InsertBefore = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_InsertBefore)
    InsertAfter = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_InsertAfter)
    Split = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Split)
    First = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_First)
    ChangeFirst = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_ChangeFirst)
    Last = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Last)
    ChangeLast = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_ChangeLast)
    Value = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_Value)
    ChangeValue = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_ChangeValue)
    __call__ = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch___call__)
    SetValue = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_SetValue)
    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_SequenceOfPatch

# Register AdvApp2Var_SequenceOfPatch in _AdvApp2Var:
_AdvApp2Var.AdvApp2Var_SequenceOfPatch_swigregister(AdvApp2Var_SequenceOfPatch)
AdvApp2Var_SequenceOfPatch_delNode = _AdvApp2Var.AdvApp2Var_SequenceOfPatch_delNode

class AdvApp2Var_SequenceOfNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_begin)
    end = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_end)
    cbegin = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_cbegin)
    cend = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_cend)

    def __init__(self, *args):
        _AdvApp2Var.AdvApp2Var_SequenceOfNode_swiginit(self, _AdvApp2Var.new_AdvApp2Var_SequenceOfNode(*args))
    Size = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Size)
    Length = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Length)
    Lower = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Lower)
    Upper = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Upper)
    IsEmpty = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_IsEmpty)
    Reverse = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Reverse)
    Exchange = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Exchange)
    delNode = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_delNode)
    Clear = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Clear)
    Assign = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Assign)
    Set = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Set)
    Remove = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Remove)
    Append = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Append)
    Prepend = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Prepend)
    InsertBefore = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_InsertBefore)
    InsertAfter = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_InsertAfter)
    Split = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Split)
    First = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_First)
    ChangeFirst = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_ChangeFirst)
    Last = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Last)
    ChangeLast = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_ChangeLast)
    Value = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_Value)
    ChangeValue = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_ChangeValue)
    __call__ = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode___call__)
    SetValue = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfNode_SetValue)
    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_SequenceOfNode

# Register AdvApp2Var_SequenceOfNode in _AdvApp2Var:
_AdvApp2Var.AdvApp2Var_SequenceOfNode_swigregister(AdvApp2Var_SequenceOfNode)
AdvApp2Var_SequenceOfNode_delNode = _AdvApp2Var.AdvApp2Var_SequenceOfNode_delNode

class AdvApp2Var_SequenceOfStrip(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_begin)
    end = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_end)
    cbegin = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_cbegin)
    cend = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_cend)

    def __init__(self, *args):
        _AdvApp2Var.AdvApp2Var_SequenceOfStrip_swiginit(self, _AdvApp2Var.new_AdvApp2Var_SequenceOfStrip(*args))
    Size = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Size)
    Length = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Length)
    Lower = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Lower)
    Upper = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Upper)
    IsEmpty = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_IsEmpty)
    Reverse = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Reverse)
    Exchange = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Exchange)
    delNode = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_delNode)
    Clear = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Clear)
    Assign = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Assign)
    Set = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Set)
    Remove = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Remove)
    Append = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Append)
    Prepend = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Prepend)
    InsertBefore = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_InsertBefore)
    InsertAfter = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_InsertAfter)
    Split = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Split)
    First = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_First)
    ChangeFirst = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_ChangeFirst)
    Last = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Last)
    ChangeLast = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_ChangeLast)
    Value = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_Value)
    ChangeValue = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_ChangeValue)
    __call__ = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip___call__)
    SetValue = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_SetValue)
    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_SequenceOfStrip

# Register AdvApp2Var_SequenceOfStrip in _AdvApp2Var:
_AdvApp2Var.AdvApp2Var_SequenceOfStrip_swigregister(AdvApp2Var_SequenceOfStrip)
AdvApp2Var_SequenceOfStrip_delNode = _AdvApp2Var.AdvApp2Var_SequenceOfStrip_delNode

class AdvApp2Var_Strip(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_begin)
    end = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_end)
    cbegin = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_cbegin)
    cend = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_cend)

    def __init__(self, *args):
        _AdvApp2Var.AdvApp2Var_Strip_swiginit(self, _AdvApp2Var.new_AdvApp2Var_Strip(*args))
    Size = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_Size)
    Length = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_Length)
    Lower = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_Lower)
    Upper = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_Upper)
    IsEmpty = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_IsEmpty)
    Reverse = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_Reverse)
    Exchange = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_Exchange)
    delNode = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_Strip_delNode)
    Clear = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_Clear)
    Assign = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_Assign)
    Set = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_Set)
    Remove = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_Remove)
    Append = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_Append)
    Prepend = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_Prepend)
    InsertBefore = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_InsertBefore)
    InsertAfter = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_InsertAfter)
    Split = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_Split)
    First = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_First)
    ChangeFirst = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_ChangeFirst)
    Last = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_Last)
    ChangeLast = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_ChangeLast)
    Value = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_Value)
    ChangeValue = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_ChangeValue)
    __call__ = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip___call__)
    SetValue = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Strip_SetValue)
    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Strip

# Register AdvApp2Var_Strip in _AdvApp2Var:
_AdvApp2Var.AdvApp2Var_Strip_swigregister(AdvApp2Var_Strip)
AdvApp2Var_Strip_delNode = _AdvApp2Var.AdvApp2Var_Strip_delNode

class AdvApp2Var_ApproxAFunc2Var(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param Num1DSS:
        	:type Num1DSS: int
        	:param Num2DSS:
        	:type Num2DSS: int
        	:param Num3DSS:
        	:type Num3DSS: int
        	:param OneDTol:
        	:type OneDTol: TColStd_HArray1OfReal
        	:param TwoDTol:
        	:type TwoDTol: TColStd_HArray1OfReal
        	:param ThreeDTol:
        	:type ThreeDTol: TColStd_HArray1OfReal
        	:param OneDTolFr:
        	:type OneDTolFr: TColStd_HArray2OfReal
        	:param TwoDTolFr:
        	:type TwoDTolFr: TColStd_HArray2OfReal
        	:param ThreeDTolFr:
        	:type ThreeDTolFr: TColStd_HArray2OfReal
        	:param FirstInU:
        	:type FirstInU: float
        	:param LastInU:
        	:type LastInU: float
        	:param FirstInV:
        	:type FirstInV: float
        	:param LastInV:
        	:type LastInV: float
        	:param FavorIso:
        	:type FavorIso: GeomAbs_IsoType
        	:param ContInU:
        	:type ContInU: GeomAbs_Shape
        	:param ContInV:
        	:type ContInV: GeomAbs_Shape
        	:param PrecisCode:
        	:type PrecisCode: int
        	:param MaxDegInU:
        	:type MaxDegInU: int
        	:param MaxDegInV:
        	:type MaxDegInV: int
        	:param MaxPatch:
        	:type MaxPatch: int
        	:param Func:
        	:type Func: AdvApp2Var_EvaluatorFunc2Var
        	:param UChoice:
        	:type UChoice: AdvApprox_Cutting
        	:param VChoice:
        	:type VChoice: AdvApprox_Cutting
        	:rtype: None:param Num1DSS:
        	:type Num1DSS: int
        	:param Num2DSS:
        	:type Num2DSS: int
        	:param Num3DSS:
        	:type Num3DSS: int
        	:param OneDTol:
        	:type OneDTol: TColStd_HArray1OfReal
        	:param TwoDTol:
        	:type TwoDTol: TColStd_HArray1OfReal
        	:param ThreeDTol:
        	:type ThreeDTol: TColStd_HArray1OfReal
        	:param OneDTolFr:
        	:type OneDTolFr: TColStd_HArray2OfReal
        	:param TwoDTolFr:
        	:type TwoDTolFr: TColStd_HArray2OfReal
        	:param ThreeDTolFr:
        	:type ThreeDTolFr: TColStd_HArray2OfReal
        	:param FirstInU:
        	:type FirstInU: float
        	:param LastInU:
        	:type LastInU: float
        	:param FirstInV:
        	:type FirstInV: float
        	:param LastInV:
        	:type LastInV: float
        	:param FavorIso:
        	:type FavorIso: GeomAbs_IsoType
        	:param ContInU:
        	:type ContInU: GeomAbs_Shape
        	:param ContInV:
        	:type ContInV: GeomAbs_Shape
        	:param PrecisCode:
        	:type PrecisCode: int
        	:param MaxDegInU:
        	:type MaxDegInU: int
        	:param MaxDegInV:
        	:type MaxDegInV: int
        	:param MaxPatch:
        	:type MaxPatch: int
        	:param Func:
        	:type Func: AdvApp2Var_EvaluatorFunc2Var
        	:param Crit:
        	:type Crit: AdvApp2Var_Criterion
        	:param UChoice:
        	:type UChoice: AdvApprox_Cutting
        	:param VChoice:
        	:type VChoice: AdvApprox_Cutting
        	:rtype: None
        """
        _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_swiginit(self, _AdvApp2Var.new_AdvApp2Var_ApproxAFunc2Var(*args))
    AverageError = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_AverageError)
    CritError = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_CritError)
    DumpToString = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_DumpToString)
    HasResult = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_HasResult)
    IsDone = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_IsDone)
    MaxError = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_MaxError)
    NumSubSpaces = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_NumSubSpaces)
    Surface = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_Surface)
    UDegree = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_UDegree)
    UFrontError = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_UFrontError)
    VDegree = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_VDegree)
    VFrontError = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_VFrontError)

    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_ApproxAFunc2Var

# Register AdvApp2Var_ApproxAFunc2Var in _AdvApp2Var:
_AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_swigregister(AdvApp2Var_ApproxAFunc2Var)

class AdvApp2Var_ApproxF2var(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mma1her_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_ApproxF2var_mma1her_)
    mma2ac1_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac1_)
    mma2ac2_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac2_)
    mma2ac3_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac3_)
    mma2can_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_ApproxF2var_mma2can_)
    mma2cdi_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_ApproxF2var_mma2cdi_)
    mma2ce1_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ce1_)
    mma2ds1_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ds1_)
    mma2fnc_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_ApproxF2var_mma2fnc_)
    mma2fx6_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_ApproxF2var_mma2fx6_)
    mma2jmx_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_ApproxF2var_mma2jmx_)
    mma2roo_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_ApproxF2var_mma2roo_)
    mmapptt_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_ApproxF2var_mmapptt_)

    __repr__ = _dumps_object


    def __init__(self):
        _AdvApp2Var.AdvApp2Var_ApproxF2var_swiginit(self, _AdvApp2Var.new_AdvApp2Var_ApproxF2var())
    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_ApproxF2var

# Register AdvApp2Var_ApproxF2var in _AdvApp2Var:
_AdvApp2Var.AdvApp2Var_ApproxF2var_swigregister(AdvApp2Var_ApproxF2var)
AdvApp2Var_ApproxF2var_mma1her_ = _AdvApp2Var.AdvApp2Var_ApproxF2var_mma1her_
AdvApp2Var_ApproxF2var_mma2ac1_ = _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac1_
AdvApp2Var_ApproxF2var_mma2ac2_ = _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac2_
AdvApp2Var_ApproxF2var_mma2ac3_ = _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac3_
AdvApp2Var_ApproxF2var_mma2can_ = _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2can_
AdvApp2Var_ApproxF2var_mma2cdi_ = _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2cdi_
AdvApp2Var_ApproxF2var_mma2ce1_ = _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ce1_
AdvApp2Var_ApproxF2var_mma2ds1_ = _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ds1_
AdvApp2Var_ApproxF2var_mma2fnc_ = _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2fnc_
AdvApp2Var_ApproxF2var_mma2fx6_ = _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2fx6_
AdvApp2Var_ApproxF2var_mma2jmx_ = _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2jmx_
AdvApp2Var_ApproxF2var_mma2roo_ = _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2roo_
AdvApp2Var_ApproxF2var_mmapptt_ = _AdvApp2Var.AdvApp2Var_ApproxF2var_mmapptt_

class AdvApp2Var_Context(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param ifav:
        	:type ifav: int
        	:param iu:
        	:type iu: int
        	:param iv:
        	:type iv: int
        	:param nlimu:
        	:type nlimu: int
        	:param nlimv:
        	:type nlimv: int
        	:param iprecis:
        	:type iprecis: int
        	:param nb1Dss:
        	:type nb1Dss: int
        	:param nb2Dss:
        	:type nb2Dss: int
        	:param nb3Dss:
        	:type nb3Dss: int
        	:param tol1D:
        	:type tol1D: TColStd_HArray1OfReal
        	:param tol2D:
        	:type tol2D: TColStd_HArray1OfReal
        	:param tol3D:
        	:type tol3D: TColStd_HArray1OfReal
        	:param tof1D:
        	:type tof1D: TColStd_HArray2OfReal
        	:param tof2D:
        	:type tof2D: TColStd_HArray2OfReal
        	:param tof3D:
        	:type tof3D: TColStd_HArray2OfReal
        	:rtype: None
        """
        _AdvApp2Var.AdvApp2Var_Context_swiginit(self, _AdvApp2Var.new_AdvApp2Var_Context(*args))
    CToler = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Context_CToler)
    FToler = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Context_FToler)
    FavorIso = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Context_FavorIso)
    IToler = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Context_IToler)
    TotalDimension = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Context_TotalDimension)
    TotalNumberSSP = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Context_TotalNumberSSP)
    UGauss = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Context_UGauss)
    UJacDeg = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Context_UJacDeg)
    UJacMax = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Context_UJacMax)
    ULimit = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Context_ULimit)
    UOrder = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Context_UOrder)
    URoots = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Context_URoots)
    VGauss = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Context_VGauss)
    VJacDeg = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Context_VJacDeg)
    VJacMax = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Context_VJacMax)
    VLimit = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Context_VLimit)
    VOrder = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Context_VOrder)
    VRoots = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Context_VRoots)

    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Context

# Register AdvApp2Var_Context in _AdvApp2Var:
_AdvApp2Var.AdvApp2Var_Context_swigregister(AdvApp2Var_Context)

class AdvApp2Var_Criterion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IsSatisfied = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Criterion_IsSatisfied)
    MaxValue = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Criterion_MaxValue)
    Repartition = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Criterion_Repartition)
    Type = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Criterion_Type)
    Value = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Criterion_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Criterion

# Register AdvApp2Var_Criterion in _AdvApp2Var:
_AdvApp2Var.AdvApp2Var_Criterion_swigregister(AdvApp2Var_Criterion)

class AdvApp2Var_Data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Getmaovpar = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_Data_Getmaovpar)
    Getmaovpch = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_Data_Getmaovpch)
    Getmdnombr = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_Data_Getmdnombr)
    Getminombr = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_Data_Getminombr)
    Getmlgdrtl = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_Data_Getmlgdrtl)
    Getmmapgs0 = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_Data_Getmmapgs0)
    Getmmapgs1 = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_Data_Getmmapgs1)
    Getmmapgs2 = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_Data_Getmmapgs2)
    Getmmapgss = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_Data_Getmmapgss)
    Getmmcmcnp = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_Data_Getmmcmcnp)
    Getmmjcobi = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_Data_Getmmjcobi)

    __repr__ = _dumps_object


    def __init__(self):
        _AdvApp2Var.AdvApp2Var_Data_swiginit(self, _AdvApp2Var.new_AdvApp2Var_Data())
    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Data

# Register AdvApp2Var_Data in _AdvApp2Var:
_AdvApp2Var.AdvApp2Var_Data_swigregister(AdvApp2Var_Data)
AdvApp2Var_Data_Getmaovpar = _AdvApp2Var.AdvApp2Var_Data_Getmaovpar
AdvApp2Var_Data_Getmaovpch = _AdvApp2Var.AdvApp2Var_Data_Getmaovpch
AdvApp2Var_Data_Getmdnombr = _AdvApp2Var.AdvApp2Var_Data_Getmdnombr
AdvApp2Var_Data_Getminombr = _AdvApp2Var.AdvApp2Var_Data_Getminombr
AdvApp2Var_Data_Getmlgdrtl = _AdvApp2Var.AdvApp2Var_Data_Getmlgdrtl
AdvApp2Var_Data_Getmmapgs0 = _AdvApp2Var.AdvApp2Var_Data_Getmmapgs0
AdvApp2Var_Data_Getmmapgs1 = _AdvApp2Var.AdvApp2Var_Data_Getmmapgs1
AdvApp2Var_Data_Getmmapgs2 = _AdvApp2Var.AdvApp2Var_Data_Getmmapgs2
AdvApp2Var_Data_Getmmapgss = _AdvApp2Var.AdvApp2Var_Data_Getmmapgss
AdvApp2Var_Data_Getmmcmcnp = _AdvApp2Var.AdvApp2Var_Data_Getmmcmcnp
AdvApp2Var_Data_Getmmjcobi = _AdvApp2Var.AdvApp2Var_Data_Getmmjcobi

class AdvApp2Var_Framework(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param Frame:
        	:type Frame: AdvApp2Var_SequenceOfNode
        	:param UFrontier:
        	:type UFrontier: AdvApp2Var_SequenceOfStrip
        	:param VFrontier:
        	:type VFrontier: AdvApp2Var_SequenceOfStrip
        	:rtype: None
        """
        _AdvApp2Var.AdvApp2Var_Framework_swiginit(self, _AdvApp2Var.new_AdvApp2Var_Framework(*args))
    ChangeIso = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Framework_ChangeIso)
    ChangeNode = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Framework_ChangeNode)
    FirstNode = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Framework_FirstNode)
    FirstNotApprox = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Framework_FirstNotApprox)
    IsoU = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Framework_IsoU)
    IsoV = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Framework_IsoV)
    LastNode = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Framework_LastNode)
    Node = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Framework_Node)
    UEquation = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Framework_UEquation)
    UpdateInU = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Framework_UpdateInU)
    UpdateInV = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Framework_UpdateInV)
    VEquation = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Framework_VEquation)

    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Framework

# Register AdvApp2Var_Framework in _AdvApp2Var:
_AdvApp2Var.AdvApp2Var_Framework_swigregister(AdvApp2Var_Framework)

class AdvApp2Var_MathBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mdsptpt_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mdsptpt_)
    mmapcmp_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmapcmp_)
    mmaperx_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmaperx_)
    mmarcin_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmarcin_)
    mmbulld_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmbulld_)
    mmcdriv_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmcdriv_)
    mmcglc1_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmcglc1_)
    mmcvctx_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmcvctx_)
    mmcvinv_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmcvinv_)
    mmdrc11_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmdrc11_)
    mmdrvck_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmdrvck_)
    mmeps1_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmeps1_)
    mmfmca8_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmfmca8_)
    mmfmca9_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmfmca9_)
    mmfmcar_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmfmcar_)
    mmfmcb5_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmfmcb5_)
    mmfmtb1_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmfmtb1_)
    mmhjcan_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmhjcan_)
    mminltt_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mminltt_)
    mmjacan_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmjacan_)
    mmjaccv_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmjaccv_)
    mmmpocur_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmmpocur_)
    mmmrslwd_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmmrslwd_)
    mmpobas_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmpobas_)
    mmpocrb_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmpocrb_)
    mmposui_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmposui_)
    mmresol_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmresol_)
    mmrtptt_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmrtptt_)
    mmsrre2_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmsrre2_)
    mmtrpjj_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmtrpjj_)
    mmunivt_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmunivt_)
    mmveps3_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmveps3_)
    mmvncol_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmvncol_)
    mmwprcs_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mmwprcs_)
    msc_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_msc_)
    mvsheld_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mvsheld_)
    mzsnorm_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_mzsnorm_)
    pow__di = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_MathBase_pow__di)

    __repr__ = _dumps_object


    def __init__(self):
        _AdvApp2Var.AdvApp2Var_MathBase_swiginit(self, _AdvApp2Var.new_AdvApp2Var_MathBase())
    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_MathBase

# Register AdvApp2Var_MathBase in _AdvApp2Var:
_AdvApp2Var.AdvApp2Var_MathBase_swigregister(AdvApp2Var_MathBase)
AdvApp2Var_MathBase_mdsptpt_ = _AdvApp2Var.AdvApp2Var_MathBase_mdsptpt_
AdvApp2Var_MathBase_mmapcmp_ = _AdvApp2Var.AdvApp2Var_MathBase_mmapcmp_
AdvApp2Var_MathBase_mmaperx_ = _AdvApp2Var.AdvApp2Var_MathBase_mmaperx_
AdvApp2Var_MathBase_mmarcin_ = _AdvApp2Var.AdvApp2Var_MathBase_mmarcin_
AdvApp2Var_MathBase_mmbulld_ = _AdvApp2Var.AdvApp2Var_MathBase_mmbulld_
AdvApp2Var_MathBase_mmcdriv_ = _AdvApp2Var.AdvApp2Var_MathBase_mmcdriv_
AdvApp2Var_MathBase_mmcglc1_ = _AdvApp2Var.AdvApp2Var_MathBase_mmcglc1_
AdvApp2Var_MathBase_mmcvctx_ = _AdvApp2Var.AdvApp2Var_MathBase_mmcvctx_
AdvApp2Var_MathBase_mmcvinv_ = _AdvApp2Var.AdvApp2Var_MathBase_mmcvinv_
AdvApp2Var_MathBase_mmdrc11_ = _AdvApp2Var.AdvApp2Var_MathBase_mmdrc11_
AdvApp2Var_MathBase_mmdrvck_ = _AdvApp2Var.AdvApp2Var_MathBase_mmdrvck_
AdvApp2Var_MathBase_mmeps1_ = _AdvApp2Var.AdvApp2Var_MathBase_mmeps1_
AdvApp2Var_MathBase_mmfmca8_ = _AdvApp2Var.AdvApp2Var_MathBase_mmfmca8_
AdvApp2Var_MathBase_mmfmca9_ = _AdvApp2Var.AdvApp2Var_MathBase_mmfmca9_
AdvApp2Var_MathBase_mmfmcar_ = _AdvApp2Var.AdvApp2Var_MathBase_mmfmcar_
AdvApp2Var_MathBase_mmfmcb5_ = _AdvApp2Var.AdvApp2Var_MathBase_mmfmcb5_
AdvApp2Var_MathBase_mmfmtb1_ = _AdvApp2Var.AdvApp2Var_MathBase_mmfmtb1_
AdvApp2Var_MathBase_mmhjcan_ = _AdvApp2Var.AdvApp2Var_MathBase_mmhjcan_
AdvApp2Var_MathBase_mminltt_ = _AdvApp2Var.AdvApp2Var_MathBase_mminltt_
AdvApp2Var_MathBase_mmjacan_ = _AdvApp2Var.AdvApp2Var_MathBase_mmjacan_
AdvApp2Var_MathBase_mmjaccv_ = _AdvApp2Var.AdvApp2Var_MathBase_mmjaccv_
AdvApp2Var_MathBase_mmmpocur_ = _AdvApp2Var.AdvApp2Var_MathBase_mmmpocur_
AdvApp2Var_MathBase_mmmrslwd_ = _AdvApp2Var.AdvApp2Var_MathBase_mmmrslwd_
AdvApp2Var_MathBase_mmpobas_ = _AdvApp2Var.AdvApp2Var_MathBase_mmpobas_
AdvApp2Var_MathBase_mmpocrb_ = _AdvApp2Var.AdvApp2Var_MathBase_mmpocrb_
AdvApp2Var_MathBase_mmposui_ = _AdvApp2Var.AdvApp2Var_MathBase_mmposui_
AdvApp2Var_MathBase_mmresol_ = _AdvApp2Var.AdvApp2Var_MathBase_mmresol_
AdvApp2Var_MathBase_mmrtptt_ = _AdvApp2Var.AdvApp2Var_MathBase_mmrtptt_
AdvApp2Var_MathBase_mmsrre2_ = _AdvApp2Var.AdvApp2Var_MathBase_mmsrre2_
AdvApp2Var_MathBase_mmtrpjj_ = _AdvApp2Var.AdvApp2Var_MathBase_mmtrpjj_
AdvApp2Var_MathBase_mmunivt_ = _AdvApp2Var.AdvApp2Var_MathBase_mmunivt_
AdvApp2Var_MathBase_mmveps3_ = _AdvApp2Var.AdvApp2Var_MathBase_mmveps3_
AdvApp2Var_MathBase_mmvncol_ = _AdvApp2Var.AdvApp2Var_MathBase_mmvncol_
AdvApp2Var_MathBase_mmwprcs_ = _AdvApp2Var.AdvApp2Var_MathBase_mmwprcs_
AdvApp2Var_MathBase_msc_ = _AdvApp2Var.AdvApp2Var_MathBase_msc_
AdvApp2Var_MathBase_mvsheld_ = _AdvApp2Var.AdvApp2Var_MathBase_mvsheld_
AdvApp2Var_MathBase_mzsnorm_ = _AdvApp2Var.AdvApp2Var_MathBase_mzsnorm_
AdvApp2Var_MathBase_pow__di = _AdvApp2Var.AdvApp2Var_MathBase_pow__di

class AdvApp2Var_Network(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param Net:
        	:type Net: AdvApp2Var_SequenceOfPatch
        	:param TheU:
        	:type TheU: TColStd_SequenceOfReal
        	:param TheV:
        	:type TheV: TColStd_SequenceOfReal
        	:rtype: None
        """
        _AdvApp2Var.AdvApp2Var_Network_swiginit(self, _AdvApp2Var.new_AdvApp2Var_Network(*args))
    ChangePatch = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Network_ChangePatch)
    FirstNotApprox = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Network_FirstNotApprox)
    NbPatch = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Network_NbPatch)
    NbPatchInU = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Network_NbPatchInU)
    NbPatchInV = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Network_NbPatchInV)
    Patch = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Network_Patch)
    SameDegree = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Network_SameDegree)
    UParameter = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Network_UParameter)
    UpdateInU = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Network_UpdateInU)
    UpdateInV = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Network_UpdateInV)
    VParameter = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Network_VParameter)

    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Network

# Register AdvApp2Var_Network in _AdvApp2Var:
_AdvApp2Var.AdvApp2Var_Network_swigregister(AdvApp2Var_Network)

class AdvApp2Var_Node(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param iu:
        	:type iu: int
        	:param iv:
        	:type iv: int
        	:rtype: None:param UV:
        	:type UV: gp_XY
        	:param iu:
        	:type iu: int
        	:param iv:
        	:type iv: int
        	:rtype: None
        """
        _AdvApp2Var.AdvApp2Var_Node_swiginit(self, _AdvApp2Var.new_AdvApp2Var_Node(*args))
    Coord = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Node_Coord)
    Error = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Node_Error)
    Point = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Node_Point)
    SetCoord = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Node_SetCoord)
    SetError = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Node_SetError)
    SetPoint = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Node_SetPoint)
    UOrder = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Node_UOrder)
    VOrder = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Node_VOrder)

    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Node

# Register AdvApp2Var_Node in _AdvApp2Var:
_AdvApp2Var.AdvApp2Var_Node_swigregister(AdvApp2Var_Node)

class AdvApp2Var_Patch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddConstraints = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_AddConstraints)
    AddErrors = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_AddErrors)

    def __init__(self, *args):
        r"""
        :rtype: None:param U0:
        	:type U0: float
        	:param U1:
        	:type U1: float
        	:param V0:
        	:type V0: float
        	:param V1:
        	:type V1: float
        	:param iu:
        	:type iu: int
        	:param iv:
        	:type iv: int
        	:rtype: None
        """
        _AdvApp2Var.AdvApp2Var_Patch_swiginit(self, _AdvApp2Var.new_AdvApp2Var_Patch(*args))
    AverageErrors = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_AverageErrors)
    ChangeDomain = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_ChangeDomain)
    ChangeNbCoeff = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_ChangeNbCoeff)
    Coefficients = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_Coefficients)
    CritValue = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_CritValue)
    CutSense = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_CutSense)
    Discretise = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_Discretise)
    HasResult = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_HasResult)
    IsApproximated = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_IsApproximated)
    IsDiscretised = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_IsDiscretised)
    IsoErrors = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_IsoErrors)
    MakeApprox = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_MakeApprox)
    MaxErrors = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_MaxErrors)
    NbCoeffInU = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_NbCoeffInU)
    NbCoeffInV = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_NbCoeffInV)
    OverwriteApprox = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_OverwriteApprox)
    Poles = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_Poles)
    ResetApprox = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_ResetApprox)
    SetCritValue = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_SetCritValue)
    U0 = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_U0)
    U1 = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_U1)
    UOrder = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_UOrder)
    V0 = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_V0)
    V1 = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_V1)
    VOrder = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_Patch_VOrder)

    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Patch

# Register AdvApp2Var_Patch in _AdvApp2Var:
_AdvApp2Var.AdvApp2Var_Patch_swigregister(AdvApp2Var_Patch)

class AdvApp2Var_SysBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""":rtype: None"""
        _AdvApp2Var.AdvApp2Var_SysBase_swiginit(self, _AdvApp2Var.new_AdvApp2Var_SysBase(*args))
    do__fio = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_SysBase_do__fio)
    do__lio = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_SysBase_do__lio)
    macinit_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_SysBase_macinit_)
    macrai4_ = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SysBase_macrai4_)
    macrar8_ = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SysBase_macrar8_)
    macrdi4_ = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SysBase_macrdi4_)
    macrdr8_ = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SysBase_macrdr8_)
    maermsg_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_SysBase_maermsg_)
    mainial_ = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SysBase_mainial_)
    maitbr8_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_SysBase_maitbr8_)
    maovsr8_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_SysBase_maovsr8_)
    mcrdelt_ = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SysBase_mcrdelt_)
    mcrfill_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_SysBase_mcrfill_)
    mcrrqst_ = _swig_new_instance_method(_AdvApp2Var.AdvApp2Var_SysBase_mcrrqst_)
    mgenmsg_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_SysBase_mgenmsg_)
    mgsomsg_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_SysBase_mgsomsg_)
    miraz_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_SysBase_miraz_)
    mnfndeb_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_SysBase_mnfndeb_)
    msifill_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_SysBase_msifill_)
    msrfill_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_SysBase_msrfill_)
    mswrdbg_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_SysBase_mswrdbg_)
    mvriraz_ = _swig_new_static_method(_AdvApp2Var.AdvApp2Var_SysBase_mvriraz_)

    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_SysBase

# Register AdvApp2Var_SysBase in _AdvApp2Var:
_AdvApp2Var.AdvApp2Var_SysBase_swigregister(AdvApp2Var_SysBase)
AdvApp2Var_SysBase_do__fio = _AdvApp2Var.AdvApp2Var_SysBase_do__fio
AdvApp2Var_SysBase_do__lio = _AdvApp2Var.AdvApp2Var_SysBase_do__lio
AdvApp2Var_SysBase_macinit_ = _AdvApp2Var.AdvApp2Var_SysBase_macinit_
AdvApp2Var_SysBase_maermsg_ = _AdvApp2Var.AdvApp2Var_SysBase_maermsg_
AdvApp2Var_SysBase_maitbr8_ = _AdvApp2Var.AdvApp2Var_SysBase_maitbr8_
AdvApp2Var_SysBase_maovsr8_ = _AdvApp2Var.AdvApp2Var_SysBase_maovsr8_
AdvApp2Var_SysBase_mcrfill_ = _AdvApp2Var.AdvApp2Var_SysBase_mcrfill_
AdvApp2Var_SysBase_mgenmsg_ = _AdvApp2Var.AdvApp2Var_SysBase_mgenmsg_
AdvApp2Var_SysBase_mgsomsg_ = _AdvApp2Var.AdvApp2Var_SysBase_mgsomsg_
AdvApp2Var_SysBase_miraz_ = _AdvApp2Var.AdvApp2Var_SysBase_miraz_
AdvApp2Var_SysBase_mnfndeb_ = _AdvApp2Var.AdvApp2Var_SysBase_mnfndeb_
AdvApp2Var_SysBase_msifill_ = _AdvApp2Var.AdvApp2Var_SysBase_msifill_
AdvApp2Var_SysBase_msrfill_ = _AdvApp2Var.AdvApp2Var_SysBase_msrfill_
AdvApp2Var_SysBase_mswrdbg_ = _AdvApp2Var.AdvApp2Var_SysBase_mswrdbg_
AdvApp2Var_SysBase_mvriraz_ = _AdvApp2Var.AdvApp2Var_SysBase_mvriraz_



