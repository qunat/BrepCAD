# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Hatch module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_hatch.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Hatch
else:
    import _Hatch

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _Hatch.SWIG_PyInstanceMethod_New
_swig_new_static_method = _Hatch.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Hatch.delete_SwigPyIterator
    value = _swig_new_instance_method(_Hatch.SwigPyIterator_value)
    incr = _swig_new_instance_method(_Hatch.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_Hatch.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_Hatch.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_Hatch.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_Hatch.SwigPyIterator_copy)
    next = _swig_new_instance_method(_Hatch.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_Hatch.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_Hatch.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_Hatch.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_Hatch.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_Hatch.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_Hatch.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_Hatch.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_Hatch.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_Hatch.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Hatch:
_Hatch.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
Hatch_XLINE = _Hatch.Hatch_XLINE
Hatch_YLINE = _Hatch.Hatch_YLINE
Hatch_ANYLINE = _Hatch.Hatch_ANYLINE
class Hatch_SequenceOfLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_begin)
    end = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_end)
    cbegin = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_cbegin)
    cend = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_cend)

    def __init__(self, *args):
        _Hatch.Hatch_SequenceOfLine_swiginit(self, _Hatch.new_Hatch_SequenceOfLine(*args))
    Size = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_Size)
    Length = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_Length)
    Lower = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_Lower)
    Upper = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_Upper)
    IsEmpty = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_IsEmpty)
    Reverse = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_Reverse)
    Exchange = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_Exchange)
    delNode = _swig_new_static_method(_Hatch.Hatch_SequenceOfLine_delNode)
    Clear = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_Clear)
    Assign = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_Assign)
    Set = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_Set)
    Remove = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_Remove)
    Append = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_Append)
    Prepend = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_Prepend)
    InsertBefore = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_InsertBefore)
    InsertAfter = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_InsertAfter)
    Split = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_Split)
    First = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_First)
    ChangeFirst = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_ChangeFirst)
    Last = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_Last)
    ChangeLast = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_ChangeLast)
    Value = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_Value)
    ChangeValue = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_ChangeValue)
    __call__ = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine___call__)
    SetValue = _swig_new_instance_method(_Hatch.Hatch_SequenceOfLine_SetValue)
    __swig_destroy__ = _Hatch.delete_Hatch_SequenceOfLine

# Register Hatch_SequenceOfLine in _Hatch:
_Hatch.Hatch_SequenceOfLine_swigregister(Hatch_SequenceOfLine)
Hatch_SequenceOfLine_delNode = _Hatch.Hatch_SequenceOfLine_delNode

class Hatch_SequenceOfParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_begin)
    end = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_end)
    cbegin = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_cbegin)
    cend = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_cend)

    def __init__(self, *args):
        _Hatch.Hatch_SequenceOfParameter_swiginit(self, _Hatch.new_Hatch_SequenceOfParameter(*args))
    Size = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_Size)
    Length = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_Length)
    Lower = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_Lower)
    Upper = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_Upper)
    IsEmpty = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_IsEmpty)
    Reverse = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_Reverse)
    Exchange = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_Exchange)
    delNode = _swig_new_static_method(_Hatch.Hatch_SequenceOfParameter_delNode)
    Clear = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_Clear)
    Assign = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_Assign)
    Set = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_Set)
    Remove = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_Remove)
    Append = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_Append)
    Prepend = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_Prepend)
    InsertBefore = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_InsertBefore)
    InsertAfter = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_InsertAfter)
    Split = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_Split)
    First = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_First)
    ChangeFirst = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_ChangeFirst)
    Last = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_Last)
    ChangeLast = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_ChangeLast)
    Value = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_Value)
    ChangeValue = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_ChangeValue)
    __call__ = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter___call__)
    SetValue = _swig_new_instance_method(_Hatch.Hatch_SequenceOfParameter_SetValue)
    __swig_destroy__ = _Hatch.delete_Hatch_SequenceOfParameter

# Register Hatch_SequenceOfParameter in _Hatch:
_Hatch.Hatch_SequenceOfParameter_swigregister(Hatch_SequenceOfParameter)
Hatch_SequenceOfParameter_delNode = _Hatch.Hatch_SequenceOfParameter_delNode

class Hatch_Hatcher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddLine = _swig_new_instance_method(_Hatch.Hatch_Hatcher_AddLine)
    AddXLine = _swig_new_instance_method(_Hatch.Hatch_Hatcher_AddXLine)
    AddYLine = _swig_new_instance_method(_Hatch.Hatch_Hatcher_AddYLine)
    Coordinate = _swig_new_instance_method(_Hatch.Hatch_Hatcher_Coordinate)
    End = _swig_new_instance_method(_Hatch.Hatch_Hatcher_End)
    EndIndex = _swig_new_instance_method(_Hatch.Hatch_Hatcher_EndIndex)

    def __init__(self, *args):
        r"""
        * Returns a empty hatcher. <Tol> is the tolerance for intersections.
        	:param Tol:
        	:type Tol: float
        	:param Oriented: default value is Standard_True
        	:type Oriented: bool
        	:rtype: None
        """
        _Hatch.Hatch_Hatcher_swiginit(self, _Hatch.new_Hatch_Hatcher(*args))
    IsXLine = _swig_new_instance_method(_Hatch.Hatch_Hatcher_IsXLine)
    IsYLine = _swig_new_instance_method(_Hatch.Hatch_Hatcher_IsYLine)
    Line = _swig_new_instance_method(_Hatch.Hatch_Hatcher_Line)
    LineForm = _swig_new_instance_method(_Hatch.Hatch_Hatcher_LineForm)
    NbIntervals = _swig_new_instance_method(_Hatch.Hatch_Hatcher_NbIntervals)
    NbLines = _swig_new_instance_method(_Hatch.Hatch_Hatcher_NbLines)
    Start = _swig_new_instance_method(_Hatch.Hatch_Hatcher_Start)
    StartIndex = _swig_new_instance_method(_Hatch.Hatch_Hatcher_StartIndex)
    Tolerance = _swig_new_instance_method(_Hatch.Hatch_Hatcher_Tolerance)
    Trim = _swig_new_instance_method(_Hatch.Hatch_Hatcher_Trim)

    __repr__ = _dumps_object

    __swig_destroy__ = _Hatch.delete_Hatch_Hatcher

# Register Hatch_Hatcher in _Hatch:
_Hatch.Hatch_Hatcher_swigregister(Hatch_Hatcher)

class Hatch_Line(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddIntersection = _swig_new_instance_method(_Hatch.Hatch_Line_AddIntersection)

    def __init__(self, *args):
        r"""
        :rtype: None:param L:
        	:type L: gp_Lin2d
        	:param T:
        	:type T: Hatch_LineForm
        	:rtype: None
        """
        _Hatch.Hatch_Line_swiginit(self, _Hatch.new_Hatch_Line(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Hatch.delete_Hatch_Line

# Register Hatch_Line in _Hatch:
_Hatch.Hatch_Line_swigregister(Hatch_Line)

class Hatch_Parameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param Par1:
        	:type Par1: float
        	:param Start:
        	:type Start: bool
        	:param Index: default value is 0
        	:type Index: int
        	:param Par2: default value is 0
        	:type Par2: float
        	:rtype: None
        """
        _Hatch.Hatch_Parameter_swiginit(self, _Hatch.new_Hatch_Parameter(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Hatch.delete_Hatch_Parameter

# Register Hatch_Parameter in _Hatch:
_Hatch.Hatch_Parameter_swigregister(Hatch_Parameter)



