# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ChFiDS module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_chfids.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ChFiDS
else:
    import _ChFiDS

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ChFiDS.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ChFiDS.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ChFiDS.delete_SwigPyIterator
    value = _swig_new_instance_method(_ChFiDS.SwigPyIterator_value)
    incr = _swig_new_instance_method(_ChFiDS.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_ChFiDS.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_ChFiDS.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_ChFiDS.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_ChFiDS.SwigPyIterator_copy)
    next = _swig_new_instance_method(_ChFiDS.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_ChFiDS.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_ChFiDS.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_ChFiDS.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_ChFiDS.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_ChFiDS.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_ChFiDS.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_ChFiDS.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_ChFiDS.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_ChFiDS.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ChFiDS:
_ChFiDS.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.TopTools
import OCC.Core.BRepAdaptor
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.Law
ChFiDS_OnSame = _ChFiDS.ChFiDS_OnSame
ChFiDS_OnDiff = _ChFiDS.ChFiDS_OnDiff
ChFiDS_AllSame = _ChFiDS.ChFiDS_AllSame
ChFiDS_BreakPoint = _ChFiDS.ChFiDS_BreakPoint
ChFiDS_FreeBoundary = _ChFiDS.ChFiDS_FreeBoundary
ChFiDS_Closed = _ChFiDS.ChFiDS_Closed
ChFiDS_Tangent = _ChFiDS.ChFiDS_Tangent
ChFiDS_Sym = _ChFiDS.ChFiDS_Sym
ChFiDS_TwoDist = _ChFiDS.ChFiDS_TwoDist
ChFiDS_DistAngle = _ChFiDS.ChFiDS_DistAngle
ChFiDS_ClassicChamfer = _ChFiDS.ChFiDS_ClassicChamfer
ChFiDS_ConstThroatChamfer = _ChFiDS.ChFiDS_ConstThroatChamfer
ChFiDS_ConstThroatWithPenetrationChamfer = _ChFiDS.ChFiDS_ConstThroatWithPenetrationChamfer
ChFiDS_Ok = _ChFiDS.ChFiDS_Ok
ChFiDS_Error = _ChFiDS.ChFiDS_Error
ChFiDS_WalkingFailure = _ChFiDS.ChFiDS_WalkingFailure
ChFiDS_StartsolFailure = _ChFiDS.ChFiDS_StartsolFailure
ChFiDS_TwistedSurface = _ChFiDS.ChFiDS_TwistedSurface
Handle_ChFiDS_HElSpine_Create = _ChFiDS.Handle_ChFiDS_HElSpine_Create
Handle_ChFiDS_HElSpine_DownCast = _ChFiDS.Handle_ChFiDS_HElSpine_DownCast
Handle_ChFiDS_HElSpine_IsNull = _ChFiDS.Handle_ChFiDS_HElSpine_IsNull
Handle_ChFiDS_Spine_Create = _ChFiDS.Handle_ChFiDS_Spine_Create
Handle_ChFiDS_Spine_DownCast = _ChFiDS.Handle_ChFiDS_Spine_DownCast
Handle_ChFiDS_Spine_IsNull = _ChFiDS.Handle_ChFiDS_Spine_IsNull
Handle_ChFiDS_Stripe_Create = _ChFiDS.Handle_ChFiDS_Stripe_Create
Handle_ChFiDS_Stripe_DownCast = _ChFiDS.Handle_ChFiDS_Stripe_DownCast
Handle_ChFiDS_Stripe_IsNull = _ChFiDS.Handle_ChFiDS_Stripe_IsNull
Handle_ChFiDS_SurfData_Create = _ChFiDS.Handle_ChFiDS_SurfData_Create
Handle_ChFiDS_SurfData_DownCast = _ChFiDS.Handle_ChFiDS_SurfData_DownCast
Handle_ChFiDS_SurfData_IsNull = _ChFiDS.Handle_ChFiDS_SurfData_IsNull
Handle_ChFiDS_ChamfSpine_Create = _ChFiDS.Handle_ChFiDS_ChamfSpine_Create
Handle_ChFiDS_ChamfSpine_DownCast = _ChFiDS.Handle_ChFiDS_ChamfSpine_DownCast
Handle_ChFiDS_ChamfSpine_IsNull = _ChFiDS.Handle_ChFiDS_ChamfSpine_IsNull
Handle_ChFiDS_FilSpine_Create = _ChFiDS.Handle_ChFiDS_FilSpine_Create
Handle_ChFiDS_FilSpine_DownCast = _ChFiDS.Handle_ChFiDS_FilSpine_DownCast
Handle_ChFiDS_FilSpine_IsNull = _ChFiDS.Handle_ChFiDS_FilSpine_IsNull
Handle_ChFiDS_SecHArray1_Create = _ChFiDS.Handle_ChFiDS_SecHArray1_Create
Handle_ChFiDS_SecHArray1_DownCast = _ChFiDS.Handle_ChFiDS_SecHArray1_DownCast
Handle_ChFiDS_SecHArray1_IsNull = _ChFiDS.Handle_ChFiDS_SecHArray1_IsNull
Handle_ChFiDS_HData_Create = _ChFiDS.Handle_ChFiDS_HData_Create
Handle_ChFiDS_HData_DownCast = _ChFiDS.Handle_ChFiDS_HData_DownCast
Handle_ChFiDS_HData_IsNull = _ChFiDS.Handle_ChFiDS_HData_IsNull
class ChFiDS_SequenceOfSpine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_begin)
    end = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_end)
    cbegin = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_cbegin)
    cend = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_cend)

    def __init__(self, *args):
        _ChFiDS.ChFiDS_SequenceOfSpine_swiginit(self, _ChFiDS.new_ChFiDS_SequenceOfSpine(*args))
    Size = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_Size)
    Length = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_Length)
    Lower = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_Lower)
    Upper = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_Upper)
    IsEmpty = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_IsEmpty)
    Reverse = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_Reverse)
    Exchange = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_Exchange)
    delNode = _swig_new_static_method(_ChFiDS.ChFiDS_SequenceOfSpine_delNode)
    Clear = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_Clear)
    Assign = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_Assign)
    Set = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_Set)
    Remove = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_Remove)
    Append = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_Append)
    Prepend = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_Prepend)
    InsertBefore = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_InsertBefore)
    InsertAfter = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_InsertAfter)
    Split = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_Split)
    First = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_First)
    ChangeFirst = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_ChangeFirst)
    Last = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_Last)
    ChangeLast = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_ChangeLast)
    Value = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_Value)
    ChangeValue = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_ChangeValue)
    __call__ = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine___call__)
    SetValue = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSpine_SetValue)
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_SequenceOfSpine

# Register ChFiDS_SequenceOfSpine in _ChFiDS:
_ChFiDS.ChFiDS_SequenceOfSpine_swigregister(ChFiDS_SequenceOfSpine)
ChFiDS_SequenceOfSpine_delNode = _ChFiDS.ChFiDS_SequenceOfSpine_delNode

class ChFiDS_SecArray1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_begin)
    end = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_end)
    cbegin = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_cbegin)
    cend = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_cend)

    def __init__(self, *args):
        _ChFiDS.ChFiDS_SecArray1_swiginit(self, _ChFiDS.new_ChFiDS_SecArray1(*args))
    Init = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_Init)
    Size = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_Size)
    Length = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_Length)
    IsEmpty = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_IsEmpty)
    Lower = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_Lower)
    Upper = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_Upper)
    IsDeletable = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_IsDeletable)
    IsAllocated = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_IsAllocated)
    Assign = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_Assign)
    Move = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_Move)
    Set = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_Set)
    First = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_First)
    ChangeFirst = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_ChangeFirst)
    Last = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_Last)
    ChangeLast = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_ChangeLast)
    Value = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_Value)
    ChangeValue = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_ChangeValue)
    __call__ = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1___call__)
    SetValue = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_SetValue)
    Resize = _swig_new_instance_method(_ChFiDS.ChFiDS_SecArray1_Resize)
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_SecArray1

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register ChFiDS_SecArray1 in _ChFiDS:
_ChFiDS.ChFiDS_SecArray1_swigregister(ChFiDS_SecArray1)

class ChFiDS_SequenceOfSurfData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_begin)
    end = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_end)
    cbegin = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_cbegin)
    cend = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_cend)

    def __init__(self, *args):
        _ChFiDS.ChFiDS_SequenceOfSurfData_swiginit(self, _ChFiDS.new_ChFiDS_SequenceOfSurfData(*args))
    Size = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_Size)
    Length = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_Length)
    Lower = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_Lower)
    Upper = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_Upper)
    IsEmpty = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_IsEmpty)
    Reverse = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_Reverse)
    Exchange = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_Exchange)
    delNode = _swig_new_static_method(_ChFiDS.ChFiDS_SequenceOfSurfData_delNode)
    Clear = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_Clear)
    Assign = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_Assign)
    Set = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_Set)
    Remove = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_Remove)
    Append = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_Append)
    Prepend = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_Prepend)
    InsertBefore = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_InsertBefore)
    InsertAfter = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_InsertAfter)
    Split = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_Split)
    First = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_First)
    ChangeFirst = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_ChangeFirst)
    Last = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_Last)
    ChangeLast = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_ChangeLast)
    Value = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_Value)
    ChangeValue = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_ChangeValue)
    __call__ = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData___call__)
    SetValue = _swig_new_instance_method(_ChFiDS.ChFiDS_SequenceOfSurfData_SetValue)
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_SequenceOfSurfData

# Register ChFiDS_SequenceOfSurfData in _ChFiDS:
_ChFiDS.ChFiDS_SequenceOfSurfData_swigregister(ChFiDS_SequenceOfSurfData)
ChFiDS_SequenceOfSurfData_delNode = _ChFiDS.ChFiDS_SequenceOfSurfData_delNode

class ChFiDS_StripeArray1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_begin)
    end = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_end)
    cbegin = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_cbegin)
    cend = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_cend)

    def __init__(self, *args):
        _ChFiDS.ChFiDS_StripeArray1_swiginit(self, _ChFiDS.new_ChFiDS_StripeArray1(*args))
    Init = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_Init)
    Size = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_Size)
    Length = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_Length)
    IsEmpty = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_IsEmpty)
    Lower = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_Lower)
    Upper = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_Upper)
    IsDeletable = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_IsDeletable)
    IsAllocated = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_IsAllocated)
    Assign = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_Assign)
    Move = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_Move)
    Set = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_Set)
    First = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_First)
    ChangeFirst = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_ChangeFirst)
    Last = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_Last)
    ChangeLast = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_ChangeLast)
    Value = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_Value)
    ChangeValue = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_ChangeValue)
    __call__ = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1___call__)
    SetValue = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_SetValue)
    Resize = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeArray1_Resize)
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_StripeArray1

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register ChFiDS_StripeArray1 in _ChFiDS:
_ChFiDS.ChFiDS_StripeArray1_swigregister(ChFiDS_StripeArray1)

class ChFiDS_ListOfHElSpine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfHElSpine_begin)
    end = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfHElSpine_end)
    cbegin = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfHElSpine_cbegin)
    cend = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfHElSpine_cend)

    def __init__(self, *args):
        _ChFiDS.ChFiDS_ListOfHElSpine_swiginit(self, _ChFiDS.new_ChFiDS_ListOfHElSpine(*args))
    Size = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfHElSpine_Size)
    Assign = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfHElSpine_Assign)
    Set = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfHElSpine_Set)
    Clear = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfHElSpine_Clear)
    First = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfHElSpine_First)
    Last = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfHElSpine_Last)
    Append = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfHElSpine_Append)
    Prepend = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfHElSpine_Prepend)
    RemoveFirst = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfHElSpine_RemoveFirst)
    Remove = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfHElSpine_Remove)
    InsertBefore = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfHElSpine_InsertBefore)
    InsertAfter = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfHElSpine_InsertAfter)
    Reverse = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfHElSpine_Reverse)
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_ListOfHElSpine

# Register ChFiDS_ListOfHElSpine in _ChFiDS:
_ChFiDS.ChFiDS_ListOfHElSpine_swigregister(ChFiDS_ListOfHElSpine)

class ChFiDS_ListIteratorOfListOfHElSpine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChFiDS.ChFiDS_ListIteratorOfListOfHElSpine_swiginit(self, _ChFiDS.new_ChFiDS_ListIteratorOfListOfHElSpine(*args))
    More = _swig_new_instance_method(_ChFiDS.ChFiDS_ListIteratorOfListOfHElSpine_More)
    Next = _swig_new_instance_method(_ChFiDS.ChFiDS_ListIteratorOfListOfHElSpine_Next)
    Value = _swig_new_instance_method(_ChFiDS.ChFiDS_ListIteratorOfListOfHElSpine_Value)
    ChangeValue = _swig_new_instance_method(_ChFiDS.ChFiDS_ListIteratorOfListOfHElSpine_ChangeValue)
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_ListIteratorOfListOfHElSpine

# Register ChFiDS_ListIteratorOfListOfHElSpine in _ChFiDS:
_ChFiDS.ChFiDS_ListIteratorOfListOfHElSpine_swigregister(ChFiDS_ListIteratorOfListOfHElSpine)

class ChFiDS_IndexedDataMapOfVertexListOfStripe(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_begin)
    end = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_end)
    cbegin = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_cbegin)
    cend = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_cend)

    def __init__(self, *args):
        _ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_swiginit(self, _ChFiDS.new_ChFiDS_IndexedDataMapOfVertexListOfStripe(*args))
    Exchange = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Exchange)
    Assign = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Assign)
    Set = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Set)
    ReSize = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_ReSize)
    Add = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Add)
    Contains = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Contains)
    Substitute = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Substitute)
    Swap = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Swap)
    RemoveLast = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_RemoveLast)
    RemoveFromIndex = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_RemoveFromIndex)
    RemoveKey = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_RemoveKey)
    FindKey = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_FindKey)
    FindFromIndex = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_FindFromIndex)
    ChangeFromIndex = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_ChangeFromIndex)
    __call__ = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe___call__)
    FindIndex = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_FindIndex)
    ChangeFromKey = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_ChangeFromKey)
    Seek = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Seek)
    ChangeSeek = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_ChangeSeek)
    FindFromKey = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_FindFromKey)
    Clear = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Clear)
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_IndexedDataMapOfVertexListOfStripe
    Size = _swig_new_instance_method(_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_Size)

# Register ChFiDS_IndexedDataMapOfVertexListOfStripe in _ChFiDS:
_ChFiDS.ChFiDS_IndexedDataMapOfVertexListOfStripe_swigregister(ChFiDS_IndexedDataMapOfVertexListOfStripe)

class ChFiDS_ListOfStripe(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfStripe_begin)
    end = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfStripe_end)
    cbegin = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfStripe_cbegin)
    cend = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfStripe_cend)

    def __init__(self, *args):
        _ChFiDS.ChFiDS_ListOfStripe_swiginit(self, _ChFiDS.new_ChFiDS_ListOfStripe(*args))
    Size = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfStripe_Size)
    Assign = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfStripe_Assign)
    Set = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfStripe_Set)
    Clear = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfStripe_Clear)
    First = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfStripe_First)
    Last = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfStripe_Last)
    Append = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfStripe_Append)
    Prepend = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfStripe_Prepend)
    RemoveFirst = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfStripe_RemoveFirst)
    Remove = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfStripe_Remove)
    InsertBefore = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfStripe_InsertBefore)
    InsertAfter = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfStripe_InsertAfter)
    Reverse = _swig_new_instance_method(_ChFiDS.ChFiDS_ListOfStripe_Reverse)
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_ListOfStripe

# Register ChFiDS_ListOfStripe in _ChFiDS:
_ChFiDS.ChFiDS_ListOfStripe_swigregister(ChFiDS_ListOfStripe)

class ChFiDS_ListIteratorOfListOfStripe(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChFiDS.ChFiDS_ListIteratorOfListOfStripe_swiginit(self, _ChFiDS.new_ChFiDS_ListIteratorOfListOfStripe(*args))
    More = _swig_new_instance_method(_ChFiDS.ChFiDS_ListIteratorOfListOfStripe_More)
    Next = _swig_new_instance_method(_ChFiDS.ChFiDS_ListIteratorOfListOfStripe_Next)
    Value = _swig_new_instance_method(_ChFiDS.ChFiDS_ListIteratorOfListOfStripe_Value)
    ChangeValue = _swig_new_instance_method(_ChFiDS.ChFiDS_ListIteratorOfListOfStripe_ChangeValue)
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_ListIteratorOfListOfStripe

# Register ChFiDS_ListIteratorOfListOfStripe in _ChFiDS:
_ChFiDS.ChFiDS_ListIteratorOfListOfStripe_swigregister(ChFiDS_ListIteratorOfListOfStripe)

class ChFiDS_Regularities(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_ChFiDS.ChFiDS_Regularities_begin)
    end = _swig_new_instance_method(_ChFiDS.ChFiDS_Regularities_end)
    cbegin = _swig_new_instance_method(_ChFiDS.ChFiDS_Regularities_cbegin)
    cend = _swig_new_instance_method(_ChFiDS.ChFiDS_Regularities_cend)

    def __init__(self, *args):
        _ChFiDS.ChFiDS_Regularities_swiginit(self, _ChFiDS.new_ChFiDS_Regularities(*args))
    Size = _swig_new_instance_method(_ChFiDS.ChFiDS_Regularities_Size)
    Assign = _swig_new_instance_method(_ChFiDS.ChFiDS_Regularities_Assign)
    Set = _swig_new_instance_method(_ChFiDS.ChFiDS_Regularities_Set)
    Clear = _swig_new_instance_method(_ChFiDS.ChFiDS_Regularities_Clear)
    First = _swig_new_instance_method(_ChFiDS.ChFiDS_Regularities_First)
    Last = _swig_new_instance_method(_ChFiDS.ChFiDS_Regularities_Last)
    Append = _swig_new_instance_method(_ChFiDS.ChFiDS_Regularities_Append)
    Prepend = _swig_new_instance_method(_ChFiDS.ChFiDS_Regularities_Prepend)
    RemoveFirst = _swig_new_instance_method(_ChFiDS.ChFiDS_Regularities_RemoveFirst)
    Remove = _swig_new_instance_method(_ChFiDS.ChFiDS_Regularities_Remove)
    InsertBefore = _swig_new_instance_method(_ChFiDS.ChFiDS_Regularities_InsertBefore)
    InsertAfter = _swig_new_instance_method(_ChFiDS.ChFiDS_Regularities_InsertAfter)
    Reverse = _swig_new_instance_method(_ChFiDS.ChFiDS_Regularities_Reverse)
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_Regularities

# Register ChFiDS_Regularities in _ChFiDS:
_ChFiDS.ChFiDS_Regularities_swigregister(ChFiDS_Regularities)

class ChFiDS_ListIteratorOfRegularities(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChFiDS.ChFiDS_ListIteratorOfRegularities_swiginit(self, _ChFiDS.new_ChFiDS_ListIteratorOfRegularities(*args))
    More = _swig_new_instance_method(_ChFiDS.ChFiDS_ListIteratorOfRegularities_More)
    Next = _swig_new_instance_method(_ChFiDS.ChFiDS_ListIteratorOfRegularities_Next)
    Value = _swig_new_instance_method(_ChFiDS.ChFiDS_ListIteratorOfRegularities_Value)
    ChangeValue = _swig_new_instance_method(_ChFiDS.ChFiDS_ListIteratorOfRegularities_ChangeValue)
    __swig_destroy__ = _ChFiDS.delete_ChFiDS_ListIteratorOfRegularities

# Register ChFiDS_ListIteratorOfRegularities in _ChFiDS:
_ChFiDS.ChFiDS_ListIteratorOfRegularities_swigregister(ChFiDS_ListIteratorOfRegularities)

class ChFiDS_CircSection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""":rtype: None"""
        _ChFiDS.ChFiDS_CircSection_swiginit(self, _ChFiDS.new_ChFiDS_CircSection(*args))
    Get = _swig_new_instance_method(_ChFiDS.ChFiDS_CircSection_Get)
    Set = _swig_new_instance_method(_ChFiDS.ChFiDS_CircSection_Set)

    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_CircSection

# Register ChFiDS_CircSection in _ChFiDS:
_ChFiDS.ChFiDS_CircSection_swigregister(ChFiDS_CircSection)

class ChFiDS_CommonPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Arc = _swig_new_instance_method(_ChFiDS.ChFiDS_CommonPoint_Arc)

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:rtype: None
        """
        _ChFiDS.ChFiDS_CommonPoint_swiginit(self, _ChFiDS.new_ChFiDS_CommonPoint(*args))
    HasVector = _swig_new_instance_method(_ChFiDS.ChFiDS_CommonPoint_HasVector)
    IsOnArc = _swig_new_instance_method(_ChFiDS.ChFiDS_CommonPoint_IsOnArc)
    IsVertex = _swig_new_instance_method(_ChFiDS.ChFiDS_CommonPoint_IsVertex)
    Parameter = _swig_new_instance_method(_ChFiDS.ChFiDS_CommonPoint_Parameter)
    ParameterOnArc = _swig_new_instance_method(_ChFiDS.ChFiDS_CommonPoint_ParameterOnArc)
    Point = _swig_new_instance_method(_ChFiDS.ChFiDS_CommonPoint_Point)
    Reset = _swig_new_instance_method(_ChFiDS.ChFiDS_CommonPoint_Reset)
    SetArc = _swig_new_instance_method(_ChFiDS.ChFiDS_CommonPoint_SetArc)
    SetParameter = _swig_new_instance_method(_ChFiDS.ChFiDS_CommonPoint_SetParameter)
    SetPoint = _swig_new_instance_method(_ChFiDS.ChFiDS_CommonPoint_SetPoint)
    SetTolerance = _swig_new_instance_method(_ChFiDS.ChFiDS_CommonPoint_SetTolerance)
    SetVector = _swig_new_instance_method(_ChFiDS.ChFiDS_CommonPoint_SetVector)
    SetVertex = _swig_new_instance_method(_ChFiDS.ChFiDS_CommonPoint_SetVertex)
    Tolerance = _swig_new_instance_method(_ChFiDS.ChFiDS_CommonPoint_Tolerance)
    TransitionOnArc = _swig_new_instance_method(_ChFiDS.ChFiDS_CommonPoint_TransitionOnArc)
    Vector = _swig_new_instance_method(_ChFiDS.ChFiDS_CommonPoint_Vector)
    Vertex = _swig_new_instance_method(_ChFiDS.ChFiDS_CommonPoint_Vertex)

    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_CommonPoint

# Register ChFiDS_CommonPoint in _ChFiDS:
_ChFiDS.ChFiDS_CommonPoint_swigregister(ChFiDS_CommonPoint)

class ChFiDS_ElSpine(OCC.Core.Adaptor3d.Adaptor3d_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddVertexWithTangent = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_AddVertexWithTangent)

    def __init__(self, *args):
        r""":rtype: None"""
        _ChFiDS.ChFiDS_ElSpine_swiginit(self, _ChFiDS.new_ChFiDS_ElSpine(*args))
    ChangeNext = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_ChangeNext)
    ChangePrevious = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_ChangePrevious)
    FirstParameter = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_FirstParameter)
    FirstPointAndTgt = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_FirstPointAndTgt)
    GetSavedFirstParameter = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_GetSavedFirstParameter)
    GetSavedLastParameter = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_GetSavedLastParameter)
    LastParameter = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_LastParameter)
    LastPointAndTgt = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_LastPointAndTgt)
    NbVertices = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_NbVertices)
    Next = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_Next)
    Previous = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_Previous)
    SaveFirstParameter = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_SaveFirstParameter)
    SaveLastParameter = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_SaveLastParameter)
    SetCurve = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_SetCurve)
    SetFirstPointAndTgt = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_SetFirstPointAndTgt)
    SetLastPointAndTgt = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_SetLastPointAndTgt)
    SetOrigin = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_SetOrigin)
    SetPeriodic = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_SetPeriodic)
    VertexWithTangent = _swig_new_instance_method(_ChFiDS.ChFiDS_ElSpine_VertexWithTangent)

    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_ElSpine

# Register ChFiDS_ElSpine in _ChFiDS:
_ChFiDS.ChFiDS_ElSpine_swigregister(ChFiDS_ElSpine)

class ChFiDS_FaceInterference(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""":rtype: None"""
        _ChFiDS.ChFiDS_FaceInterference_swiginit(self, _ChFiDS.new_ChFiDS_FaceInterference(*args))
    ChangePCurveOnFace = _swig_new_instance_method(_ChFiDS.ChFiDS_FaceInterference_ChangePCurveOnFace)
    ChangePCurveOnSurf = _swig_new_instance_method(_ChFiDS.ChFiDS_FaceInterference_ChangePCurveOnSurf)
    FirstParameter = _swig_new_instance_method(_ChFiDS.ChFiDS_FaceInterference_FirstParameter)
    LastParameter = _swig_new_instance_method(_ChFiDS.ChFiDS_FaceInterference_LastParameter)
    LineIndex = _swig_new_instance_method(_ChFiDS.ChFiDS_FaceInterference_LineIndex)
    PCurveOnFace = _swig_new_instance_method(_ChFiDS.ChFiDS_FaceInterference_PCurveOnFace)
    PCurveOnSurf = _swig_new_instance_method(_ChFiDS.ChFiDS_FaceInterference_PCurveOnSurf)
    Parameter = _swig_new_instance_method(_ChFiDS.ChFiDS_FaceInterference_Parameter)
    SetFirstParameter = _swig_new_instance_method(_ChFiDS.ChFiDS_FaceInterference_SetFirstParameter)
    SetInterference = _swig_new_instance_method(_ChFiDS.ChFiDS_FaceInterference_SetInterference)
    SetLastParameter = _swig_new_instance_method(_ChFiDS.ChFiDS_FaceInterference_SetLastParameter)
    SetLineIndex = _swig_new_instance_method(_ChFiDS.ChFiDS_FaceInterference_SetLineIndex)
    SetParameter = _swig_new_instance_method(_ChFiDS.ChFiDS_FaceInterference_SetParameter)
    SetTransition = _swig_new_instance_method(_ChFiDS.ChFiDS_FaceInterference_SetTransition)
    Transition = _swig_new_instance_method(_ChFiDS.ChFiDS_FaceInterference_Transition)

    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_FaceInterference

# Register ChFiDS_FaceInterference in _ChFiDS:
_ChFiDS.ChFiDS_FaceInterference_swigregister(ChFiDS_FaceInterference)

class ChFiDS_HElSpine(OCC.Core.Adaptor3d.Adaptor3d_HCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates an empty GenHCurve.
        	:rtype: None* Creates a GenHCurve from a Curve
        	:param C:
        	:type C: ChFiDS_ElSpine
        	:rtype: None
        """
        _ChFiDS.ChFiDS_HElSpine_swiginit(self, _ChFiDS.new_ChFiDS_HElSpine(*args))
    ChangeCurve = _swig_new_instance_method(_ChFiDS.ChFiDS_HElSpine_ChangeCurve)
    Set = _swig_new_instance_method(_ChFiDS.ChFiDS_HElSpine_Set)


    @staticmethod
    def DownCast(t):
      return Handle_ChFiDS_HElSpine_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_HElSpine

# Register ChFiDS_HElSpine in _ChFiDS:
_ChFiDS.ChFiDS_HElSpine_swigregister(ChFiDS_HElSpine)

class ChFiDS_Map(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Create an empty Map
        	:rtype: None
        """
        _ChFiDS.ChFiDS_Map_swiginit(self, _ChFiDS.new_ChFiDS_Map(*args))
    Contains = _swig_new_instance_method(_ChFiDS.ChFiDS_Map_Contains)
    Fill = _swig_new_instance_method(_ChFiDS.ChFiDS_Map_Fill)
    FindFromIndex = _swig_new_instance_method(_ChFiDS.ChFiDS_Map_FindFromIndex)
    FindFromKey = _swig_new_instance_method(_ChFiDS.ChFiDS_Map_FindFromKey)

    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_Map

# Register ChFiDS_Map in _ChFiDS:
_ChFiDS.ChFiDS_Map_swigregister(ChFiDS_Map)

class ChFiDS_Regul(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""":rtype: None"""
        _ChFiDS.ChFiDS_Regul_swiginit(self, _ChFiDS.new_ChFiDS_Regul(*args))
    Curve = _swig_new_instance_method(_ChFiDS.ChFiDS_Regul_Curve)
    IsSurface1 = _swig_new_instance_method(_ChFiDS.ChFiDS_Regul_IsSurface1)
    IsSurface2 = _swig_new_instance_method(_ChFiDS.ChFiDS_Regul_IsSurface2)
    S1 = _swig_new_instance_method(_ChFiDS.ChFiDS_Regul_S1)
    S2 = _swig_new_instance_method(_ChFiDS.ChFiDS_Regul_S2)
    SetCurve = _swig_new_instance_method(_ChFiDS.ChFiDS_Regul_SetCurve)
    SetS1 = _swig_new_instance_method(_ChFiDS.ChFiDS_Regul_SetS1)
    SetS2 = _swig_new_instance_method(_ChFiDS.ChFiDS_Regul_SetS2)

    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_Regul

# Register ChFiDS_Regul in _ChFiDS:
_ChFiDS.ChFiDS_Regul_swigregister(ChFiDS_Regul)

class ChFiDS_Spine(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Absc = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_Absc)
    AppendElSpine = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_AppendElSpine)
    AppendOffsetElSpine = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_AppendOffsetElSpine)

    def __init__(self, *args):
        r"""
        :rtype: None:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _ChFiDS.ChFiDS_Spine_swiginit(self, _ChFiDS.new_ChFiDS_Spine(*args))
    ChangeElSpines = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_ChangeElSpines)
    ChangeOffsetElSpines = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_ChangeOffsetElSpines)
    Circle = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_Circle)
    CurrentElementarySpine = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_CurrentElementarySpine)
    CurrentIndexOfElementarySpine = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_CurrentIndexOfElementarySpine)
    D0 = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_D0)
    D1 = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_D1)
    D2 = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_D2)
    Edges = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_Edges)
    ElSpine = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_ElSpine)
    ErrorStatus = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_ErrorStatus)
    FirstParameter = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_FirstParameter)
    FirstStatus = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_FirstStatus)
    FirstVertex = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_FirstVertex)
    GetType = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_GetType)
    HasFirstTgt = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_HasFirstTgt)
    HasLastTgt = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_HasLastTgt)
    Index = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_Index)
    IsClosed = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_IsClosed)
    IsPeriodic = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_IsPeriodic)
    IsTangencyExtremity = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_IsTangencyExtremity)
    LastParameter = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_LastParameter)
    LastStatus = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_LastStatus)
    LastVertex = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_LastVertex)
    Length = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_Length)
    Line = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_Line)
    Load = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_Load)
    Mode = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_Mode)
    NbEdges = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_NbEdges)
    OffsetEdges = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_OffsetEdges)
    Parameter = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_Parameter)
    Period = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_Period)
    PutInFirst = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_PutInFirst)
    PutInFirstOffset = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_PutInFirstOffset)
    Reset = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_Reset)
    Resolution = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_Resolution)
    SetCurrent = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_SetCurrent)
    SetEdges = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_SetEdges)
    SetErrorStatus = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_SetErrorStatus)
    SetFirstParameter = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_SetFirstParameter)
    SetFirstStatus = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_SetFirstStatus)
    SetFirstTgt = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_SetFirstTgt)
    SetLastParameter = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_SetLastParameter)
    SetLastStatus = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_SetLastStatus)
    SetLastTgt = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_SetLastTgt)
    SetOffsetEdges = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_SetOffsetEdges)
    SetReference = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_SetReference)
    SetStatus = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_SetStatus)
    SetTangencyExtremity = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_SetTangencyExtremity)
    SplitDone = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_SplitDone)
    Status = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_Status)
    UnsetReference = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_UnsetReference)
    Value = _swig_new_instance_method(_ChFiDS.ChFiDS_Spine_Value)


    @staticmethod
    def DownCast(t):
      return Handle_ChFiDS_Spine_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_Spine

# Register ChFiDS_Spine in _ChFiDS:
_ChFiDS.ChFiDS_Spine_swigregister(ChFiDS_Spine)

class ChFiDS_Stripe(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""":rtype: None"""
        _ChFiDS.ChFiDS_Stripe_swiginit(self, _ChFiDS.new_ChFiDS_Stripe(*args))
    ChangeFirstCurve = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_ChangeFirstCurve)
    ChangeFirstPCurve = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_ChangeFirstPCurve)
    ChangeFirstParameters = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_ChangeFirstParameters)
    ChangeIndexFirstPointOnS1 = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_ChangeIndexFirstPointOnS1)
    ChangeIndexFirstPointOnS2 = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_ChangeIndexFirstPointOnS2)
    ChangeIndexLastPointOnS1 = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_ChangeIndexLastPointOnS1)
    ChangeIndexLastPointOnS2 = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_ChangeIndexLastPointOnS2)
    ChangeLastCurve = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_ChangeLastCurve)
    ChangeLastPCurve = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_ChangeLastPCurve)
    ChangeLastParameters = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_ChangeLastParameters)
    ChangePCurve = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_ChangePCurve)
    ChangeSetOfSurfData = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_ChangeSetOfSurfData)
    ChangeSpine = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_ChangeSpine)
    Choix = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_Choix)
    Curve = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_Curve)
    FirstCurve = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_FirstCurve)
    FirstPCurve = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_FirstPCurve)
    FirstPCurveOrientation = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_FirstPCurveOrientation)
    FirstParameters = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_FirstParameters)
    InDS = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_InDS)
    IndexFirstPointOnS1 = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_IndexFirstPointOnS1)
    IndexFirstPointOnS2 = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_IndexFirstPointOnS2)
    IndexLastPointOnS1 = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_IndexLastPointOnS1)
    IndexLastPointOnS2 = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_IndexLastPointOnS2)
    IndexPoint = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_IndexPoint)
    IsInDS = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_IsInDS)
    LastCurve = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_LastCurve)
    LastPCurve = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_LastPCurve)
    LastPCurveOrientation = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_LastPCurveOrientation)
    LastParameters = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_LastParameters)
    Orientation = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_Orientation)
    OrientationOnFace1 = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_OrientationOnFace1)
    OrientationOnFace2 = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_OrientationOnFace2)
    PCurve = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_PCurve)
    Parameters = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_Parameters)
    Reset = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_Reset)
    SetCurve = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_SetCurve)
    SetIndexPoint = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_SetIndexPoint)
    SetOfSurfData = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_SetOfSurfData)
    SetOrientation = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_SetOrientation)
    SetParameters = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_SetParameters)
    SetSolidIndex = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_SetSolidIndex)
    SolidIndex = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_SolidIndex)
    Spine = _swig_new_instance_method(_ChFiDS.ChFiDS_Stripe_Spine)


    @staticmethod
    def DownCast(t):
      return Handle_ChFiDS_Stripe_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_Stripe

# Register ChFiDS_Stripe in _ChFiDS:
_ChFiDS.ChFiDS_Stripe_swigregister(ChFiDS_Stripe)

class ChFiDS_StripeMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeMap_Add)

    def __init__(self, *args):
        r""":rtype: None"""
        _ChFiDS.ChFiDS_StripeMap_swiginit(self, _ChFiDS.new_ChFiDS_StripeMap(*args))
    Clear = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeMap_Clear)
    Extent = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeMap_Extent)
    FindFromIndex = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeMap_FindFromIndex)
    FindFromKey = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeMap_FindFromKey)
    FindKey = _swig_new_instance_method(_ChFiDS.ChFiDS_StripeMap_FindKey)

    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_StripeMap

# Register ChFiDS_StripeMap in _ChFiDS:
_ChFiDS.ChFiDS_StripeMap_swigregister(ChFiDS_StripeMap)

class ChFiDS_SurfData(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""":rtype: None"""
        _ChFiDS.ChFiDS_SurfData_swiginit(self, _ChFiDS.new_ChFiDS_SurfData(*args))
    ChangeIndexOfS1 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_ChangeIndexOfS1)
    ChangeIndexOfS2 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_ChangeIndexOfS2)
    ChangeInterference = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_ChangeInterference)
    ChangeInterferenceOnS1 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_ChangeInterferenceOnS1)
    ChangeInterferenceOnS2 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_ChangeInterferenceOnS2)
    ChangeOrientation = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_ChangeOrientation)
    ChangeSurf = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_ChangeSurf)
    ChangeVertex = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_ChangeVertex)
    ChangeVertexFirstOnS1 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_ChangeVertexFirstOnS1)
    ChangeVertexFirstOnS2 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_ChangeVertexFirstOnS2)
    ChangeVertexLastOnS1 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_ChangeVertexLastOnS1)
    ChangeVertexLastOnS2 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_ChangeVertexLastOnS2)
    Copy = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_Copy)
    FirstExtensionValue = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_FirstExtensionValue)
    FirstSpineParam = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_FirstSpineParam)
    Get2dPoints = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_Get2dPoints)
    Index = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_Index)
    IndexOfC = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_IndexOfC)
    IndexOfC1 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_IndexOfC1)
    IndexOfC2 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_IndexOfC2)
    IndexOfS1 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_IndexOfS1)
    IndexOfS2 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_IndexOfS2)
    Interference = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_Interference)
    InterferenceOnS1 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_InterferenceOnS1)
    InterferenceOnS2 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_InterferenceOnS2)
    IsOnCurve = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_IsOnCurve)
    IsOnCurve1 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_IsOnCurve1)
    IsOnCurve2 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_IsOnCurve2)
    LastExtensionValue = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_LastExtensionValue)
    LastSpineParam = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_LastSpineParam)
    Orientation = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_Orientation)
    ResetSimul = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_ResetSimul)
    Set2dPoints = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_Set2dPoints)
    SetIndexOfC1 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_SetIndexOfC1)
    SetIndexOfC2 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_SetIndexOfC2)
    SetSimul = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_SetSimul)
    Simul = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_Simul)
    Surf = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_Surf)
    TwistOnS1 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_TwistOnS1)
    TwistOnS2 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_TwistOnS2)
    Vertex = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_Vertex)
    VertexFirstOnS1 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_VertexFirstOnS1)
    VertexFirstOnS2 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_VertexFirstOnS2)
    VertexLastOnS1 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_VertexLastOnS1)
    VertexLastOnS2 = _swig_new_instance_method(_ChFiDS.ChFiDS_SurfData_VertexLastOnS2)


    @staticmethod
    def DownCast(t):
      return Handle_ChFiDS_SurfData_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_SurfData

# Register ChFiDS_SurfData in _ChFiDS:
_ChFiDS.ChFiDS_SurfData_swigregister(ChFiDS_SurfData)

class ChFiDS_ChamfSpine(ChFiDS_Spine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _ChFiDS.ChFiDS_ChamfSpine_swiginit(self, _ChFiDS.new_ChFiDS_ChamfSpine(*args))
    Dists = _swig_new_instance_method(_ChFiDS.ChFiDS_ChamfSpine_Dists)
    GetDist = _swig_new_instance_method(_ChFiDS.ChFiDS_ChamfSpine_GetDist)
    GetDistAngle = _swig_new_instance_method(_ChFiDS.ChFiDS_ChamfSpine_GetDistAngle)
    IsChamfer = _swig_new_instance_method(_ChFiDS.ChFiDS_ChamfSpine_IsChamfer)
    SetDist = _swig_new_instance_method(_ChFiDS.ChFiDS_ChamfSpine_SetDist)
    SetDistAngle = _swig_new_instance_method(_ChFiDS.ChFiDS_ChamfSpine_SetDistAngle)
    SetDists = _swig_new_instance_method(_ChFiDS.ChFiDS_ChamfSpine_SetDists)
    SetMode = _swig_new_instance_method(_ChFiDS.ChFiDS_ChamfSpine_SetMode)


    @staticmethod
    def DownCast(t):
      return Handle_ChFiDS_ChamfSpine_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_ChamfSpine

# Register ChFiDS_ChamfSpine in _ChFiDS:
_ChFiDS.ChFiDS_ChamfSpine_swigregister(ChFiDS_ChamfSpine)

class ChFiDS_FilSpine(ChFiDS_Spine):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _ChFiDS.ChFiDS_FilSpine_swiginit(self, _ChFiDS.new_ChFiDS_FilSpine(*args))
    ChangeLaw = _swig_new_instance_method(_ChFiDS.ChFiDS_FilSpine_ChangeLaw)
    IsConstant = _swig_new_instance_method(_ChFiDS.ChFiDS_FilSpine_IsConstant)
    law = _swig_new_instance_method(_ChFiDS.ChFiDS_FilSpine_law)
    MaxRadFromSeqAndLaws = _swig_new_instance_method(_ChFiDS.ChFiDS_FilSpine_MaxRadFromSeqAndLaws)
    Radius = _swig_new_instance_method(_ChFiDS.ChFiDS_FilSpine_Radius)
    SetRadius = _swig_new_instance_method(_ChFiDS.ChFiDS_FilSpine_SetRadius)
    UnSetRadius = _swig_new_instance_method(_ChFiDS.ChFiDS_FilSpine_UnSetRadius)


    @staticmethod
    def DownCast(t):
      return Handle_ChFiDS_FilSpine_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_FilSpine

# Register ChFiDS_FilSpine in _ChFiDS:
_ChFiDS.ChFiDS_FilSpine_swigregister(ChFiDS_FilSpine)

class ChFiDS_SecHArray1(ChFiDS_SecArray1, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChFiDS.ChFiDS_SecHArray1_swiginit(self, _ChFiDS.new_ChFiDS_SecHArray1(*args))
    Array1 = _swig_new_instance_method(_ChFiDS.ChFiDS_SecHArray1_Array1)
    ChangeArray1 = _swig_new_instance_method(_ChFiDS.ChFiDS_SecHArray1_ChangeArray1)


    @staticmethod
    def DownCast(t):
      return Handle_ChFiDS_SecHArray1_DownCast(t)

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_SecHArray1

# Register ChFiDS_SecHArray1 in _ChFiDS:
_ChFiDS.ChFiDS_SecHArray1_swigregister(ChFiDS_SecHArray1)

class ChFiDS_HData(ChFiDS_SequenceOfSurfData, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChFiDS.ChFiDS_HData_swiginit(self, _ChFiDS.new_ChFiDS_HData(*args))
    Sequence = _swig_new_instance_method(_ChFiDS.ChFiDS_HData_Sequence)
    Append = _swig_new_instance_method(_ChFiDS.ChFiDS_HData_Append)
    ChangeSequence = _swig_new_instance_method(_ChFiDS.ChFiDS_HData_ChangeSequence)


    @staticmethod
    def DownCast(t):
      return Handle_ChFiDS_HData_DownCast(t)

    __swig_destroy__ = _ChFiDS.delete_ChFiDS_HData

# Register ChFiDS_HData in _ChFiDS:
_ChFiDS.ChFiDS_HData_swigregister(ChFiDS_HData)



