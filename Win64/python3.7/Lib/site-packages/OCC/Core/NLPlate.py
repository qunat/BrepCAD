# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
NLPlate module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_nlplate.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _NLPlate
else:
    import _NLPlate

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _NLPlate.SWIG_PyInstanceMethod_New
_swig_new_static_method = _NLPlate.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _NLPlate.delete_SwigPyIterator
    value = _swig_new_instance_method(_NLPlate.SwigPyIterator_value)
    incr = _swig_new_instance_method(_NLPlate.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_NLPlate.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_NLPlate.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_NLPlate.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_NLPlate.SwigPyIterator_copy)
    next = _swig_new_instance_method(_NLPlate.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_NLPlate.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_NLPlate.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_NLPlate.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_NLPlate.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_NLPlate.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_NLPlate.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_NLPlate.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_NLPlate.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_NLPlate.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _NLPlate:
_NLPlate.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.Plate
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.Geom
import OCC.Core.GeomAbs
Handle_NLPlate_HGPPConstraint_Create = _NLPlate.Handle_NLPlate_HGPPConstraint_Create
Handle_NLPlate_HGPPConstraint_DownCast = _NLPlate.Handle_NLPlate_HGPPConstraint_DownCast
Handle_NLPlate_HGPPConstraint_IsNull = _NLPlate.Handle_NLPlate_HGPPConstraint_IsNull
Handle_NLPlate_HPG0Constraint_Create = _NLPlate.Handle_NLPlate_HPG0Constraint_Create
Handle_NLPlate_HPG0Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG0Constraint_DownCast
Handle_NLPlate_HPG0Constraint_IsNull = _NLPlate.Handle_NLPlate_HPG0Constraint_IsNull
Handle_NLPlate_HPG1Constraint_Create = _NLPlate.Handle_NLPlate_HPG1Constraint_Create
Handle_NLPlate_HPG1Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG1Constraint_DownCast
Handle_NLPlate_HPG1Constraint_IsNull = _NLPlate.Handle_NLPlate_HPG1Constraint_IsNull
Handle_NLPlate_HPG0G1Constraint_Create = _NLPlate.Handle_NLPlate_HPG0G1Constraint_Create
Handle_NLPlate_HPG0G1Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG0G1Constraint_DownCast
Handle_NLPlate_HPG0G1Constraint_IsNull = _NLPlate.Handle_NLPlate_HPG0G1Constraint_IsNull
Handle_NLPlate_HPG2Constraint_Create = _NLPlate.Handle_NLPlate_HPG2Constraint_Create
Handle_NLPlate_HPG2Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG2Constraint_DownCast
Handle_NLPlate_HPG2Constraint_IsNull = _NLPlate.Handle_NLPlate_HPG2Constraint_IsNull
Handle_NLPlate_HPG0G2Constraint_Create = _NLPlate.Handle_NLPlate_HPG0G2Constraint_Create
Handle_NLPlate_HPG0G2Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG0G2Constraint_DownCast
Handle_NLPlate_HPG0G2Constraint_IsNull = _NLPlate.Handle_NLPlate_HPG0G2Constraint_IsNull
Handle_NLPlate_HPG3Constraint_Create = _NLPlate.Handle_NLPlate_HPG3Constraint_Create
Handle_NLPlate_HPG3Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG3Constraint_DownCast
Handle_NLPlate_HPG3Constraint_IsNull = _NLPlate.Handle_NLPlate_HPG3Constraint_IsNull
Handle_NLPlate_HPG0G3Constraint_Create = _NLPlate.Handle_NLPlate_HPG0G3Constraint_Create
Handle_NLPlate_HPG0G3Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG0G3Constraint_DownCast
Handle_NLPlate_HPG0G3Constraint_IsNull = _NLPlate.Handle_NLPlate_HPG0G3Constraint_IsNull
class NLPlate_StackOfPlate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_NLPlate.NLPlate_StackOfPlate_begin)
    end = _swig_new_instance_method(_NLPlate.NLPlate_StackOfPlate_end)
    cbegin = _swig_new_instance_method(_NLPlate.NLPlate_StackOfPlate_cbegin)
    cend = _swig_new_instance_method(_NLPlate.NLPlate_StackOfPlate_cend)

    def __init__(self, *args):
        _NLPlate.NLPlate_StackOfPlate_swiginit(self, _NLPlate.new_NLPlate_StackOfPlate(*args))
    Size = _swig_new_instance_method(_NLPlate.NLPlate_StackOfPlate_Size)
    Assign = _swig_new_instance_method(_NLPlate.NLPlate_StackOfPlate_Assign)
    Set = _swig_new_instance_method(_NLPlate.NLPlate_StackOfPlate_Set)
    Clear = _swig_new_instance_method(_NLPlate.NLPlate_StackOfPlate_Clear)
    First = _swig_new_instance_method(_NLPlate.NLPlate_StackOfPlate_First)
    Last = _swig_new_instance_method(_NLPlate.NLPlate_StackOfPlate_Last)
    Append = _swig_new_instance_method(_NLPlate.NLPlate_StackOfPlate_Append)
    Prepend = _swig_new_instance_method(_NLPlate.NLPlate_StackOfPlate_Prepend)
    RemoveFirst = _swig_new_instance_method(_NLPlate.NLPlate_StackOfPlate_RemoveFirst)
    Remove = _swig_new_instance_method(_NLPlate.NLPlate_StackOfPlate_Remove)
    InsertBefore = _swig_new_instance_method(_NLPlate.NLPlate_StackOfPlate_InsertBefore)
    InsertAfter = _swig_new_instance_method(_NLPlate.NLPlate_StackOfPlate_InsertAfter)
    Reverse = _swig_new_instance_method(_NLPlate.NLPlate_StackOfPlate_Reverse)
    __swig_destroy__ = _NLPlate.delete_NLPlate_StackOfPlate

# Register NLPlate_StackOfPlate in _NLPlate:
_NLPlate.NLPlate_StackOfPlate_swigregister(NLPlate_StackOfPlate)

class NLPlate_ListIteratorOfStackOfPlate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _NLPlate.NLPlate_ListIteratorOfStackOfPlate_swiginit(self, _NLPlate.new_NLPlate_ListIteratorOfStackOfPlate(*args))
    More = _swig_new_instance_method(_NLPlate.NLPlate_ListIteratorOfStackOfPlate_More)
    Next = _swig_new_instance_method(_NLPlate.NLPlate_ListIteratorOfStackOfPlate_Next)
    Value = _swig_new_instance_method(_NLPlate.NLPlate_ListIteratorOfStackOfPlate_Value)
    ChangeValue = _swig_new_instance_method(_NLPlate.NLPlate_ListIteratorOfStackOfPlate_ChangeValue)
    __swig_destroy__ = _NLPlate.delete_NLPlate_ListIteratorOfStackOfPlate

# Register NLPlate_ListIteratorOfStackOfPlate in _NLPlate:
_NLPlate.NLPlate_ListIteratorOfStackOfPlate_swigregister(NLPlate_ListIteratorOfStackOfPlate)

class NLPlate_SequenceOfHGPPConstraint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_begin)
    end = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_end)
    cbegin = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_cbegin)
    cend = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_cend)

    def __init__(self, *args):
        _NLPlate.NLPlate_SequenceOfHGPPConstraint_swiginit(self, _NLPlate.new_NLPlate_SequenceOfHGPPConstraint(*args))
    Size = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Size)
    Length = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Length)
    Lower = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Lower)
    Upper = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Upper)
    IsEmpty = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_IsEmpty)
    Reverse = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Reverse)
    Exchange = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Exchange)
    delNode = _swig_new_static_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_delNode)
    Clear = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Clear)
    Assign = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Assign)
    Set = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Set)
    Remove = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Remove)
    Append = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Append)
    Prepend = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Prepend)
    InsertBefore = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_InsertBefore)
    InsertAfter = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_InsertAfter)
    Split = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Split)
    First = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_First)
    ChangeFirst = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_ChangeFirst)
    Last = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Last)
    ChangeLast = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_ChangeLast)
    Value = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_Value)
    ChangeValue = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_ChangeValue)
    __call__ = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint___call__)
    SetValue = _swig_new_instance_method(_NLPlate.NLPlate_SequenceOfHGPPConstraint_SetValue)
    __swig_destroy__ = _NLPlate.delete_NLPlate_SequenceOfHGPPConstraint

# Register NLPlate_SequenceOfHGPPConstraint in _NLPlate:
_NLPlate.NLPlate_SequenceOfHGPPConstraint_swigregister(NLPlate_SequenceOfHGPPConstraint)
NLPlate_SequenceOfHGPPConstraint_delNode = _NLPlate.NLPlate_SequenceOfHGPPConstraint_delNode

class NLPlate_HGPPConstraint(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ActiveOrder = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_ActiveOrder)
    G0Criterion = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_G0Criterion)
    G0Target = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_G0Target)
    G1Criterion = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_G1Criterion)
    G1Target = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_G1Target)
    G2Criterion = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_G2Criterion)
    G2Target = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_G2Target)
    G3Criterion = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_G3Criterion)
    G3Target = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_G3Target)
    IncrementalLoadAllowed = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_IncrementalLoadAllowed)
    IsG0 = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_IsG0)
    Orientation = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_Orientation)
    SetActiveOrder = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_SetActiveOrder)
    SetG0Criterion = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_SetG0Criterion)
    SetG1Criterion = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_SetG1Criterion)
    SetG2Criterion = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_SetG2Criterion)
    SetG3Criterion = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_SetG3Criterion)
    SetIncrementalLoadAllowed = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_SetIncrementalLoadAllowed)
    SetOrientation = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_SetOrientation)
    SetUV = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_SetUV)
    SetUVFreeSliding = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_SetUVFreeSliding)
    UV = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_UV)
    UVFreeSliding = _swig_new_instance_method(_NLPlate.NLPlate_HGPPConstraint_UVFreeSliding)


    @staticmethod
    def DownCast(t):
      return Handle_NLPlate_HGPPConstraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _NLPlate.delete_NLPlate_HGPPConstraint

# Register NLPlate_HGPPConstraint in _NLPlate:
_NLPlate.NLPlate_HGPPConstraint_swigregister(NLPlate_HGPPConstraint)

class NLPlate_NLPlate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ConstraintsSliding = _swig_new_instance_method(_NLPlate.NLPlate_NLPlate_ConstraintsSliding)
    Continuity = _swig_new_instance_method(_NLPlate.NLPlate_NLPlate_Continuity)
    Evaluate = _swig_new_instance_method(_NLPlate.NLPlate_NLPlate_Evaluate)
    EvaluateDerivative = _swig_new_instance_method(_NLPlate.NLPlate_NLPlate_EvaluateDerivative)
    IncrementalSolve = _swig_new_instance_method(_NLPlate.NLPlate_NLPlate_IncrementalSolve)
    Init = _swig_new_instance_method(_NLPlate.NLPlate_NLPlate_Init)
    IsDone = _swig_new_instance_method(_NLPlate.NLPlate_NLPlate_IsDone)
    Load = _swig_new_instance_method(_NLPlate.NLPlate_NLPlate_Load)
    MaxActiveConstraintOrder = _swig_new_instance_method(_NLPlate.NLPlate_NLPlate_MaxActiveConstraintOrder)

    def __init__(self, *args):
        r"""
        :param InitialSurface:
        	:type InitialSurface: Geom_Surface
        	:rtype: None
        """
        _NLPlate.NLPlate_NLPlate_swiginit(self, _NLPlate.new_NLPlate_NLPlate(*args))
    Solve = _swig_new_instance_method(_NLPlate.NLPlate_NLPlate_Solve)
    Solve2 = _swig_new_instance_method(_NLPlate.NLPlate_NLPlate_Solve2)
    destroy = _swig_new_instance_method(_NLPlate.NLPlate_NLPlate_destroy)

    __repr__ = _dumps_object

    __swig_destroy__ = _NLPlate.delete_NLPlate_NLPlate

# Register NLPlate_NLPlate in _NLPlate:
_NLPlate.NLPlate_NLPlate_swigregister(NLPlate_NLPlate)

class NLPlate_HPG0Constraint(NLPlate_HGPPConstraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param UV:
        	:type UV: gp_XY
        	:param Value:
        	:type Value: gp_XYZ
        	:rtype: None
        """
        _NLPlate.NLPlate_HPG0Constraint_swiginit(self, _NLPlate.new_NLPlate_HPG0Constraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_NLPlate_HPG0Constraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG0Constraint

# Register NLPlate_HPG0Constraint in _NLPlate:
_NLPlate.NLPlate_HPG0Constraint_swigregister(NLPlate_HPG0Constraint)

class NLPlate_HPG1Constraint(NLPlate_HGPPConstraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param UV:
        	:type UV: gp_XY
        	:param D1T:
        	:type D1T: Plate_D1
        	:rtype: None
        """
        _NLPlate.NLPlate_HPG1Constraint_swiginit(self, _NLPlate.new_NLPlate_HPG1Constraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_NLPlate_HPG1Constraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG1Constraint

# Register NLPlate_HPG1Constraint in _NLPlate:
_NLPlate.NLPlate_HPG1Constraint_swigregister(NLPlate_HPG1Constraint)

class NLPlate_HPG0G1Constraint(NLPlate_HPG0Constraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param UV:
        	:type UV: gp_XY
        	:param Value:
        	:type Value: gp_XYZ
        	:param D1T:
        	:type D1T: Plate_D1
        	:rtype: None
        """
        _NLPlate.NLPlate_HPG0G1Constraint_swiginit(self, _NLPlate.new_NLPlate_HPG0G1Constraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_NLPlate_HPG0G1Constraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG0G1Constraint

# Register NLPlate_HPG0G1Constraint in _NLPlate:
_NLPlate.NLPlate_HPG0G1Constraint_swigregister(NLPlate_HPG0G1Constraint)

class NLPlate_HPG2Constraint(NLPlate_HPG1Constraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param UV:
        	:type UV: gp_XY
        	:param D1T:
        	:type D1T: Plate_D1
        	:param D2T:
        	:type D2T: Plate_D2
        	:rtype: None
        """
        _NLPlate.NLPlate_HPG2Constraint_swiginit(self, _NLPlate.new_NLPlate_HPG2Constraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_NLPlate_HPG2Constraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG2Constraint

# Register NLPlate_HPG2Constraint in _NLPlate:
_NLPlate.NLPlate_HPG2Constraint_swigregister(NLPlate_HPG2Constraint)

class NLPlate_HPG0G2Constraint(NLPlate_HPG0G1Constraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param UV:
        	:type UV: gp_XY
        	:param Value:
        	:type Value: gp_XYZ
        	:param D1T:
        	:type D1T: Plate_D1
        	:param D2T:
        	:type D2T: Plate_D2
        	:rtype: None
        """
        _NLPlate.NLPlate_HPG0G2Constraint_swiginit(self, _NLPlate.new_NLPlate_HPG0G2Constraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_NLPlate_HPG0G2Constraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG0G2Constraint

# Register NLPlate_HPG0G2Constraint in _NLPlate:
_NLPlate.NLPlate_HPG0G2Constraint_swigregister(NLPlate_HPG0G2Constraint)

class NLPlate_HPG3Constraint(NLPlate_HPG2Constraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param UV:
        	:type UV: gp_XY
        	:param D1T:
        	:type D1T: Plate_D1
        	:param D2T:
        	:type D2T: Plate_D2
        	:param D3T:
        	:type D3T: Plate_D3
        	:rtype: None
        """
        _NLPlate.NLPlate_HPG3Constraint_swiginit(self, _NLPlate.new_NLPlate_HPG3Constraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_NLPlate_HPG3Constraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG3Constraint

# Register NLPlate_HPG3Constraint in _NLPlate:
_NLPlate.NLPlate_HPG3Constraint_swigregister(NLPlate_HPG3Constraint)

class NLPlate_HPG0G3Constraint(NLPlate_HPG0G2Constraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param UV:
        	:type UV: gp_XY
        	:param Value:
        	:type Value: gp_XYZ
        	:param D1T:
        	:type D1T: Plate_D1
        	:param D2T:
        	:type D2T: Plate_D2
        	:param D3T:
        	:type D3T: Plate_D3
        	:rtype: None
        """
        _NLPlate.NLPlate_HPG0G3Constraint_swiginit(self, _NLPlate.new_NLPlate_HPG0G3Constraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_NLPlate_HPG0G3Constraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG0G3Constraint

# Register NLPlate_HPG0G3Constraint in _NLPlate:
_NLPlate.NLPlate_HPG0G3Constraint_swigregister(NLPlate_HPG0G3Constraint)



