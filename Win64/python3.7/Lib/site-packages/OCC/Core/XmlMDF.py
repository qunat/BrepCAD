# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
XmlMDF module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_xmlmdf.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _XmlMDF
else:
    import _XmlMDF

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _XmlMDF.SWIG_PyInstanceMethod_New
_swig_new_static_method = _XmlMDF.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlMDF.delete_SwigPyIterator
    value = _swig_new_instance_method(_XmlMDF.SwigPyIterator_value)
    incr = _swig_new_instance_method(_XmlMDF.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_XmlMDF.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_XmlMDF.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_XmlMDF.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_XmlMDF.SwigPyIterator_copy)
    next = _swig_new_instance_method(_XmlMDF.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_XmlMDF.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_XmlMDF.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_XmlMDF.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_XmlMDF.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_XmlMDF.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_XmlMDF.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_XmlMDF.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_XmlMDF.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_XmlMDF.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _XmlMDF:
_XmlMDF.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Message
import OCC.Core.TDF
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.XmlObjMgt
import OCC.Core.LDOM
import OCC.Core.gp
import OCC.Core.Storage
Handle_XmlMDF_ADriver_Create = _XmlMDF.Handle_XmlMDF_ADriver_Create
Handle_XmlMDF_ADriver_DownCast = _XmlMDF.Handle_XmlMDF_ADriver_DownCast
Handle_XmlMDF_ADriver_IsNull = _XmlMDF.Handle_XmlMDF_ADriver_IsNull
Handle_XmlMDF_ADriverTable_Create = _XmlMDF.Handle_XmlMDF_ADriverTable_Create
Handle_XmlMDF_ADriverTable_DownCast = _XmlMDF.Handle_XmlMDF_ADriverTable_DownCast
Handle_XmlMDF_ADriverTable_IsNull = _XmlMDF.Handle_XmlMDF_ADriverTable_IsNull
Handle_XmlMDF_ReferenceDriver_Create = _XmlMDF.Handle_XmlMDF_ReferenceDriver_Create
Handle_XmlMDF_ReferenceDriver_DownCast = _XmlMDF.Handle_XmlMDF_ReferenceDriver_DownCast
Handle_XmlMDF_ReferenceDriver_IsNull = _XmlMDF.Handle_XmlMDF_ReferenceDriver_IsNull
Handle_XmlMDF_TagSourceDriver_Create = _XmlMDF.Handle_XmlMDF_TagSourceDriver_Create
Handle_XmlMDF_TagSourceDriver_DownCast = _XmlMDF.Handle_XmlMDF_TagSourceDriver_DownCast
Handle_XmlMDF_TagSourceDriver_IsNull = _XmlMDF.Handle_XmlMDF_TagSourceDriver_IsNull
class XmlMDF_MapOfDriver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_XmlMDF.XmlMDF_MapOfDriver_begin)
    end = _swig_new_instance_method(_XmlMDF.XmlMDF_MapOfDriver_end)
    cbegin = _swig_new_instance_method(_XmlMDF.XmlMDF_MapOfDriver_cbegin)
    cend = _swig_new_instance_method(_XmlMDF.XmlMDF_MapOfDriver_cend)

    def __init__(self, *args):
        _XmlMDF.XmlMDF_MapOfDriver_swiginit(self, _XmlMDF.new_XmlMDF_MapOfDriver(*args))
    Exchange = _swig_new_instance_method(_XmlMDF.XmlMDF_MapOfDriver_Exchange)
    Assign = _swig_new_instance_method(_XmlMDF.XmlMDF_MapOfDriver_Assign)
    Set = _swig_new_instance_method(_XmlMDF.XmlMDF_MapOfDriver_Set)
    ReSize = _swig_new_instance_method(_XmlMDF.XmlMDF_MapOfDriver_ReSize)
    Bind = _swig_new_instance_method(_XmlMDF.XmlMDF_MapOfDriver_Bind)
    Bound = _swig_new_instance_method(_XmlMDF.XmlMDF_MapOfDriver_Bound)
    IsBound = _swig_new_instance_method(_XmlMDF.XmlMDF_MapOfDriver_IsBound)
    UnBind = _swig_new_instance_method(_XmlMDF.XmlMDF_MapOfDriver_UnBind)
    Seek = _swig_new_instance_method(_XmlMDF.XmlMDF_MapOfDriver_Seek)
    Find = _swig_new_instance_method(_XmlMDF.XmlMDF_MapOfDriver_Find)
    ChangeSeek = _swig_new_instance_method(_XmlMDF.XmlMDF_MapOfDriver_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_XmlMDF.XmlMDF_MapOfDriver_ChangeFind)
    __call__ = _swig_new_instance_method(_XmlMDF.XmlMDF_MapOfDriver___call__)
    Clear = _swig_new_instance_method(_XmlMDF.XmlMDF_MapOfDriver_Clear)
    __swig_destroy__ = _XmlMDF.delete_XmlMDF_MapOfDriver
    Size = _swig_new_instance_method(_XmlMDF.XmlMDF_MapOfDriver_Size)

# Register XmlMDF_MapOfDriver in _XmlMDF:
_XmlMDF.XmlMDF_MapOfDriver_swigregister(XmlMDF_MapOfDriver)

class XmlMDF_TypeADriverMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_XmlMDF.XmlMDF_TypeADriverMap_begin)
    end = _swig_new_instance_method(_XmlMDF.XmlMDF_TypeADriverMap_end)
    cbegin = _swig_new_instance_method(_XmlMDF.XmlMDF_TypeADriverMap_cbegin)
    cend = _swig_new_instance_method(_XmlMDF.XmlMDF_TypeADriverMap_cend)

    def __init__(self, *args):
        _XmlMDF.XmlMDF_TypeADriverMap_swiginit(self, _XmlMDF.new_XmlMDF_TypeADriverMap(*args))
    Exchange = _swig_new_instance_method(_XmlMDF.XmlMDF_TypeADriverMap_Exchange)
    Assign = _swig_new_instance_method(_XmlMDF.XmlMDF_TypeADriverMap_Assign)
    Set = _swig_new_instance_method(_XmlMDF.XmlMDF_TypeADriverMap_Set)
    ReSize = _swig_new_instance_method(_XmlMDF.XmlMDF_TypeADriverMap_ReSize)
    Bind = _swig_new_instance_method(_XmlMDF.XmlMDF_TypeADriverMap_Bind)
    Bound = _swig_new_instance_method(_XmlMDF.XmlMDF_TypeADriverMap_Bound)
    IsBound = _swig_new_instance_method(_XmlMDF.XmlMDF_TypeADriverMap_IsBound)
    UnBind = _swig_new_instance_method(_XmlMDF.XmlMDF_TypeADriverMap_UnBind)
    Seek = _swig_new_instance_method(_XmlMDF.XmlMDF_TypeADriverMap_Seek)
    Find = _swig_new_instance_method(_XmlMDF.XmlMDF_TypeADriverMap_Find)
    ChangeSeek = _swig_new_instance_method(_XmlMDF.XmlMDF_TypeADriverMap_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_XmlMDF.XmlMDF_TypeADriverMap_ChangeFind)
    __call__ = _swig_new_instance_method(_XmlMDF.XmlMDF_TypeADriverMap___call__)
    Clear = _swig_new_instance_method(_XmlMDF.XmlMDF_TypeADriverMap_Clear)
    __swig_destroy__ = _XmlMDF.delete_XmlMDF_TypeADriverMap
    Size = _swig_new_instance_method(_XmlMDF.XmlMDF_TypeADriverMap_Size)

# Register XmlMDF_TypeADriverMap in _XmlMDF:
_XmlMDF.XmlMDF_TypeADriverMap_swigregister(XmlMDF_TypeADriverMap)

class xmlmdf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddDrivers = _swig_new_static_method(_XmlMDF.xmlmdf_AddDrivers)
    FromTo = _swig_new_static_method(_XmlMDF.xmlmdf_FromTo)

    __repr__ = _dumps_object


    def __init__(self):
        _XmlMDF.xmlmdf_swiginit(self, _XmlMDF.new_xmlmdf())
    __swig_destroy__ = _XmlMDF.delete_xmlmdf

# Register xmlmdf in _XmlMDF:
_XmlMDF.xmlmdf_swigregister(xmlmdf)
xmlmdf_AddDrivers = _XmlMDF.xmlmdf_AddDrivers
xmlmdf_FromTo = _XmlMDF.xmlmdf_FromTo

class XmlMDF_ADriver(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    NewEmpty = _swig_new_instance_method(_XmlMDF.XmlMDF_ADriver_NewEmpty)
    Paste = _swig_new_instance_method(_XmlMDF.XmlMDF_ADriver_Paste)
    SourceType = _swig_new_instance_method(_XmlMDF.XmlMDF_ADriver_SourceType)
    TypeName = _swig_new_instance_method(_XmlMDF.XmlMDF_ADriver_TypeName)
    VersionNumber = _swig_new_instance_method(_XmlMDF.XmlMDF_ADriver_VersionNumber)


    @staticmethod
    def DownCast(t):
      return Handle_XmlMDF_ADriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMDF.delete_XmlMDF_ADriver

# Register XmlMDF_ADriver in _XmlMDF:
_XmlMDF.XmlMDF_ADriver_swigregister(XmlMDF_ADriver)

class XmlMDF_ADriverTable(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddDriver = _swig_new_instance_method(_XmlMDF.XmlMDF_ADriverTable_AddDriver)
    GetDriver = _swig_new_instance_method(_XmlMDF.XmlMDF_ADriverTable_GetDriver)
    GetDrivers = _swig_new_instance_method(_XmlMDF.XmlMDF_ADriverTable_GetDrivers)

    def __init__(self, *args):
        r"""
        * Creates a mutable ADriverTable from XmlMDF.
        	:rtype: None
        """
        _XmlMDF.XmlMDF_ADriverTable_swiginit(self, _XmlMDF.new_XmlMDF_ADriverTable(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XmlMDF_ADriverTable_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMDF.delete_XmlMDF_ADriverTable

# Register XmlMDF_ADriverTable in _XmlMDF:
_XmlMDF.XmlMDF_ADriverTable_swigregister(XmlMDF_ADriverTable)

class XmlMDF_ReferenceDriver(XmlMDF_ADriver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Paste = _swig_new_instance_method(_XmlMDF.XmlMDF_ReferenceDriver_Paste)

    def __init__(self, *args):
        r"""
        :param theMessageDriver:
        	:type theMessageDriver: Message_Messenger
        	:rtype: None
        """
        _XmlMDF.XmlMDF_ReferenceDriver_swiginit(self, _XmlMDF.new_XmlMDF_ReferenceDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XmlMDF_ReferenceDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMDF.delete_XmlMDF_ReferenceDriver

# Register XmlMDF_ReferenceDriver in _XmlMDF:
_XmlMDF.XmlMDF_ReferenceDriver_swigregister(XmlMDF_ReferenceDriver)

class XmlMDF_TagSourceDriver(XmlMDF_ADriver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Paste = _swig_new_instance_method(_XmlMDF.XmlMDF_TagSourceDriver_Paste)

    def __init__(self, *args):
        r"""
        :param theMessageDriver:
        	:type theMessageDriver: Message_Messenger
        	:rtype: None
        """
        _XmlMDF.XmlMDF_TagSourceDriver_swiginit(self, _XmlMDF.new_XmlMDF_TagSourceDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_XmlMDF_TagSourceDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMDF.delete_XmlMDF_TagSourceDriver

# Register XmlMDF_TagSourceDriver in _XmlMDF:
_XmlMDF.XmlMDF_TagSourceDriver_swigregister(XmlMDF_TagSourceDriver)



