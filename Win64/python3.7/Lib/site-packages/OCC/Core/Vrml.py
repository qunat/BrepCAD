# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Vrml module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_vrml.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Vrml
else:
    import _Vrml

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _Vrml.SWIG_PyInstanceMethod_New
_swig_new_static_method = _Vrml.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Vrml.delete_SwigPyIterator
    value = _swig_new_instance_method(_Vrml.SwigPyIterator_value)
    incr = _swig_new_instance_method(_Vrml.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_Vrml.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_Vrml.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_Vrml.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_Vrml.SwigPyIterator_copy)
    next = _swig_new_instance_method(_Vrml.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_Vrml.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_Vrml.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_Vrml.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_Vrml.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_Vrml.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_Vrml.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_Vrml.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_Vrml.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_Vrml.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Vrml:
_Vrml.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TColgp
import OCC.Core.Quantity
import OCC.Core.gp
Vrml_UNKNOWN_ORDERING = _Vrml.Vrml_UNKNOWN_ORDERING
Vrml_CLOCKWISE = _Vrml.Vrml_CLOCKWISE
Vrml_COUNTERCLOCKWISE = _Vrml.Vrml_COUNTERCLOCKWISE
Vrml_SERIF = _Vrml.Vrml_SERIF
Vrml_SANS = _Vrml.Vrml_SANS
Vrml_TYPEWRITER = _Vrml.Vrml_TYPEWRITER
Vrml_OFF = _Vrml.Vrml_OFF
Vrml_ON = _Vrml.Vrml_ON
Vrml_AUTO = _Vrml.Vrml_AUTO
Vrml_REPEAT = _Vrml.Vrml_REPEAT
Vrml_CLAMP = _Vrml.Vrml_CLAMP
Vrml_UNKNOWN_FACE_TYPE = _Vrml.Vrml_UNKNOWN_FACE_TYPE
Vrml_CONVEX = _Vrml.Vrml_CONVEX
Vrml_LEFT = _Vrml.Vrml_LEFT
Vrml_CENTER = _Vrml.Vrml_CENTER
Vrml_RIGHT = _Vrml.Vrml_RIGHT
Vrml_ConeSIDES = _Vrml.Vrml_ConeSIDES
Vrml_ConeBOTTOM = _Vrml.Vrml_ConeBOTTOM
Vrml_ConeALL = _Vrml.Vrml_ConeALL
Vrml_NULL = _Vrml.Vrml_NULL
Vrml_ONE = _Vrml.Vrml_ONE
Vrml_TWO = _Vrml.Vrml_TWO
Vrml_THREE = _Vrml.Vrml_THREE
Vrml_FOUR = _Vrml.Vrml_FOUR
Vrml_DEFAULT = _Vrml.Vrml_DEFAULT
Vrml_OVERALL = _Vrml.Vrml_OVERALL
Vrml_PER_PART = _Vrml.Vrml_PER_PART
Vrml_PER_PART_INDEXED = _Vrml.Vrml_PER_PART_INDEXED
Vrml_PER_FACE = _Vrml.Vrml_PER_FACE
Vrml_PER_FACE_INDEXED = _Vrml.Vrml_PER_FACE_INDEXED
Vrml_PER_VERTEX = _Vrml.Vrml_PER_VERTEX
Vrml_PER_VERTEX_INDEXED = _Vrml.Vrml_PER_VERTEX_INDEXED
Vrml_UNKNOWN_SHAPE_TYPE = _Vrml.Vrml_UNKNOWN_SHAPE_TYPE
Vrml_SOLID = _Vrml.Vrml_SOLID
Vrml_MAP_NONE = _Vrml.Vrml_MAP_NONE
Vrml_POINT = _Vrml.Vrml_POINT
Vrml_CylinderSIDES = _Vrml.Vrml_CylinderSIDES
Vrml_CylinderTOP = _Vrml.Vrml_CylinderTOP
Vrml_CylinderBOTTOM = _Vrml.Vrml_CylinderBOTTOM
Vrml_CylinderALL = _Vrml.Vrml_CylinderALL
Vrml_NONE = _Vrml.Vrml_NONE
Vrml_BOLD = _Vrml.Vrml_BOLD
Vrml_ITALIC = _Vrml.Vrml_ITALIC
Handle_Vrml_AsciiText_Create = _Vrml.Handle_Vrml_AsciiText_Create
Handle_Vrml_AsciiText_DownCast = _Vrml.Handle_Vrml_AsciiText_DownCast
Handle_Vrml_AsciiText_IsNull = _Vrml.Handle_Vrml_AsciiText_IsNull
Handle_Vrml_Coordinate3_Create = _Vrml.Handle_Vrml_Coordinate3_Create
Handle_Vrml_Coordinate3_DownCast = _Vrml.Handle_Vrml_Coordinate3_DownCast
Handle_Vrml_Coordinate3_IsNull = _Vrml.Handle_Vrml_Coordinate3_IsNull
Handle_Vrml_IndexedFaceSet_Create = _Vrml.Handle_Vrml_IndexedFaceSet_Create
Handle_Vrml_IndexedFaceSet_DownCast = _Vrml.Handle_Vrml_IndexedFaceSet_DownCast
Handle_Vrml_IndexedFaceSet_IsNull = _Vrml.Handle_Vrml_IndexedFaceSet_IsNull
Handle_Vrml_IndexedLineSet_Create = _Vrml.Handle_Vrml_IndexedLineSet_Create
Handle_Vrml_IndexedLineSet_DownCast = _Vrml.Handle_Vrml_IndexedLineSet_DownCast
Handle_Vrml_IndexedLineSet_IsNull = _Vrml.Handle_Vrml_IndexedLineSet_IsNull
Handle_Vrml_LOD_Create = _Vrml.Handle_Vrml_LOD_Create
Handle_Vrml_LOD_DownCast = _Vrml.Handle_Vrml_LOD_DownCast
Handle_Vrml_LOD_IsNull = _Vrml.Handle_Vrml_LOD_IsNull
Handle_Vrml_Material_Create = _Vrml.Handle_Vrml_Material_Create
Handle_Vrml_Material_DownCast = _Vrml.Handle_Vrml_Material_DownCast
Handle_Vrml_Material_IsNull = _Vrml.Handle_Vrml_Material_IsNull
Handle_Vrml_Normal_Create = _Vrml.Handle_Vrml_Normal_Create
Handle_Vrml_Normal_DownCast = _Vrml.Handle_Vrml_Normal_DownCast
Handle_Vrml_Normal_IsNull = _Vrml.Handle_Vrml_Normal_IsNull
Handle_Vrml_SFImage_Create = _Vrml.Handle_Vrml_SFImage_Create
Handle_Vrml_SFImage_DownCast = _Vrml.Handle_Vrml_SFImage_DownCast
Handle_Vrml_SFImage_IsNull = _Vrml.Handle_Vrml_SFImage_IsNull
Handle_Vrml_TextureCoordinate2_Create = _Vrml.Handle_Vrml_TextureCoordinate2_Create
Handle_Vrml_TextureCoordinate2_DownCast = _Vrml.Handle_Vrml_TextureCoordinate2_DownCast
Handle_Vrml_TextureCoordinate2_IsNull = _Vrml.Handle_Vrml_TextureCoordinate2_IsNull
class vrml(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CommentWriter = _swig_new_static_method(_Vrml.vrml_CommentWriter)
    VrmlHeaderWriterToString = _swig_new_instance_method(_Vrml.vrml_VrmlHeaderWriterToString)

    __repr__ = _dumps_object


    def __init__(self):
        r"""__init__(vrml self) -> vrml"""
        _Vrml.vrml_swiginit(self, _Vrml.new_vrml())
    __swig_destroy__ = _Vrml.delete_vrml

# Register vrml in _Vrml:
_Vrml.vrml_swigregister(vrml)
vrml_CommentWriter = _Vrml.vrml_CommentWriter

class Vrml_AsciiText(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Justification = _swig_new_instance_method(_Vrml.Vrml_AsciiText_Justification)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_AsciiText_PrintToString)
    SetJustification = _swig_new_instance_method(_Vrml.Vrml_AsciiText_SetJustification)
    SetSpacing = _swig_new_instance_method(_Vrml.Vrml_AsciiText_SetSpacing)
    SetString = _swig_new_instance_method(_Vrml.Vrml_AsciiText_SetString)
    SetWidth = _swig_new_instance_method(_Vrml.Vrml_AsciiText_SetWidth)
    Spacing = _swig_new_instance_method(_Vrml.Vrml_AsciiText_Spacing)
    String = _swig_new_instance_method(_Vrml.Vrml_AsciiText_String)

    def __init__(self, *args):
        r"""
        :rtype: None:param aString:
        	:type aString: TColStd_HArray1OfAsciiString
        	:param aSpacing:
        	:type aSpacing: float
        	:param aJustification:
        	:type aJustification: Vrml_AsciiTextJustification
        	:param aWidth:
        	:type aWidth: float
        	:rtype: None
        """
        _Vrml.Vrml_AsciiText_swiginit(self, _Vrml.new_Vrml_AsciiText(*args))
    Width = _swig_new_instance_method(_Vrml.Vrml_AsciiText_Width)


    @staticmethod
    def DownCast(t):
      return Handle_Vrml_AsciiText_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_AsciiText

# Register Vrml_AsciiText in _Vrml:
_Vrml.Vrml_AsciiText_swigregister(Vrml_AsciiText)

class Vrml_Cone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BottomRadius = _swig_new_instance_method(_Vrml.Vrml_Cone_BottomRadius)
    Height = _swig_new_instance_method(_Vrml.Vrml_Cone_Height)
    Parts = _swig_new_instance_method(_Vrml.Vrml_Cone_Parts)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_Cone_PrintToString)
    SetBottomRadius = _swig_new_instance_method(_Vrml.Vrml_Cone_SetBottomRadius)
    SetHeight = _swig_new_instance_method(_Vrml.Vrml_Cone_SetHeight)
    SetParts = _swig_new_instance_method(_Vrml.Vrml_Cone_SetParts)

    def __init__(self, *args):
        r"""
        :param aParts: default value is Vrml_ConeALL
        	:type aParts: Vrml_ConeParts
        	:param aBottomRadius: default value is 1
        	:type aBottomRadius: float
        	:param aHeight: default value is 2
        	:type aHeight: float
        	:rtype: None
        """
        _Vrml.Vrml_Cone_swiginit(self, _Vrml.new_Vrml_Cone(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_Cone

# Register Vrml_Cone in _Vrml:
_Vrml.Vrml_Cone_swigregister(Vrml_Cone)

class Vrml_Coordinate3(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Point = _swig_new_instance_method(_Vrml.Vrml_Coordinate3_Point)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_Coordinate3_PrintToString)
    SetPoint = _swig_new_instance_method(_Vrml.Vrml_Coordinate3_SetPoint)

    def __init__(self, *args):
        r"""
        :param aPoint:
        	:type aPoint: TColgp_HArray1OfVec
        	:rtype: None:rtype: None
        """
        _Vrml.Vrml_Coordinate3_swiginit(self, _Vrml.new_Vrml_Coordinate3(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Vrml_Coordinate3_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_Coordinate3

# Register Vrml_Coordinate3 in _Vrml:
_Vrml.Vrml_Coordinate3_swigregister(Vrml_Coordinate3)

class Vrml_Cube(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Depth = _swig_new_instance_method(_Vrml.Vrml_Cube_Depth)
    Height = _swig_new_instance_method(_Vrml.Vrml_Cube_Height)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_Cube_PrintToString)
    SetDepth = _swig_new_instance_method(_Vrml.Vrml_Cube_SetDepth)
    SetHeight = _swig_new_instance_method(_Vrml.Vrml_Cube_SetHeight)
    SetWidth = _swig_new_instance_method(_Vrml.Vrml_Cube_SetWidth)

    def __init__(self, *args):
        r"""
        :param aWidth: default value is 2
        	:type aWidth: float
        	:param aHeight: default value is 2
        	:type aHeight: float
        	:param aDepth: default value is 2
        	:type aDepth: float
        	:rtype: None
        """
        _Vrml.Vrml_Cube_swiginit(self, _Vrml.new_Vrml_Cube(*args))
    Width = _swig_new_instance_method(_Vrml.Vrml_Cube_Width)

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_Cube

# Register Vrml_Cube in _Vrml:
_Vrml.Vrml_Cube_swigregister(Vrml_Cube)

class Vrml_Cylinder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Height = _swig_new_instance_method(_Vrml.Vrml_Cylinder_Height)
    Parts = _swig_new_instance_method(_Vrml.Vrml_Cylinder_Parts)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_Cylinder_PrintToString)
    Radius = _swig_new_instance_method(_Vrml.Vrml_Cylinder_Radius)
    SetHeight = _swig_new_instance_method(_Vrml.Vrml_Cylinder_SetHeight)
    SetParts = _swig_new_instance_method(_Vrml.Vrml_Cylinder_SetParts)
    SetRadius = _swig_new_instance_method(_Vrml.Vrml_Cylinder_SetRadius)

    def __init__(self, *args):
        r"""
        :param aParts: default value is Vrml_CylinderALL
        	:type aParts: Vrml_CylinderParts
        	:param aRadius: default value is 1
        	:type aRadius: float
        	:param aHeight: default value is 2
        	:type aHeight: float
        	:rtype: None
        """
        _Vrml.Vrml_Cylinder_swiginit(self, _Vrml.new_Vrml_Cylinder(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_Cylinder

# Register Vrml_Cylinder in _Vrml:
_Vrml.Vrml_Cylinder_swigregister(Vrml_Cylinder)

class Vrml_DirectionalLight(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Color = _swig_new_instance_method(_Vrml.Vrml_DirectionalLight_Color)
    Direction = _swig_new_instance_method(_Vrml.Vrml_DirectionalLight_Direction)
    Intensity = _swig_new_instance_method(_Vrml.Vrml_DirectionalLight_Intensity)
    OnOff = _swig_new_instance_method(_Vrml.Vrml_DirectionalLight_OnOff)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_DirectionalLight_PrintToString)
    SetColor = _swig_new_instance_method(_Vrml.Vrml_DirectionalLight_SetColor)
    SetDirection = _swig_new_instance_method(_Vrml.Vrml_DirectionalLight_SetDirection)
    SetIntensity = _swig_new_instance_method(_Vrml.Vrml_DirectionalLight_SetIntensity)
    SetOnOff = _swig_new_instance_method(_Vrml.Vrml_DirectionalLight_SetOnOff)

    def __init__(self, *args):
        r"""
        :rtype: None:param aOnOff:
        	:type aOnOff: bool
        	:param aIntensity:
        	:type aIntensity: float
        	:param aColor:
        	:type aColor: Quantity_Color
        	:param aDirection:
        	:type aDirection: gp_Vec
        	:rtype: None
        """
        _Vrml.Vrml_DirectionalLight_swiginit(self, _Vrml.new_Vrml_DirectionalLight(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_DirectionalLight

# Register Vrml_DirectionalLight in _Vrml:
_Vrml.Vrml_DirectionalLight_swigregister(Vrml_DirectionalLight)

class Vrml_FontStyle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Family = _swig_new_instance_method(_Vrml.Vrml_FontStyle_Family)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_FontStyle_PrintToString)
    SetFamily = _swig_new_instance_method(_Vrml.Vrml_FontStyle_SetFamily)
    SetSize = _swig_new_instance_method(_Vrml.Vrml_FontStyle_SetSize)
    SetStyle = _swig_new_instance_method(_Vrml.Vrml_FontStyle_SetStyle)
    Size = _swig_new_instance_method(_Vrml.Vrml_FontStyle_Size)
    Style = _swig_new_instance_method(_Vrml.Vrml_FontStyle_Style)

    def __init__(self, *args):
        r"""
        :param aSize: default value is 10
        	:type aSize: float
        	:param aFamily: default value is Vrml_SERIF
        	:type aFamily: Vrml_FontStyleFamily
        	:param aStyle: default value is Vrml_NONE
        	:type aStyle: Vrml_FontStyleStyle
        	:rtype: None
        """
        _Vrml.Vrml_FontStyle_swiginit(self, _Vrml.new_Vrml_FontStyle(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_FontStyle

# Register Vrml_FontStyle in _Vrml:
_Vrml.Vrml_FontStyle_swigregister(Vrml_FontStyle)

class Vrml_Group(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_Group_PrintToString)

    def __init__(self, *args):
        r""":rtype: None"""
        _Vrml.Vrml_Group_swiginit(self, _Vrml.new_Vrml_Group(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_Group

# Register Vrml_Group in _Vrml:
_Vrml.Vrml_Group_swigregister(Vrml_Group)

class Vrml_IndexedFaceSet(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CoordIndex = _swig_new_instance_method(_Vrml.Vrml_IndexedFaceSet_CoordIndex)
    MaterialIndex = _swig_new_instance_method(_Vrml.Vrml_IndexedFaceSet_MaterialIndex)
    NormalIndex = _swig_new_instance_method(_Vrml.Vrml_IndexedFaceSet_NormalIndex)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_IndexedFaceSet_PrintToString)
    SetCoordIndex = _swig_new_instance_method(_Vrml.Vrml_IndexedFaceSet_SetCoordIndex)
    SetMaterialIndex = _swig_new_instance_method(_Vrml.Vrml_IndexedFaceSet_SetMaterialIndex)
    SetNormalIndex = _swig_new_instance_method(_Vrml.Vrml_IndexedFaceSet_SetNormalIndex)
    SetTextureCoordIndex = _swig_new_instance_method(_Vrml.Vrml_IndexedFaceSet_SetTextureCoordIndex)
    TextureCoordIndex = _swig_new_instance_method(_Vrml.Vrml_IndexedFaceSet_TextureCoordIndex)

    def __init__(self, *args):
        r"""
        :param aCoordIndex:
        	:type aCoordIndex: TColStd_HArray1OfInteger
        	:param aMaterialIndex:
        	:type aMaterialIndex: TColStd_HArray1OfInteger
        	:param aNormalIndex:
        	:type aNormalIndex: TColStd_HArray1OfInteger
        	:param aTextureCoordIndex:
        	:type aTextureCoordIndex: TColStd_HArray1OfInteger
        	:rtype: None:rtype: None
        """
        _Vrml.Vrml_IndexedFaceSet_swiginit(self, _Vrml.new_Vrml_IndexedFaceSet(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Vrml_IndexedFaceSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_IndexedFaceSet

# Register Vrml_IndexedFaceSet in _Vrml:
_Vrml.Vrml_IndexedFaceSet_swigregister(Vrml_IndexedFaceSet)

class Vrml_IndexedLineSet(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CoordIndex = _swig_new_instance_method(_Vrml.Vrml_IndexedLineSet_CoordIndex)
    MaterialIndex = _swig_new_instance_method(_Vrml.Vrml_IndexedLineSet_MaterialIndex)
    NormalIndex = _swig_new_instance_method(_Vrml.Vrml_IndexedLineSet_NormalIndex)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_IndexedLineSet_PrintToString)
    SetCoordIndex = _swig_new_instance_method(_Vrml.Vrml_IndexedLineSet_SetCoordIndex)
    SetMaterialIndex = _swig_new_instance_method(_Vrml.Vrml_IndexedLineSet_SetMaterialIndex)
    SetNormalIndex = _swig_new_instance_method(_Vrml.Vrml_IndexedLineSet_SetNormalIndex)
    SetTextureCoordIndex = _swig_new_instance_method(_Vrml.Vrml_IndexedLineSet_SetTextureCoordIndex)
    TextureCoordIndex = _swig_new_instance_method(_Vrml.Vrml_IndexedLineSet_TextureCoordIndex)

    def __init__(self, *args):
        r"""
        :param aCoordIndex:
        	:type aCoordIndex: TColStd_HArray1OfInteger
        	:param aMaterialIndex:
        	:type aMaterialIndex: TColStd_HArray1OfInteger
        	:param aNormalIndex:
        	:type aNormalIndex: TColStd_HArray1OfInteger
        	:param aTextureCoordIndex:
        	:type aTextureCoordIndex: TColStd_HArray1OfInteger
        	:rtype: None:rtype: None
        """
        _Vrml.Vrml_IndexedLineSet_swiginit(self, _Vrml.new_Vrml_IndexedLineSet(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Vrml_IndexedLineSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_IndexedLineSet

# Register Vrml_IndexedLineSet in _Vrml:
_Vrml.Vrml_IndexedLineSet_swigregister(Vrml_IndexedLineSet)

class Vrml_Info(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_Info_PrintToString)
    SetString = _swig_new_instance_method(_Vrml.Vrml_Info_SetString)
    String = _swig_new_instance_method(_Vrml.Vrml_Info_String)

    def __init__(self, *args):
        r"""
        :param aString: default value is '<Undefinedinfo>'
        	:type aString: TCollection_AsciiString
        	:rtype: None
        """
        _Vrml.Vrml_Info_swiginit(self, _Vrml.new_Vrml_Info(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_Info

# Register Vrml_Info in _Vrml:
_Vrml.Vrml_Info_swigregister(Vrml_Info)

class Vrml_Instancing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFToString = _swig_new_instance_method(_Vrml.Vrml_Instancing_DEFToString)
    USEToString = _swig_new_instance_method(_Vrml.Vrml_Instancing_USEToString)

    def __init__(self, *args):
        r"""
        * Adds 'DEF <myName>' in anOStream (VRML file).
        	:param aString:
        	:type aString: TCollection_AsciiString
        	:rtype: None
        """
        _Vrml.Vrml_Instancing_swiginit(self, _Vrml.new_Vrml_Instancing(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_Instancing

# Register Vrml_Instancing in _Vrml:
_Vrml.Vrml_Instancing_swigregister(Vrml_Instancing)

class Vrml_LOD(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Center = _swig_new_instance_method(_Vrml.Vrml_LOD_Center)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_LOD_PrintToString)
    Range = _swig_new_instance_method(_Vrml.Vrml_LOD_Range)
    SetCenter = _swig_new_instance_method(_Vrml.Vrml_LOD_SetCenter)
    SetRange = _swig_new_instance_method(_Vrml.Vrml_LOD_SetRange)

    def __init__(self, *args):
        r"""
        :rtype: None:param aRange:
        	:type aRange: TColStd_HArray1OfReal
        	:param aCenter:
        	:type aCenter: gp_Vec
        	:rtype: None
        """
        _Vrml.Vrml_LOD_swiginit(self, _Vrml.new_Vrml_LOD(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Vrml_LOD_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_LOD

# Register Vrml_LOD in _Vrml:
_Vrml.Vrml_LOD_swigregister(Vrml_LOD)

class Vrml_Material(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AmbientColor = _swig_new_instance_method(_Vrml.Vrml_Material_AmbientColor)
    DiffuseColor = _swig_new_instance_method(_Vrml.Vrml_Material_DiffuseColor)
    EmissiveColor = _swig_new_instance_method(_Vrml.Vrml_Material_EmissiveColor)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_Material_PrintToString)
    SetAmbientColor = _swig_new_instance_method(_Vrml.Vrml_Material_SetAmbientColor)
    SetDiffuseColor = _swig_new_instance_method(_Vrml.Vrml_Material_SetDiffuseColor)
    SetEmissiveColor = _swig_new_instance_method(_Vrml.Vrml_Material_SetEmissiveColor)
    SetShininess = _swig_new_instance_method(_Vrml.Vrml_Material_SetShininess)
    SetSpecularColor = _swig_new_instance_method(_Vrml.Vrml_Material_SetSpecularColor)
    SetTransparency = _swig_new_instance_method(_Vrml.Vrml_Material_SetTransparency)
    Shininess = _swig_new_instance_method(_Vrml.Vrml_Material_Shininess)
    SpecularColor = _swig_new_instance_method(_Vrml.Vrml_Material_SpecularColor)
    Transparency = _swig_new_instance_method(_Vrml.Vrml_Material_Transparency)

    def __init__(self, *args):
        r"""
        :param aAmbientColor:
        	:type aAmbientColor: Quantity_HArray1OfColor
        	:param aDiffuseColor:
        	:type aDiffuseColor: Quantity_HArray1OfColor
        	:param aSpecularColor:
        	:type aSpecularColor: Quantity_HArray1OfColor
        	:param aEmissiveColor:
        	:type aEmissiveColor: Quantity_HArray1OfColor
        	:param aShininess:
        	:type aShininess: TColStd_HArray1OfReal
        	:param aTransparency:
        	:type aTransparency: TColStd_HArray1OfReal
        	:rtype: None:rtype: None
        """
        _Vrml.Vrml_Material_swiginit(self, _Vrml.new_Vrml_Material(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Vrml_Material_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_Material

# Register Vrml_Material in _Vrml:
_Vrml.Vrml_Material_swigregister(Vrml_Material)

class Vrml_MaterialBinding(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_MaterialBinding_PrintToString)
    SetValue = _swig_new_instance_method(_Vrml.Vrml_MaterialBinding_SetValue)
    Value = _swig_new_instance_method(_Vrml.Vrml_MaterialBinding_Value)

    def __init__(self, *args):
        r"""
        :param aValue:
        	:type aValue: Vrml_MaterialBindingAndNormalBinding
        	:rtype: None:rtype: None
        """
        _Vrml.Vrml_MaterialBinding_swiginit(self, _Vrml.new_Vrml_MaterialBinding(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_MaterialBinding

# Register Vrml_MaterialBinding in _Vrml:
_Vrml.Vrml_MaterialBinding_swigregister(Vrml_MaterialBinding)

class Vrml_MatrixTransform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Matrix = _swig_new_instance_method(_Vrml.Vrml_MatrixTransform_Matrix)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_MatrixTransform_PrintToString)
    SetMatrix = _swig_new_instance_method(_Vrml.Vrml_MatrixTransform_SetMatrix)

    def __init__(self, *args):
        r"""
        :rtype: None:param aMatrix:
        	:type aMatrix: gp_Trsf
        	:rtype: None
        """
        _Vrml.Vrml_MatrixTransform_swiginit(self, _Vrml.new_Vrml_MatrixTransform(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_MatrixTransform

# Register Vrml_MatrixTransform in _Vrml:
_Vrml.Vrml_MatrixTransform_swigregister(Vrml_MatrixTransform)

class Vrml_Normal(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_Normal_PrintToString)
    SetVector = _swig_new_instance_method(_Vrml.Vrml_Normal_SetVector)
    Vector = _swig_new_instance_method(_Vrml.Vrml_Normal_Vector)

    def __init__(self, *args):
        r"""
        :param aVector:
        	:type aVector: TColgp_HArray1OfVec
        	:rtype: None:rtype: None
        """
        _Vrml.Vrml_Normal_swiginit(self, _Vrml.new_Vrml_Normal(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Vrml_Normal_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_Normal

# Register Vrml_Normal in _Vrml:
_Vrml.Vrml_Normal_swigregister(Vrml_Normal)

class Vrml_NormalBinding(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_NormalBinding_PrintToString)
    SetValue = _swig_new_instance_method(_Vrml.Vrml_NormalBinding_SetValue)
    Value = _swig_new_instance_method(_Vrml.Vrml_NormalBinding_Value)

    def __init__(self, *args):
        r"""
        :param aValue:
        	:type aValue: Vrml_MaterialBindingAndNormalBinding
        	:rtype: None:rtype: None
        """
        _Vrml.Vrml_NormalBinding_swiginit(self, _Vrml.new_Vrml_NormalBinding(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_NormalBinding

# Register Vrml_NormalBinding in _Vrml:
_Vrml.Vrml_NormalBinding_swigregister(Vrml_NormalBinding)

class Vrml_OrthographicCamera(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FocalDistance = _swig_new_instance_method(_Vrml.Vrml_OrthographicCamera_FocalDistance)
    Height = _swig_new_instance_method(_Vrml.Vrml_OrthographicCamera_Height)
    Orientation = _swig_new_instance_method(_Vrml.Vrml_OrthographicCamera_Orientation)
    Position = _swig_new_instance_method(_Vrml.Vrml_OrthographicCamera_Position)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_OrthographicCamera_PrintToString)
    SetFocalDistance = _swig_new_instance_method(_Vrml.Vrml_OrthographicCamera_SetFocalDistance)
    SetHeight = _swig_new_instance_method(_Vrml.Vrml_OrthographicCamera_SetHeight)
    SetOrientation = _swig_new_instance_method(_Vrml.Vrml_OrthographicCamera_SetOrientation)
    SetPosition = _swig_new_instance_method(_Vrml.Vrml_OrthographicCamera_SetPosition)

    def __init__(self, *args):
        r"""
        :rtype: None:param aPosition:
        	:type aPosition: gp_Vec
        	:param aOrientation:
        	:type aOrientation: Vrml_SFRotation
        	:param aFocalDistance:
        	:type aFocalDistance: float
        	:param aHeight:
        	:type aHeight: float
        	:rtype: None
        """
        _Vrml.Vrml_OrthographicCamera_swiginit(self, _Vrml.new_Vrml_OrthographicCamera(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_OrthographicCamera

# Register Vrml_OrthographicCamera in _Vrml:
_Vrml.Vrml_OrthographicCamera_swigregister(Vrml_OrthographicCamera)

class Vrml_PerspectiveCamera(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Angle = _swig_new_instance_method(_Vrml.Vrml_PerspectiveCamera_Angle)
    FocalDistance = _swig_new_instance_method(_Vrml.Vrml_PerspectiveCamera_FocalDistance)
    Orientation = _swig_new_instance_method(_Vrml.Vrml_PerspectiveCamera_Orientation)
    Position = _swig_new_instance_method(_Vrml.Vrml_PerspectiveCamera_Position)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_PerspectiveCamera_PrintToString)
    SetAngle = _swig_new_instance_method(_Vrml.Vrml_PerspectiveCamera_SetAngle)
    SetFocalDistance = _swig_new_instance_method(_Vrml.Vrml_PerspectiveCamera_SetFocalDistance)
    SetOrientation = _swig_new_instance_method(_Vrml.Vrml_PerspectiveCamera_SetOrientation)
    SetPosition = _swig_new_instance_method(_Vrml.Vrml_PerspectiveCamera_SetPosition)

    def __init__(self, *args):
        r"""
        :rtype: None:param aPosition:
        	:type aPosition: gp_Vec
        	:param aOrientation:
        	:type aOrientation: Vrml_SFRotation
        	:param aFocalDistance:
        	:type aFocalDistance: float
        	:param aHeightAngle:
        	:type aHeightAngle: float
        	:rtype: None
        """
        _Vrml.Vrml_PerspectiveCamera_swiginit(self, _Vrml.new_Vrml_PerspectiveCamera(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_PerspectiveCamera

# Register Vrml_PerspectiveCamera in _Vrml:
_Vrml.Vrml_PerspectiveCamera_swigregister(Vrml_PerspectiveCamera)

class Vrml_PointLight(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Color = _swig_new_instance_method(_Vrml.Vrml_PointLight_Color)
    Intensity = _swig_new_instance_method(_Vrml.Vrml_PointLight_Intensity)
    Location = _swig_new_instance_method(_Vrml.Vrml_PointLight_Location)
    OnOff = _swig_new_instance_method(_Vrml.Vrml_PointLight_OnOff)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_PointLight_PrintToString)
    SetColor = _swig_new_instance_method(_Vrml.Vrml_PointLight_SetColor)
    SetIntensity = _swig_new_instance_method(_Vrml.Vrml_PointLight_SetIntensity)
    SetLocation = _swig_new_instance_method(_Vrml.Vrml_PointLight_SetLocation)
    SetOnOff = _swig_new_instance_method(_Vrml.Vrml_PointLight_SetOnOff)

    def __init__(self, *args):
        r"""
        :rtype: None:param aOnOff:
        	:type aOnOff: bool
        	:param aIntensity:
        	:type aIntensity: float
        	:param aColor:
        	:type aColor: Quantity_Color
        	:param aLocation:
        	:type aLocation: gp_Vec
        	:rtype: None
        """
        _Vrml.Vrml_PointLight_swiginit(self, _Vrml.new_Vrml_PointLight(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_PointLight

# Register Vrml_PointLight in _Vrml:
_Vrml.Vrml_PointLight_swigregister(Vrml_PointLight)

class Vrml_PointSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NumPoints = _swig_new_instance_method(_Vrml.Vrml_PointSet_NumPoints)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_PointSet_PrintToString)
    SetNumPoints = _swig_new_instance_method(_Vrml.Vrml_PointSet_SetNumPoints)
    SetStartIndex = _swig_new_instance_method(_Vrml.Vrml_PointSet_SetStartIndex)
    StartIndex = _swig_new_instance_method(_Vrml.Vrml_PointSet_StartIndex)

    def __init__(self, *args):
        r"""
        :param aStartIndex: default value is 0
        	:type aStartIndex: int
        	:param aNumPoints: default value is -1
        	:type aNumPoints: int
        	:rtype: None
        """
        _Vrml.Vrml_PointSet_swiginit(self, _Vrml.new_Vrml_PointSet(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_PointSet

# Register Vrml_PointSet in _Vrml:
_Vrml.Vrml_PointSet_swigregister(Vrml_PointSet)

class Vrml_Rotation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_Rotation_PrintToString)
    Rotation = _swig_new_instance_method(_Vrml.Vrml_Rotation_Rotation)
    SetRotation = _swig_new_instance_method(_Vrml.Vrml_Rotation_SetRotation)

    def __init__(self, *args):
        r"""
        :rtype: None:param aRotation:
        	:type aRotation: Vrml_SFRotation
        	:rtype: None
        """
        _Vrml.Vrml_Rotation_swiginit(self, _Vrml.new_Vrml_Rotation(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_Rotation

# Register Vrml_Rotation in _Vrml:
_Vrml.Vrml_Rotation_swigregister(Vrml_Rotation)

class Vrml_SFImage(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Array = _swig_new_instance_method(_Vrml.Vrml_SFImage_Array)
    ArrayFlag = _swig_new_instance_method(_Vrml.Vrml_SFImage_ArrayFlag)
    Height = _swig_new_instance_method(_Vrml.Vrml_SFImage_Height)
    Number = _swig_new_instance_method(_Vrml.Vrml_SFImage_Number)
    SetArray = _swig_new_instance_method(_Vrml.Vrml_SFImage_SetArray)
    SetHeight = _swig_new_instance_method(_Vrml.Vrml_SFImage_SetHeight)
    SetNumber = _swig_new_instance_method(_Vrml.Vrml_SFImage_SetNumber)
    SetWidth = _swig_new_instance_method(_Vrml.Vrml_SFImage_SetWidth)

    def __init__(self, *args):
        r"""
        :rtype: None:param aWidth:
        	:type aWidth: int
        	:param aHeight:
        	:type aHeight: int
        	:param aNumber:
        	:type aNumber: Vrml_SFImageNumber
        	:param anArray:
        	:type anArray: TColStd_HArray1OfInteger
        	:rtype: None
        """
        _Vrml.Vrml_SFImage_swiginit(self, _Vrml.new_Vrml_SFImage(*args))
    Width = _swig_new_instance_method(_Vrml.Vrml_SFImage_Width)


    @staticmethod
    def DownCast(t):
      return Handle_Vrml_SFImage_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_SFImage

# Register Vrml_SFImage in _Vrml:
_Vrml.Vrml_SFImage_swigregister(Vrml_SFImage)

class Vrml_SFRotation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Angle = _swig_new_instance_method(_Vrml.Vrml_SFRotation_Angle)
    RotationX = _swig_new_instance_method(_Vrml.Vrml_SFRotation_RotationX)
    RotationY = _swig_new_instance_method(_Vrml.Vrml_SFRotation_RotationY)
    RotationZ = _swig_new_instance_method(_Vrml.Vrml_SFRotation_RotationZ)
    SetAngle = _swig_new_instance_method(_Vrml.Vrml_SFRotation_SetAngle)
    SetRotationX = _swig_new_instance_method(_Vrml.Vrml_SFRotation_SetRotationX)
    SetRotationY = _swig_new_instance_method(_Vrml.Vrml_SFRotation_SetRotationY)
    SetRotationZ = _swig_new_instance_method(_Vrml.Vrml_SFRotation_SetRotationZ)

    def __init__(self, *args):
        r"""
        :rtype: None:param aRotationX:
        	:type aRotationX: float
        	:param aRotationY:
        	:type aRotationY: float
        	:param aRotationZ:
        	:type aRotationZ: float
        	:param anAngle:
        	:type anAngle: float
        	:rtype: None
        """
        _Vrml.Vrml_SFRotation_swiginit(self, _Vrml.new_Vrml_SFRotation(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_SFRotation

# Register Vrml_SFRotation in _Vrml:
_Vrml.Vrml_SFRotation_swigregister(Vrml_SFRotation)

class Vrml_Scale(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_Scale_PrintToString)
    ScaleFactor = _swig_new_instance_method(_Vrml.Vrml_Scale_ScaleFactor)
    SetScaleFactor = _swig_new_instance_method(_Vrml.Vrml_Scale_SetScaleFactor)

    def __init__(self, *args):
        r"""
        :rtype: None:param aScaleFactor:
        	:type aScaleFactor: gp_Vec
        	:rtype: None
        """
        _Vrml.Vrml_Scale_swiginit(self, _Vrml.new_Vrml_Scale(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_Scale

# Register Vrml_Scale in _Vrml:
_Vrml.Vrml_Scale_swigregister(Vrml_Scale)

class Vrml_Separator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_Separator_PrintToString)
    RenderCulling = _swig_new_instance_method(_Vrml.Vrml_Separator_RenderCulling)
    SetRenderCulling = _swig_new_instance_method(_Vrml.Vrml_Separator_SetRenderCulling)

    def __init__(self, *args):
        r"""
        :param aRenderCulling:
        	:type aRenderCulling: Vrml_SeparatorRenderCulling
        	:rtype: None:rtype: None
        """
        _Vrml.Vrml_Separator_swiginit(self, _Vrml.new_Vrml_Separator(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_Separator

# Register Vrml_Separator in _Vrml:
_Vrml.Vrml_Separator_swigregister(Vrml_Separator)

class Vrml_ShapeHints(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Angle = _swig_new_instance_method(_Vrml.Vrml_ShapeHints_Angle)
    FaceType = _swig_new_instance_method(_Vrml.Vrml_ShapeHints_FaceType)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_ShapeHints_PrintToString)
    SetAngle = _swig_new_instance_method(_Vrml.Vrml_ShapeHints_SetAngle)
    SetFaceType = _swig_new_instance_method(_Vrml.Vrml_ShapeHints_SetFaceType)
    SetShapeType = _swig_new_instance_method(_Vrml.Vrml_ShapeHints_SetShapeType)
    SetVertexOrdering = _swig_new_instance_method(_Vrml.Vrml_ShapeHints_SetVertexOrdering)
    ShapeType = _swig_new_instance_method(_Vrml.Vrml_ShapeHints_ShapeType)
    VertexOrdering = _swig_new_instance_method(_Vrml.Vrml_ShapeHints_VertexOrdering)

    def __init__(self, *args):
        r"""
        :param aVertexOrdering: default value is Vrml_UNKNOWN_ORDERING
        	:type aVertexOrdering: Vrml_VertexOrdering
        	:param aShapeType: default value is Vrml_UNKNOWN_SHAPE_TYPE
        	:type aShapeType: Vrml_ShapeType
        	:param aFaceType: default value is Vrml_CONVEX
        	:type aFaceType: Vrml_FaceType
        	:param aAngle: default value is 0.5
        	:type aAngle: float
        	:rtype: None
        """
        _Vrml.Vrml_ShapeHints_swiginit(self, _Vrml.new_Vrml_ShapeHints(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_ShapeHints

# Register Vrml_ShapeHints in _Vrml:
_Vrml.Vrml_ShapeHints_swigregister(Vrml_ShapeHints)

class Vrml_Sphere(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_Sphere_PrintToString)
    Radius = _swig_new_instance_method(_Vrml.Vrml_Sphere_Radius)
    SetRadius = _swig_new_instance_method(_Vrml.Vrml_Sphere_SetRadius)

    def __init__(self, *args):
        r"""
        :param aRadius: default value is 1
        	:type aRadius: float
        	:rtype: None
        """
        _Vrml.Vrml_Sphere_swiginit(self, _Vrml.new_Vrml_Sphere(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_Sphere

# Register Vrml_Sphere in _Vrml:
_Vrml.Vrml_Sphere_swigregister(Vrml_Sphere)

class Vrml_SpotLight(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Color = _swig_new_instance_method(_Vrml.Vrml_SpotLight_Color)
    CutOffAngle = _swig_new_instance_method(_Vrml.Vrml_SpotLight_CutOffAngle)
    Direction = _swig_new_instance_method(_Vrml.Vrml_SpotLight_Direction)
    DropOffRate = _swig_new_instance_method(_Vrml.Vrml_SpotLight_DropOffRate)
    Intensity = _swig_new_instance_method(_Vrml.Vrml_SpotLight_Intensity)
    Location = _swig_new_instance_method(_Vrml.Vrml_SpotLight_Location)
    OnOff = _swig_new_instance_method(_Vrml.Vrml_SpotLight_OnOff)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_SpotLight_PrintToString)
    SetColor = _swig_new_instance_method(_Vrml.Vrml_SpotLight_SetColor)
    SetCutOffAngle = _swig_new_instance_method(_Vrml.Vrml_SpotLight_SetCutOffAngle)
    SetDirection = _swig_new_instance_method(_Vrml.Vrml_SpotLight_SetDirection)
    SetDropOffRate = _swig_new_instance_method(_Vrml.Vrml_SpotLight_SetDropOffRate)
    SetIntensity = _swig_new_instance_method(_Vrml.Vrml_SpotLight_SetIntensity)
    SetLocation = _swig_new_instance_method(_Vrml.Vrml_SpotLight_SetLocation)
    SetOnOff = _swig_new_instance_method(_Vrml.Vrml_SpotLight_SetOnOff)

    def __init__(self, *args):
        r"""
        :rtype: None:param aOnOff:
        	:type aOnOff: bool
        	:param aIntensity:
        	:type aIntensity: float
        	:param aColor:
        	:type aColor: Quantity_Color
        	:param aLocation:
        	:type aLocation: gp_Vec
        	:param aDirection:
        	:type aDirection: gp_Vec
        	:param aDropOffRate:
        	:type aDropOffRate: float
        	:param aCutOffAngle:
        	:type aCutOffAngle: float
        	:rtype: None
        """
        _Vrml.Vrml_SpotLight_swiginit(self, _Vrml.new_Vrml_SpotLight(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_SpotLight

# Register Vrml_SpotLight in _Vrml:
_Vrml.Vrml_SpotLight_swigregister(Vrml_SpotLight)

class Vrml_Switch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_Switch_PrintToString)
    SetWhichChild = _swig_new_instance_method(_Vrml.Vrml_Switch_SetWhichChild)

    def __init__(self, *args):
        r"""
        :param aWhichChild: default value is -1
        	:type aWhichChild: int
        	:rtype: None
        """
        _Vrml.Vrml_Switch_swiginit(self, _Vrml.new_Vrml_Switch(*args))
    WhichChild = _swig_new_instance_method(_Vrml.Vrml_Switch_WhichChild)

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_Switch

# Register Vrml_Switch in _Vrml:
_Vrml.Vrml_Switch_swigregister(Vrml_Switch)

class Vrml_Texture2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Filename = _swig_new_instance_method(_Vrml.Vrml_Texture2_Filename)
    Image = _swig_new_instance_method(_Vrml.Vrml_Texture2_Image)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_Texture2_PrintToString)
    SetFilename = _swig_new_instance_method(_Vrml.Vrml_Texture2_SetFilename)
    SetImage = _swig_new_instance_method(_Vrml.Vrml_Texture2_SetImage)
    SetWrapS = _swig_new_instance_method(_Vrml.Vrml_Texture2_SetWrapS)
    SetWrapT = _swig_new_instance_method(_Vrml.Vrml_Texture2_SetWrapT)

    def __init__(self, *args):
        r"""
        :rtype: None:param aFilename:
        	:type aFilename: TCollection_AsciiString
        	:param aImage:
        	:type aImage: Vrml_SFImage
        	:param aWrapS:
        	:type aWrapS: Vrml_Texture2Wrap
        	:param aWrapT:
        	:type aWrapT: Vrml_Texture2Wrap
        	:rtype: None
        """
        _Vrml.Vrml_Texture2_swiginit(self, _Vrml.new_Vrml_Texture2(*args))
    WrapS = _swig_new_instance_method(_Vrml.Vrml_Texture2_WrapS)
    WrapT = _swig_new_instance_method(_Vrml.Vrml_Texture2_WrapT)

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_Texture2

# Register Vrml_Texture2 in _Vrml:
_Vrml.Vrml_Texture2_swigregister(Vrml_Texture2)

class Vrml_Texture2Transform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Center = _swig_new_instance_method(_Vrml.Vrml_Texture2Transform_Center)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_Texture2Transform_PrintToString)
    Rotation = _swig_new_instance_method(_Vrml.Vrml_Texture2Transform_Rotation)
    ScaleFactor = _swig_new_instance_method(_Vrml.Vrml_Texture2Transform_ScaleFactor)
    SetCenter = _swig_new_instance_method(_Vrml.Vrml_Texture2Transform_SetCenter)
    SetRotation = _swig_new_instance_method(_Vrml.Vrml_Texture2Transform_SetRotation)
    SetScaleFactor = _swig_new_instance_method(_Vrml.Vrml_Texture2Transform_SetScaleFactor)
    SetTranslation = _swig_new_instance_method(_Vrml.Vrml_Texture2Transform_SetTranslation)
    Translation = _swig_new_instance_method(_Vrml.Vrml_Texture2Transform_Translation)

    def __init__(self, *args):
        r"""
        :rtype: None:param aTranslation:
        	:type aTranslation: gp_Vec2d
        	:param aRotation:
        	:type aRotation: float
        	:param aScaleFactor:
        	:type aScaleFactor: gp_Vec2d
        	:param aCenter:
        	:type aCenter: gp_Vec2d
        	:rtype: None
        """
        _Vrml.Vrml_Texture2Transform_swiginit(self, _Vrml.new_Vrml_Texture2Transform(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_Texture2Transform

# Register Vrml_Texture2Transform in _Vrml:
_Vrml.Vrml_Texture2Transform_swigregister(Vrml_Texture2Transform)

class Vrml_TextureCoordinate2(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Point = _swig_new_instance_method(_Vrml.Vrml_TextureCoordinate2_Point)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_TextureCoordinate2_PrintToString)
    SetPoint = _swig_new_instance_method(_Vrml.Vrml_TextureCoordinate2_SetPoint)

    def __init__(self, *args):
        r"""
        :rtype: None:param aPoint:
        	:type aPoint: TColgp_HArray1OfVec2d
        	:rtype: None
        """
        _Vrml.Vrml_TextureCoordinate2_swiginit(self, _Vrml.new_Vrml_TextureCoordinate2(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Vrml_TextureCoordinate2_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_TextureCoordinate2

# Register Vrml_TextureCoordinate2 in _Vrml:
_Vrml.Vrml_TextureCoordinate2_swigregister(Vrml_TextureCoordinate2)

class Vrml_Transform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Center = _swig_new_instance_method(_Vrml.Vrml_Transform_Center)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_Transform_PrintToString)
    Rotation = _swig_new_instance_method(_Vrml.Vrml_Transform_Rotation)
    ScaleFactor = _swig_new_instance_method(_Vrml.Vrml_Transform_ScaleFactor)
    ScaleOrientation = _swig_new_instance_method(_Vrml.Vrml_Transform_ScaleOrientation)
    SetCenter = _swig_new_instance_method(_Vrml.Vrml_Transform_SetCenter)
    SetRotation = _swig_new_instance_method(_Vrml.Vrml_Transform_SetRotation)
    SetScaleFactor = _swig_new_instance_method(_Vrml.Vrml_Transform_SetScaleFactor)
    SetScaleOrientation = _swig_new_instance_method(_Vrml.Vrml_Transform_SetScaleOrientation)
    SetTranslation = _swig_new_instance_method(_Vrml.Vrml_Transform_SetTranslation)
    Translation = _swig_new_instance_method(_Vrml.Vrml_Transform_Translation)

    def __init__(self, *args):
        r"""
        :rtype: None:param aTranslation:
        	:type aTranslation: gp_Vec
        	:param aRotation:
        	:type aRotation: Vrml_SFRotation
        	:param aScaleFactor:
        	:type aScaleFactor: gp_Vec
        	:param aScaleOrientation:
        	:type aScaleOrientation: Vrml_SFRotation
        	:param aCenter:
        	:type aCenter: gp_Vec
        	:rtype: None
        """
        _Vrml.Vrml_Transform_swiginit(self, _Vrml.new_Vrml_Transform(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_Transform

# Register Vrml_Transform in _Vrml:
_Vrml.Vrml_Transform_swigregister(Vrml_Transform)

class Vrml_TransformSeparator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_TransformSeparator_PrintToString)

    def __init__(self, *args):
        r""":rtype: None"""
        _Vrml.Vrml_TransformSeparator_swiginit(self, _Vrml.new_Vrml_TransformSeparator(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_TransformSeparator

# Register Vrml_TransformSeparator in _Vrml:
_Vrml.Vrml_TransformSeparator_swigregister(Vrml_TransformSeparator)

class Vrml_Translation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_Translation_PrintToString)
    SetTranslation = _swig_new_instance_method(_Vrml.Vrml_Translation_SetTranslation)
    Translation = _swig_new_instance_method(_Vrml.Vrml_Translation_Translation)

    def __init__(self, *args):
        r"""
        :rtype: None:param aTranslation:
        	:type aTranslation: gp_Vec
        	:rtype: None
        """
        _Vrml.Vrml_Translation_swiginit(self, _Vrml.new_Vrml_Translation(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_Translation

# Register Vrml_Translation in _Vrml:
_Vrml.Vrml_Translation_swigregister(Vrml_Translation)

class Vrml_WWWAnchor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Description = _swig_new_instance_method(_Vrml.Vrml_WWWAnchor_Description)
    Map = _swig_new_instance_method(_Vrml.Vrml_WWWAnchor_Map)
    Name = _swig_new_instance_method(_Vrml.Vrml_WWWAnchor_Name)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_WWWAnchor_PrintToString)
    SetDescription = _swig_new_instance_method(_Vrml.Vrml_WWWAnchor_SetDescription)
    SetMap = _swig_new_instance_method(_Vrml.Vrml_WWWAnchor_SetMap)
    SetName = _swig_new_instance_method(_Vrml.Vrml_WWWAnchor_SetName)

    def __init__(self, *args):
        r"""
        :param aName: default value is 
        	:type aName: TCollection_AsciiString
        	:param aDescription: default value is 
        	:type aDescription: TCollection_AsciiString
        	:param aMap: default value is Vrml_MAP_NONE
        	:type aMap: Vrml_WWWAnchorMap
        	:rtype: None
        """
        _Vrml.Vrml_WWWAnchor_swiginit(self, _Vrml.new_Vrml_WWWAnchor(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_WWWAnchor

# Register Vrml_WWWAnchor in _Vrml:
_Vrml.Vrml_WWWAnchor_swigregister(Vrml_WWWAnchor)

class Vrml_WWWInline(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BboxCenter = _swig_new_instance_method(_Vrml.Vrml_WWWInline_BboxCenter)
    BboxSize = _swig_new_instance_method(_Vrml.Vrml_WWWInline_BboxSize)
    Name = _swig_new_instance_method(_Vrml.Vrml_WWWInline_Name)
    PrintToString = _swig_new_instance_method(_Vrml.Vrml_WWWInline_PrintToString)
    SetBboxCenter = _swig_new_instance_method(_Vrml.Vrml_WWWInline_SetBboxCenter)
    SetBboxSize = _swig_new_instance_method(_Vrml.Vrml_WWWInline_SetBboxSize)
    SetName = _swig_new_instance_method(_Vrml.Vrml_WWWInline_SetName)

    def __init__(self, *args):
        r"""
        :rtype: None:param aName:
        	:type aName: TCollection_AsciiString
        	:param aBboxSize:
        	:type aBboxSize: gp_Vec
        	:param aBboxCenter:
        	:type aBboxCenter: gp_Vec
        	:rtype: None
        """
        _Vrml.Vrml_WWWInline_swiginit(self, _Vrml.new_Vrml_WWWInline(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Vrml.delete_Vrml_WWWInline

# Register Vrml_WWWInline in _Vrml:
_Vrml.Vrml_WWWInline_swigregister(Vrml_WWWInline)



