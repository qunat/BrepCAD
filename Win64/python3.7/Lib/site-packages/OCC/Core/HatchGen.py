# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
HatchGen module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_hatchgen.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _HatchGen
else:
    import _HatchGen

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _HatchGen.SWIG_PyInstanceMethod_New
_swig_new_static_method = _HatchGen.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HatchGen.delete_SwigPyIterator
    value = _swig_new_instance_method(_HatchGen.SwigPyIterator_value)
    incr = _swig_new_instance_method(_HatchGen.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_HatchGen.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_HatchGen.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_HatchGen.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_HatchGen.SwigPyIterator_copy)
    next = _swig_new_instance_method(_HatchGen.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_HatchGen.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_HatchGen.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_HatchGen.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_HatchGen.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_HatchGen.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_HatchGen.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_HatchGen.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_HatchGen.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_HatchGen.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _HatchGen:
_HatchGen.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopAbs
import OCC.Core.IntRes2d
import OCC.Core.gp
HatchGen_NoProblem = _HatchGen.HatchGen_NoProblem
HatchGen_TrimFailure = _HatchGen.HatchGen_TrimFailure
HatchGen_TransitionFailure = _HatchGen.HatchGen_TransitionFailure
HatchGen_IncoherentParity = _HatchGen.HatchGen_IncoherentParity
HatchGen_IncompatibleStates = _HatchGen.HatchGen_IncompatibleStates
HatchGen_TRUE = _HatchGen.HatchGen_TRUE
HatchGen_TOUCH = _HatchGen.HatchGen_TOUCH
HatchGen_TANGENT = _HatchGen.HatchGen_TANGENT
HatchGen_UNDETERMINED = _HatchGen.HatchGen_UNDETERMINED
class HatchGen_Domains(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_HatchGen.HatchGen_Domains_begin)
    end = _swig_new_instance_method(_HatchGen.HatchGen_Domains_end)
    cbegin = _swig_new_instance_method(_HatchGen.HatchGen_Domains_cbegin)
    cend = _swig_new_instance_method(_HatchGen.HatchGen_Domains_cend)

    def __init__(self, *args):
        _HatchGen.HatchGen_Domains_swiginit(self, _HatchGen.new_HatchGen_Domains(*args))
    Size = _swig_new_instance_method(_HatchGen.HatchGen_Domains_Size)
    Length = _swig_new_instance_method(_HatchGen.HatchGen_Domains_Length)
    Lower = _swig_new_instance_method(_HatchGen.HatchGen_Domains_Lower)
    Upper = _swig_new_instance_method(_HatchGen.HatchGen_Domains_Upper)
    IsEmpty = _swig_new_instance_method(_HatchGen.HatchGen_Domains_IsEmpty)
    Reverse = _swig_new_instance_method(_HatchGen.HatchGen_Domains_Reverse)
    Exchange = _swig_new_instance_method(_HatchGen.HatchGen_Domains_Exchange)
    delNode = _swig_new_static_method(_HatchGen.HatchGen_Domains_delNode)
    Clear = _swig_new_instance_method(_HatchGen.HatchGen_Domains_Clear)
    Assign = _swig_new_instance_method(_HatchGen.HatchGen_Domains_Assign)
    Set = _swig_new_instance_method(_HatchGen.HatchGen_Domains_Set)
    Remove = _swig_new_instance_method(_HatchGen.HatchGen_Domains_Remove)
    Append = _swig_new_instance_method(_HatchGen.HatchGen_Domains_Append)
    Prepend = _swig_new_instance_method(_HatchGen.HatchGen_Domains_Prepend)
    InsertBefore = _swig_new_instance_method(_HatchGen.HatchGen_Domains_InsertBefore)
    InsertAfter = _swig_new_instance_method(_HatchGen.HatchGen_Domains_InsertAfter)
    Split = _swig_new_instance_method(_HatchGen.HatchGen_Domains_Split)
    First = _swig_new_instance_method(_HatchGen.HatchGen_Domains_First)
    ChangeFirst = _swig_new_instance_method(_HatchGen.HatchGen_Domains_ChangeFirst)
    Last = _swig_new_instance_method(_HatchGen.HatchGen_Domains_Last)
    ChangeLast = _swig_new_instance_method(_HatchGen.HatchGen_Domains_ChangeLast)
    Value = _swig_new_instance_method(_HatchGen.HatchGen_Domains_Value)
    ChangeValue = _swig_new_instance_method(_HatchGen.HatchGen_Domains_ChangeValue)
    __call__ = _swig_new_instance_method(_HatchGen.HatchGen_Domains___call__)
    SetValue = _swig_new_instance_method(_HatchGen.HatchGen_Domains_SetValue)
    __swig_destroy__ = _HatchGen.delete_HatchGen_Domains

# Register HatchGen_Domains in _HatchGen:
_HatchGen.HatchGen_Domains_swigregister(HatchGen_Domains)
HatchGen_Domains_delNode = _HatchGen.HatchGen_Domains_delNode

class HatchGen_PointsOnElement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_begin)
    end = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_end)
    cbegin = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_cbegin)
    cend = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_cend)

    def __init__(self, *args):
        _HatchGen.HatchGen_PointsOnElement_swiginit(self, _HatchGen.new_HatchGen_PointsOnElement(*args))
    Size = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_Size)
    Length = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_Length)
    Lower = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_Lower)
    Upper = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_Upper)
    IsEmpty = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_IsEmpty)
    Reverse = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_Reverse)
    Exchange = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_Exchange)
    delNode = _swig_new_static_method(_HatchGen.HatchGen_PointsOnElement_delNode)
    Clear = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_Clear)
    Assign = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_Assign)
    Set = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_Set)
    Remove = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_Remove)
    Append = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_Append)
    Prepend = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_Prepend)
    InsertBefore = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_InsertBefore)
    InsertAfter = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_InsertAfter)
    Split = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_Split)
    First = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_First)
    ChangeFirst = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_ChangeFirst)
    Last = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_Last)
    ChangeLast = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_ChangeLast)
    Value = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_Value)
    ChangeValue = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_ChangeValue)
    __call__ = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement___call__)
    SetValue = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnElement_SetValue)
    __swig_destroy__ = _HatchGen.delete_HatchGen_PointsOnElement

# Register HatchGen_PointsOnElement in _HatchGen:
_HatchGen.HatchGen_PointsOnElement_swigregister(HatchGen_PointsOnElement)
HatchGen_PointsOnElement_delNode = _HatchGen.HatchGen_PointsOnElement_delNode

class HatchGen_PointsOnHatching(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_begin)
    end = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_end)
    cbegin = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_cbegin)
    cend = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_cend)

    def __init__(self, *args):
        _HatchGen.HatchGen_PointsOnHatching_swiginit(self, _HatchGen.new_HatchGen_PointsOnHatching(*args))
    Size = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_Size)
    Length = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_Length)
    Lower = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_Lower)
    Upper = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_Upper)
    IsEmpty = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_IsEmpty)
    Reverse = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_Reverse)
    Exchange = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_Exchange)
    delNode = _swig_new_static_method(_HatchGen.HatchGen_PointsOnHatching_delNode)
    Clear = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_Clear)
    Assign = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_Assign)
    Set = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_Set)
    Remove = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_Remove)
    Append = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_Append)
    Prepend = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_Prepend)
    InsertBefore = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_InsertBefore)
    InsertAfter = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_InsertAfter)
    Split = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_Split)
    First = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_First)
    ChangeFirst = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_ChangeFirst)
    Last = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_Last)
    ChangeLast = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_ChangeLast)
    Value = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_Value)
    ChangeValue = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_ChangeValue)
    __call__ = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching___call__)
    SetValue = _swig_new_instance_method(_HatchGen.HatchGen_PointsOnHatching_SetValue)
    __swig_destroy__ = _HatchGen.delete_HatchGen_PointsOnHatching

# Register HatchGen_PointsOnHatching in _HatchGen:
_HatchGen.HatchGen_PointsOnHatching_swigregister(HatchGen_PointsOnHatching)
HatchGen_PointsOnHatching_delNode = _HatchGen.HatchGen_PointsOnHatching_delNode

class HatchGen_Domain(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Dump = _swig_new_instance_method(_HatchGen.HatchGen_Domain_Dump)
    FirstPoint = _swig_new_instance_method(_HatchGen.HatchGen_Domain_FirstPoint)
    HasFirstPoint = _swig_new_instance_method(_HatchGen.HatchGen_Domain_HasFirstPoint)
    HasSecondPoint = _swig_new_instance_method(_HatchGen.HatchGen_Domain_HasSecondPoint)

    def __init__(self, *args):
        r"""
        * Creates an infinite domain.
        	:rtype: None* Creates a domain for the curve associated to a hatching.
        	:param P1:
        	:type P1: HatchGen_PointOnHatching
        	:param P2:
        	:type P2: HatchGen_PointOnHatching
        	:rtype: None* Creates a semi-infinite domain for the curve associated to a hatching. The `First' flag means that the given point is the first one.
        	:param P:
        	:type P: HatchGen_PointOnHatching
        	:param First:
        	:type First: bool
        	:rtype: None
        """
        _HatchGen.HatchGen_Domain_swiginit(self, _HatchGen.new_HatchGen_Domain(*args))
    SecondPoint = _swig_new_instance_method(_HatchGen.HatchGen_Domain_SecondPoint)
    SetFirstPoint = _swig_new_instance_method(_HatchGen.HatchGen_Domain_SetFirstPoint)
    SetPoints = _swig_new_instance_method(_HatchGen.HatchGen_Domain_SetPoints)
    SetSecondPoint = _swig_new_instance_method(_HatchGen.HatchGen_Domain_SetSecondPoint)

    __repr__ = _dumps_object

    __swig_destroy__ = _HatchGen.delete_HatchGen_Domain

# Register HatchGen_Domain in _HatchGen:
_HatchGen.HatchGen_Domain_swigregister(HatchGen_Domain)

class HatchGen_IntersectionPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Dump = _swig_new_instance_method(_HatchGen.HatchGen_IntersectionPoint_Dump)
    Index = _swig_new_instance_method(_HatchGen.HatchGen_IntersectionPoint_Index)
    Parameter = _swig_new_instance_method(_HatchGen.HatchGen_IntersectionPoint_Parameter)
    Position = _swig_new_instance_method(_HatchGen.HatchGen_IntersectionPoint_Position)
    SegmentBeginning = _swig_new_instance_method(_HatchGen.HatchGen_IntersectionPoint_SegmentBeginning)
    SegmentEnd = _swig_new_instance_method(_HatchGen.HatchGen_IntersectionPoint_SegmentEnd)
    SetIndex = _swig_new_instance_method(_HatchGen.HatchGen_IntersectionPoint_SetIndex)
    SetParameter = _swig_new_instance_method(_HatchGen.HatchGen_IntersectionPoint_SetParameter)
    SetPosition = _swig_new_instance_method(_HatchGen.HatchGen_IntersectionPoint_SetPosition)
    SetSegmentBeginning = _swig_new_instance_method(_HatchGen.HatchGen_IntersectionPoint_SetSegmentBeginning)
    SetSegmentEnd = _swig_new_instance_method(_HatchGen.HatchGen_IntersectionPoint_SetSegmentEnd)
    SetStateAfter = _swig_new_instance_method(_HatchGen.HatchGen_IntersectionPoint_SetStateAfter)
    SetStateBefore = _swig_new_instance_method(_HatchGen.HatchGen_IntersectionPoint_SetStateBefore)
    StateAfter = _swig_new_instance_method(_HatchGen.HatchGen_IntersectionPoint_StateAfter)
    StateBefore = _swig_new_instance_method(_HatchGen.HatchGen_IntersectionPoint_StateBefore)

    __repr__ = _dumps_object


# Register HatchGen_IntersectionPoint in _HatchGen:
_HatchGen.HatchGen_IntersectionPoint_swigregister(HatchGen_IntersectionPoint)

class HatchGen_PointOnElement(HatchGen_IntersectionPoint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * ---Purpose; Creates an empty point on element
        	:rtype: None* Creates a point from an other.
        	:param Point:
        	:type Point: HatchGen_PointOnElement
        	:rtype: None* Creates a point from an intersection point.
        	:param Point:
        	:type Point: IntRes2d_IntersectionPoint
        	:rtype: None
        """
        _HatchGen.HatchGen_PointOnElement_swiginit(self, _HatchGen.new_HatchGen_PointOnElement(*args))
    IntersectionType = _swig_new_instance_method(_HatchGen.HatchGen_PointOnElement_IntersectionType)
    IsDifferent = _swig_new_instance_method(_HatchGen.HatchGen_PointOnElement_IsDifferent)
    IsIdentical = _swig_new_instance_method(_HatchGen.HatchGen_PointOnElement_IsIdentical)
    SetIntersectionType = _swig_new_instance_method(_HatchGen.HatchGen_PointOnElement_SetIntersectionType)

    __repr__ = _dumps_object

    __swig_destroy__ = _HatchGen.delete_HatchGen_PointOnElement

# Register HatchGen_PointOnElement in _HatchGen:
_HatchGen.HatchGen_PointOnElement_swigregister(HatchGen_PointOnElement)

class HatchGen_PointOnHatching(HatchGen_IntersectionPoint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddPoint = _swig_new_instance_method(_HatchGen.HatchGen_PointOnHatching_AddPoint)
    ClrPoints = _swig_new_instance_method(_HatchGen.HatchGen_PointOnHatching_ClrPoints)

    def __init__(self, *args):
        r"""
        * Creates an empty point.
        	:rtype: None* Creates a point from an other.
        	:param Point:
        	:type Point: HatchGen_PointOnHatching
        	:rtype: None* Creates a point from an intersection point.
        	:param Point:
        	:type Point: IntRes2d_IntersectionPoint
        	:rtype: None
        """
        _HatchGen.HatchGen_PointOnHatching_swiginit(self, _HatchGen.new_HatchGen_PointOnHatching(*args))
    IsEqual = _swig_new_instance_method(_HatchGen.HatchGen_PointOnHatching_IsEqual)
    IsGreater = _swig_new_instance_method(_HatchGen.HatchGen_PointOnHatching_IsGreater)
    IsLower = _swig_new_instance_method(_HatchGen.HatchGen_PointOnHatching_IsLower)
    NbPoints = _swig_new_instance_method(_HatchGen.HatchGen_PointOnHatching_NbPoints)
    Point = _swig_new_instance_method(_HatchGen.HatchGen_PointOnHatching_Point)
    RemPoint = _swig_new_instance_method(_HatchGen.HatchGen_PointOnHatching_RemPoint)

    __repr__ = _dumps_object

    __swig_destroy__ = _HatchGen.delete_HatchGen_PointOnHatching

# Register HatchGen_PointOnHatching in _HatchGen:
_HatchGen.HatchGen_PointOnHatching_swigregister(HatchGen_PointOnHatching)



