# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ChFi2d module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_chfi2d.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ChFi2d
else:
    import _ChFi2d

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ChFi2d.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ChFi2d.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ChFi2d.delete_SwigPyIterator
    value = _swig_new_instance_method(_ChFi2d.SwigPyIterator_value)
    incr = _swig_new_instance_method(_ChFi2d.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_ChFi2d.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_ChFi2d.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_ChFi2d.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_ChFi2d.SwigPyIterator_copy)
    next = _swig_new_instance_method(_ChFi2d.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_ChFi2d.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_ChFi2d.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_ChFi2d.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_ChFi2d.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_ChFi2d.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_ChFi2d.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_ChFi2d.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_ChFi2d.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_ChFi2d.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ChFi2d:
_ChFi2d.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.TopTools
import OCC.Core.TCollection
ChFi2d_NotPlanar = _ChFi2d.ChFi2d_NotPlanar
ChFi2d_NoFace = _ChFi2d.ChFi2d_NoFace
ChFi2d_InitialisationError = _ChFi2d.ChFi2d_InitialisationError
ChFi2d_ParametersError = _ChFi2d.ChFi2d_ParametersError
ChFi2d_Ready = _ChFi2d.ChFi2d_Ready
ChFi2d_IsDone = _ChFi2d.ChFi2d_IsDone
ChFi2d_ComputationError = _ChFi2d.ChFi2d_ComputationError
ChFi2d_ConnexionError = _ChFi2d.ChFi2d_ConnexionError
ChFi2d_TangencyError = _ChFi2d.ChFi2d_TangencyError
ChFi2d_FirstEdgeDegenerated = _ChFi2d.ChFi2d_FirstEdgeDegenerated
ChFi2d_LastEdgeDegenerated = _ChFi2d.ChFi2d_LastEdgeDegenerated
ChFi2d_BothEdgesDegenerated = _ChFi2d.ChFi2d_BothEdgesDegenerated
ChFi2d_NotAuthorized = _ChFi2d.ChFi2d_NotAuthorized
class chfi2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __repr__ = _dumps_object


    def __init__(self):
        _ChFi2d.chfi2d_swiginit(self, _ChFi2d.new_chfi2d())
    __swig_destroy__ = _ChFi2d.delete_chfi2d

# Register chfi2d in _ChFi2d:
_ChFi2d.chfi2d_swigregister(chfi2d)

class ChFi2d_AnaFilletAlgo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * An empty constructor. Use the method Init() to initialize the class.
        	:rtype: None* A constructor. It expects a wire consisting of two edges of type (any combination of): - segment - arc of circle.
        	:param theWire:
        	:type theWire: TopoDS_Wire
        	:param thePlane:
        	:type thePlane: gp_Pln
        	:rtype: None* A constructor. It expects two edges having a common point of type: - segment - arc of circle.
        	:param theEdge1:
        	:type theEdge1: TopoDS_Edge
        	:param theEdge2:
        	:type theEdge2: TopoDS_Edge
        	:param thePlane:
        	:type thePlane: gp_Pln
        	:rtype: None
        """
        _ChFi2d.ChFi2d_AnaFilletAlgo_swiginit(self, _ChFi2d.new_ChFi2d_AnaFilletAlgo(*args))
    Init = _swig_new_instance_method(_ChFi2d.ChFi2d_AnaFilletAlgo_Init)
    Perform = _swig_new_instance_method(_ChFi2d.ChFi2d_AnaFilletAlgo_Perform)
    Result = _swig_new_instance_method(_ChFi2d.ChFi2d_AnaFilletAlgo_Result)

    __repr__ = _dumps_object

    __swig_destroy__ = _ChFi2d.delete_ChFi2d_AnaFilletAlgo

# Register ChFi2d_AnaFilletAlgo in _ChFi2d:
_ChFi2d.ChFi2d_AnaFilletAlgo_swigregister(ChFi2d_AnaFilletAlgo)

class ChFi2d_Builder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddChamfer = _swig_new_instance_method(_ChFi2d.ChFi2d_Builder_AddChamfer)
    AddFillet = _swig_new_instance_method(_ChFi2d.ChFi2d_Builder_AddFillet)
    BasisEdge = _swig_new_instance_method(_ChFi2d.ChFi2d_Builder_BasisEdge)

    def __init__(self, *args):
        r"""
        :rtype: None* The face <F> can be build on a closed or an open wire.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        _ChFi2d.ChFi2d_Builder_swiginit(self, _ChFi2d.new_ChFi2d_Builder(*args))
    ChamferEdges = _swig_new_instance_method(_ChFi2d.ChFi2d_Builder_ChamferEdges)
    DescendantEdge = _swig_new_instance_method(_ChFi2d.ChFi2d_Builder_DescendantEdge)
    FilletEdges = _swig_new_instance_method(_ChFi2d.ChFi2d_Builder_FilletEdges)
    HasDescendant = _swig_new_instance_method(_ChFi2d.ChFi2d_Builder_HasDescendant)
    Init = _swig_new_instance_method(_ChFi2d.ChFi2d_Builder_Init)
    IsModified = _swig_new_instance_method(_ChFi2d.ChFi2d_Builder_IsModified)
    ModifyChamfer = _swig_new_instance_method(_ChFi2d.ChFi2d_Builder_ModifyChamfer)
    ModifyFillet = _swig_new_instance_method(_ChFi2d.ChFi2d_Builder_ModifyFillet)
    NbChamfer = _swig_new_instance_method(_ChFi2d.ChFi2d_Builder_NbChamfer)
    NbFillet = _swig_new_instance_method(_ChFi2d.ChFi2d_Builder_NbFillet)
    RemoveChamfer = _swig_new_instance_method(_ChFi2d.ChFi2d_Builder_RemoveChamfer)
    RemoveFillet = _swig_new_instance_method(_ChFi2d.ChFi2d_Builder_RemoveFillet)
    Result = _swig_new_instance_method(_ChFi2d.ChFi2d_Builder_Result)
    Status = _swig_new_instance_method(_ChFi2d.ChFi2d_Builder_Status)

    __repr__ = _dumps_object

    __swig_destroy__ = _ChFi2d.delete_ChFi2d_Builder

# Register ChFi2d_Builder in _ChFi2d:
_ChFi2d.ChFi2d_Builder_swigregister(ChFi2d_Builder)

class ChFi2d_ChamferAPI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * An empty constructor.
        	:rtype: None* A constructor accepting a wire consisting of two linear edges.
        	:param theWire:
        	:type theWire: TopoDS_Wire
        	:rtype: None* A constructor accepting two linear edges.
        	:param theEdge1:
        	:type theEdge1: TopoDS_Edge
        	:param theEdge2:
        	:type theEdge2: TopoDS_Edge
        	:rtype: None
        """
        _ChFi2d.ChFi2d_ChamferAPI_swiginit(self, _ChFi2d.new_ChFi2d_ChamferAPI(*args))
    Init = _swig_new_instance_method(_ChFi2d.ChFi2d_ChamferAPI_Init)
    Perform = _swig_new_instance_method(_ChFi2d.ChFi2d_ChamferAPI_Perform)
    Result = _swig_new_instance_method(_ChFi2d.ChFi2d_ChamferAPI_Result)

    __repr__ = _dumps_object

    __swig_destroy__ = _ChFi2d.delete_ChFi2d_ChamferAPI

# Register ChFi2d_ChamferAPI in _ChFi2d:
_ChFi2d.ChFi2d_ChamferAPI_swigregister(ChFi2d_ChamferAPI)

class ChFi2d_FilletAPI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * An empty constructor of the fillet algorithm. Call a method Init() to initialize the algorithm before calling of a Perform() method.
        	:rtype: None* A constructor of a fillet algorithm: accepts a wire consisting of two edges in a plane.
        	:param theWire:
        	:type theWire: TopoDS_Wire
        	:param thePlane:
        	:type thePlane: gp_Pln
        	:rtype: None* A constructor of a fillet algorithm: accepts two edges in a plane.
        	:param theEdge1:
        	:type theEdge1: TopoDS_Edge
        	:param theEdge2:
        	:type theEdge2: TopoDS_Edge
        	:param thePlane:
        	:type thePlane: gp_Pln
        	:rtype: None
        """
        _ChFi2d.ChFi2d_FilletAPI_swiginit(self, _ChFi2d.new_ChFi2d_FilletAPI(*args))
    Init = _swig_new_instance_method(_ChFi2d.ChFi2d_FilletAPI_Init)
    NbResults = _swig_new_instance_method(_ChFi2d.ChFi2d_FilletAPI_NbResults)
    Perform = _swig_new_instance_method(_ChFi2d.ChFi2d_FilletAPI_Perform)
    Result = _swig_new_instance_method(_ChFi2d.ChFi2d_FilletAPI_Result)

    __repr__ = _dumps_object

    __swig_destroy__ = _ChFi2d.delete_ChFi2d_FilletAPI

# Register ChFi2d_FilletAPI in _ChFi2d:
_ChFi2d.ChFi2d_FilletAPI_swigregister(ChFi2d_FilletAPI)

class ChFi2d_FilletAlgo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * An empty constructor of the fillet algorithm. Call a method Init() to initialize the algorithm before calling of a Perform() method.
        	:rtype: None* A constructor of a fillet algorithm: accepts a wire consisting of two edges in a plane.
        	:param theWire:
        	:type theWire: TopoDS_Wire
        	:param thePlane:
        	:type thePlane: gp_Pln
        	:rtype: None* A constructor of a fillet algorithm: accepts two edges in a plane.
        	:param theEdge1:
        	:type theEdge1: TopoDS_Edge
        	:param theEdge2:
        	:type theEdge2: TopoDS_Edge
        	:param thePlane:
        	:type thePlane: gp_Pln
        	:rtype: None
        """
        _ChFi2d.ChFi2d_FilletAlgo_swiginit(self, _ChFi2d.new_ChFi2d_FilletAlgo(*args))
    Init = _swig_new_instance_method(_ChFi2d.ChFi2d_FilletAlgo_Init)
    NbResults = _swig_new_instance_method(_ChFi2d.ChFi2d_FilletAlgo_NbResults)
    Perform = _swig_new_instance_method(_ChFi2d.ChFi2d_FilletAlgo_Perform)
    Result = _swig_new_instance_method(_ChFi2d.ChFi2d_FilletAlgo_Result)

    __repr__ = _dumps_object

    __swig_destroy__ = _ChFi2d.delete_ChFi2d_FilletAlgo

# Register ChFi2d_FilletAlgo in _ChFi2d:
_ChFi2d.ChFi2d_FilletAlgo_swigregister(ChFi2d_FilletAlgo)



