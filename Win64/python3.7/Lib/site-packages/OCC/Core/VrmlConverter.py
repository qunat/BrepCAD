# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
VrmlConverter module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_vrmlconverter.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VrmlConverter
else:
    import _VrmlConverter

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _VrmlConverter.SWIG_PyInstanceMethod_New
_swig_new_static_method = _VrmlConverter.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VrmlConverter.delete_SwigPyIterator
    value = _swig_new_instance_method(_VrmlConverter.SwigPyIterator_value)
    incr = _swig_new_instance_method(_VrmlConverter.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_VrmlConverter.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_VrmlConverter.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_VrmlConverter.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_VrmlConverter.SwigPyIterator_copy)
    next = _swig_new_instance_method(_VrmlConverter.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_VrmlConverter.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_VrmlConverter.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_VrmlConverter.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_VrmlConverter.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_VrmlConverter.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_VrmlConverter.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_VrmlConverter.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_VrmlConverter.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_VrmlConverter.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VrmlConverter:
_VrmlConverter.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.Aspect
import OCC.Core.Quantity
import OCC.Core.TopoDS
import OCC.Core.TopLoc
import OCC.Core.Vrml
import OCC.Core.HLRAlgo
import OCC.Core.TopTools
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.BRepAdaptor
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
VrmlConverter_NoLight = _VrmlConverter.VrmlConverter_NoLight
VrmlConverter_DirectionLight = _VrmlConverter.VrmlConverter_DirectionLight
VrmlConverter_PointLight = _VrmlConverter.VrmlConverter_PointLight
VrmlConverter_SpotLight = _VrmlConverter.VrmlConverter_SpotLight
VrmlConverter_NoCamera = _VrmlConverter.VrmlConverter_NoCamera
VrmlConverter_PerspectiveCamera = _VrmlConverter.VrmlConverter_PerspectiveCamera
VrmlConverter_OrthographicCamera = _VrmlConverter.VrmlConverter_OrthographicCamera
Handle_VrmlConverter_Drawer_Create = _VrmlConverter.Handle_VrmlConverter_Drawer_Create
Handle_VrmlConverter_Drawer_DownCast = _VrmlConverter.Handle_VrmlConverter_Drawer_DownCast
Handle_VrmlConverter_Drawer_IsNull = _VrmlConverter.Handle_VrmlConverter_Drawer_IsNull
Handle_VrmlConverter_LineAspect_Create = _VrmlConverter.Handle_VrmlConverter_LineAspect_Create
Handle_VrmlConverter_LineAspect_DownCast = _VrmlConverter.Handle_VrmlConverter_LineAspect_DownCast
Handle_VrmlConverter_LineAspect_IsNull = _VrmlConverter.Handle_VrmlConverter_LineAspect_IsNull
Handle_VrmlConverter_PointAspect_Create = _VrmlConverter.Handle_VrmlConverter_PointAspect_Create
Handle_VrmlConverter_PointAspect_DownCast = _VrmlConverter.Handle_VrmlConverter_PointAspect_DownCast
Handle_VrmlConverter_PointAspect_IsNull = _VrmlConverter.Handle_VrmlConverter_PointAspect_IsNull
Handle_VrmlConverter_Projector_Create = _VrmlConverter.Handle_VrmlConverter_Projector_Create
Handle_VrmlConverter_Projector_DownCast = _VrmlConverter.Handle_VrmlConverter_Projector_DownCast
Handle_VrmlConverter_Projector_IsNull = _VrmlConverter.Handle_VrmlConverter_Projector_IsNull
Handle_VrmlConverter_ShadingAspect_Create = _VrmlConverter.Handle_VrmlConverter_ShadingAspect_Create
Handle_VrmlConverter_ShadingAspect_DownCast = _VrmlConverter.Handle_VrmlConverter_ShadingAspect_DownCast
Handle_VrmlConverter_ShadingAspect_IsNull = _VrmlConverter.Handle_VrmlConverter_ShadingAspect_IsNull
Handle_VrmlConverter_IsoAspect_Create = _VrmlConverter.Handle_VrmlConverter_IsoAspect_Create
Handle_VrmlConverter_IsoAspect_DownCast = _VrmlConverter.Handle_VrmlConverter_IsoAspect_DownCast
Handle_VrmlConverter_IsoAspect_IsNull = _VrmlConverter.Handle_VrmlConverter_IsoAspect_IsNull
class VrmlConverter_Curve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_static_method(_VrmlConverter.VrmlConverter_Curve_Add)

    __repr__ = _dumps_object


    def __init__(self):
        _VrmlConverter.VrmlConverter_Curve_swiginit(self, _VrmlConverter.new_VrmlConverter_Curve())
    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_Curve

# Register VrmlConverter_Curve in _VrmlConverter:
_VrmlConverter.VrmlConverter_Curve_swigregister(VrmlConverter_Curve)
VrmlConverter_Curve_Add = _VrmlConverter.VrmlConverter_Curve_Add

class VrmlConverter_DeflectionCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_static_method(_VrmlConverter.VrmlConverter_DeflectionCurve_Add)

    __repr__ = _dumps_object


    def __init__(self):
        _VrmlConverter.VrmlConverter_DeflectionCurve_swiginit(self, _VrmlConverter.new_VrmlConverter_DeflectionCurve())
    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_DeflectionCurve

# Register VrmlConverter_DeflectionCurve in _VrmlConverter:
_VrmlConverter.VrmlConverter_DeflectionCurve_swigregister(VrmlConverter_DeflectionCurve)
VrmlConverter_DeflectionCurve_Add = _VrmlConverter.VrmlConverter_DeflectionCurve_Add

class VrmlConverter_Drawer(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DeviationCoefficient = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_DeviationCoefficient)
    DisableDrawHiddenLine = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_DisableDrawHiddenLine)
    Discretisation = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_Discretisation)
    DrawHiddenLine = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_DrawHiddenLine)
    EnableDrawHiddenLine = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_EnableDrawHiddenLine)
    FreeBoundaryAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_FreeBoundaryAspect)
    FreeBoundaryDraw = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_FreeBoundaryDraw)
    HiddenLineAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_HiddenLineAspect)
    IsoOnPlane = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_IsoOnPlane)
    LineAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_LineAspect)
    MaximalChordialDeviation = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_MaximalChordialDeviation)
    MaximalParameterValue = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_MaximalParameterValue)
    PointAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_PointAspect)
    SeenLineAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SeenLineAspect)
    SetDeviationCoefficient = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SetDeviationCoefficient)
    SetDiscretisation = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SetDiscretisation)
    SetFreeBoundaryAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SetFreeBoundaryAspect)
    SetFreeBoundaryDraw = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SetFreeBoundaryDraw)
    SetHiddenLineAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SetHiddenLineAspect)
    SetIsoOnPlane = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SetIsoOnPlane)
    SetLineAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SetLineAspect)
    SetMaximalChordialDeviation = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SetMaximalChordialDeviation)
    SetMaximalParameterValue = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SetMaximalParameterValue)
    SetPointAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SetPointAspect)
    SetSeenLineAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SetSeenLineAspect)
    SetShadingAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SetShadingAspect)
    SetTypeOfDeflection = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SetTypeOfDeflection)
    SetUIsoAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SetUIsoAspect)
    SetUnFreeBoundaryAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SetUnFreeBoundaryAspect)
    SetUnFreeBoundaryDraw = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SetUnFreeBoundaryDraw)
    SetVIsoAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SetVIsoAspect)
    SetWireAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SetWireAspect)
    SetWireDraw = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_SetWireDraw)
    ShadingAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_ShadingAspect)
    TypeOfDeflection = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_TypeOfDeflection)
    UIsoAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_UIsoAspect)
    UnFreeBoundaryAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_UnFreeBoundaryAspect)
    UnFreeBoundaryDraw = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_UnFreeBoundaryDraw)
    VIsoAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_VIsoAspect)

    def __init__(self, *args):
        r""":rtype: None"""
        _VrmlConverter.VrmlConverter_Drawer_swiginit(self, _VrmlConverter.new_VrmlConverter_Drawer(*args))
    WireAspect = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_WireAspect)
    WireDraw = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Drawer_WireDraw)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlConverter_Drawer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_Drawer

# Register VrmlConverter_Drawer in _VrmlConverter:
_VrmlConverter.VrmlConverter_Drawer_swigregister(VrmlConverter_Drawer)

class VrmlConverter_HLRShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_static_method(_VrmlConverter.VrmlConverter_HLRShape_Add)

    __repr__ = _dumps_object


    def __init__(self):
        _VrmlConverter.VrmlConverter_HLRShape_swiginit(self, _VrmlConverter.new_VrmlConverter_HLRShape())
    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_HLRShape

# Register VrmlConverter_HLRShape in _VrmlConverter:
_VrmlConverter.VrmlConverter_HLRShape_swigregister(VrmlConverter_HLRShape)
VrmlConverter_HLRShape_Add = _VrmlConverter.VrmlConverter_HLRShape_Add

class VrmlConverter_LineAspect(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HasMaterial = _swig_new_instance_method(_VrmlConverter.VrmlConverter_LineAspect_HasMaterial)
    Material = _swig_new_instance_method(_VrmlConverter.VrmlConverter_LineAspect_Material)
    SetHasMaterial = _swig_new_instance_method(_VrmlConverter.VrmlConverter_LineAspect_SetHasMaterial)
    SetMaterial = _swig_new_instance_method(_VrmlConverter.VrmlConverter_LineAspect_SetMaterial)

    def __init__(self, *args):
        r"""
        * create a default LineAspect. Default value: HasMaterial = False - a line hasn't own material (color)
        	:rtype: None:param aMaterial:
        	:type aMaterial: Vrml_Material
        	:param OnOff:
        	:type OnOff: bool
        	:rtype: None
        """
        _VrmlConverter.VrmlConverter_LineAspect_swiginit(self, _VrmlConverter.new_VrmlConverter_LineAspect(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlConverter_LineAspect_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_LineAspect

# Register VrmlConverter_LineAspect in _VrmlConverter:
_VrmlConverter.VrmlConverter_LineAspect_swigregister(VrmlConverter_LineAspect)

class VrmlConverter_PointAspect(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HasMaterial = _swig_new_instance_method(_VrmlConverter.VrmlConverter_PointAspect_HasMaterial)
    Material = _swig_new_instance_method(_VrmlConverter.VrmlConverter_PointAspect_Material)
    SetHasMaterial = _swig_new_instance_method(_VrmlConverter.VrmlConverter_PointAspect_SetHasMaterial)
    SetMaterial = _swig_new_instance_method(_VrmlConverter.VrmlConverter_PointAspect_SetMaterial)

    def __init__(self, *args):
        r"""
        * create a default PointAspect. Default value: HasMaterial = False - a line hasn't own material (color)
        	:rtype: None:param aMaterial:
        	:type aMaterial: Vrml_Material
        	:param OnOff:
        	:type OnOff: bool
        	:rtype: None
        """
        _VrmlConverter.VrmlConverter_PointAspect_swiginit(self, _VrmlConverter.new_VrmlConverter_PointAspect(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlConverter_PointAspect_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_PointAspect

# Register VrmlConverter_PointAspect in _VrmlConverter:
_VrmlConverter.VrmlConverter_PointAspect_swigregister(VrmlConverter_PointAspect)

class VrmlConverter_Projector(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddToString = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Projector_AddToString)
    Camera = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Projector_Camera)
    Light = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Projector_Light)
    Projector = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Projector_Projector)
    SetCamera = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Projector_SetCamera)
    SetLight = _swig_new_instance_method(_VrmlConverter.VrmlConverter_Projector_SetLight)

    def __init__(self, *args):
        r"""
        :param Shapes:
        	:type Shapes: TopTools_Array1OfShape
        	:param Focus:
        	:type Focus: float
        	:param DX:
        	:type DX: float
        	:param DY:
        	:type DY: float
        	:param DZ:
        	:type DZ: float
        	:param XUp:
        	:type XUp: float
        	:param YUp:
        	:type YUp: float
        	:param ZUp:
        	:type ZUp: float
        	:param Camera: default value is VrmlConverter_NoCamera
        	:type Camera: VrmlConverter_TypeOfCamera
        	:param Light: default value is VrmlConverter_NoLight
        	:type Light: VrmlConverter_TypeOfLight
        	:rtype: None
        """
        _VrmlConverter.VrmlConverter_Projector_swiginit(self, _VrmlConverter.new_VrmlConverter_Projector(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlConverter_Projector_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_Projector

# Register VrmlConverter_Projector in _VrmlConverter:
_VrmlConverter.VrmlConverter_Projector_swigregister(VrmlConverter_Projector)

class VrmlConverter_ShadedShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_static_method(_VrmlConverter.VrmlConverter_ShadedShape_Add)
    ComputeNormal = _swig_new_static_method(_VrmlConverter.VrmlConverter_ShadedShape_ComputeNormal)

    __repr__ = _dumps_object


    def __init__(self):
        _VrmlConverter.VrmlConverter_ShadedShape_swiginit(self, _VrmlConverter.new_VrmlConverter_ShadedShape())
    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_ShadedShape

# Register VrmlConverter_ShadedShape in _VrmlConverter:
_VrmlConverter.VrmlConverter_ShadedShape_swigregister(VrmlConverter_ShadedShape)
VrmlConverter_ShadedShape_Add = _VrmlConverter.VrmlConverter_ShadedShape_Add
VrmlConverter_ShadedShape_ComputeNormal = _VrmlConverter.VrmlConverter_ShadedShape_ComputeNormal

class VrmlConverter_ShadingAspect(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FrontMaterial = _swig_new_instance_method(_VrmlConverter.VrmlConverter_ShadingAspect_FrontMaterial)
    HasMaterial = _swig_new_instance_method(_VrmlConverter.VrmlConverter_ShadingAspect_HasMaterial)
    HasNormals = _swig_new_instance_method(_VrmlConverter.VrmlConverter_ShadingAspect_HasNormals)
    SetFrontMaterial = _swig_new_instance_method(_VrmlConverter.VrmlConverter_ShadingAspect_SetFrontMaterial)
    SetHasMaterial = _swig_new_instance_method(_VrmlConverter.VrmlConverter_ShadingAspect_SetHasMaterial)
    SetHasNormals = _swig_new_instance_method(_VrmlConverter.VrmlConverter_ShadingAspect_SetHasNormals)
    SetShapeHints = _swig_new_instance_method(_VrmlConverter.VrmlConverter_ShadingAspect_SetShapeHints)
    ShapeHints = _swig_new_instance_method(_VrmlConverter.VrmlConverter_ShadingAspect_ShapeHints)

    def __init__(self, *args):
        r"""
        * create a default ShadingAspect.
        	:rtype: None
        """
        _VrmlConverter.VrmlConverter_ShadingAspect_swiginit(self, _VrmlConverter.new_VrmlConverter_ShadingAspect(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlConverter_ShadingAspect_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_ShadingAspect

# Register VrmlConverter_ShadingAspect in _VrmlConverter:
_VrmlConverter.VrmlConverter_ShadingAspect_swigregister(VrmlConverter_ShadingAspect)

class VrmlConverter_WFDeflectionRestrictedFace(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_static_method(_VrmlConverter.VrmlConverter_WFDeflectionRestrictedFace_Add)
    AddUIso = _swig_new_static_method(_VrmlConverter.VrmlConverter_WFDeflectionRestrictedFace_AddUIso)
    AddVIso = _swig_new_static_method(_VrmlConverter.VrmlConverter_WFDeflectionRestrictedFace_AddVIso)

    __repr__ = _dumps_object


    def __init__(self):
        _VrmlConverter.VrmlConverter_WFDeflectionRestrictedFace_swiginit(self, _VrmlConverter.new_VrmlConverter_WFDeflectionRestrictedFace())
    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_WFDeflectionRestrictedFace

# Register VrmlConverter_WFDeflectionRestrictedFace in _VrmlConverter:
_VrmlConverter.VrmlConverter_WFDeflectionRestrictedFace_swigregister(VrmlConverter_WFDeflectionRestrictedFace)
VrmlConverter_WFDeflectionRestrictedFace_Add = _VrmlConverter.VrmlConverter_WFDeflectionRestrictedFace_Add
VrmlConverter_WFDeflectionRestrictedFace_AddUIso = _VrmlConverter.VrmlConverter_WFDeflectionRestrictedFace_AddUIso
VrmlConverter_WFDeflectionRestrictedFace_AddVIso = _VrmlConverter.VrmlConverter_WFDeflectionRestrictedFace_AddVIso

class VrmlConverter_WFDeflectionShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_static_method(_VrmlConverter.VrmlConverter_WFDeflectionShape_Add)

    __repr__ = _dumps_object


    def __init__(self):
        _VrmlConverter.VrmlConverter_WFDeflectionShape_swiginit(self, _VrmlConverter.new_VrmlConverter_WFDeflectionShape())
    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_WFDeflectionShape

# Register VrmlConverter_WFDeflectionShape in _VrmlConverter:
_VrmlConverter.VrmlConverter_WFDeflectionShape_swigregister(VrmlConverter_WFDeflectionShape)
VrmlConverter_WFDeflectionShape_Add = _VrmlConverter.VrmlConverter_WFDeflectionShape_Add

class VrmlConverter_WFRestrictedFace(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_static_method(_VrmlConverter.VrmlConverter_WFRestrictedFace_Add)
    AddUIso = _swig_new_static_method(_VrmlConverter.VrmlConverter_WFRestrictedFace_AddUIso)
    AddVIso = _swig_new_static_method(_VrmlConverter.VrmlConverter_WFRestrictedFace_AddVIso)

    __repr__ = _dumps_object


    def __init__(self):
        _VrmlConverter.VrmlConverter_WFRestrictedFace_swiginit(self, _VrmlConverter.new_VrmlConverter_WFRestrictedFace())
    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_WFRestrictedFace

# Register VrmlConverter_WFRestrictedFace in _VrmlConverter:
_VrmlConverter.VrmlConverter_WFRestrictedFace_swigregister(VrmlConverter_WFRestrictedFace)
VrmlConverter_WFRestrictedFace_Add = _VrmlConverter.VrmlConverter_WFRestrictedFace_Add
VrmlConverter_WFRestrictedFace_AddUIso = _VrmlConverter.VrmlConverter_WFRestrictedFace_AddUIso
VrmlConverter_WFRestrictedFace_AddVIso = _VrmlConverter.VrmlConverter_WFRestrictedFace_AddVIso

class VrmlConverter_WFShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_static_method(_VrmlConverter.VrmlConverter_WFShape_Add)

    __repr__ = _dumps_object


    def __init__(self):
        _VrmlConverter.VrmlConverter_WFShape_swiginit(self, _VrmlConverter.new_VrmlConverter_WFShape())
    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_WFShape

# Register VrmlConverter_WFShape in _VrmlConverter:
_VrmlConverter.VrmlConverter_WFShape_swigregister(VrmlConverter_WFShape)
VrmlConverter_WFShape_Add = _VrmlConverter.VrmlConverter_WFShape_Add

class VrmlConverter_IsoAspect(VrmlConverter_LineAspect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Number = _swig_new_instance_method(_VrmlConverter.VrmlConverter_IsoAspect_Number)
    SetNumber = _swig_new_instance_method(_VrmlConverter.VrmlConverter_IsoAspect_SetNumber)

    def __init__(self, *args):
        r"""
        * create a default IsoAspect. Default value: myNumber - 10.
        	:rtype: None:param aMaterial:
        	:type aMaterial: Vrml_Material
        	:param OnOff:
        	:type OnOff: bool
        	:param aNumber:
        	:type aNumber: int
        	:rtype: None
        """
        _VrmlConverter.VrmlConverter_IsoAspect_swiginit(self, _VrmlConverter.new_VrmlConverter_IsoAspect(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlConverter_IsoAspect_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlConverter.delete_VrmlConverter_IsoAspect

# Register VrmlConverter_IsoAspect in _VrmlConverter:
_VrmlConverter.VrmlConverter_IsoAspect_swigregister(VrmlConverter_IsoAspect)



