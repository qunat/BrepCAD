# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Tesselator
else:
    import _Tesselator

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _Tesselator.SWIG_PyInstanceMethod_New
_swig_new_static_method = _Tesselator.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Tesselator.delete_SwigPyIterator
    value = _swig_new_instance_method(_Tesselator.SwigPyIterator_value)
    incr = _swig_new_instance_method(_Tesselator.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_Tesselator.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_Tesselator.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_Tesselator.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_Tesselator.SwigPyIterator_copy)
    next = _swig_new_instance_method(_Tesselator.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_Tesselator.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_Tesselator.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_Tesselator.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_Tesselator.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_Tesselator.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_Tesselator.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_Tesselator.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_Tesselator.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_Tesselator.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Tesselator:
_Tesselator.SwigPyIterator_swigregister(SwigPyIterator)

class vector_float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_Tesselator.vector_float_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_Tesselator.vector_float___nonzero__)
    __bool__ = _swig_new_instance_method(_Tesselator.vector_float___bool__)
    __len__ = _swig_new_instance_method(_Tesselator.vector_float___len__)
    __getslice__ = _swig_new_instance_method(_Tesselator.vector_float___getslice__)
    __setslice__ = _swig_new_instance_method(_Tesselator.vector_float___setslice__)
    __delslice__ = _swig_new_instance_method(_Tesselator.vector_float___delslice__)
    __delitem__ = _swig_new_instance_method(_Tesselator.vector_float___delitem__)
    __getitem__ = _swig_new_instance_method(_Tesselator.vector_float___getitem__)
    __setitem__ = _swig_new_instance_method(_Tesselator.vector_float___setitem__)
    pop = _swig_new_instance_method(_Tesselator.vector_float_pop)
    append = _swig_new_instance_method(_Tesselator.vector_float_append)
    empty = _swig_new_instance_method(_Tesselator.vector_float_empty)
    size = _swig_new_instance_method(_Tesselator.vector_float_size)
    swap = _swig_new_instance_method(_Tesselator.vector_float_swap)
    begin = _swig_new_instance_method(_Tesselator.vector_float_begin)
    end = _swig_new_instance_method(_Tesselator.vector_float_end)
    rbegin = _swig_new_instance_method(_Tesselator.vector_float_rbegin)
    rend = _swig_new_instance_method(_Tesselator.vector_float_rend)
    clear = _swig_new_instance_method(_Tesselator.vector_float_clear)
    get_allocator = _swig_new_instance_method(_Tesselator.vector_float_get_allocator)
    pop_back = _swig_new_instance_method(_Tesselator.vector_float_pop_back)
    erase = _swig_new_instance_method(_Tesselator.vector_float_erase)

    def __init__(self, *args):
        _Tesselator.vector_float_swiginit(self, _Tesselator.new_vector_float(*args))
    push_back = _swig_new_instance_method(_Tesselator.vector_float_push_back)
    front = _swig_new_instance_method(_Tesselator.vector_float_front)
    back = _swig_new_instance_method(_Tesselator.vector_float_back)
    assign = _swig_new_instance_method(_Tesselator.vector_float_assign)
    resize = _swig_new_instance_method(_Tesselator.vector_float_resize)
    insert = _swig_new_instance_method(_Tesselator.vector_float_insert)
    reserve = _swig_new_instance_method(_Tesselator.vector_float_reserve)
    capacity = _swig_new_instance_method(_Tesselator.vector_float_capacity)
    __swig_destroy__ = _Tesselator.delete_vector_float

# Register vector_float in _Tesselator:
_Tesselator.vector_float_swigregister(vector_float)

class ShapeTesselator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, aShape: "TopoDS_Shape"):
        r"""__init__(ShapeTesselator self, TopoDS_Shape aShape) -> ShapeTesselator"""
        _Tesselator.ShapeTesselator_swiginit(self, _Tesselator.new_ShapeTesselator(aShape))
    __swig_destroy__ = _Tesselator.delete_ShapeTesselator
    Compute = _swig_new_instance_method(_Tesselator.ShapeTesselator_Compute)
    GetVertex = _swig_new_instance_method(_Tesselator.ShapeTesselator_GetVertex)
    GetNormal = _swig_new_instance_method(_Tesselator.ShapeTesselator_GetNormal)
    GetTriangleIndex = _swig_new_instance_method(_Tesselator.ShapeTesselator_GetTriangleIndex)
    GetEdgeVertex = _swig_new_instance_method(_Tesselator.ShapeTesselator_GetEdgeVertex)
    VerticesList = _swig_new_instance_method(_Tesselator.ShapeTesselator_VerticesList)
    ObjGetTriangleCount = _swig_new_instance_method(_Tesselator.ShapeTesselator_ObjGetTriangleCount)
    ObjGetInvalidTriangleCount = _swig_new_instance_method(_Tesselator.ShapeTesselator_ObjGetInvalidTriangleCount)
    ObjGetVertexCount = _swig_new_instance_method(_Tesselator.ShapeTesselator_ObjGetVertexCount)
    ObjGetNormalCount = _swig_new_instance_method(_Tesselator.ShapeTesselator_ObjGetNormalCount)
    ObjGetEdgeCount = _swig_new_instance_method(_Tesselator.ShapeTesselator_ObjGetEdgeCount)
    ObjEdgeGetVertexCount = _swig_new_instance_method(_Tesselator.ShapeTesselator_ObjEdgeGetVertexCount)
    ExportShapeToX3DIndexedFaceSet = _swig_new_instance_method(_Tesselator.ShapeTesselator_ExportShapeToX3DIndexedFaceSet)
    ExportShapeToThreejsJSONString = _swig_new_instance_method(_Tesselator.ShapeTesselator_ExportShapeToThreejsJSONString)
    ExportShapeToX3D = _swig_new_instance_method(_Tesselator.ShapeTesselator_ExportShapeToX3D)
    GetVerticesPositionAsTuple = _swig_new_instance_method(_Tesselator.ShapeTesselator_GetVerticesPositionAsTuple)
    GetNormalsAsTuple = _swig_new_instance_method(_Tesselator.ShapeTesselator_GetNormalsAsTuple)

# Register ShapeTesselator in _Tesselator:
_Tesselator.ShapeTesselator_swigregister(ShapeTesselator)



