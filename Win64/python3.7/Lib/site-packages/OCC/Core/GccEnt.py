# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GccEnt module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_gccent.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _GccEnt
else:
    import _GccEnt

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _GccEnt.SWIG_PyInstanceMethod_New
_swig_new_static_method = _GccEnt.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GccEnt.delete_SwigPyIterator
    value = _swig_new_instance_method(_GccEnt.SwigPyIterator_value)
    incr = _swig_new_instance_method(_GccEnt.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_GccEnt.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_GccEnt.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_GccEnt.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_GccEnt.SwigPyIterator_copy)
    next = _swig_new_instance_method(_GccEnt.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_GccEnt.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_GccEnt.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_GccEnt.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_GccEnt.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_GccEnt.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_GccEnt.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_GccEnt.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_GccEnt.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_GccEnt.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _GccEnt:
_GccEnt.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
GccEnt_unqualified = _GccEnt.GccEnt_unqualified
GccEnt_enclosing = _GccEnt.GccEnt_enclosing
GccEnt_enclosed = _GccEnt.GccEnt_enclosed
GccEnt_outside = _GccEnt.GccEnt_outside
GccEnt_noqualifier = _GccEnt.GccEnt_noqualifier
class GccEnt_Array1OfPosition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_begin)
    end = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_end)
    cbegin = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_cbegin)
    cend = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_cend)

    def __init__(self, *args):
        _GccEnt.GccEnt_Array1OfPosition_swiginit(self, _GccEnt.new_GccEnt_Array1OfPosition(*args))
    Init = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_Init)
    Size = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_Size)
    Length = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_Length)
    IsEmpty = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_IsEmpty)
    Lower = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_Lower)
    Upper = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_Upper)
    IsDeletable = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_IsDeletable)
    IsAllocated = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_IsAllocated)
    Assign = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_Assign)
    Move = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_Move)
    Set = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_Set)
    First = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_First)
    ChangeFirst = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_ChangeFirst)
    Last = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_Last)
    ChangeLast = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_ChangeLast)
    Value = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_Value)
    ChangeValue = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_ChangeValue)
    __call__ = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition___call__)
    SetValue = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_SetValue)
    Resize = _swig_new_instance_method(_GccEnt.GccEnt_Array1OfPosition_Resize)
    __swig_destroy__ = _GccEnt.delete_GccEnt_Array1OfPosition

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register GccEnt_Array1OfPosition in _GccEnt:
_GccEnt.GccEnt_Array1OfPosition_swigregister(GccEnt_Array1OfPosition)

class gccent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Enclosed = _swig_new_static_method(_GccEnt.gccent_Enclosed)
    Enclosing = _swig_new_static_method(_GccEnt.gccent_Enclosing)
    Outside = _swig_new_static_method(_GccEnt.gccent_Outside)
    PositionFromString = _swig_new_static_method(_GccEnt.gccent_PositionFromString)
    PositionToString = _swig_new_static_method(_GccEnt.gccent_PositionToString)
    Print = _swig_new_static_method(_GccEnt.gccent_Print)
    Unqualified = _swig_new_static_method(_GccEnt.gccent_Unqualified)

    __repr__ = _dumps_object


    def __init__(self):
        _GccEnt.gccent_swiginit(self, _GccEnt.new_gccent())
    __swig_destroy__ = _GccEnt.delete_gccent

# Register gccent in _GccEnt:
_GccEnt.gccent_swigregister(gccent)
gccent_Enclosed = _GccEnt.gccent_Enclosed
gccent_Enclosing = _GccEnt.gccent_Enclosing
gccent_Outside = _GccEnt.gccent_Outside
gccent_PositionFromString = _GccEnt.gccent_PositionFromString
gccent_PositionToString = _GccEnt.gccent_PositionToString
gccent_Print = _GccEnt.gccent_Print
gccent_Unqualified = _GccEnt.gccent_Unqualified

class GccEnt_QualifiedCirc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructs a qualified circle by assigning the qualifier Qualifier to the circle Qualified. Qualifier may be: - GccEnt_enclosing if the solution computed by a construction algorithm using the qualified circle encloses the circle, or - GccEnt_enclosed if the solution is enclosed by the circle, or - GccEnt_outside if both the solution and the circle are external to one another, or - GccEnt_unqualified if all solutions apply.
        	:param Qualified:
        	:type Qualified: gp_Circ2d
        	:param Qualifier:
        	:type Qualifier: GccEnt_Position
        	:rtype: None
        """
        _GccEnt.GccEnt_QualifiedCirc_swiginit(self, _GccEnt.new_GccEnt_QualifiedCirc(*args))
    IsEnclosed = _swig_new_instance_method(_GccEnt.GccEnt_QualifiedCirc_IsEnclosed)
    IsEnclosing = _swig_new_instance_method(_GccEnt.GccEnt_QualifiedCirc_IsEnclosing)
    IsOutside = _swig_new_instance_method(_GccEnt.GccEnt_QualifiedCirc_IsOutside)
    IsUnqualified = _swig_new_instance_method(_GccEnt.GccEnt_QualifiedCirc_IsUnqualified)
    Qualified = _swig_new_instance_method(_GccEnt.GccEnt_QualifiedCirc_Qualified)
    Qualifier = _swig_new_instance_method(_GccEnt.GccEnt_QualifiedCirc_Qualifier)

    __repr__ = _dumps_object

    __swig_destroy__ = _GccEnt.delete_GccEnt_QualifiedCirc

# Register GccEnt_QualifiedCirc in _GccEnt:
_GccEnt.GccEnt_QualifiedCirc_swigregister(GccEnt_QualifiedCirc)

class GccEnt_QualifiedLin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructs a qualified line by assigning the qualifier Qualifier to the line Qualified. Qualifier may be: - GccEnt_enclosed if the solution is enclosed by the line, or - GccEnt_outside if both the solution and the line are external to one another, or - GccEnt_unqualified if all solutions apply. Note : the interior of a line is defined as the left-hand side of the line in relation to its orientation.
        	:param Qualified:
        	:type Qualified: gp_Lin2d
        	:param Qualifier:
        	:type Qualifier: GccEnt_Position
        	:rtype: None
        """
        _GccEnt.GccEnt_QualifiedLin_swiginit(self, _GccEnt.new_GccEnt_QualifiedLin(*args))
    IsEnclosed = _swig_new_instance_method(_GccEnt.GccEnt_QualifiedLin_IsEnclosed)
    IsOutside = _swig_new_instance_method(_GccEnt.GccEnt_QualifiedLin_IsOutside)
    IsUnqualified = _swig_new_instance_method(_GccEnt.GccEnt_QualifiedLin_IsUnqualified)
    Qualified = _swig_new_instance_method(_GccEnt.GccEnt_QualifiedLin_Qualified)
    Qualifier = _swig_new_instance_method(_GccEnt.GccEnt_QualifiedLin_Qualifier)

    __repr__ = _dumps_object

    __swig_destroy__ = _GccEnt.delete_GccEnt_QualifiedLin

# Register GccEnt_QualifiedLin in _GccEnt:
_GccEnt.GccEnt_QualifiedLin_swigregister(GccEnt_QualifiedLin)



