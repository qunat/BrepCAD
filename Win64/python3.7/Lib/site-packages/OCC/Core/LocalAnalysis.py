# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
LocalAnalysis module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_localanalysis.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _LocalAnalysis
else:
    import _LocalAnalysis

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _LocalAnalysis.SWIG_PyInstanceMethod_New
_swig_new_static_method = _LocalAnalysis.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocalAnalysis.delete_SwigPyIterator
    value = _swig_new_instance_method(_LocalAnalysis.SwigPyIterator_value)
    incr = _swig_new_instance_method(_LocalAnalysis.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_LocalAnalysis.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_LocalAnalysis.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_LocalAnalysis.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_LocalAnalysis.SwigPyIterator_copy)
    next = _swig_new_instance_method(_LocalAnalysis.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_LocalAnalysis.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_LocalAnalysis.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_LocalAnalysis.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_LocalAnalysis.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_LocalAnalysis.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_LocalAnalysis.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_LocalAnalysis.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_LocalAnalysis.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_LocalAnalysis.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _LocalAnalysis:
_LocalAnalysis.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.GeomAbs
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomLProp
import OCC.Core.Geom2d
LocalAnalysis_NullFirstDerivative = _LocalAnalysis.LocalAnalysis_NullFirstDerivative
LocalAnalysis_NullSecondDerivative = _LocalAnalysis.LocalAnalysis_NullSecondDerivative
LocalAnalysis_TangentNotDefined = _LocalAnalysis.LocalAnalysis_TangentNotDefined
LocalAnalysis_NormalNotDefined = _LocalAnalysis.LocalAnalysis_NormalNotDefined
LocalAnalysis_CurvatureNotDefined = _LocalAnalysis.LocalAnalysis_CurvatureNotDefined
class localanalysis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Dump = _swig_new_static_method(_LocalAnalysis.localanalysis_Dump)

    __repr__ = _dumps_object


    def __init__(self):
        _LocalAnalysis.localanalysis_swiginit(self, _LocalAnalysis.new_localanalysis())
    __swig_destroy__ = _LocalAnalysis.delete_localanalysis

# Register localanalysis in _LocalAnalysis:
_LocalAnalysis.localanalysis_swigregister(localanalysis)
localanalysis_Dump = _LocalAnalysis.localanalysis_Dump

class LocalAnalysis_CurveContinuity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    C0Value = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_CurveContinuity_C0Value)
    C1Angle = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_CurveContinuity_C1Angle)
    C1Ratio = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_CurveContinuity_C1Ratio)
    C2Angle = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_CurveContinuity_C2Angle)
    C2Ratio = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_CurveContinuity_C2Ratio)
    ContinuityStatus = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_CurveContinuity_ContinuityStatus)
    G1Angle = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_CurveContinuity_G1Angle)
    G2Angle = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_CurveContinuity_G2Angle)
    G2CurvatureVariation = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_CurveContinuity_G2CurvatureVariation)
    IsC0 = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_CurveContinuity_IsC0)
    IsC1 = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_CurveContinuity_IsC1)
    IsC2 = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_CurveContinuity_IsC2)
    IsDone = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_CurveContinuity_IsDone)
    IsG1 = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_CurveContinuity_IsG1)
    IsG2 = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_CurveContinuity_IsG2)

    def __init__(self, *args):
        r"""
        * -u1 is the parameter of the point on Curv1 -u2 is the parameter of the point on Curv2 -Order is the required continuity: GeomAbs_C0 GeomAbs_C1 GeomAbs_C2 GeomAbs_G1 GeomAbs_G2 //! -EpsNul is used to detect a a vector with nul magnitude (in mm) //! -EpsC0 is used for C0 continuity to confuse two points (in mm) //! -EpsC1 is an angular tolerance in radians used for C1 continuity to compare the angle between the first derivatives //! -EpsC2 is an angular tolerance in radians used for C2 continuity to compare the angle between the second derivatives //! -EpsG1 is an angular tolerance in radians used for G1 continuity to compare the angle between the tangents //! -EpsG2 is an angular tolerance in radians used for G2 continuity to compare the angle between the normals //! - percent : percentage of curvature variation (unitless) used for G2 continuity //! - Maxlen is the maximum length of Curv1 or Curv2 in meters used to detect nul curvature (in mm) //! the constructor computes the quantities which are necessary to check the continuity in the following cases: //! case C0 -------- - the distance between P1 and P2 with P1=Curv1 (u1) and P2=Curv2(u2) //! case C1 ------- //! - the angle between the first derivatives dCurv1(u1)  dCurv2(u2) -------- and --------- du  du //! - the ratio between the magnitudes of the first derivatives //! the angle value is between 0 and PI/2 //! case C2 ------- - the angle between the second derivatives 2  2 d Curv1(u1) d Curv2(u2) ---------- ---------- 2  2 du du //! the angle value is between 0 and PI/2 //! - the ratio between the magnitudes of the second derivatives //! case G1 ------- the angle between the tangents at each point //! the angle value is between 0 and PI/2 //! case G2 ------- -the angle between the normals at each point //! the angle value is between 0 and PI/2 //! - the relative variation of curvature: |curvat1-curvat2| ------------------ 1/2 (curvat1*curvat2) //! where curvat1 is the curvature at the first point and curvat2 the curvature at the second point
        	:param Curv1:
        	:type Curv1: Geom_Curve
        	:param u1:
        	:type u1: float
        	:param Curv2:
        	:type Curv2: Geom_Curve
        	:param u2:
        	:type u2: float
        	:param Order:
        	:type Order: GeomAbs_Shape
        	:param EpsNul: default value is 0.001
        	:type EpsNul: float
        	:param EpsC0: default value is 0.001
        	:type EpsC0: float
        	:param EpsC1: default value is 0.001
        	:type EpsC1: float
        	:param EpsC2: default value is 0.001
        	:type EpsC2: float
        	:param EpsG1: default value is 0.001
        	:type EpsG1: float
        	:param EpsG2: default value is 0.001
        	:type EpsG2: float
        	:param Percent: default value is 0.01
        	:type Percent: float
        	:param Maxlen: default value is 10000
        	:type Maxlen: float
        	:rtype: None
        """
        _LocalAnalysis.LocalAnalysis_CurveContinuity_swiginit(self, _LocalAnalysis.new_LocalAnalysis_CurveContinuity(*args))
    StatusError = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_CurveContinuity_StatusError)

    __repr__ = _dumps_object

    __swig_destroy__ = _LocalAnalysis.delete_LocalAnalysis_CurveContinuity

# Register LocalAnalysis_CurveContinuity in _LocalAnalysis:
_LocalAnalysis.LocalAnalysis_CurveContinuity_swigregister(LocalAnalysis_CurveContinuity)

class LocalAnalysis_SurfaceContinuity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    C0Value = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_C0Value)
    C1UAngle = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_C1UAngle)
    C1URatio = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_C1URatio)
    C1VAngle = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_C1VAngle)
    C1VRatio = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_C1VRatio)
    C2UAngle = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_C2UAngle)
    C2URatio = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_C2URatio)
    C2VAngle = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_C2VAngle)
    C2VRatio = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_C2VRatio)
    ComputeAnalysis = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_ComputeAnalysis)
    ContinuityStatus = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_ContinuityStatus)
    G1Angle = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_G1Angle)
    G2CurvatureGap = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_G2CurvatureGap)
    IsC0 = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_IsC0)
    IsC1 = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_IsC1)
    IsC2 = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_IsC2)
    IsDone = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_IsDone)
    IsG1 = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_IsG1)
    IsG2 = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_IsG2)

    def __init__(self, *args):
        r"""
        * -u1,v1 are the parameters of the point on Surf1 -u2,v2 are the parameters of the point on Surf2 -Order is the required continuity: GeomAbs_C0 GeomAbs_C1 GeomAbs_C2 GeomAbs_G1 GeomAbs_G2 //! -EpsNul is used to detect a a vector with nul magnitude //! -EpsC0 is used for C0 continuity to confuse two points (in mm) //! -EpsC1 is an angular tolerance in radians used for C1 continuity to compare the angle between the first derivatives //! -EpsC2 is an angular tolerance in radians used for C2 continuity to compare the angle between the second derivatives //! -EpsG1 is an angular tolerance in radians used for G1 continuity to compare the angle between the normals //! -Percent : percentage of curvature variation (unitless) used for G2 continuity //! - Maxlen is the maximum length of Surf1 or Surf2 in meters used to detect null curvature (in mm) //! the constructor computes the quantities which are necessary to check the continuity in the following cases: //! case C0 -------- - the distance between P1 and P2 with P1=Surf (u1,v1) and P2=Surfv2(u2,v2) //! case C1 ------- //! - the angle between the first derivatives in u : //! dSurf1(u1,v1) dSurf2(u2,v2) ----------- and --------- du  du //! the angle value is between 0 and PI/2 //! - the angle between the first derivatives in v : //! dSurf1(u1,v1) dSurf2(u2,v2) -------- and --------- dv  dv //! - the ratio between the magnitudes of the first derivatives in u - the ratio between the magnitudes of the first derivatives in v //! the angle value is between 0 and pi/2 //! case C2 ------- - the angle between the second derivatives in u 2 2 d Surf1(u1,v1) d Surf2(u2,v2) ---------- ---------- 2 2 d u d u //! - the ratio between the magnitudes of the second derivatives in u - the ratio between the magnitudes of the second derivatives in v //! the angle value is between 0 and PI/2 //! case G1 ------- -the angle between the normals at each point the angle value is between 0 and PI/2 //! case G2 ------- - the maximum normal curvature gap between the two points
        	:param Surf1:
        	:type Surf1: Geom_Surface
        	:param u1:
        	:type u1: float
        	:param v1:
        	:type v1: float
        	:param Surf2:
        	:type Surf2: Geom_Surface
        	:param u2:
        	:type u2: float
        	:param v2:
        	:type v2: float
        	:param Order:
        	:type Order: GeomAbs_Shape
        	:param EpsNul: default value is 0.001
        	:type EpsNul: float
        	:param EpsC0: default value is 0.001
        	:type EpsC0: float
        	:param EpsC1: default value is 0.001
        	:type EpsC1: float
        	:param EpsC2: default value is 0.001
        	:type EpsC2: float
        	:param EpsG1: default value is 0.001
        	:type EpsG1: float
        	:param Percent: default value is 0.01
        	:type Percent: float
        	:param Maxlen: default value is 10000
        	:type Maxlen: float
        	:rtype: None:param curv1:
        	:type curv1: Geom2d_Curve
        	:param curv2:
        	:type curv2: Geom2d_Curve
        	:param U:
        	:type U: float
        	:param Surf1:
        	:type Surf1: Geom_Surface
        	:param Surf2:
        	:type Surf2: Geom_Surface
        	:param Order:
        	:type Order: GeomAbs_Shape
        	:param EpsNul: default value is 0.001
        	:type EpsNul: float
        	:param EpsC0: default value is 0.001
        	:type EpsC0: float
        	:param EpsC1: default value is 0.001
        	:type EpsC1: float
        	:param EpsC2: default value is 0.001
        	:type EpsC2: float
        	:param EpsG1: default value is 0.001
        	:type EpsG1: float
        	:param Percent: default value is 0.01
        	:type Percent: float
        	:param Maxlen: default value is 10000
        	:type Maxlen: float
        	:rtype: None* This constructor is used when we want to compute many analysis. After we use the method ComputeAnalysis
        	:param EpsNul: default value is 0.001
        	:type EpsNul: float
        	:param EpsC0: default value is 0.001
        	:type EpsC0: float
        	:param EpsC1: default value is 0.001
        	:type EpsC1: float
        	:param EpsC2: default value is 0.001
        	:type EpsC2: float
        	:param EpsG1: default value is 0.001
        	:type EpsG1: float
        	:param Percent: default value is 0.01
        	:type Percent: float
        	:param Maxlen: default value is 10000
        	:type Maxlen: float
        	:rtype: None
        """
        _LocalAnalysis.LocalAnalysis_SurfaceContinuity_swiginit(self, _LocalAnalysis.new_LocalAnalysis_SurfaceContinuity(*args))
    StatusError = _swig_new_instance_method(_LocalAnalysis.LocalAnalysis_SurfaceContinuity_StatusError)

    __repr__ = _dumps_object

    __swig_destroy__ = _LocalAnalysis.delete_LocalAnalysis_SurfaceContinuity

# Register LocalAnalysis_SurfaceContinuity in _LocalAnalysis:
_LocalAnalysis.LocalAnalysis_SurfaceContinuity_swigregister(LocalAnalysis_SurfaceContinuity)



