# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Approx module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_approx.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Approx
else:
    import _Approx

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _Approx.SWIG_PyInstanceMethod_New
_swig_new_static_method = _Approx.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Approx.delete_SwigPyIterator
    value = _swig_new_instance_method(_Approx.SwigPyIterator_value)
    incr = _swig_new_instance_method(_Approx.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_Approx.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_Approx.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_Approx.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_Approx.SwigPyIterator_copy)
    next = _swig_new_instance_method(_Approx.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_Approx.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_Approx.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_Approx.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_Approx.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_Approx.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_Approx.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_Approx.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_Approx.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_Approx.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Approx:
_Approx.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.AppCont
import OCC.Core.AppParCurves
Approx_PointsAdded = _Approx.Approx_PointsAdded
Approx_NoPointsAdded = _Approx.Approx_NoPointsAdded
Approx_NoApproximation = _Approx.Approx_NoApproximation
Approx_ChordLength = _Approx.Approx_ChordLength
Approx_Centripetal = _Approx.Approx_Centripetal
Approx_IsoParametric = _Approx.Approx_IsoParametric
Handle_Approx_CurvlinFunc_Create = _Approx.Handle_Approx_CurvlinFunc_Create
Handle_Approx_CurvlinFunc_DownCast = _Approx.Handle_Approx_CurvlinFunc_DownCast
Handle_Approx_CurvlinFunc_IsNull = _Approx.Handle_Approx_CurvlinFunc_IsNull
Handle_Approx_SweepFunction_Create = _Approx.Handle_Approx_SweepFunction_Create
Handle_Approx_SweepFunction_DownCast = _Approx.Handle_Approx_SweepFunction_DownCast
Handle_Approx_SweepFunction_IsNull = _Approx.Handle_Approx_SweepFunction_IsNull
Handle_Approx_HArray1OfGTrsf2d_Create = _Approx.Handle_Approx_HArray1OfGTrsf2d_Create
Handle_Approx_HArray1OfGTrsf2d_DownCast = _Approx.Handle_Approx_HArray1OfGTrsf2d_DownCast
Handle_Approx_HArray1OfGTrsf2d_IsNull = _Approx.Handle_Approx_HArray1OfGTrsf2d_IsNull
Handle_Approx_HArray1OfAdHSurface_Create = _Approx.Handle_Approx_HArray1OfAdHSurface_Create
Handle_Approx_HArray1OfAdHSurface_DownCast = _Approx.Handle_Approx_HArray1OfAdHSurface_DownCast
Handle_Approx_HArray1OfAdHSurface_IsNull = _Approx.Handle_Approx_HArray1OfAdHSurface_IsNull
class Approx_SequenceOfHArray1OfReal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_begin)
    end = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_end)
    cbegin = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_cbegin)
    cend = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_cend)

    def __init__(self, *args):
        _Approx.Approx_SequenceOfHArray1OfReal_swiginit(self, _Approx.new_Approx_SequenceOfHArray1OfReal(*args))
    Size = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_Size)
    Length = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_Length)
    Lower = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_Lower)
    Upper = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_Upper)
    IsEmpty = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_IsEmpty)
    Reverse = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_Reverse)
    Exchange = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_Exchange)
    delNode = _swig_new_static_method(_Approx.Approx_SequenceOfHArray1OfReal_delNode)
    Clear = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_Clear)
    Assign = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_Assign)
    Set = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_Set)
    Remove = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_Remove)
    Append = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_Append)
    Prepend = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_Prepend)
    InsertBefore = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_InsertBefore)
    InsertAfter = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_InsertAfter)
    Split = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_Split)
    First = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_First)
    ChangeFirst = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_ChangeFirst)
    Last = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_Last)
    ChangeLast = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_ChangeLast)
    Value = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_Value)
    ChangeValue = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_ChangeValue)
    __call__ = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal___call__)
    SetValue = _swig_new_instance_method(_Approx.Approx_SequenceOfHArray1OfReal_SetValue)
    __swig_destroy__ = _Approx.delete_Approx_SequenceOfHArray1OfReal

# Register Approx_SequenceOfHArray1OfReal in _Approx:
_Approx.Approx_SequenceOfHArray1OfReal_swigregister(Approx_SequenceOfHArray1OfReal)
Approx_SequenceOfHArray1OfReal_delNode = _Approx.Approx_SequenceOfHArray1OfReal_delNode

class Approx_Array1OfGTrsf2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_begin)
    end = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_end)
    cbegin = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_cbegin)
    cend = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_cend)

    def __init__(self, *args):
        _Approx.Approx_Array1OfGTrsf2d_swiginit(self, _Approx.new_Approx_Array1OfGTrsf2d(*args))
    Init = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_Init)
    Size = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_Size)
    Length = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_Length)
    IsEmpty = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_IsEmpty)
    Lower = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_Lower)
    Upper = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_Upper)
    IsDeletable = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_IsDeletable)
    IsAllocated = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_IsAllocated)
    Assign = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_Assign)
    Move = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_Move)
    Set = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_Set)
    First = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_First)
    ChangeFirst = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_ChangeFirst)
    Last = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_Last)
    ChangeLast = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_ChangeLast)
    Value = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_Value)
    ChangeValue = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_ChangeValue)
    __call__ = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d___call__)
    SetValue = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_SetValue)
    Resize = _swig_new_instance_method(_Approx.Approx_Array1OfGTrsf2d_Resize)
    __swig_destroy__ = _Approx.delete_Approx_Array1OfGTrsf2d

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register Approx_Array1OfGTrsf2d in _Approx:
_Approx.Approx_Array1OfGTrsf2d_swigregister(Approx_Array1OfGTrsf2d)

class Approx_Array1OfAdHSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_begin)
    end = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_end)
    cbegin = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_cbegin)
    cend = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_cend)

    def __init__(self, *args):
        _Approx.Approx_Array1OfAdHSurface_swiginit(self, _Approx.new_Approx_Array1OfAdHSurface(*args))
    Init = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_Init)
    Size = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_Size)
    Length = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_Length)
    IsEmpty = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_IsEmpty)
    Lower = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_Lower)
    Upper = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_Upper)
    IsDeletable = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_IsDeletable)
    IsAllocated = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_IsAllocated)
    Assign = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_Assign)
    Move = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_Move)
    Set = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_Set)
    First = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_First)
    ChangeFirst = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_ChangeFirst)
    Last = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_Last)
    ChangeLast = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_ChangeLast)
    Value = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_Value)
    ChangeValue = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_ChangeValue)
    __call__ = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface___call__)
    SetValue = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_SetValue)
    Resize = _swig_new_instance_method(_Approx.Approx_Array1OfAdHSurface_Resize)
    __swig_destroy__ = _Approx.delete_Approx_Array1OfAdHSurface

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register Approx_Array1OfAdHSurface in _Approx:
_Approx.Approx_Array1OfAdHSurface_swigregister(Approx_Array1OfAdHSurface)

class Approx_Curve2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param C2D:
        	:type C2D: Adaptor2d_HCurve2d
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:param TolU:
        	:type TolU: float
        	:param TolV:
        	:type TolV: float
        	:param Continuity:
        	:type Continuity: GeomAbs_Shape
        	:param MaxDegree:
        	:type MaxDegree: int
        	:param MaxSegments:
        	:type MaxSegments: int
        	:rtype: None
        """
        _Approx.Approx_Curve2d_swiginit(self, _Approx.new_Approx_Curve2d(*args))
    Curve = _swig_new_instance_method(_Approx.Approx_Curve2d_Curve)
    HasResult = _swig_new_instance_method(_Approx.Approx_Curve2d_HasResult)
    IsDone = _swig_new_instance_method(_Approx.Approx_Curve2d_IsDone)
    MaxError2dU = _swig_new_instance_method(_Approx.Approx_Curve2d_MaxError2dU)
    MaxError2dV = _swig_new_instance_method(_Approx.Approx_Curve2d_MaxError2dV)

    __repr__ = _dumps_object

    __swig_destroy__ = _Approx.delete_Approx_Curve2d

# Register Approx_Curve2d in _Approx:
_Approx.Approx_Curve2d_swigregister(Approx_Curve2d)

class Approx_Curve3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Approximation of a curve with respect of the requiered tolerance Tol3D.
        	:param Curve:
        	:type Curve: Adaptor3d_HCurve
        	:param Tol3d:
        	:type Tol3d: float
        	:param Order:
        	:type Order: GeomAbs_Shape
        	:param MaxSegments:
        	:type MaxSegments: int
        	:param MaxDegree:
        	:type MaxDegree: int
        	:rtype: None
        """
        _Approx.Approx_Curve3d_swiginit(self, _Approx.new_Approx_Curve3d(*args))
    Curve = _swig_new_instance_method(_Approx.Approx_Curve3d_Curve)
    DumpToString = _swig_new_instance_method(_Approx.Approx_Curve3d_DumpToString)
    HasResult = _swig_new_instance_method(_Approx.Approx_Curve3d_HasResult)
    IsDone = _swig_new_instance_method(_Approx.Approx_Curve3d_IsDone)
    MaxError = _swig_new_instance_method(_Approx.Approx_Curve3d_MaxError)

    __repr__ = _dumps_object

    __swig_destroy__ = _Approx.delete_Approx_Curve3d

# Register Approx_Curve3d in _Approx:
_Approx.Approx_Curve3d_swigregister(Approx_Curve3d)

class Approx_CurveOnSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param C2D:
        	:type C2D: Adaptor2d_HCurve2d
        	:param Surf:
        	:type Surf: Adaptor3d_HSurface
        	:param First:
        	:type First: float
        	:param Last:
        	:type Last: float
        	:param Tol:
        	:type Tol: float
        	:param Continuity:
        	:type Continuity: GeomAbs_Shape
        	:param MaxDegree:
        	:type MaxDegree: int
        	:param MaxSegments:
        	:type MaxSegments: int
        	:param Only3d: default value is Standard_False
        	:type Only3d: bool
        	:param Only2d: default value is Standard_False
        	:type Only2d: bool
        	:rtype: None
        """
        _Approx.Approx_CurveOnSurface_swiginit(self, _Approx.new_Approx_CurveOnSurface(*args))
    Curve2d = _swig_new_instance_method(_Approx.Approx_CurveOnSurface_Curve2d)
    Curve3d = _swig_new_instance_method(_Approx.Approx_CurveOnSurface_Curve3d)
    HasResult = _swig_new_instance_method(_Approx.Approx_CurveOnSurface_HasResult)
    IsDone = _swig_new_instance_method(_Approx.Approx_CurveOnSurface_IsDone)
    MaxError2dU = _swig_new_instance_method(_Approx.Approx_CurveOnSurface_MaxError2dU)
    MaxError2dV = _swig_new_instance_method(_Approx.Approx_CurveOnSurface_MaxError2dV)
    MaxError3d = _swig_new_instance_method(_Approx.Approx_CurveOnSurface_MaxError3d)

    __repr__ = _dumps_object

    __swig_destroy__ = _Approx.delete_Approx_CurveOnSurface

# Register Approx_CurveOnSurface in _Approx:
_Approx.Approx_CurveOnSurface_swigregister(Approx_CurveOnSurface)

class Approx_CurvilinearParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * case of a free 3D curve
        	:param C3D:
        	:type C3D: Adaptor3d_HCurve
        	:param Tol:
        	:type Tol: float
        	:param Order:
        	:type Order: GeomAbs_Shape
        	:param MaxDegree:
        	:type MaxDegree: int
        	:param MaxSegments:
        	:type MaxSegments: int
        	:rtype: None* case of a curve on one surface
        	:param C2D:
        	:type C2D: Adaptor2d_HCurve2d
        	:param Surf:
        	:type Surf: Adaptor3d_HSurface
        	:param Tol:
        	:type Tol: float
        	:param Order:
        	:type Order: GeomAbs_Shape
        	:param MaxDegree:
        	:type MaxDegree: int
        	:param MaxSegments:
        	:type MaxSegments: int
        	:rtype: None* case of a curve on two surfaces
        	:param C2D1:
        	:type C2D1: Adaptor2d_HCurve2d
        	:param Surf1:
        	:type Surf1: Adaptor3d_HSurface
        	:param C2D2:
        	:type C2D2: Adaptor2d_HCurve2d
        	:param Surf2:
        	:type Surf2: Adaptor3d_HSurface
        	:param Tol:
        	:type Tol: float
        	:param Order:
        	:type Order: GeomAbs_Shape
        	:param MaxDegree:
        	:type MaxDegree: int
        	:param MaxSegments:
        	:type MaxSegments: int
        	:rtype: None
        """
        _Approx.Approx_CurvilinearParameter_swiginit(self, _Approx.new_Approx_CurvilinearParameter(*args))
    Curve2d1 = _swig_new_instance_method(_Approx.Approx_CurvilinearParameter_Curve2d1)
    Curve2d2 = _swig_new_instance_method(_Approx.Approx_CurvilinearParameter_Curve2d2)
    Curve3d = _swig_new_instance_method(_Approx.Approx_CurvilinearParameter_Curve3d)
    DumpToString = _swig_new_instance_method(_Approx.Approx_CurvilinearParameter_DumpToString)
    HasResult = _swig_new_instance_method(_Approx.Approx_CurvilinearParameter_HasResult)
    IsDone = _swig_new_instance_method(_Approx.Approx_CurvilinearParameter_IsDone)
    MaxError2d1 = _swig_new_instance_method(_Approx.Approx_CurvilinearParameter_MaxError2d1)
    MaxError2d2 = _swig_new_instance_method(_Approx.Approx_CurvilinearParameter_MaxError2d2)
    MaxError3d = _swig_new_instance_method(_Approx.Approx_CurvilinearParameter_MaxError3d)

    __repr__ = _dumps_object

    __swig_destroy__ = _Approx.delete_Approx_CurvilinearParameter

# Register Approx_CurvilinearParameter in _Approx:
_Approx.Approx_CurvilinearParameter_swigregister(Approx_CurvilinearParameter)

class Approx_CurvlinFunc(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param C:
        	:type C: Adaptor3d_HCurve
        	:param Tol:
        	:type Tol: float
        	:rtype: None:param C2D:
        	:type C2D: Adaptor2d_HCurve2d
        	:param S:
        	:type S: Adaptor3d_HSurface
        	:param Tol:
        	:type Tol: float
        	:rtype: None:param C2D1:
        	:type C2D1: Adaptor2d_HCurve2d
        	:param C2D2:
        	:type C2D2: Adaptor2d_HCurve2d
        	:param S1:
        	:type S1: Adaptor3d_HSurface
        	:param S2:
        	:type S2: Adaptor3d_HSurface
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _Approx.Approx_CurvlinFunc_swiginit(self, _Approx.new_Approx_CurvlinFunc(*args))
    EvalCase1 = _swig_new_instance_method(_Approx.Approx_CurvlinFunc_EvalCase1)
    EvalCase2 = _swig_new_instance_method(_Approx.Approx_CurvlinFunc_EvalCase2)
    EvalCase3 = _swig_new_instance_method(_Approx.Approx_CurvlinFunc_EvalCase3)
    FirstParameter = _swig_new_instance_method(_Approx.Approx_CurvlinFunc_FirstParameter)
    GetLength = _swig_new_instance_method(_Approx.Approx_CurvlinFunc_GetLength)
    GetSParameter = _swig_new_instance_method(_Approx.Approx_CurvlinFunc_GetSParameter)
    GetUParameter = _swig_new_instance_method(_Approx.Approx_CurvlinFunc_GetUParameter)
    Intervals = _swig_new_instance_method(_Approx.Approx_CurvlinFunc_Intervals)
    LastParameter = _swig_new_instance_method(_Approx.Approx_CurvlinFunc_LastParameter)
    Length = _swig_new_instance_method(_Approx.Approx_CurvlinFunc_Length)
    NbIntervals = _swig_new_instance_method(_Approx.Approx_CurvlinFunc_NbIntervals)
    SetTol = _swig_new_instance_method(_Approx.Approx_CurvlinFunc_SetTol)
    Trim = _swig_new_instance_method(_Approx.Approx_CurvlinFunc_Trim)


    @staticmethod
    def DownCast(t):
      return Handle_Approx_CurvlinFunc_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Approx.delete_Approx_CurvlinFunc

# Register Approx_CurvlinFunc in _Approx:
_Approx.Approx_CurvlinFunc_swigregister(Approx_CurvlinFunc)

class Approx_FitAndDivide(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * The MultiLine <Line> will be approximated until tolerances will be reached. The approximation will be done from degreemin to degreemax with a cutting if the corresponding boolean is True.
        	:param Line:
        	:type Line: AppCont_Function
        	:param degreemin: default value is 3
        	:type degreemin: int
        	:param degreemax: default value is 8
        	:type degreemax: int
        	:param Tolerance3d: default value is 1.0e-5
        	:type Tolerance3d: float
        	:param Tolerance2d: default value is 1.0e-5
        	:type Tolerance2d: float
        	:param cutting: default value is Standard_False
        	:type cutting: bool
        	:param FirstC: default value is AppParCurves_TangencyPoint
        	:type FirstC: AppParCurves_Constraint
        	:param LastC: default value is AppParCurves_TangencyPoint
        	:type LastC: AppParCurves_Constraint
        	:rtype: None* Initializes the fields of the algorithm.
        	:param degreemin: default value is 3
        	:type degreemin: int
        	:param degreemax: default value is 8
        	:type degreemax: int
        	:param Tolerance3d: default value is 1.0e-05
        	:type Tolerance3d: float
        	:param Tolerance2d: default value is 1.0e-05
        	:type Tolerance2d: float
        	:param cutting: default value is Standard_False
        	:type cutting: bool
        	:param FirstC: default value is AppParCurves_TangencyPoint
        	:type FirstC: AppParCurves_Constraint
        	:param LastC: default value is AppParCurves_TangencyPoint
        	:type LastC: AppParCurves_Constraint
        	:rtype: None
        """
        _Approx.Approx_FitAndDivide_swiginit(self, _Approx.new_Approx_FitAndDivide(*args))
    Error = _swig_new_instance_method(_Approx.Approx_FitAndDivide_Error)
    IsAllApproximated = _swig_new_instance_method(_Approx.Approx_FitAndDivide_IsAllApproximated)
    IsToleranceReached = _swig_new_instance_method(_Approx.Approx_FitAndDivide_IsToleranceReached)
    NbMultiCurves = _swig_new_instance_method(_Approx.Approx_FitAndDivide_NbMultiCurves)
    Parameters = _swig_new_instance_method(_Approx.Approx_FitAndDivide_Parameters)
    Perform = _swig_new_instance_method(_Approx.Approx_FitAndDivide_Perform)
    SetConstraints = _swig_new_instance_method(_Approx.Approx_FitAndDivide_SetConstraints)
    SetDegrees = _swig_new_instance_method(_Approx.Approx_FitAndDivide_SetDegrees)
    SetInvOrder = _swig_new_instance_method(_Approx.Approx_FitAndDivide_SetInvOrder)
    SetMaxSegments = _swig_new_instance_method(_Approx.Approx_FitAndDivide_SetMaxSegments)
    SetTolerances = _swig_new_instance_method(_Approx.Approx_FitAndDivide_SetTolerances)
    Value = _swig_new_instance_method(_Approx.Approx_FitAndDivide_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _Approx.delete_Approx_FitAndDivide

# Register Approx_FitAndDivide in _Approx:
_Approx.Approx_FitAndDivide_swigregister(Approx_FitAndDivide)

class Approx_FitAndDivide2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * The MultiLine <Line> will be approximated until tolerances will be reached. The approximation will be done from degreemin to degreemax with a cutting if the corresponding boolean is True.
        	:param Line:
        	:type Line: AppCont_Function
        	:param degreemin: default value is 3
        	:type degreemin: int
        	:param degreemax: default value is 8
        	:type degreemax: int
        	:param Tolerance3d: default value is 1.0e-5
        	:type Tolerance3d: float
        	:param Tolerance2d: default value is 1.0e-5
        	:type Tolerance2d: float
        	:param cutting: default value is Standard_False
        	:type cutting: bool
        	:param FirstC: default value is AppParCurves_TangencyPoint
        	:type FirstC: AppParCurves_Constraint
        	:param LastC: default value is AppParCurves_TangencyPoint
        	:type LastC: AppParCurves_Constraint
        	:rtype: None* Initializes the fields of the algorithm.
        	:param degreemin: default value is 3
        	:type degreemin: int
        	:param degreemax: default value is 8
        	:type degreemax: int
        	:param Tolerance3d: default value is 1.0e-05
        	:type Tolerance3d: float
        	:param Tolerance2d: default value is 1.0e-05
        	:type Tolerance2d: float
        	:param cutting: default value is Standard_False
        	:type cutting: bool
        	:param FirstC: default value is AppParCurves_TangencyPoint
        	:type FirstC: AppParCurves_Constraint
        	:param LastC: default value is AppParCurves_TangencyPoint
        	:type LastC: AppParCurves_Constraint
        	:rtype: None
        """
        _Approx.Approx_FitAndDivide2d_swiginit(self, _Approx.new_Approx_FitAndDivide2d(*args))
    Error = _swig_new_instance_method(_Approx.Approx_FitAndDivide2d_Error)
    IsAllApproximated = _swig_new_instance_method(_Approx.Approx_FitAndDivide2d_IsAllApproximated)
    IsToleranceReached = _swig_new_instance_method(_Approx.Approx_FitAndDivide2d_IsToleranceReached)
    NbMultiCurves = _swig_new_instance_method(_Approx.Approx_FitAndDivide2d_NbMultiCurves)
    Parameters = _swig_new_instance_method(_Approx.Approx_FitAndDivide2d_Parameters)
    Perform = _swig_new_instance_method(_Approx.Approx_FitAndDivide2d_Perform)
    SetConstraints = _swig_new_instance_method(_Approx.Approx_FitAndDivide2d_SetConstraints)
    SetDegrees = _swig_new_instance_method(_Approx.Approx_FitAndDivide2d_SetDegrees)
    SetInvOrder = _swig_new_instance_method(_Approx.Approx_FitAndDivide2d_SetInvOrder)
    SetMaxSegments = _swig_new_instance_method(_Approx.Approx_FitAndDivide2d_SetMaxSegments)
    SetTolerances = _swig_new_instance_method(_Approx.Approx_FitAndDivide2d_SetTolerances)
    Value = _swig_new_instance_method(_Approx.Approx_FitAndDivide2d_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _Approx.delete_Approx_FitAndDivide2d

# Register Approx_FitAndDivide2d in _Approx:
_Approx.Approx_FitAndDivide2d_swigregister(Approx_FitAndDivide2d)

class Approx_MCurvesToBSpCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Append = _swig_new_instance_method(_Approx.Approx_MCurvesToBSpCurve_Append)

    def __init__(self, *args):
        r""":rtype: None"""
        _Approx.Approx_MCurvesToBSpCurve_swiginit(self, _Approx.new_Approx_MCurvesToBSpCurve(*args))
    ChangeValue = _swig_new_instance_method(_Approx.Approx_MCurvesToBSpCurve_ChangeValue)
    Perform = _swig_new_instance_method(_Approx.Approx_MCurvesToBSpCurve_Perform)
    Reset = _swig_new_instance_method(_Approx.Approx_MCurvesToBSpCurve_Reset)
    Value = _swig_new_instance_method(_Approx.Approx_MCurvesToBSpCurve_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _Approx.delete_Approx_MCurvesToBSpCurve

# Register Approx_MCurvesToBSpCurve in _Approx:
_Approx.Approx_MCurvesToBSpCurve_swigregister(Approx_MCurvesToBSpCurve)

class Approx_SameParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Warning: the C3D and C2D must have the same parametric domain.
        	:param C3D:
        	:type C3D: Geom_Curve
        	:param C2D:
        	:type C2D: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param Tol:
        	:type Tol: float
        	:rtype: None:param C3D:
        	:type C3D: Adaptor3d_HCurve
        	:param C2D:
        	:type C2D: Geom2d_Curve
        	:param S:
        	:type S: Adaptor3d_HSurface
        	:param Tol:
        	:type Tol: float
        	:rtype: None* Warning: the C3D and C2D must have the same parametric domain.
        	:param C3D:
        	:type C3D: Adaptor3d_HCurve
        	:param C2D:
        	:type C2D: Adaptor2d_HCurve2d
        	:param S:
        	:type S: Adaptor3d_HSurface
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _Approx.Approx_SameParameter_swiginit(self, _Approx.new_Approx_SameParameter(*args))
    Curve2d = _swig_new_instance_method(_Approx.Approx_SameParameter_Curve2d)
    IsDone = _swig_new_instance_method(_Approx.Approx_SameParameter_IsDone)
    IsSameParameter = _swig_new_instance_method(_Approx.Approx_SameParameter_IsSameParameter)
    TolReached = _swig_new_instance_method(_Approx.Approx_SameParameter_TolReached)

    __repr__ = _dumps_object

    __swig_destroy__ = _Approx.delete_Approx_SameParameter

# Register Approx_SameParameter in _Approx:
_Approx.Approx_SameParameter_swigregister(Approx_SameParameter)

class Approx_SweepApproximation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param Func:
        	:type Func: Approx_SweepFunction
        	:rtype: None
        """
        _Approx.Approx_SweepApproximation_swiginit(self, _Approx.new_Approx_SweepApproximation(*args))
    Average2dError = _swig_new_instance_method(_Approx.Approx_SweepApproximation_Average2dError)
    AverageErrorOnSurf = _swig_new_instance_method(_Approx.Approx_SweepApproximation_AverageErrorOnSurf)
    Curve2d = _swig_new_instance_method(_Approx.Approx_SweepApproximation_Curve2d)
    Curve2dPoles = _swig_new_instance_method(_Approx.Approx_SweepApproximation_Curve2dPoles)
    Curves2dDegree = _swig_new_instance_method(_Approx.Approx_SweepApproximation_Curves2dDegree)
    Curves2dKnots = _swig_new_instance_method(_Approx.Approx_SweepApproximation_Curves2dKnots)
    Curves2dMults = _swig_new_instance_method(_Approx.Approx_SweepApproximation_Curves2dMults)
    Curves2dShape = _swig_new_instance_method(_Approx.Approx_SweepApproximation_Curves2dShape)
    DumpToString = _swig_new_instance_method(_Approx.Approx_SweepApproximation_DumpToString)
    Eval = _swig_new_instance_method(_Approx.Approx_SweepApproximation_Eval)
    IsDone = _swig_new_instance_method(_Approx.Approx_SweepApproximation_IsDone)
    Max2dError = _swig_new_instance_method(_Approx.Approx_SweepApproximation_Max2dError)
    MaxErrorOnSurf = _swig_new_instance_method(_Approx.Approx_SweepApproximation_MaxErrorOnSurf)
    NbCurves2d = _swig_new_instance_method(_Approx.Approx_SweepApproximation_NbCurves2d)
    Perform = _swig_new_instance_method(_Approx.Approx_SweepApproximation_Perform)
    SurfPoles = _swig_new_instance_method(_Approx.Approx_SweepApproximation_SurfPoles)
    SurfShape = _swig_new_instance_method(_Approx.Approx_SweepApproximation_SurfShape)
    SurfUKnots = _swig_new_instance_method(_Approx.Approx_SweepApproximation_SurfUKnots)
    SurfUMults = _swig_new_instance_method(_Approx.Approx_SweepApproximation_SurfUMults)
    SurfVKnots = _swig_new_instance_method(_Approx.Approx_SweepApproximation_SurfVKnots)
    SurfVMults = _swig_new_instance_method(_Approx.Approx_SweepApproximation_SurfVMults)
    SurfWeights = _swig_new_instance_method(_Approx.Approx_SweepApproximation_SurfWeights)
    Surface = _swig_new_instance_method(_Approx.Approx_SweepApproximation_Surface)
    TolCurveOnSurf = _swig_new_instance_method(_Approx.Approx_SweepApproximation_TolCurveOnSurf)
    UDegree = _swig_new_instance_method(_Approx.Approx_SweepApproximation_UDegree)
    VDegree = _swig_new_instance_method(_Approx.Approx_SweepApproximation_VDegree)

    __repr__ = _dumps_object

    __swig_destroy__ = _Approx.delete_Approx_SweepApproximation

# Register Approx_SweepApproximation in _Approx:
_Approx.Approx_SweepApproximation_swigregister(Approx_SweepApproximation)

class Approx_SweepFunction(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    BarycentreOfSurf = _swig_new_instance_method(_Approx.Approx_SweepFunction_BarycentreOfSurf)
    D0 = _swig_new_instance_method(_Approx.Approx_SweepFunction_D0)
    D1 = _swig_new_instance_method(_Approx.Approx_SweepFunction_D1)
    D2 = _swig_new_instance_method(_Approx.Approx_SweepFunction_D2)
    GetMinimalWeight = _swig_new_instance_method(_Approx.Approx_SweepFunction_GetMinimalWeight)
    GetTolerance = _swig_new_instance_method(_Approx.Approx_SweepFunction_GetTolerance)
    Intervals = _swig_new_instance_method(_Approx.Approx_SweepFunction_Intervals)
    IsRational = _swig_new_instance_method(_Approx.Approx_SweepFunction_IsRational)
    Knots = _swig_new_instance_method(_Approx.Approx_SweepFunction_Knots)
    MaximalSection = _swig_new_instance_method(_Approx.Approx_SweepFunction_MaximalSection)
    Mults = _swig_new_instance_method(_Approx.Approx_SweepFunction_Mults)
    Nb2dCurves = _swig_new_instance_method(_Approx.Approx_SweepFunction_Nb2dCurves)
    NbIntervals = _swig_new_instance_method(_Approx.Approx_SweepFunction_NbIntervals)
    Resolution = _swig_new_instance_method(_Approx.Approx_SweepFunction_Resolution)
    SectionShape = _swig_new_instance_method(_Approx.Approx_SweepFunction_SectionShape)
    SetInterval = _swig_new_instance_method(_Approx.Approx_SweepFunction_SetInterval)
    SetTolerance = _swig_new_instance_method(_Approx.Approx_SweepFunction_SetTolerance)


    @staticmethod
    def DownCast(t):
      return Handle_Approx_SweepFunction_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Approx.delete_Approx_SweepFunction

# Register Approx_SweepFunction in _Approx:
_Approx.Approx_SweepFunction_swigregister(Approx_SweepFunction)

class Approx_HArray1OfGTrsf2d(Approx_Array1OfGTrsf2d, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Approx.Approx_HArray1OfGTrsf2d_swiginit(self, _Approx.new_Approx_HArray1OfGTrsf2d(*args))
    Array1 = _swig_new_instance_method(_Approx.Approx_HArray1OfGTrsf2d_Array1)
    ChangeArray1 = _swig_new_instance_method(_Approx.Approx_HArray1OfGTrsf2d_ChangeArray1)


    @staticmethod
    def DownCast(t):
      return Handle_Approx_HArray1OfGTrsf2d_DownCast(t)

    __swig_destroy__ = _Approx.delete_Approx_HArray1OfGTrsf2d

# Register Approx_HArray1OfGTrsf2d in _Approx:
_Approx.Approx_HArray1OfGTrsf2d_swigregister(Approx_HArray1OfGTrsf2d)

class Approx_HArray1OfAdHSurface(Approx_Array1OfAdHSurface, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Approx.Approx_HArray1OfAdHSurface_swiginit(self, _Approx.new_Approx_HArray1OfAdHSurface(*args))
    Array1 = _swig_new_instance_method(_Approx.Approx_HArray1OfAdHSurface_Array1)
    ChangeArray1 = _swig_new_instance_method(_Approx.Approx_HArray1OfAdHSurface_ChangeArray1)


    @staticmethod
    def DownCast(t):
      return Handle_Approx_HArray1OfAdHSurface_DownCast(t)

    __swig_destroy__ = _Approx.delete_Approx_HArray1OfAdHSurface

# Register Approx_HArray1OfAdHSurface in _Approx:
_Approx.Approx_HArray1OfAdHSurface_swigregister(Approx_HArray1OfAdHSurface)



