# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TShort module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_tshort.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TShort
else:
    import _TShort

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _TShort.SWIG_PyInstanceMethod_New
_swig_new_static_method = _TShort.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TShort.delete_SwigPyIterator
    value = _swig_new_instance_method(_TShort.SwigPyIterator_value)
    incr = _swig_new_instance_method(_TShort.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_TShort.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_TShort.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_TShort.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_TShort.SwigPyIterator_copy)
    next = _swig_new_instance_method(_TShort.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_TShort.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_TShort.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_TShort.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_TShort.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_TShort.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_TShort.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_TShort.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_TShort.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_TShort.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TShort:
_TShort.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
Handle_TShort_HArray1OfShortReal_Create = _TShort.Handle_TShort_HArray1OfShortReal_Create
Handle_TShort_HArray1OfShortReal_DownCast = _TShort.Handle_TShort_HArray1OfShortReal_DownCast
Handle_TShort_HArray1OfShortReal_IsNull = _TShort.Handle_TShort_HArray1OfShortReal_IsNull
Handle_TShort_HArray2OfShortReal_Create = _TShort.Handle_TShort_HArray2OfShortReal_Create
Handle_TShort_HArray2OfShortReal_DownCast = _TShort.Handle_TShort_HArray2OfShortReal_DownCast
Handle_TShort_HArray2OfShortReal_IsNull = _TShort.Handle_TShort_HArray2OfShortReal_IsNull
Handle_TShort_HSequenceOfShortReal_Create = _TShort.Handle_TShort_HSequenceOfShortReal_Create
Handle_TShort_HSequenceOfShortReal_DownCast = _TShort.Handle_TShort_HSequenceOfShortReal_DownCast
Handle_TShort_HSequenceOfShortReal_IsNull = _TShort.Handle_TShort_HSequenceOfShortReal_IsNull
class TShort_SequenceOfShortReal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_begin)
    end = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_end)
    cbegin = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_cbegin)
    cend = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_cend)

    def __init__(self, *args):
        _TShort.TShort_SequenceOfShortReal_swiginit(self, _TShort.new_TShort_SequenceOfShortReal(*args))
    Size = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_Size)
    Length = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_Length)
    Lower = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_Lower)
    Upper = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_Upper)
    IsEmpty = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_IsEmpty)
    Reverse = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_Reverse)
    Exchange = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_Exchange)
    delNode = _swig_new_static_method(_TShort.TShort_SequenceOfShortReal_delNode)
    Clear = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_Clear)
    Assign = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_Assign)
    Set = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_Set)
    Remove = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_Remove)
    Append = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_Append)
    Prepend = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_Prepend)
    InsertBefore = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_InsertBefore)
    InsertAfter = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_InsertAfter)
    Split = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_Split)
    First = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_First)
    ChangeFirst = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_ChangeFirst)
    Last = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_Last)
    ChangeLast = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_ChangeLast)
    Value = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_Value)
    ChangeValue = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_ChangeValue)
    __call__ = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal___call__)
    SetValue = _swig_new_instance_method(_TShort.TShort_SequenceOfShortReal_SetValue)
    __swig_destroy__ = _TShort.delete_TShort_SequenceOfShortReal

# Register TShort_SequenceOfShortReal in _TShort:
_TShort.TShort_SequenceOfShortReal_swigregister(TShort_SequenceOfShortReal)
TShort_SequenceOfShortReal_delNode = _TShort.TShort_SequenceOfShortReal_delNode

class TShort_Array2OfShortReal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TShort.TShort_Array2OfShortReal_swiginit(self, _TShort.new_TShort_Array2OfShortReal(*args))
    Init = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal_Init)
    Size = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal_Size)
    Length = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal_Length)
    NbRows = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal_NbRows)
    NbColumns = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal_NbColumns)
    RowLength = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal_RowLength)
    ColLength = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal_ColLength)
    LowerRow = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal_LowerRow)
    UpperRow = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal_UpperRow)
    LowerCol = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal_LowerCol)
    UpperCol = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal_UpperCol)
    IsDeletable = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal_IsDeletable)
    Assign = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal_Assign)
    Move = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal_Move)
    Set = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal_Set)
    Value = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal_Value)
    ChangeValue = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal_ChangeValue)
    __call__ = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal___call__)
    SetValue = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal_SetValue)
    Resize = _swig_new_instance_method(_TShort.TShort_Array2OfShortReal_Resize)
    __swig_destroy__ = _TShort.delete_TShort_Array2OfShortReal

# Register TShort_Array2OfShortReal in _TShort:
_TShort.TShort_Array2OfShortReal_swigregister(TShort_Array2OfShortReal)

class TShort_Array1OfShortReal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_begin)
    end = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_end)
    cbegin = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_cbegin)
    cend = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_cend)

    def __init__(self, *args):
        _TShort.TShort_Array1OfShortReal_swiginit(self, _TShort.new_TShort_Array1OfShortReal(*args))
    Init = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_Init)
    Size = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_Size)
    Length = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_Length)
    IsEmpty = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_IsEmpty)
    Lower = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_Lower)
    Upper = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_Upper)
    IsDeletable = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_IsDeletable)
    IsAllocated = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_IsAllocated)
    Assign = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_Assign)
    Move = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_Move)
    Set = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_Set)
    First = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_First)
    ChangeFirst = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_ChangeFirst)
    Last = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_Last)
    ChangeLast = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_ChangeLast)
    Value = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_Value)
    ChangeValue = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_ChangeValue)
    __call__ = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal___call__)
    SetValue = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_SetValue)
    Resize = _swig_new_instance_method(_TShort.TShort_Array1OfShortReal_Resize)
    __swig_destroy__ = _TShort.delete_TShort_Array1OfShortReal

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register TShort_Array1OfShortReal in _TShort:
_TShort.TShort_Array1OfShortReal_swigregister(TShort_Array1OfShortReal)

class TShort_HArray1OfShortReal(TShort_Array1OfShortReal, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TShort.TShort_HArray1OfShortReal_swiginit(self, _TShort.new_TShort_HArray1OfShortReal(*args))
    Array1 = _swig_new_instance_method(_TShort.TShort_HArray1OfShortReal_Array1)
    ChangeArray1 = _swig_new_instance_method(_TShort.TShort_HArray1OfShortReal_ChangeArray1)


    @staticmethod
    def DownCast(t):
      return Handle_TShort_HArray1OfShortReal_DownCast(t)

    __swig_destroy__ = _TShort.delete_TShort_HArray1OfShortReal

# Register TShort_HArray1OfShortReal in _TShort:
_TShort.TShort_HArray1OfShortReal_swigregister(TShort_HArray1OfShortReal)

class TShort_HArray2OfShortReal(TShort_Array2OfShortReal, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TShort.TShort_HArray2OfShortReal_swiginit(self, _TShort.new_TShort_HArray2OfShortReal(*args))
    Array2 = _swig_new_instance_method(_TShort.TShort_HArray2OfShortReal_Array2)
    ChangeArray2 = _swig_new_instance_method(_TShort.TShort_HArray2OfShortReal_ChangeArray2)


    @staticmethod
    def DownCast(t):
      return Handle_TShort_HArray2OfShortReal_DownCast(t)

    __swig_destroy__ = _TShort.delete_TShort_HArray2OfShortReal

# Register TShort_HArray2OfShortReal in _TShort:
_TShort.TShort_HArray2OfShortReal_swigregister(TShort_HArray2OfShortReal)

class TShort_HSequenceOfShortReal(TShort_SequenceOfShortReal, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TShort.TShort_HSequenceOfShortReal_swiginit(self, _TShort.new_TShort_HSequenceOfShortReal(*args))
    Sequence = _swig_new_instance_method(_TShort.TShort_HSequenceOfShortReal_Sequence)
    Append = _swig_new_instance_method(_TShort.TShort_HSequenceOfShortReal_Append)
    ChangeSequence = _swig_new_instance_method(_TShort.TShort_HSequenceOfShortReal_ChangeSequence)


    @staticmethod
    def DownCast(t):
      return Handle_TShort_HSequenceOfShortReal_DownCast(t)

    __swig_destroy__ = _TShort.delete_TShort_HSequenceOfShortReal

# Register TShort_HSequenceOfShortReal in _TShort:
_TShort.TShort_HSequenceOfShortReal_swigregister(TShort_HSequenceOfShortReal)



