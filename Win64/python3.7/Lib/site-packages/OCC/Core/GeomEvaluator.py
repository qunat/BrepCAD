# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GeomEvaluator module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_geomevaluator.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _GeomEvaluator
else:
    import _GeomEvaluator

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _GeomEvaluator.SWIG_PyInstanceMethod_New
_swig_new_static_method = _GeomEvaluator.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomEvaluator.delete_SwigPyIterator
    value = _swig_new_instance_method(_GeomEvaluator.SwigPyIterator_value)
    incr = _swig_new_instance_method(_GeomEvaluator.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_GeomEvaluator.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_GeomEvaluator.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_GeomEvaluator.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_GeomEvaluator.SwigPyIterator_copy)
    next = _swig_new_instance_method(_GeomEvaluator.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_GeomEvaluator.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_GeomEvaluator.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_GeomEvaluator.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_GeomEvaluator.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_GeomEvaluator.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_GeomEvaluator.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_GeomEvaluator.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_GeomEvaluator.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_GeomEvaluator.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _GeomEvaluator:
_GeomEvaluator.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
Handle_GeomEvaluator_Curve_Create = _GeomEvaluator.Handle_GeomEvaluator_Curve_Create
Handle_GeomEvaluator_Curve_DownCast = _GeomEvaluator.Handle_GeomEvaluator_Curve_DownCast
Handle_GeomEvaluator_Curve_IsNull = _GeomEvaluator.Handle_GeomEvaluator_Curve_IsNull
Handle_GeomEvaluator_Surface_Create = _GeomEvaluator.Handle_GeomEvaluator_Surface_Create
Handle_GeomEvaluator_Surface_DownCast = _GeomEvaluator.Handle_GeomEvaluator_Surface_DownCast
Handle_GeomEvaluator_Surface_IsNull = _GeomEvaluator.Handle_GeomEvaluator_Surface_IsNull
Handle_GeomEvaluator_OffsetCurve_Create = _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_Create
Handle_GeomEvaluator_OffsetCurve_DownCast = _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_DownCast
Handle_GeomEvaluator_OffsetCurve_IsNull = _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_IsNull
Handle_GeomEvaluator_OffsetSurface_Create = _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_Create
Handle_GeomEvaluator_OffsetSurface_DownCast = _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_DownCast
Handle_GeomEvaluator_OffsetSurface_IsNull = _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_IsNull
Handle_GeomEvaluator_SurfaceOfExtrusion_Create = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_Create
Handle_GeomEvaluator_SurfaceOfExtrusion_DownCast = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_DownCast
Handle_GeomEvaluator_SurfaceOfExtrusion_IsNull = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_IsNull
Handle_GeomEvaluator_SurfaceOfRevolution_Create = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_Create
Handle_GeomEvaluator_SurfaceOfRevolution_DownCast = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_DownCast
Handle_GeomEvaluator_SurfaceOfRevolution_IsNull = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_IsNull
class GeomEvaluator_Curve(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    D0 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_Curve_D0)
    D1 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_Curve_D1)
    D2 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_Curve_D2)
    D3 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_Curve_D3)
    DN = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_Curve_DN)


    @staticmethod
    def DownCast(t):
      return Handle_GeomEvaluator_Curve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_Curve

# Register GeomEvaluator_Curve in _GeomEvaluator:
_GeomEvaluator.GeomEvaluator_Curve_swigregister(GeomEvaluator_Curve)

class GeomEvaluator_Surface(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    D0 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_Surface_D0)
    D1 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_Surface_D1)
    D2 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_Surface_D2)
    D3 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_Surface_D3)
    DN = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_Surface_DN)


    @staticmethod
    def DownCast(t):
      return Handle_GeomEvaluator_Surface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_Surface

# Register GeomEvaluator_Surface in _GeomEvaluator:
_GeomEvaluator.GeomEvaluator_Surface_swigregister(GeomEvaluator_Surface)

class GeomEvaluator_OffsetCurve(GeomEvaluator_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    D0 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_OffsetCurve_D0)
    D1 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_OffsetCurve_D1)
    D2 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_OffsetCurve_D2)
    D3 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_OffsetCurve_D3)
    DN = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_OffsetCurve_DN)

    def __init__(self, *args):
        r"""
        * Initialize evaluator by curve
        	:param theBase:
        	:type theBase: Geom_Curve
        	:param theOffset:
        	:type theOffset: float
        	:param theDirection:
        	:type theDirection: gp_Dir
        	:rtype: None* Initialize evaluator by curve adaptor
        	:param theBase:
        	:type theBase: GeomAdaptor_HCurve
        	:param theOffset:
        	:type theOffset: float
        	:param theDirection:
        	:type theDirection: gp_Dir
        	:rtype: None
        """
        _GeomEvaluator.GeomEvaluator_OffsetCurve_swiginit(self, _GeomEvaluator.new_GeomEvaluator_OffsetCurve(*args))
    SetOffsetDirection = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_OffsetCurve_SetOffsetDirection)
    SetOffsetValue = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_OffsetCurve_SetOffsetValue)


    @staticmethod
    def DownCast(t):
      return Handle_GeomEvaluator_OffsetCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_OffsetCurve

# Register GeomEvaluator_OffsetCurve in _GeomEvaluator:
_GeomEvaluator.GeomEvaluator_OffsetCurve_swigregister(GeomEvaluator_OffsetCurve)

class GeomEvaluator_OffsetSurface(GeomEvaluator_Surface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    D0 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_OffsetSurface_D0)
    D1 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_OffsetSurface_D1)
    D2 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_OffsetSurface_D2)
    D3 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_OffsetSurface_D3)
    DN = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_OffsetSurface_DN)

    def __init__(self, *args):
        r"""
        * Initialize evaluator by surface
        	:param theBase:
        	:type theBase: Geom_Surface
        	:param theOffset:
        	:type theOffset: float
        	:param theOscSurf: default value is opencascade::handle<Geom_OsculatingSurface>()
        	:type theOscSurf: Geom_OsculatingSurface
        	:rtype: None* Initialize evaluator by surface adaptor
        	:param theBase:
        	:type theBase: GeomAdaptor_HSurface
        	:param theOffset:
        	:type theOffset: float
        	:param theOscSurf: default value is opencascade::handle<Geom_OsculatingSurface>()
        	:type theOscSurf: Geom_OsculatingSurface
        	:rtype: None
        """
        _GeomEvaluator.GeomEvaluator_OffsetSurface_swiginit(self, _GeomEvaluator.new_GeomEvaluator_OffsetSurface(*args))
    SetOffsetValue = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_OffsetSurface_SetOffsetValue)


    @staticmethod
    def DownCast(t):
      return Handle_GeomEvaluator_OffsetSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_OffsetSurface

# Register GeomEvaluator_OffsetSurface in _GeomEvaluator:
_GeomEvaluator.GeomEvaluator_OffsetSurface_swigregister(GeomEvaluator_OffsetSurface)

class GeomEvaluator_SurfaceOfExtrusion(GeomEvaluator_Surface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    D0 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_D0)
    D1 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_D1)
    D2 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_D2)
    D3 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_D3)
    DN = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_DN)

    def __init__(self, *args):
        r"""
        * Initialize evaluator by surface
        	:param theBase:
        	:type theBase: Geom_Curve
        	:param theExtrusionDir:
        	:type theExtrusionDir: gp_Dir
        	:rtype: None* Initialize evaluator by surface adaptor
        	:param theBase:
        	:type theBase: Adaptor3d_HCurve
        	:param theExtrusionDir:
        	:type theExtrusionDir: gp_Dir
        	:rtype: None
        """
        _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_swiginit(self, _GeomEvaluator.new_GeomEvaluator_SurfaceOfExtrusion(*args))
    SetDirection = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_SetDirection)


    @staticmethod
    def DownCast(t):
      return Handle_GeomEvaluator_SurfaceOfExtrusion_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_SurfaceOfExtrusion

# Register GeomEvaluator_SurfaceOfExtrusion in _GeomEvaluator:
_GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_swigregister(GeomEvaluator_SurfaceOfExtrusion)

class GeomEvaluator_SurfaceOfRevolution(GeomEvaluator_Surface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    D0 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_D0)
    D1 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_D1)
    D2 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_D2)
    D3 = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_D3)
    DN = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_DN)

    def __init__(self, *args):
        r"""
        * Initialize evaluator by revolved curve, the axis of revolution and the location
        	:param theBase:
        	:type theBase: Geom_Curve
        	:param theRevolDir:
        	:type theRevolDir: gp_Dir
        	:param theRevolLoc:
        	:type theRevolLoc: gp_Pnt
        	:rtype: None* Initialize evaluator by adaptor of the revolved curve, the axis of revolution and the location
        	:param theBase:
        	:type theBase: Adaptor3d_HCurve
        	:param theRevolDir:
        	:type theRevolDir: gp_Dir
        	:param theRevolLoc:
        	:type theRevolLoc: gp_Pnt
        	:rtype: None
        """
        _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_swiginit(self, _GeomEvaluator.new_GeomEvaluator_SurfaceOfRevolution(*args))
    SetAxis = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_SetAxis)
    SetDirection = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_SetDirection)
    SetLocation = _swig_new_instance_method(_GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_SetLocation)


    @staticmethod
    def DownCast(t):
      return Handle_GeomEvaluator_SurfaceOfRevolution_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_SurfaceOfRevolution

# Register GeomEvaluator_SurfaceOfRevolution in _GeomEvaluator:
_GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_swigregister(GeomEvaluator_SurfaceOfRevolution)



