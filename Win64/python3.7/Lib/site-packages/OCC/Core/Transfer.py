# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Transfer module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_transfer.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Transfer
else:
    import _Transfer

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _Transfer.SWIG_PyInstanceMethod_New
_swig_new_static_method = _Transfer.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Transfer.delete_SwigPyIterator
    value = _swig_new_instance_method(_Transfer.SwigPyIterator_value)
    incr = _swig_new_instance_method(_Transfer.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_Transfer.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_Transfer.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_Transfer.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_Transfer.SwigPyIterator_copy)
    next = _swig_new_instance_method(_Transfer.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_Transfer.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_Transfer.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_Transfer.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_Transfer.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_Transfer.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_Transfer.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_Transfer.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_Transfer.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_Transfer.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Transfer:
_Transfer.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
Transfer_StatusInitial = _Transfer.Transfer_StatusInitial
Transfer_StatusRun = _Transfer.Transfer_StatusRun
Transfer_StatusDone = _Transfer.Transfer_StatusDone
Transfer_StatusError = _Transfer.Transfer_StatusError
Transfer_StatusLoop = _Transfer.Transfer_StatusLoop
Transfer_UndefIgnore = _Transfer.Transfer_UndefIgnore
Transfer_UndefFailure = _Transfer.Transfer_UndefFailure
Transfer_UndefContent = _Transfer.Transfer_UndefContent
Transfer_UndefUser = _Transfer.Transfer_UndefUser
Transfer_StatusVoid = _Transfer.Transfer_StatusVoid
Transfer_StatusDefined = _Transfer.Transfer_StatusDefined
Transfer_StatusUsed = _Transfer.Transfer_StatusUsed
Handle_Transfer_ActorOfProcessForFinder_Create = _Transfer.Handle_Transfer_ActorOfProcessForFinder_Create
Handle_Transfer_ActorOfProcessForFinder_DownCast = _Transfer.Handle_Transfer_ActorOfProcessForFinder_DownCast
Handle_Transfer_ActorOfProcessForFinder_IsNull = _Transfer.Handle_Transfer_ActorOfProcessForFinder_IsNull
Handle_Transfer_ActorOfProcessForTransient_Create = _Transfer.Handle_Transfer_ActorOfProcessForTransient_Create
Handle_Transfer_ActorOfProcessForTransient_DownCast = _Transfer.Handle_Transfer_ActorOfProcessForTransient_DownCast
Handle_Transfer_ActorOfProcessForTransient_IsNull = _Transfer.Handle_Transfer_ActorOfProcessForTransient_IsNull
Handle_Transfer_Binder_Create = _Transfer.Handle_Transfer_Binder_Create
Handle_Transfer_Binder_DownCast = _Transfer.Handle_Transfer_Binder_DownCast
Handle_Transfer_Binder_IsNull = _Transfer.Handle_Transfer_Binder_IsNull
Handle_Transfer_DispatchControl_Create = _Transfer.Handle_Transfer_DispatchControl_Create
Handle_Transfer_DispatchControl_DownCast = _Transfer.Handle_Transfer_DispatchControl_DownCast
Handle_Transfer_DispatchControl_IsNull = _Transfer.Handle_Transfer_DispatchControl_IsNull
Handle_Transfer_Finder_Create = _Transfer.Handle_Transfer_Finder_Create
Handle_Transfer_Finder_DownCast = _Transfer.Handle_Transfer_Finder_DownCast
Handle_Transfer_Finder_IsNull = _Transfer.Handle_Transfer_Finder_IsNull
Handle_Transfer_MapContainer_Create = _Transfer.Handle_Transfer_MapContainer_Create
Handle_Transfer_MapContainer_DownCast = _Transfer.Handle_Transfer_MapContainer_DownCast
Handle_Transfer_MapContainer_IsNull = _Transfer.Handle_Transfer_MapContainer_IsNull
Handle_Transfer_ProcessForTransient_Create = _Transfer.Handle_Transfer_ProcessForTransient_Create
Handle_Transfer_ProcessForTransient_DownCast = _Transfer.Handle_Transfer_ProcessForTransient_DownCast
Handle_Transfer_ProcessForTransient_IsNull = _Transfer.Handle_Transfer_ProcessForTransient_IsNull
Handle_Transfer_ResultFromModel_Create = _Transfer.Handle_Transfer_ResultFromModel_Create
Handle_Transfer_ResultFromModel_DownCast = _Transfer.Handle_Transfer_ResultFromModel_DownCast
Handle_Transfer_ResultFromModel_IsNull = _Transfer.Handle_Transfer_ResultFromModel_IsNull
Handle_Transfer_ResultFromTransient_Create = _Transfer.Handle_Transfer_ResultFromTransient_Create
Handle_Transfer_ResultFromTransient_DownCast = _Transfer.Handle_Transfer_ResultFromTransient_DownCast
Handle_Transfer_ResultFromTransient_IsNull = _Transfer.Handle_Transfer_ResultFromTransient_IsNull
Handle_Transfer_ActorOfFinderProcess_Create = _Transfer.Handle_Transfer_ActorOfFinderProcess_Create
Handle_Transfer_ActorOfFinderProcess_DownCast = _Transfer.Handle_Transfer_ActorOfFinderProcess_DownCast
Handle_Transfer_ActorOfFinderProcess_IsNull = _Transfer.Handle_Transfer_ActorOfFinderProcess_IsNull
Handle_Transfer_ActorOfTransientProcess_Create = _Transfer.Handle_Transfer_ActorOfTransientProcess_Create
Handle_Transfer_ActorOfTransientProcess_DownCast = _Transfer.Handle_Transfer_ActorOfTransientProcess_DownCast
Handle_Transfer_ActorOfTransientProcess_IsNull = _Transfer.Handle_Transfer_ActorOfTransientProcess_IsNull
Handle_Transfer_FinderProcess_Create = _Transfer.Handle_Transfer_FinderProcess_Create
Handle_Transfer_FinderProcess_DownCast = _Transfer.Handle_Transfer_FinderProcess_DownCast
Handle_Transfer_FinderProcess_IsNull = _Transfer.Handle_Transfer_FinderProcess_IsNull
Handle_Transfer_MultipleBinder_Create = _Transfer.Handle_Transfer_MultipleBinder_Create
Handle_Transfer_MultipleBinder_DownCast = _Transfer.Handle_Transfer_MultipleBinder_DownCast
Handle_Transfer_MultipleBinder_IsNull = _Transfer.Handle_Transfer_MultipleBinder_IsNull
Handle_Transfer_SimpleBinderOfTransient_Create = _Transfer.Handle_Transfer_SimpleBinderOfTransient_Create
Handle_Transfer_SimpleBinderOfTransient_DownCast = _Transfer.Handle_Transfer_SimpleBinderOfTransient_DownCast
Handle_Transfer_SimpleBinderOfTransient_IsNull = _Transfer.Handle_Transfer_SimpleBinderOfTransient_IsNull
Handle_Transfer_TransientListBinder_Create = _Transfer.Handle_Transfer_TransientListBinder_Create
Handle_Transfer_TransientListBinder_DownCast = _Transfer.Handle_Transfer_TransientListBinder_DownCast
Handle_Transfer_TransientListBinder_IsNull = _Transfer.Handle_Transfer_TransientListBinder_IsNull
Handle_Transfer_TransientMapper_Create = _Transfer.Handle_Transfer_TransientMapper_Create
Handle_Transfer_TransientMapper_DownCast = _Transfer.Handle_Transfer_TransientMapper_DownCast
Handle_Transfer_TransientMapper_IsNull = _Transfer.Handle_Transfer_TransientMapper_IsNull
Handle_Transfer_TransientProcess_Create = _Transfer.Handle_Transfer_TransientProcess_Create
Handle_Transfer_TransientProcess_DownCast = _Transfer.Handle_Transfer_TransientProcess_DownCast
Handle_Transfer_TransientProcess_IsNull = _Transfer.Handle_Transfer_TransientProcess_IsNull
Handle_Transfer_VoidBinder_Create = _Transfer.Handle_Transfer_VoidBinder_Create
Handle_Transfer_VoidBinder_DownCast = _Transfer.Handle_Transfer_VoidBinder_DownCast
Handle_Transfer_VoidBinder_IsNull = _Transfer.Handle_Transfer_VoidBinder_IsNull
Handle_Transfer_ActorDispatch_Create = _Transfer.Handle_Transfer_ActorDispatch_Create
Handle_Transfer_ActorDispatch_DownCast = _Transfer.Handle_Transfer_ActorDispatch_DownCast
Handle_Transfer_ActorDispatch_IsNull = _Transfer.Handle_Transfer_ActorDispatch_IsNull
Handle_Transfer_BinderOfTransientInteger_Create = _Transfer.Handle_Transfer_BinderOfTransientInteger_Create
Handle_Transfer_BinderOfTransientInteger_DownCast = _Transfer.Handle_Transfer_BinderOfTransientInteger_DownCast
Handle_Transfer_BinderOfTransientInteger_IsNull = _Transfer.Handle_Transfer_BinderOfTransientInteger_IsNull
Handle_Transfer_HSequenceOfBinder_Create = _Transfer.Handle_Transfer_HSequenceOfBinder_Create
Handle_Transfer_HSequenceOfBinder_DownCast = _Transfer.Handle_Transfer_HSequenceOfBinder_DownCast
Handle_Transfer_HSequenceOfBinder_IsNull = _Transfer.Handle_Transfer_HSequenceOfBinder_IsNull
Handle_Transfer_HSequenceOfFinder_Create = _Transfer.Handle_Transfer_HSequenceOfFinder_Create
Handle_Transfer_HSequenceOfFinder_DownCast = _Transfer.Handle_Transfer_HSequenceOfFinder_DownCast
Handle_Transfer_HSequenceOfFinder_IsNull = _Transfer.Handle_Transfer_HSequenceOfFinder_IsNull
class Transfer_TransferMapOfProcessForTransient(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_begin)
    end = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_end)
    cbegin = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_cbegin)
    cend = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_cend)

    def __init__(self, *args):
        _Transfer.Transfer_TransferMapOfProcessForTransient_swiginit(self, _Transfer.new_Transfer_TransferMapOfProcessForTransient(*args))
    Exchange = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_Exchange)
    Assign = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_Assign)
    Set = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_Set)
    ReSize = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_ReSize)
    Add = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_Add)
    Contains = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_Contains)
    Substitute = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_Substitute)
    Swap = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_Swap)
    RemoveLast = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_RemoveLast)
    RemoveFromIndex = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_RemoveFromIndex)
    RemoveKey = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_RemoveKey)
    FindKey = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_FindKey)
    FindFromIndex = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_FindFromIndex)
    ChangeFromIndex = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_ChangeFromIndex)
    __call__ = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient___call__)
    FindIndex = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_FindIndex)
    ChangeFromKey = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_ChangeFromKey)
    Seek = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_Seek)
    ChangeSeek = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_ChangeSeek)
    FindFromKey = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_FindFromKey)
    Clear = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_Clear)
    __swig_destroy__ = _Transfer.delete_Transfer_TransferMapOfProcessForTransient
    Size = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForTransient_Size)

# Register Transfer_TransferMapOfProcessForTransient in _Transfer:
_Transfer.Transfer_TransferMapOfProcessForTransient_swigregister(Transfer_TransferMapOfProcessForTransient)

class Transfer_SequenceOfBinder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_begin)
    end = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_end)
    cbegin = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_cbegin)
    cend = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_cend)

    def __init__(self, *args):
        _Transfer.Transfer_SequenceOfBinder_swiginit(self, _Transfer.new_Transfer_SequenceOfBinder(*args))
    Size = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_Size)
    Length = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_Length)
    Lower = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_Lower)
    Upper = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_Upper)
    IsEmpty = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_IsEmpty)
    Reverse = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_Reverse)
    Exchange = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_Exchange)
    delNode = _swig_new_static_method(_Transfer.Transfer_SequenceOfBinder_delNode)
    Clear = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_Clear)
    Assign = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_Assign)
    Set = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_Set)
    Remove = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_Remove)
    Append = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_Append)
    Prepend = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_Prepend)
    InsertBefore = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_InsertBefore)
    InsertAfter = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_InsertAfter)
    Split = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_Split)
    First = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_First)
    ChangeFirst = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_ChangeFirst)
    Last = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_Last)
    ChangeLast = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_ChangeLast)
    Value = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_Value)
    ChangeValue = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_ChangeValue)
    __call__ = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder___call__)
    SetValue = _swig_new_instance_method(_Transfer.Transfer_SequenceOfBinder_SetValue)
    __swig_destroy__ = _Transfer.delete_Transfer_SequenceOfBinder

# Register Transfer_SequenceOfBinder in _Transfer:
_Transfer.Transfer_SequenceOfBinder_swigregister(Transfer_SequenceOfBinder)
Transfer_SequenceOfBinder_delNode = _Transfer.Transfer_SequenceOfBinder_delNode

class Transfer_SequenceOfFinder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_begin)
    end = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_end)
    cbegin = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_cbegin)
    cend = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_cend)

    def __init__(self, *args):
        _Transfer.Transfer_SequenceOfFinder_swiginit(self, _Transfer.new_Transfer_SequenceOfFinder(*args))
    Size = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_Size)
    Length = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_Length)
    Lower = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_Lower)
    Upper = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_Upper)
    IsEmpty = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_IsEmpty)
    Reverse = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_Reverse)
    Exchange = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_Exchange)
    delNode = _swig_new_static_method(_Transfer.Transfer_SequenceOfFinder_delNode)
    Clear = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_Clear)
    Assign = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_Assign)
    Set = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_Set)
    Remove = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_Remove)
    Append = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_Append)
    Prepend = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_Prepend)
    InsertBefore = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_InsertBefore)
    InsertAfter = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_InsertAfter)
    Split = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_Split)
    First = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_First)
    ChangeFirst = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_ChangeFirst)
    Last = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_Last)
    ChangeLast = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_ChangeLast)
    Value = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_Value)
    ChangeValue = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_ChangeValue)
    __call__ = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder___call__)
    SetValue = _swig_new_instance_method(_Transfer.Transfer_SequenceOfFinder_SetValue)
    __swig_destroy__ = _Transfer.delete_Transfer_SequenceOfFinder

# Register Transfer_SequenceOfFinder in _Transfer:
_Transfer.Transfer_SequenceOfFinder_swigregister(Transfer_SequenceOfFinder)
Transfer_SequenceOfFinder_delNode = _Transfer.Transfer_SequenceOfFinder_delNode

class Transfer_TransferMapOfProcessForFinder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_begin)
    end = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_end)
    cbegin = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_cbegin)
    cend = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_cend)

    def __init__(self, *args):
        _Transfer.Transfer_TransferMapOfProcessForFinder_swiginit(self, _Transfer.new_Transfer_TransferMapOfProcessForFinder(*args))
    Exchange = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_Exchange)
    Assign = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_Assign)
    Set = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_Set)
    ReSize = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_ReSize)
    Add = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_Add)
    Contains = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_Contains)
    Substitute = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_Substitute)
    Swap = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_Swap)
    RemoveLast = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_RemoveLast)
    RemoveFromIndex = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_RemoveFromIndex)
    RemoveKey = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_RemoveKey)
    FindKey = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_FindKey)
    FindFromIndex = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_FindFromIndex)
    ChangeFromIndex = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_ChangeFromIndex)
    __call__ = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder___call__)
    FindIndex = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_FindIndex)
    ChangeFromKey = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_ChangeFromKey)
    Seek = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_Seek)
    ChangeSeek = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_ChangeSeek)
    FindFromKey = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_FindFromKey)
    Clear = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_Clear)
    __swig_destroy__ = _Transfer.delete_Transfer_TransferMapOfProcessForFinder
    Size = _swig_new_instance_method(_Transfer.Transfer_TransferMapOfProcessForFinder_Size)

# Register Transfer_TransferMapOfProcessForFinder in _Transfer:
_Transfer.Transfer_TransferMapOfProcessForFinder_swigregister(Transfer_TransferMapOfProcessForFinder)

class Transfer_ActorOfProcessForFinder(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IsLast = _swig_new_instance_method(_Transfer.Transfer_ActorOfProcessForFinder_IsLast)
    Next = _swig_new_instance_method(_Transfer.Transfer_ActorOfProcessForFinder_Next)
    NullResult = _swig_new_instance_method(_Transfer.Transfer_ActorOfProcessForFinder_NullResult)
    Recognize = _swig_new_instance_method(_Transfer.Transfer_ActorOfProcessForFinder_Recognize)
    SetLast = _swig_new_instance_method(_Transfer.Transfer_ActorOfProcessForFinder_SetLast)
    SetNext = _swig_new_instance_method(_Transfer.Transfer_ActorOfProcessForFinder_SetNext)

    def __init__(self, *args):
        r""":rtype: None"""
        _Transfer.Transfer_ActorOfProcessForFinder_swiginit(self, _Transfer.new_Transfer_ActorOfProcessForFinder(*args))
    Transferring = _swig_new_instance_method(_Transfer.Transfer_ActorOfProcessForFinder_Transferring)
    TransientResult = _swig_new_instance_method(_Transfer.Transfer_ActorOfProcessForFinder_TransientResult)


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_ActorOfProcessForFinder_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_ActorOfProcessForFinder

# Register Transfer_ActorOfProcessForFinder in _Transfer:
_Transfer.Transfer_ActorOfProcessForFinder_swigregister(Transfer_ActorOfProcessForFinder)

class Transfer_ActorOfProcessForTransient(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IsLast = _swig_new_instance_method(_Transfer.Transfer_ActorOfProcessForTransient_IsLast)
    Next = _swig_new_instance_method(_Transfer.Transfer_ActorOfProcessForTransient_Next)
    NullResult = _swig_new_instance_method(_Transfer.Transfer_ActorOfProcessForTransient_NullResult)
    Recognize = _swig_new_instance_method(_Transfer.Transfer_ActorOfProcessForTransient_Recognize)
    SetLast = _swig_new_instance_method(_Transfer.Transfer_ActorOfProcessForTransient_SetLast)
    SetNext = _swig_new_instance_method(_Transfer.Transfer_ActorOfProcessForTransient_SetNext)

    def __init__(self, *args):
        r""":rtype: None"""
        _Transfer.Transfer_ActorOfProcessForTransient_swiginit(self, _Transfer.new_Transfer_ActorOfProcessForTransient(*args))
    Transferring = _swig_new_instance_method(_Transfer.Transfer_ActorOfProcessForTransient_Transferring)
    TransientResult = _swig_new_instance_method(_Transfer.Transfer_ActorOfProcessForTransient_TransientResult)


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_ActorOfProcessForTransient_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_ActorOfProcessForTransient

# Register Transfer_ActorOfProcessForTransient in _Transfer:
_Transfer.Transfer_ActorOfProcessForTransient_swigregister(Transfer_ActorOfProcessForTransient)

class Transfer_Binder(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    AddFail = _swig_new_instance_method(_Transfer.Transfer_Binder_AddFail)
    AddResult = _swig_new_instance_method(_Transfer.Transfer_Binder_AddResult)
    AddWarning = _swig_new_instance_method(_Transfer.Transfer_Binder_AddWarning)
    CCheck = _swig_new_instance_method(_Transfer.Transfer_Binder_CCheck)
    Check = _swig_new_instance_method(_Transfer.Transfer_Binder_Check)
    HasResult = _swig_new_instance_method(_Transfer.Transfer_Binder_HasResult)
    IsMultiple = _swig_new_instance_method(_Transfer.Transfer_Binder_IsMultiple)
    Merge = _swig_new_instance_method(_Transfer.Transfer_Binder_Merge)
    NextResult = _swig_new_instance_method(_Transfer.Transfer_Binder_NextResult)
    ResultType = _swig_new_instance_method(_Transfer.Transfer_Binder_ResultType)
    ResultTypeName = _swig_new_instance_method(_Transfer.Transfer_Binder_ResultTypeName)
    SetAlreadyUsed = _swig_new_instance_method(_Transfer.Transfer_Binder_SetAlreadyUsed)
    SetStatusExec = _swig_new_instance_method(_Transfer.Transfer_Binder_SetStatusExec)
    Status = _swig_new_instance_method(_Transfer.Transfer_Binder_Status)
    StatusExec = _swig_new_instance_method(_Transfer.Transfer_Binder_StatusExec)


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_Binder_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_Binder

# Register Transfer_Binder in _Transfer:
_Transfer.Transfer_Binder_swigregister(Transfer_Binder)

class Transfer_DataInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Type = _swig_new_static_method(_Transfer.Transfer_DataInfo_Type)
    TypeName = _swig_new_static_method(_Transfer.Transfer_DataInfo_TypeName)

    __repr__ = _dumps_object


    def __init__(self):
        _Transfer.Transfer_DataInfo_swiginit(self, _Transfer.new_Transfer_DataInfo())
    __swig_destroy__ = _Transfer.delete_Transfer_DataInfo

# Register Transfer_DataInfo in _Transfer:
_Transfer.Transfer_DataInfo_swigregister(Transfer_DataInfo)
Transfer_DataInfo_Type = _Transfer.Transfer_DataInfo_Type
Transfer_DataInfo_TypeName = _Transfer.Transfer_DataInfo_TypeName

class Transfer_DispatchControl(OCC.Core.Interface.Interface_CopyControl):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    StartingModel = _swig_new_instance_method(_Transfer.Transfer_DispatchControl_StartingModel)

    def __init__(self, *args):
        r"""
        * Creates the DispatchControl, ready for use
        	:param model:
        	:type model: Interface_InterfaceModel
        	:param TP:
        	:type TP: Transfer_TransientProcess
        	:rtype: None
        """
        _Transfer.Transfer_DispatchControl_swiginit(self, _Transfer.new_Transfer_DispatchControl(*args))
    TransientProcess = _swig_new_instance_method(_Transfer.Transfer_DispatchControl_TransientProcess)


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_DispatchControl_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_DispatchControl

# Register Transfer_DispatchControl in _Transfer:
_Transfer.Transfer_DispatchControl_swigregister(Transfer_DispatchControl)

class Transfer_FindHasher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HashCode = _swig_new_static_method(_Transfer.Transfer_FindHasher_HashCode)
    IsEqual = _swig_new_static_method(_Transfer.Transfer_FindHasher_IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        _Transfer.Transfer_FindHasher_swiginit(self, _Transfer.new_Transfer_FindHasher())
    __swig_destroy__ = _Transfer.delete_Transfer_FindHasher

# Register Transfer_FindHasher in _Transfer:
_Transfer.Transfer_FindHasher_swigregister(Transfer_FindHasher)
Transfer_FindHasher_HashCode = _Transfer.Transfer_FindHasher_HashCode
Transfer_FindHasher_IsEqual = _Transfer.Transfer_FindHasher_IsEqual

class Transfer_Finder(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    AttrList = _swig_new_instance_method(_Transfer.Transfer_Finder_AttrList)
    Attribute = _swig_new_instance_method(_Transfer.Transfer_Finder_Attribute)
    AttributeType = _swig_new_instance_method(_Transfer.Transfer_Finder_AttributeType)
    Equates = _swig_new_instance_method(_Transfer.Transfer_Finder_Equates)
    GetAttribute = _swig_new_instance_method(_Transfer.Transfer_Finder_GetAttribute)
    GetAttributes = _swig_new_instance_method(_Transfer.Transfer_Finder_GetAttributes)
    GetHashCode = _swig_new_instance_method(_Transfer.Transfer_Finder_GetHashCode)
    GetIntegerAttribute = _swig_new_instance_method(_Transfer.Transfer_Finder_GetIntegerAttribute)
    GetRealAttribute = _swig_new_instance_method(_Transfer.Transfer_Finder_GetRealAttribute)
    GetStringAttribute = _swig_new_instance_method(_Transfer.Transfer_Finder_GetStringAttribute)
    IntegerAttribute = _swig_new_instance_method(_Transfer.Transfer_Finder_IntegerAttribute)
    RealAttribute = _swig_new_instance_method(_Transfer.Transfer_Finder_RealAttribute)
    RemoveAttribute = _swig_new_instance_method(_Transfer.Transfer_Finder_RemoveAttribute)
    SameAttributes = _swig_new_instance_method(_Transfer.Transfer_Finder_SameAttributes)
    SetAttribute = _swig_new_instance_method(_Transfer.Transfer_Finder_SetAttribute)
    SetIntegerAttribute = _swig_new_instance_method(_Transfer.Transfer_Finder_SetIntegerAttribute)
    SetRealAttribute = _swig_new_instance_method(_Transfer.Transfer_Finder_SetRealAttribute)
    SetStringAttribute = _swig_new_instance_method(_Transfer.Transfer_Finder_SetStringAttribute)
    StringAttribute = _swig_new_instance_method(_Transfer.Transfer_Finder_StringAttribute)
    ValueType = _swig_new_instance_method(_Transfer.Transfer_Finder_ValueType)
    ValueTypeName = _swig_new_instance_method(_Transfer.Transfer_Finder_ValueTypeName)


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_Finder_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_Finder

# Register Transfer_Finder in _Transfer:
_Transfer.Transfer_Finder_swigregister(Transfer_Finder)

class Transfer_MapContainer(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GetMapObjects = _swig_new_instance_method(_Transfer.Transfer_MapContainer_GetMapObjects)
    SetMapObjects = _swig_new_instance_method(_Transfer.Transfer_MapContainer_SetMapObjects)

    def __init__(self, *args):
        r""":rtype: None"""
        _Transfer.Transfer_MapContainer_swiginit(self, _Transfer.new_Transfer_MapContainer(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_MapContainer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_MapContainer

# Register Transfer_MapContainer in _Transfer:
_Transfer.Transfer_MapContainer_swigregister(Transfer_MapContainer)

class Transfer_ProcessForTransient(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AbnormalResult = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_AbnormalResult)
    Actor = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_Actor)
    AddError = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_AddError)
    AddFail = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_AddFail)
    AddMultiple = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_AddMultiple)
    AddWarning = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_AddWarning)
    Bind = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_Bind)
    BindMultiple = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_BindMultiple)
    BindTransient = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_BindTransient)
    Check = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_Check)
    CheckList = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_CheckList)
    CheckListOne = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_CheckListOne)
    CheckNum = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_CheckNum)
    Clean = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_Clean)
    Clear = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_Clear)
    CompleteResult = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_CompleteResult)
    Find = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_Find)
    FindElseBind = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_FindElseBind)
    FindTransient = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_FindTransient)
    FindTypedTransient = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_FindTypedTransient)
    GetProgress = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_GetProgress)
    GetTypedTransient = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_GetTypedTransient)
    IsAlreadyUsed = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_IsAlreadyUsed)
    IsBound = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_IsBound)
    IsCheckListEmpty = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_IsCheckListEmpty)
    IsLooping = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_IsLooping)
    MapIndex = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_MapIndex)
    MapItem = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_MapItem)
    Mapped = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_Mapped)
    Mend = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_Mend)
    Messenger = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_Messenger)
    NbMapped = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_NbMapped)
    NbRoots = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_NbRoots)
    NestingLevel = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_NestingLevel)
    PrintTrace = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_PrintTrace)
    Rebind = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_Rebind)
    Recognize = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_Recognize)
    RemoveResult = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_RemoveResult)
    ResetNestingLevel = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_ResetNestingLevel)
    Resize = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_Resize)
    ResultOne = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_ResultOne)
    Root = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_Root)
    RootIndex = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_RootIndex)
    RootItem = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_RootItem)
    RootResult = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_RootResult)
    SendFail = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_SendFail)
    SendMsg = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_SendMsg)
    SendWarning = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_SendWarning)
    SetActor = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_SetActor)
    SetMessenger = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_SetMessenger)
    SetProgress = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_SetProgress)
    SetRoot = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_SetRoot)
    SetRootManagement = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_SetRootManagement)
    SetTraceLevel = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_SetTraceLevel)
    StartTrace = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_StartTrace)
    TraceLevel = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_TraceLevel)
    Transfer = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_Transfer)

    def __init__(self, *args):
        r"""
        * Sets TransferProcess at initial state. Gives an Initial size (indicative) for the Map when known (default is 10000). Sets default trace file as a printer and default trace level (see Message_TraceFile).
        	:param nb: default value is 10000
        	:type nb: int
        	:rtype: None* Sets TransferProcess at initial state. Gives an Initial size (indicative) for the Map when known (default is 10000). Sets a specified printer.
        	:param printer:
        	:type printer: Message_Messenger
        	:param nb: default value is 10000
        	:type nb: int
        	:rtype: None
        """
        _Transfer.Transfer_ProcessForTransient_swiginit(self, _Transfer.new_Transfer_ProcessForTransient(*args))
    Transferring = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_Transferring)
    Unbind = _swig_new_instance_method(_Transfer.Transfer_ProcessForTransient_Unbind)


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_ProcessForTransient_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_ProcessForTransient

# Register Transfer_ProcessForTransient in _Transfer:
_Transfer.Transfer_ProcessForTransient_swigregister(Transfer_ProcessForTransient)

class Transfer_ResultFromModel(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CheckList = _swig_new_instance_method(_Transfer.Transfer_ResultFromModel_CheckList)
    CheckStatus = _swig_new_instance_method(_Transfer.Transfer_ResultFromModel_CheckStatus)
    CheckedList = _swig_new_instance_method(_Transfer.Transfer_ResultFromModel_CheckedList)
    ComputeCheckStatus = _swig_new_instance_method(_Transfer.Transfer_ResultFromModel_ComputeCheckStatus)
    FileName = _swig_new_instance_method(_Transfer.Transfer_ResultFromModel_FileName)
    Fill = _swig_new_instance_method(_Transfer.Transfer_ResultFromModel_Fill)
    FillBack = _swig_new_instance_method(_Transfer.Transfer_ResultFromModel_FillBack)
    HasResult = _swig_new_instance_method(_Transfer.Transfer_ResultFromModel_HasResult)
    MainLabel = _swig_new_instance_method(_Transfer.Transfer_ResultFromModel_MainLabel)
    MainNumber = _swig_new_instance_method(_Transfer.Transfer_ResultFromModel_MainNumber)
    MainResult = _swig_new_instance_method(_Transfer.Transfer_ResultFromModel_MainResult)
    Model = _swig_new_instance_method(_Transfer.Transfer_ResultFromModel_Model)
    ResultFromKey = _swig_new_instance_method(_Transfer.Transfer_ResultFromModel_ResultFromKey)
    Results = _swig_new_instance_method(_Transfer.Transfer_ResultFromModel_Results)
    SetFileName = _swig_new_instance_method(_Transfer.Transfer_ResultFromModel_SetFileName)
    SetMainResult = _swig_new_instance_method(_Transfer.Transfer_ResultFromModel_SetMainResult)
    SetModel = _swig_new_instance_method(_Transfer.Transfer_ResultFromModel_SetModel)
    Strip = _swig_new_instance_method(_Transfer.Transfer_ResultFromModel_Strip)

    def __init__(self, *args):
        r"""
        * Creates a ResultFromModel, empty
        	:rtype: None
        """
        _Transfer.Transfer_ResultFromModel_swiginit(self, _Transfer.new_Transfer_ResultFromModel(*args))
    TransferredList = _swig_new_instance_method(_Transfer.Transfer_ResultFromModel_TransferredList)


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_ResultFromModel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_ResultFromModel

# Register Transfer_ResultFromModel in _Transfer:
_Transfer.Transfer_ResultFromModel_swigregister(Transfer_ResultFromModel)

class Transfer_ResultFromTransient(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddSubResult = _swig_new_instance_method(_Transfer.Transfer_ResultFromTransient_AddSubResult)
    Binder = _swig_new_instance_method(_Transfer.Transfer_ResultFromTransient_Binder)
    Check = _swig_new_instance_method(_Transfer.Transfer_ResultFromTransient_Check)
    CheckStatus = _swig_new_instance_method(_Transfer.Transfer_ResultFromTransient_CheckStatus)
    ClearSubs = _swig_new_instance_method(_Transfer.Transfer_ResultFromTransient_ClearSubs)
    Fill = _swig_new_instance_method(_Transfer.Transfer_ResultFromTransient_Fill)
    FillBack = _swig_new_instance_method(_Transfer.Transfer_ResultFromTransient_FillBack)
    FillMap = _swig_new_instance_method(_Transfer.Transfer_ResultFromTransient_FillMap)
    HasResult = _swig_new_instance_method(_Transfer.Transfer_ResultFromTransient_HasResult)
    NbSubResults = _swig_new_instance_method(_Transfer.Transfer_ResultFromTransient_NbSubResults)
    ResultFromKey = _swig_new_instance_method(_Transfer.Transfer_ResultFromTransient_ResultFromKey)
    SetBinder = _swig_new_instance_method(_Transfer.Transfer_ResultFromTransient_SetBinder)
    SetStart = _swig_new_instance_method(_Transfer.Transfer_ResultFromTransient_SetStart)
    Start = _swig_new_instance_method(_Transfer.Transfer_ResultFromTransient_Start)
    Strip = _swig_new_instance_method(_Transfer.Transfer_ResultFromTransient_Strip)
    SubResult = _swig_new_instance_method(_Transfer.Transfer_ResultFromTransient_SubResult)

    def __init__(self, *args):
        r"""
        * Creates a ResultFromTransient, empty
        	:rtype: None
        """
        _Transfer.Transfer_ResultFromTransient_swiginit(self, _Transfer.new_Transfer_ResultFromTransient(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_ResultFromTransient_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_ResultFromTransient

# Register Transfer_ResultFromTransient in _Transfer:
_Transfer.Transfer_ResultFromTransient_swigregister(Transfer_ResultFromTransient)

class Transfer_TransferDispatch(OCC.Core.Interface.Interface_CopyTool):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates a TransferDispatch from a Model. Works with a General Service Library, given as an Argument A TransferDispatch is created as a CopyTool in which the Control is set to TransientProcess
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param lib:
        	:type lib: Interface_GeneralLib
        	:rtype: None* Same as above, but Library is defined through a Protocol
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param protocol:
        	:type protocol: Interface_Protocol
        	:rtype: None* Same as above, but works with the Active Protocol
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:rtype: None
        """
        _Transfer.Transfer_TransferDispatch_swiginit(self, _Transfer.new_Transfer_TransferDispatch(*args))
    TransientProcess = _swig_new_instance_method(_Transfer.Transfer_TransferDispatch_TransientProcess)

    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_TransferDispatch

# Register Transfer_TransferDispatch in _Transfer:
_Transfer.Transfer_TransferDispatch_swigregister(Transfer_TransferDispatch)

class Transfer_TransferInput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Entities = _swig_new_instance_method(_Transfer.Transfer_TransferInput_Entities)
    FillModel = _swig_new_instance_method(_Transfer.Transfer_TransferInput_FillModel)

    def __init__(self, *args):
        r"""
        * Creates a TransferInput ready to use
        	:rtype: None
        """
        _Transfer.Transfer_TransferInput_swiginit(self, _Transfer.new_Transfer_TransferInput(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_TransferInput

# Register Transfer_TransferInput in _Transfer:
_Transfer.Transfer_TransferInput_swigregister(Transfer_TransferInput)

class Transfer_TransferIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddItem = _swig_new_instance_method(_Transfer.Transfer_TransferIterator_AddItem)
    Check = _swig_new_instance_method(_Transfer.Transfer_TransferIterator_Check)
    HasFails = _swig_new_instance_method(_Transfer.Transfer_TransferIterator_HasFails)
    HasResult = _swig_new_instance_method(_Transfer.Transfer_TransferIterator_HasResult)
    HasTransientResult = _swig_new_instance_method(_Transfer.Transfer_TransferIterator_HasTransientResult)
    HasUniqueResult = _swig_new_instance_method(_Transfer.Transfer_TransferIterator_HasUniqueResult)
    HasWarnings = _swig_new_instance_method(_Transfer.Transfer_TransferIterator_HasWarnings)
    More = _swig_new_instance_method(_Transfer.Transfer_TransferIterator_More)
    Next = _swig_new_instance_method(_Transfer.Transfer_TransferIterator_Next)
    Number = _swig_new_instance_method(_Transfer.Transfer_TransferIterator_Number)
    ResultType = _swig_new_instance_method(_Transfer.Transfer_TransferIterator_ResultType)
    SelectBinder = _swig_new_instance_method(_Transfer.Transfer_TransferIterator_SelectBinder)
    SelectItem = _swig_new_instance_method(_Transfer.Transfer_TransferIterator_SelectItem)
    SelectResult = _swig_new_instance_method(_Transfer.Transfer_TransferIterator_SelectResult)
    SelectUnique = _swig_new_instance_method(_Transfer.Transfer_TransferIterator_SelectUnique)
    Start = _swig_new_instance_method(_Transfer.Transfer_TransferIterator_Start)
    Status = _swig_new_instance_method(_Transfer.Transfer_TransferIterator_Status)

    def __init__(self, *args):
        r"""
        * Creates an empty Iterator
        	:rtype: None
        """
        _Transfer.Transfer_TransferIterator_swiginit(self, _Transfer.new_Transfer_TransferIterator(*args))
    TransientResult = _swig_new_instance_method(_Transfer.Transfer_TransferIterator_TransientResult)
    Value = _swig_new_instance_method(_Transfer.Transfer_TransferIterator_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_TransferIterator

# Register Transfer_TransferIterator in _Transfer:
_Transfer.Transfer_TransferIterator_swigregister(Transfer_TransferIterator)

class Transfer_TransferOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ListForStatus = _swig_new_instance_method(_Transfer.Transfer_TransferOutput_ListForStatus)
    Model = _swig_new_instance_method(_Transfer.Transfer_TransferOutput_Model)
    ModelForStatus = _swig_new_instance_method(_Transfer.Transfer_TransferOutput_ModelForStatus)
    Transfer = _swig_new_instance_method(_Transfer.Transfer_TransferOutput_Transfer)
    TransferRoots = _swig_new_instance_method(_Transfer.Transfer_TransferOutput_TransferRoots)

    def __init__(self, *args):
        r"""
        * Creates a TransferOutput ready to use, with a TransientProcess
        	:param actor:
        	:type actor: Transfer_ActorOfTransientProcess
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:rtype: None* Creates a TransferOutput from an already existing TransientProcess, and a Model Returns (by Reference, hence can be changed) the Mode for Scope Management. False (D) means Scope is ignored. True means that each individual Transfer (direct or through TransferRoots) is regarded as one Scope
        	:param proc:
        	:type proc: Transfer_TransientProcess
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:rtype: None
        """
        _Transfer.Transfer_TransferOutput_swiginit(self, _Transfer.new_Transfer_TransferOutput(*args))
    TransientProcess = _swig_new_instance_method(_Transfer.Transfer_TransferOutput_TransientProcess)

    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_TransferOutput

# Register Transfer_TransferOutput in _Transfer:
_Transfer.Transfer_TransferOutput_swigregister(Transfer_TransferOutput)

class Transfer_ActorOfFinderProcess(Transfer_ActorOfProcessForFinder):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GetModeTrans = _swig_new_instance_method(_Transfer.Transfer_ActorOfFinderProcess_GetModeTrans)
    SetModeTrans = _swig_new_instance_method(_Transfer.Transfer_ActorOfFinderProcess_SetModeTrans)
    Transfer = _swig_new_instance_method(_Transfer.Transfer_ActorOfFinderProcess_Transfer)
    TransferTransient = _swig_new_instance_method(_Transfer.Transfer_ActorOfFinderProcess_TransferTransient)

    def __init__(self, *args):
        r""":rtype: None"""
        _Transfer.Transfer_ActorOfFinderProcess_swiginit(self, _Transfer.new_Transfer_ActorOfFinderProcess(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_ActorOfFinderProcess_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_ActorOfFinderProcess

# Register Transfer_ActorOfFinderProcess in _Transfer:
_Transfer.Transfer_ActorOfFinderProcess_swigregister(Transfer_ActorOfFinderProcess)

class Transfer_ActorOfTransientProcess(Transfer_ActorOfProcessForTransient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Transfer = _swig_new_instance_method(_Transfer.Transfer_ActorOfTransientProcess_Transfer)
    TransferTransient = _swig_new_instance_method(_Transfer.Transfer_ActorOfTransientProcess_TransferTransient)

    def __init__(self, *args):
        r""":rtype: None"""
        _Transfer.Transfer_ActorOfTransientProcess_swiginit(self, _Transfer.new_Transfer_ActorOfTransientProcess(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_ActorOfTransientProcess_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_ActorOfTransientProcess

# Register Transfer_ActorOfTransientProcess in _Transfer:
_Transfer.Transfer_ActorOfTransientProcess_swigregister(Transfer_ActorOfTransientProcess)

class Transfer_FinderProcess(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Model = _swig_new_instance_method(_Transfer.Transfer_FinderProcess_Model)
    NextMappedWithAttribute = _swig_new_instance_method(_Transfer.Transfer_FinderProcess_NextMappedWithAttribute)
    PrintStats = _swig_new_instance_method(_Transfer.Transfer_FinderProcess_PrintStats)
    PrintTrace = _swig_new_instance_method(_Transfer.Transfer_FinderProcess_PrintTrace)
    SetModel = _swig_new_instance_method(_Transfer.Transfer_FinderProcess_SetModel)

    def __init__(self, *args):
        r"""
        * Sets FinderProcess at initial state, with an initial size
        	:param nb: default value is 10000
        	:type nb: int
        	:rtype: None
        """
        _Transfer.Transfer_FinderProcess_swiginit(self, _Transfer.new_Transfer_FinderProcess(*args))
    TransientMapper = _swig_new_instance_method(_Transfer.Transfer_FinderProcess_TransientMapper)


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_FinderProcess_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_FinderProcess

# Register Transfer_FinderProcess in _Transfer:
_Transfer.Transfer_FinderProcess_swigregister(Transfer_FinderProcess)

class Transfer_IteratorOfProcessForFinder(Transfer_TransferIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_Transfer.Transfer_IteratorOfProcessForFinder_Add)
    Filter = _swig_new_instance_method(_Transfer.Transfer_IteratorOfProcessForFinder_Filter)
    HasStarting = _swig_new_instance_method(_Transfer.Transfer_IteratorOfProcessForFinder_HasStarting)
    Starting = _swig_new_instance_method(_Transfer.Transfer_IteratorOfProcessForFinder_Starting)

    def __init__(self, *args):
        r"""
        * Creates an empty Iterator if withstarts is True, each Binder to be iterated will be associated to its corresponding Starting Object
        	:param withstarts:
        	:type withstarts: bool
        	:rtype: None
        """
        _Transfer.Transfer_IteratorOfProcessForFinder_swiginit(self, _Transfer.new_Transfer_IteratorOfProcessForFinder(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_IteratorOfProcessForFinder

# Register Transfer_IteratorOfProcessForFinder in _Transfer:
_Transfer.Transfer_IteratorOfProcessForFinder_swigregister(Transfer_IteratorOfProcessForFinder)

class Transfer_IteratorOfProcessForTransient(Transfer_TransferIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_Transfer.Transfer_IteratorOfProcessForTransient_Add)
    Filter = _swig_new_instance_method(_Transfer.Transfer_IteratorOfProcessForTransient_Filter)
    HasStarting = _swig_new_instance_method(_Transfer.Transfer_IteratorOfProcessForTransient_HasStarting)
    Starting = _swig_new_instance_method(_Transfer.Transfer_IteratorOfProcessForTransient_Starting)

    def __init__(self, *args):
        r"""
        * Creates an empty Iterator if withstarts is True, each Binder to be iterated will be associated to its corresponding Starting Object
        	:param withstarts:
        	:type withstarts: bool
        	:rtype: None
        """
        _Transfer.Transfer_IteratorOfProcessForTransient_swiginit(self, _Transfer.new_Transfer_IteratorOfProcessForTransient(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_IteratorOfProcessForTransient

# Register Transfer_IteratorOfProcessForTransient in _Transfer:
_Transfer.Transfer_IteratorOfProcessForTransient_swigregister(Transfer_IteratorOfProcessForTransient)

class Transfer_MultipleBinder(Transfer_Binder):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddResult = _swig_new_instance_method(_Transfer.Transfer_MultipleBinder_AddResult)
    MultipleResult = _swig_new_instance_method(_Transfer.Transfer_MultipleBinder_MultipleResult)
    NbResults = _swig_new_instance_method(_Transfer.Transfer_MultipleBinder_NbResults)
    ResultValue = _swig_new_instance_method(_Transfer.Transfer_MultipleBinder_ResultValue)
    SetMultipleResult = _swig_new_instance_method(_Transfer.Transfer_MultipleBinder_SetMultipleResult)

    def __init__(self, *args):
        r"""
        * normal standard constructor, creates an empty MultipleBinder
        	:rtype: None
        """
        _Transfer.Transfer_MultipleBinder_swiginit(self, _Transfer.new_Transfer_MultipleBinder(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_MultipleBinder_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_MultipleBinder

# Register Transfer_MultipleBinder in _Transfer:
_Transfer.Transfer_MultipleBinder_swigregister(Transfer_MultipleBinder)

class Transfer_SimpleBinderOfTransient(Transfer_Binder):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GetTypedResult = _swig_new_static_method(_Transfer.Transfer_SimpleBinderOfTransient_GetTypedResult)
    Result = _swig_new_instance_method(_Transfer.Transfer_SimpleBinderOfTransient_Result)
    SetResult = _swig_new_instance_method(_Transfer.Transfer_SimpleBinderOfTransient_SetResult)

    def __init__(self, *args):
        r"""
        * Creates an empty SimpleBinderOfTransient Returns True if a starting object is bound with SEVERAL results : Here, returns allways False See Binder itself
        	:rtype: None
        """
        _Transfer.Transfer_SimpleBinderOfTransient_swiginit(self, _Transfer.new_Transfer_SimpleBinderOfTransient(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_SimpleBinderOfTransient_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_SimpleBinderOfTransient

# Register Transfer_SimpleBinderOfTransient in _Transfer:
_Transfer.Transfer_SimpleBinderOfTransient_swigregister(Transfer_SimpleBinderOfTransient)
Transfer_SimpleBinderOfTransient_GetTypedResult = _Transfer.Transfer_SimpleBinderOfTransient_GetTypedResult

class Transfer_TransientListBinder(Transfer_Binder):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddResult = _swig_new_instance_method(_Transfer.Transfer_TransientListBinder_AddResult)
    NbTransients = _swig_new_instance_method(_Transfer.Transfer_TransientListBinder_NbTransients)
    Result = _swig_new_instance_method(_Transfer.Transfer_TransientListBinder_Result)
    SetResult = _swig_new_instance_method(_Transfer.Transfer_TransientListBinder_SetResult)

    def __init__(self, *args):
        r"""
        :rtype: None:param list:
        	:type list: TColStd_HSequenceOfTransient
        	:rtype: None
        """
        _Transfer.Transfer_TransientListBinder_swiginit(self, _Transfer.new_Transfer_TransientListBinder(*args))
    Transient = _swig_new_instance_method(_Transfer.Transfer_TransientListBinder_Transient)


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_TransientListBinder_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_TransientListBinder

# Register Transfer_TransientListBinder in _Transfer:
_Transfer.Transfer_TransientListBinder_swigregister(Transfer_TransientListBinder)

class Transfer_TransientMapper(Transfer_Finder):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates a Mapper with a Value. This Value can then not be changed. It is used by the Hasher to compute the HashCode, which will then be stored for an immediate reading.
        	:param akey:
        	:type akey: Standard_Transient
        	:rtype: None
        """
        _Transfer.Transfer_TransientMapper_swiginit(self, _Transfer.new_Transfer_TransientMapper(*args))
    Value = _swig_new_instance_method(_Transfer.Transfer_TransientMapper_Value)


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_TransientMapper_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_TransientMapper

# Register Transfer_TransientMapper in _Transfer:
_Transfer.Transfer_TransientMapper_swigregister(Transfer_TransientMapper)

class Transfer_TransientProcess(Transfer_ProcessForTransient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Context = _swig_new_instance_method(_Transfer.Transfer_TransientProcess_Context)
    GetContext = _swig_new_instance_method(_Transfer.Transfer_TransientProcess_GetContext)
    Graph = _swig_new_instance_method(_Transfer.Transfer_TransientProcess_Graph)
    HGraph = _swig_new_instance_method(_Transfer.Transfer_TransientProcess_HGraph)
    HasGraph = _swig_new_instance_method(_Transfer.Transfer_TransientProcess_HasGraph)
    IsDataFail = _swig_new_instance_method(_Transfer.Transfer_TransientProcess_IsDataFail)
    IsDataLoaded = _swig_new_instance_method(_Transfer.Transfer_TransientProcess_IsDataLoaded)
    Model = _swig_new_instance_method(_Transfer.Transfer_TransientProcess_Model)
    PrintStats = _swig_new_instance_method(_Transfer.Transfer_TransientProcess_PrintStats)
    RootsForTransfer = _swig_new_instance_method(_Transfer.Transfer_TransientProcess_RootsForTransfer)
    SetContext = _swig_new_instance_method(_Transfer.Transfer_TransientProcess_SetContext)
    SetGraph = _swig_new_instance_method(_Transfer.Transfer_TransientProcess_SetGraph)
    SetModel = _swig_new_instance_method(_Transfer.Transfer_TransientProcess_SetModel)

    def __init__(self, *args):
        r"""
        * Sets TransientProcess at initial state, with an initial size
        	:param nb: default value is 10000
        	:type nb: int
        	:rtype: None
        """
        _Transfer.Transfer_TransientProcess_swiginit(self, _Transfer.new_Transfer_TransientProcess(*args))
    TypedSharings = _swig_new_instance_method(_Transfer.Transfer_TransientProcess_TypedSharings)


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_TransientProcess_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_TransientProcess

# Register Transfer_TransientProcess in _Transfer:
_Transfer.Transfer_TransientProcess_swigregister(Transfer_TransientProcess)

class Transfer_VoidBinder(Transfer_Binder):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * a VoidBinder is not Multiple (Remark : it is not Simple too) But it can bring next results ...
        	:rtype: None
        """
        _Transfer.Transfer_VoidBinder_swiginit(self, _Transfer.new_Transfer_VoidBinder(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_VoidBinder_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_VoidBinder

# Register Transfer_VoidBinder in _Transfer:
_Transfer.Transfer_VoidBinder_swigregister(Transfer_VoidBinder)

class Transfer_ActorDispatch(Transfer_ActorOfTransientProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddActor = _swig_new_instance_method(_Transfer.Transfer_ActorDispatch_AddActor)
    TransferDispatch = _swig_new_instance_method(_Transfer.Transfer_ActorDispatch_TransferDispatch)

    def __init__(self, *args):
        r"""
        * Creates an ActorDispatch from a Model. Works with a General Service Library, given as an Argument This causes TransferDispatch and its TransientProcess to be created, with default actor <self>
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param lib:
        	:type lib: Interface_GeneralLib
        	:rtype: None* Same as above, but Library is defined through a Protocol
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:param protocol:
        	:type protocol: Interface_Protocol
        	:rtype: None* Same as above, but works with the Active Protocol
        	:param amodel:
        	:type amodel: Interface_InterfaceModel
        	:rtype: None
        """
        _Transfer.Transfer_ActorDispatch_swiginit(self, _Transfer.new_Transfer_ActorDispatch(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_ActorDispatch_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_ActorDispatch

# Register Transfer_ActorDispatch in _Transfer:
_Transfer.Transfer_ActorDispatch_swigregister(Transfer_ActorDispatch)

class Transfer_BinderOfTransientInteger(Transfer_SimpleBinderOfTransient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Integer = _swig_new_instance_method(_Transfer.Transfer_BinderOfTransientInteger_Integer)
    SetInteger = _swig_new_instance_method(_Transfer.Transfer_BinderOfTransientInteger_SetInteger)

    def __init__(self, *args):
        r"""
        * Creates an empty BinderOfTransientInteger; Default value for the integer part is zero
        	:rtype: None
        """
        _Transfer.Transfer_BinderOfTransientInteger_swiginit(self, _Transfer.new_Transfer_BinderOfTransientInteger(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_BinderOfTransientInteger_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Transfer.delete_Transfer_BinderOfTransientInteger

# Register Transfer_BinderOfTransientInteger in _Transfer:
_Transfer.Transfer_BinderOfTransientInteger_swigregister(Transfer_BinderOfTransientInteger)

class Transfer_HSequenceOfBinder(Transfer_SequenceOfBinder, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Transfer.Transfer_HSequenceOfBinder_swiginit(self, _Transfer.new_Transfer_HSequenceOfBinder(*args))
    Sequence = _swig_new_instance_method(_Transfer.Transfer_HSequenceOfBinder_Sequence)
    Append = _swig_new_instance_method(_Transfer.Transfer_HSequenceOfBinder_Append)
    ChangeSequence = _swig_new_instance_method(_Transfer.Transfer_HSequenceOfBinder_ChangeSequence)


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_HSequenceOfBinder_DownCast(t)

    __swig_destroy__ = _Transfer.delete_Transfer_HSequenceOfBinder

# Register Transfer_HSequenceOfBinder in _Transfer:
_Transfer.Transfer_HSequenceOfBinder_swigregister(Transfer_HSequenceOfBinder)

class Transfer_HSequenceOfFinder(Transfer_SequenceOfFinder, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Transfer.Transfer_HSequenceOfFinder_swiginit(self, _Transfer.new_Transfer_HSequenceOfFinder(*args))
    Sequence = _swig_new_instance_method(_Transfer.Transfer_HSequenceOfFinder_Sequence)
    Append = _swig_new_instance_method(_Transfer.Transfer_HSequenceOfFinder_Append)
    ChangeSequence = _swig_new_instance_method(_Transfer.Transfer_HSequenceOfFinder_ChangeSequence)


    @staticmethod
    def DownCast(t):
      return Handle_Transfer_HSequenceOfFinder_DownCast(t)

    __swig_destroy__ = _Transfer.delete_Transfer_HSequenceOfFinder

# Register Transfer_HSequenceOfFinder in _Transfer:
_Transfer.Transfer_HSequenceOfFinder_swigregister(Transfer_HSequenceOfFinder)



