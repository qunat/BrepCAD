# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IntCurvesFace module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_intcurvesface.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _IntCurvesFace
else:
    import _IntCurvesFace

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _IntCurvesFace.SWIG_PyInstanceMethod_New
_swig_new_static_method = _IntCurvesFace.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntCurvesFace.delete_SwigPyIterator
    value = _swig_new_instance_method(_IntCurvesFace.SwigPyIterator_value)
    incr = _swig_new_instance_method(_IntCurvesFace.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_IntCurvesFace.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_IntCurvesFace.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_IntCurvesFace.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_IntCurvesFace.SwigPyIterator_copy)
    next = _swig_new_instance_method(_IntCurvesFace.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_IntCurvesFace.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_IntCurvesFace.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_IntCurvesFace.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_IntCurvesFace.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_IntCurvesFace.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_IntCurvesFace.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_IntCurvesFace.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_IntCurvesFace.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_IntCurvesFace.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _IntCurvesFace:
_IntCurvesFace.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Bnd
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TColgp
import OCC.Core.BVH
import OCC.Core.TopAbs
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopLoc
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.IntCurveSurface
import OCC.Core.Intf
import OCC.Core.IntSurf
class IntCurvesFace_Intersector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Bounding = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_Intersector_Bounding)
    ClassifyUVPoint = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_Intersector_ClassifyUVPoint)
    Destroy = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_Intersector_Destroy)
    Face = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_Intersector_Face)
    GetUseBoundToler = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_Intersector_GetUseBoundToler)

    def __init__(self, *args):
        r"""
        * Load a Face. //! The Tolerance <Tol> is used to determine if the first point of the segment is near the face. In that case, the parameter of the intersection point on the line can be a negative value (greater than -Tol). If aRestr = true UV bounding box of face is used to restrict it's underlined surface, otherwise surface is not restricted. If UseBToler = false then the 2d-point of intersection is classified with null-tolerance (relative to face); otherwise it's using maximium between input tolerance(aTol) and tolerances of face bounds (edges).
        	:param F:
        	:type F: TopoDS_Face
        	:param aTol:
        	:type aTol: float
        	:param aRestr: default value is Standard_True
        	:type aRestr: bool
        	:param UseBToler: default value is Standard_True
        	:type UseBToler: bool
        	:rtype: None
        """
        _IntCurvesFace.IntCurvesFace_Intersector_swiginit(self, _IntCurvesFace.new_IntCurvesFace_Intersector(*args))
    IsDone = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_Intersector_IsDone)
    IsParallel = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_Intersector_IsParallel)
    NbPnt = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_Intersector_NbPnt)
    Perform = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_Intersector_Perform)
    Pnt = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_Intersector_Pnt)
    SetUseBoundToler = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_Intersector_SetUseBoundToler)
    State = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_Intersector_State)
    SurfaceType = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_Intersector_SurfaceType)
    Transition = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_Intersector_Transition)
    UParameter = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_Intersector_UParameter)
    VParameter = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_Intersector_VParameter)
    WParameter = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_Intersector_WParameter)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurvesFace.delete_IntCurvesFace_Intersector

# Register IntCurvesFace_Intersector in _IntCurvesFace:
_IntCurvesFace.IntCurvesFace_Intersector_swigregister(IntCurvesFace_Intersector)

class IntCurvesFace_ShapeIntersector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Destroy = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_ShapeIntersector_Destroy)
    Face = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_ShapeIntersector_Face)

    def __init__(self, *args):
        r""":rtype: None"""
        _IntCurvesFace.IntCurvesFace_ShapeIntersector_swiginit(self, _IntCurvesFace.new_IntCurvesFace_ShapeIntersector(*args))
    IsDone = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_ShapeIntersector_IsDone)
    Load = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_ShapeIntersector_Load)
    NbPnt = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_ShapeIntersector_NbPnt)
    Perform = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_ShapeIntersector_Perform)
    PerformNearest = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_ShapeIntersector_PerformNearest)
    Pnt = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_ShapeIntersector_Pnt)
    SortResult = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_ShapeIntersector_SortResult)
    State = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_ShapeIntersector_State)
    Transition = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_ShapeIntersector_Transition)
    UParameter = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_ShapeIntersector_UParameter)
    VParameter = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_ShapeIntersector_VParameter)
    WParameter = _swig_new_instance_method(_IntCurvesFace.IntCurvesFace_ShapeIntersector_WParameter)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurvesFace.delete_IntCurvesFace_ShapeIntersector

# Register IntCurvesFace_ShapeIntersector in _IntCurvesFace:
_IntCurvesFace.IntCurvesFace_ShapeIntersector_swigregister(IntCurvesFace_ShapeIntersector)



