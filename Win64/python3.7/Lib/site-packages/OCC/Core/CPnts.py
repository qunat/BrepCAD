# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
CPnts module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_cpnts.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CPnts
else:
    import _CPnts

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _CPnts.SWIG_PyInstanceMethod_New
_swig_new_static_method = _CPnts.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CPnts.delete_SwigPyIterator
    value = _swig_new_instance_method(_CPnts.SwigPyIterator_value)
    incr = _swig_new_instance_method(_CPnts.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_CPnts.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_CPnts.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_CPnts.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_CPnts.SwigPyIterator_copy)
    next = _swig_new_instance_method(_CPnts.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_CPnts.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_CPnts.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_CPnts.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_CPnts.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_CPnts.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_CPnts.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_CPnts.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_CPnts.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_CPnts.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CPnts:
_CPnts.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
class CPnts_AbscissaPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AdvPerform = _swig_new_instance_method(_CPnts.CPnts_AbscissaPoint_AdvPerform)

    def __init__(self, *args):
        r"""
        :rtype: None* the algorithm computes a point on a curve <Curve> at the distance <Abscissa> from the point of parameter <U0>. <Resolution> is the error allowed in the computation. The computed point can be outside of the curve 's bounds.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Abscissa:
        	:type Abscissa: float
        	:param U0:
        	:type U0: float
        	:param Resolution:
        	:type Resolution: float
        	:rtype: None* the algorithm computes a point on a curve <Curve> at the distance <Abscissa> from the point of parameter <U0>. <Resolution> is the error allowed in the computation. The computed point can be outside of the curve 's bounds.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Abscissa:
        	:type Abscissa: float
        	:param U0:
        	:type U0: float
        	:param Resolution:
        	:type Resolution: float
        	:rtype: None* the algorithm computes a point on a curve <Curve> at the distance <Abscissa> from the point of parameter <U0>. <Ui> is the starting value used in the iterative process which find the solution, it must be closed to the final solution <Resolution> is the error allowed in the computation. The computed point can be outside of the curve 's bounds.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Abscissa:
        	:type Abscissa: float
        	:param U0:
        	:type U0: float
        	:param Ui:
        	:type Ui: float
        	:param Resolution:
        	:type Resolution: float
        	:rtype: None* the algorithm computes a point on a curve <Curve> at the distance <Abscissa> from the point of parameter <U0>. <Ui> is the starting value used in the iterative process which find the solution, it must be closed to the final solution <Resolution> is the error allowed in the computation. The computed point can be outside of the curve 's bounds.
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Abscissa:
        	:type Abscissa: float
        	:param U0:
        	:type U0: float
        	:param Ui:
        	:type Ui: float
        	:param Resolution:
        	:type Resolution: float
        	:rtype: None
        """
        _CPnts.CPnts_AbscissaPoint_swiginit(self, _CPnts.new_CPnts_AbscissaPoint(*args))
    Init = _swig_new_instance_method(_CPnts.CPnts_AbscissaPoint_Init)
    IsDone = _swig_new_instance_method(_CPnts.CPnts_AbscissaPoint_IsDone)
    Length = _swig_new_static_method(_CPnts.CPnts_AbscissaPoint_Length)
    Parameter = _swig_new_instance_method(_CPnts.CPnts_AbscissaPoint_Parameter)
    Perform = _swig_new_instance_method(_CPnts.CPnts_AbscissaPoint_Perform)
    SetParameter = _swig_new_instance_method(_CPnts.CPnts_AbscissaPoint_SetParameter)

    __repr__ = _dumps_object

    __swig_destroy__ = _CPnts.delete_CPnts_AbscissaPoint

# Register CPnts_AbscissaPoint in _CPnts:
_CPnts.CPnts_AbscissaPoint_swigregister(CPnts_AbscissaPoint)
CPnts_AbscissaPoint_Length = _CPnts.CPnts_AbscissaPoint_Length

class CPnts_MyGaussFunction(OCC.Core.math.math_Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""":rtype: None"""
        _CPnts.CPnts_MyGaussFunction_swiginit(self, _CPnts.new_CPnts_MyGaussFunction(*args))
    Init = _swig_new_instance_method(_CPnts.CPnts_MyGaussFunction_Init)

    __repr__ = _dumps_object

    __swig_destroy__ = _CPnts.delete_CPnts_MyGaussFunction

# Register CPnts_MyGaussFunction in _CPnts:
_CPnts.CPnts_MyGaussFunction_swigregister(CPnts_MyGaussFunction)

class CPnts_MyRootFunction(OCC.Core.math.math_FunctionWithDerivative):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""":rtype: None"""
        _CPnts.CPnts_MyRootFunction_swiginit(self, _CPnts.new_CPnts_MyRootFunction(*args))
    Init = _swig_new_instance_method(_CPnts.CPnts_MyRootFunction_Init)

    __repr__ = _dumps_object

    __swig_destroy__ = _CPnts.delete_CPnts_MyRootFunction

# Register CPnts_MyRootFunction in _CPnts:
_CPnts.CPnts_MyRootFunction_swigregister(CPnts_MyRootFunction)

class CPnts_UniformDeflection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * creation of a indefinite UniformDeflection
        	:rtype: None* Computes a uniform deflection distribution of points on the curve <C>. <Deflection> defines the constant deflection value. The algorithm computes the number of points and the points. The curve <C> must be at least C2 else the computation can fail. If just some parts of the curve is C2 it is better to give the parameters bounds and to use the below constructor . if <WithControl> is True, the algorithm controls the estimate deflection when the curve is singular at the point P(u),the algorithm computes the next point as P(u + Max(CurrentStep,Abs(LastParameter-FirstParameter))) if the singularity is at the first point ,the next point calculated is the P(LastParameter)
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Deflection:
        	:type Deflection: float
        	:param Resolution:
        	:type Resolution: float
        	:param WithControl:
        	:type WithControl: bool
        	:rtype: None* As above with 2d curve
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Deflection:
        	:type Deflection: float
        	:param Resolution:
        	:type Resolution: float
        	:param WithControl:
        	:type WithControl: bool
        	:rtype: None* Computes an uniform deflection distribution of points on a part of the curve <C>. Deflection defines the step between the points. <U1> and <U2> define the distribution span. <U1> and <U2> must be in the parametric range of the curve.
        	:param C:
        	:type C: Adaptor3d_Curve
        	:param Deflection:
        	:type Deflection: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Resolution:
        	:type Resolution: float
        	:param WithControl:
        	:type WithControl: bool
        	:rtype: None* As above with 2d curve
        	:param C:
        	:type C: Adaptor2d_Curve2d
        	:param Deflection:
        	:type Deflection: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:param Resolution:
        	:type Resolution: float
        	:param WithControl:
        	:type WithControl: bool
        	:rtype: None
        """
        _CPnts.CPnts_UniformDeflection_swiginit(self, _CPnts.new_CPnts_UniformDeflection(*args))
    Initialize = _swig_new_instance_method(_CPnts.CPnts_UniformDeflection_Initialize)
    IsAllDone = _swig_new_instance_method(_CPnts.CPnts_UniformDeflection_IsAllDone)
    More = _swig_new_instance_method(_CPnts.CPnts_UniformDeflection_More)
    Next = _swig_new_instance_method(_CPnts.CPnts_UniformDeflection_Next)
    Point = _swig_new_instance_method(_CPnts.CPnts_UniformDeflection_Point)
    Value = _swig_new_instance_method(_CPnts.CPnts_UniformDeflection_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _CPnts.delete_CPnts_UniformDeflection

# Register CPnts_UniformDeflection in _CPnts:
_CPnts.CPnts_UniformDeflection_swigregister(CPnts_UniformDeflection)



