# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
MAT2d module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_mat2d.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _MAT2d
else:
    import _MAT2d

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _MAT2d.SWIG_PyInstanceMethod_New
_swig_new_static_method = _MAT2d.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MAT2d.delete_SwigPyIterator
    value = _swig_new_instance_method(_MAT2d.SwigPyIterator_value)
    incr = _swig_new_instance_method(_MAT2d.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_MAT2d.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_MAT2d.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_MAT2d.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_MAT2d.SwigPyIterator_copy)
    next = _swig_new_instance_method(_MAT2d.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_MAT2d.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_MAT2d.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_MAT2d.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_MAT2d.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_MAT2d.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_MAT2d.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_MAT2d.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_MAT2d.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_MAT2d.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _MAT2d:
_MAT2d.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.GeomAbs
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Geom2d
import OCC.Core.gp
import OCC.Core.TColgp
import OCC.Core.MAT
import OCC.Core.Bisector
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.IntRes2d
Handle_MAT2d_Circuit_Create = _MAT2d.Handle_MAT2d_Circuit_Create
Handle_MAT2d_Circuit_DownCast = _MAT2d.Handle_MAT2d_Circuit_DownCast
Handle_MAT2d_Circuit_IsNull = _MAT2d.Handle_MAT2d_Circuit_IsNull
Handle_MAT2d_Connexion_Create = _MAT2d.Handle_MAT2d_Connexion_Create
Handle_MAT2d_Connexion_DownCast = _MAT2d.Handle_MAT2d_Connexion_DownCast
Handle_MAT2d_Connexion_IsNull = _MAT2d.Handle_MAT2d_Connexion_IsNull
class MAT2d_DataMapOfIntegerSequenceOfConnexion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_begin)
    end = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_end)
    cbegin = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_cbegin)
    cend = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_cend)

    def __init__(self, *args):
        _MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_swiginit(self, _MAT2d.new_MAT2d_DataMapOfIntegerSequenceOfConnexion(*args))
    Exchange = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Exchange)
    Assign = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Assign)
    Set = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Set)
    ReSize = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_ReSize)
    Bind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Bind)
    Bound = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Bound)
    IsBound = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_IsBound)
    UnBind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_UnBind)
    Seek = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Seek)
    Find = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Find)
    ChangeSeek = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_ChangeFind)
    __call__ = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion___call__)
    Clear = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Clear)
    __swig_destroy__ = _MAT2d.delete_MAT2d_DataMapOfIntegerSequenceOfConnexion
    Size = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Size)
    Keys = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_Keys)

# Register MAT2d_DataMapOfIntegerSequenceOfConnexion in _MAT2d:
_MAT2d.MAT2d_DataMapOfIntegerSequenceOfConnexion_swigregister(MAT2d_DataMapOfIntegerSequenceOfConnexion)

class MAT2d_DataMapOfIntegerConnexion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion_begin)
    end = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion_end)
    cbegin = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion_cbegin)
    cend = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion_cend)

    def __init__(self, *args):
        _MAT2d.MAT2d_DataMapOfIntegerConnexion_swiginit(self, _MAT2d.new_MAT2d_DataMapOfIntegerConnexion(*args))
    Exchange = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Exchange)
    Assign = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Assign)
    Set = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Set)
    ReSize = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion_ReSize)
    Bind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Bind)
    Bound = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Bound)
    IsBound = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion_IsBound)
    UnBind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion_UnBind)
    Seek = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Seek)
    Find = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Find)
    ChangeSeek = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion_ChangeFind)
    __call__ = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion___call__)
    Clear = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Clear)
    __swig_destroy__ = _MAT2d.delete_MAT2d_DataMapOfIntegerConnexion
    Size = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Size)
    Keys = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerConnexion_Keys)

# Register MAT2d_DataMapOfIntegerConnexion in _MAT2d:
_MAT2d.MAT2d_DataMapOfIntegerConnexion_swigregister(MAT2d_DataMapOfIntegerConnexion)

class MAT2d_DataMapOfIntegerPnt2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_begin)
    end = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_end)
    cbegin = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_cbegin)
    cend = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_cend)

    def __init__(self, *args):
        _MAT2d.MAT2d_DataMapOfIntegerPnt2d_swiginit(self, _MAT2d.new_MAT2d_DataMapOfIntegerPnt2d(*args))
    Exchange = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Exchange)
    Assign = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Assign)
    Set = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Set)
    ReSize = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_ReSize)
    Bind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Bind)
    Bound = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Bound)
    IsBound = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_IsBound)
    UnBind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_UnBind)
    Seek = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Seek)
    Find = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Find)
    ChangeSeek = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_ChangeFind)
    __call__ = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d___call__)
    Clear = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Clear)
    __swig_destroy__ = _MAT2d.delete_MAT2d_DataMapOfIntegerPnt2d
    Size = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Size)
    Keys = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerPnt2d_Keys)

# Register MAT2d_DataMapOfIntegerPnt2d in _MAT2d:
_MAT2d.MAT2d_DataMapOfIntegerPnt2d_swigregister(MAT2d_DataMapOfIntegerPnt2d)

class MAT2d_DataMapOfIntegerVec2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d_begin)
    end = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d_end)
    cbegin = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d_cbegin)
    cend = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d_cend)

    def __init__(self, *args):
        _MAT2d.MAT2d_DataMapOfIntegerVec2d_swiginit(self, _MAT2d.new_MAT2d_DataMapOfIntegerVec2d(*args))
    Exchange = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Exchange)
    Assign = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Assign)
    Set = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Set)
    ReSize = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d_ReSize)
    Bind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Bind)
    Bound = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Bound)
    IsBound = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d_IsBound)
    UnBind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d_UnBind)
    Seek = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Seek)
    Find = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Find)
    ChangeSeek = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d_ChangeFind)
    __call__ = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d___call__)
    Clear = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Clear)
    __swig_destroy__ = _MAT2d.delete_MAT2d_DataMapOfIntegerVec2d
    Size = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Size)
    Keys = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerVec2d_Keys)

# Register MAT2d_DataMapOfIntegerVec2d in _MAT2d:
_MAT2d.MAT2d_DataMapOfIntegerVec2d_swigregister(MAT2d_DataMapOfIntegerVec2d)

class MAT2d_DataMapOfIntegerBisec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec_begin)
    end = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec_end)
    cbegin = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec_cbegin)
    cend = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec_cend)

    def __init__(self, *args):
        _MAT2d.MAT2d_DataMapOfIntegerBisec_swiginit(self, _MAT2d.new_MAT2d_DataMapOfIntegerBisec(*args))
    Exchange = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec_Exchange)
    Assign = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec_Assign)
    Set = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec_Set)
    ReSize = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec_ReSize)
    Bind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec_Bind)
    Bound = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec_Bound)
    IsBound = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec_IsBound)
    UnBind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec_UnBind)
    Seek = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec_Seek)
    Find = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec_Find)
    ChangeSeek = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec_ChangeFind)
    __call__ = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec___call__)
    Clear = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec_Clear)
    __swig_destroy__ = _MAT2d.delete_MAT2d_DataMapOfIntegerBisec
    Size = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec_Size)
    Keys = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfIntegerBisec_Keys)

# Register MAT2d_DataMapOfIntegerBisec in _MAT2d:
_MAT2d.MAT2d_DataMapOfIntegerBisec_swigregister(MAT2d_DataMapOfIntegerBisec)

class MAT2d_Array2OfConnexion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT2d.MAT2d_Array2OfConnexion_swiginit(self, _MAT2d.new_MAT2d_Array2OfConnexion(*args))
    Init = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion_Init)
    Size = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion_Size)
    Length = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion_Length)
    NbRows = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion_NbRows)
    NbColumns = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion_NbColumns)
    RowLength = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion_RowLength)
    ColLength = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion_ColLength)
    LowerRow = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion_LowerRow)
    UpperRow = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion_UpperRow)
    LowerCol = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion_LowerCol)
    UpperCol = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion_UpperCol)
    IsDeletable = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion_IsDeletable)
    Assign = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion_Assign)
    Move = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion_Move)
    Set = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion_Set)
    Value = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion_Value)
    ChangeValue = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion_ChangeValue)
    __call__ = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion___call__)
    SetValue = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion_SetValue)
    Resize = _swig_new_instance_method(_MAT2d.MAT2d_Array2OfConnexion_Resize)
    __swig_destroy__ = _MAT2d.delete_MAT2d_Array2OfConnexion

# Register MAT2d_Array2OfConnexion in _MAT2d:
_MAT2d.MAT2d_Array2OfConnexion_swigregister(MAT2d_Array2OfConnexion)

class MAT2d_SequenceOfSequenceOfCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_begin)
    end = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_end)
    cbegin = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_cbegin)
    cend = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_cend)

    def __init__(self, *args):
        _MAT2d.MAT2d_SequenceOfSequenceOfCurve_swiginit(self, _MAT2d.new_MAT2d_SequenceOfSequenceOfCurve(*args))
    Size = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Size)
    Length = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Length)
    Lower = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Lower)
    Upper = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Upper)
    IsEmpty = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_IsEmpty)
    Reverse = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Reverse)
    Exchange = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Exchange)
    delNode = _swig_new_static_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_delNode)
    Clear = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Clear)
    Assign = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Assign)
    Set = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Set)
    Remove = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Remove)
    Append = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Append)
    Prepend = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Prepend)
    InsertBefore = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_InsertBefore)
    InsertAfter = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_InsertAfter)
    Split = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Split)
    First = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_First)
    ChangeFirst = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_ChangeFirst)
    Last = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Last)
    ChangeLast = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_ChangeLast)
    Value = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_Value)
    ChangeValue = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_ChangeValue)
    __call__ = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve___call__)
    SetValue = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfCurve_SetValue)
    __swig_destroy__ = _MAT2d.delete_MAT2d_SequenceOfSequenceOfCurve

# Register MAT2d_SequenceOfSequenceOfCurve in _MAT2d:
_MAT2d.MAT2d_SequenceOfSequenceOfCurve_swigregister(MAT2d_SequenceOfSequenceOfCurve)
MAT2d_SequenceOfSequenceOfCurve_delNode = _MAT2d.MAT2d_SequenceOfSequenceOfCurve_delNode

class MAT2d_SequenceOfSequenceOfGeometry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_begin)
    end = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_end)
    cbegin = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_cbegin)
    cend = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_cend)

    def __init__(self, *args):
        _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_swiginit(self, _MAT2d.new_MAT2d_SequenceOfSequenceOfGeometry(*args))
    Size = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Size)
    Length = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Length)
    Lower = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Lower)
    Upper = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Upper)
    IsEmpty = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_IsEmpty)
    Reverse = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Reverse)
    Exchange = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Exchange)
    delNode = _swig_new_static_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_delNode)
    Clear = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Clear)
    Assign = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Assign)
    Set = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Set)
    Remove = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Remove)
    Append = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Append)
    Prepend = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Prepend)
    InsertBefore = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_InsertBefore)
    InsertAfter = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_InsertAfter)
    Split = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Split)
    First = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_First)
    ChangeFirst = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_ChangeFirst)
    Last = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Last)
    ChangeLast = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_ChangeLast)
    Value = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_Value)
    ChangeValue = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_ChangeValue)
    __call__ = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry___call__)
    SetValue = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_SetValue)
    __swig_destroy__ = _MAT2d.delete_MAT2d_SequenceOfSequenceOfGeometry

# Register MAT2d_SequenceOfSequenceOfGeometry in _MAT2d:
_MAT2d.MAT2d_SequenceOfSequenceOfGeometry_swigregister(MAT2d_SequenceOfSequenceOfGeometry)
MAT2d_SequenceOfSequenceOfGeometry_delNode = _MAT2d.MAT2d_SequenceOfSequenceOfGeometry_delNode

class MAT2d_SequenceOfConnexion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_begin)
    end = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_end)
    cbegin = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_cbegin)
    cend = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_cend)

    def __init__(self, *args):
        _MAT2d.MAT2d_SequenceOfConnexion_swiginit(self, _MAT2d.new_MAT2d_SequenceOfConnexion(*args))
    Size = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_Size)
    Length = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_Length)
    Lower = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_Lower)
    Upper = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_Upper)
    IsEmpty = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_IsEmpty)
    Reverse = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_Reverse)
    Exchange = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_Exchange)
    delNode = _swig_new_static_method(_MAT2d.MAT2d_SequenceOfConnexion_delNode)
    Clear = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_Clear)
    Assign = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_Assign)
    Set = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_Set)
    Remove = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_Remove)
    Append = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_Append)
    Prepend = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_Prepend)
    InsertBefore = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_InsertBefore)
    InsertAfter = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_InsertAfter)
    Split = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_Split)
    First = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_First)
    ChangeFirst = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_ChangeFirst)
    Last = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_Last)
    ChangeLast = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_ChangeLast)
    Value = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_Value)
    ChangeValue = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_ChangeValue)
    __call__ = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion___call__)
    SetValue = _swig_new_instance_method(_MAT2d.MAT2d_SequenceOfConnexion_SetValue)
    __swig_destroy__ = _MAT2d.delete_MAT2d_SequenceOfConnexion

# Register MAT2d_SequenceOfConnexion in _MAT2d:
_MAT2d.MAT2d_SequenceOfConnexion_swigregister(MAT2d_SequenceOfConnexion)
MAT2d_SequenceOfConnexion_delNode = _MAT2d.MAT2d_SequenceOfConnexion_delNode

class MAT2d_DataMapOfBiIntSequenceOfInteger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_begin)
    end = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_end)
    cbegin = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_cbegin)
    cend = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_cend)

    def __init__(self, *args):
        _MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_swiginit(self, _MAT2d.new_MAT2d_DataMapOfBiIntSequenceOfInteger(*args))
    Exchange = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Exchange)
    Assign = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Assign)
    Set = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Set)
    ReSize = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_ReSize)
    Bind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Bind)
    Bound = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Bound)
    IsBound = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_IsBound)
    UnBind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_UnBind)
    Seek = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Seek)
    Find = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Find)
    ChangeSeek = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_ChangeFind)
    __call__ = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger___call__)
    Clear = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Clear)
    __swig_destroy__ = _MAT2d.delete_MAT2d_DataMapOfBiIntSequenceOfInteger
    Size = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_Size)

# Register MAT2d_DataMapOfBiIntSequenceOfInteger in _MAT2d:
_MAT2d.MAT2d_DataMapOfBiIntSequenceOfInteger_swigregister(MAT2d_DataMapOfBiIntSequenceOfInteger)

class MAT2d_DataMapOfBiIntInteger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntInteger_begin)
    end = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntInteger_end)
    cbegin = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntInteger_cbegin)
    cend = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntInteger_cend)

    def __init__(self, *args):
        _MAT2d.MAT2d_DataMapOfBiIntInteger_swiginit(self, _MAT2d.new_MAT2d_DataMapOfBiIntInteger(*args))
    Exchange = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntInteger_Exchange)
    Assign = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntInteger_Assign)
    Set = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntInteger_Set)
    ReSize = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntInteger_ReSize)
    Bind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntInteger_Bind)
    Bound = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntInteger_Bound)
    IsBound = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntInteger_IsBound)
    UnBind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntInteger_UnBind)
    Seek = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntInteger_Seek)
    Find = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntInteger_Find)
    ChangeSeek = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntInteger_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntInteger_ChangeFind)
    __call__ = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntInteger___call__)
    Clear = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntInteger_Clear)
    __swig_destroy__ = _MAT2d.delete_MAT2d_DataMapOfBiIntInteger
    Size = _swig_new_instance_method(_MAT2d.MAT2d_DataMapOfBiIntInteger_Size)

# Register MAT2d_DataMapOfBiIntInteger in _MAT2d:
_MAT2d.MAT2d_DataMapOfBiIntInteger_swigregister(MAT2d_DataMapOfBiIntInteger)

class MAT2d_BiInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FirstIndex = _swig_new_instance_method(_MAT2d.MAT2d_BiInt_FirstIndex)
    IsEqual = _swig_new_instance_method(_MAT2d.MAT2d_BiInt_IsEqual)

    def __init__(self, *args):
        r"""
        :param I1:
        	:type I1: int
        	:param I2:
        	:type I2: int
        	:rtype: None
        """
        _MAT2d.MAT2d_BiInt_swiginit(self, _MAT2d.new_MAT2d_BiInt(*args))
    SecondIndex = _swig_new_instance_method(_MAT2d.MAT2d_BiInt_SecondIndex)
    __eq_wrapper__ = _swig_new_instance_method(_MAT2d.MAT2d_BiInt___eq_wrapper__)

    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT2d.delete_MAT2d_BiInt

# Register MAT2d_BiInt in _MAT2d:
_MAT2d.MAT2d_BiInt_swigregister(MAT2d_BiInt)

class MAT2d_Circuit(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Connexion = _swig_new_instance_method(_MAT2d.MAT2d_Circuit_Connexion)
    ConnexionOn = _swig_new_instance_method(_MAT2d.MAT2d_Circuit_ConnexionOn)
    LineLength = _swig_new_instance_method(_MAT2d.MAT2d_Circuit_LineLength)

    def __init__(self, *args):
        r"""
        :param aJoinType: default value is GeomAbs_Arc
        	:type aJoinType: GeomAbs_JoinType
        	:param IsOpenResult: default value is Standard_False
        	:type IsOpenResult: bool
        	:rtype: None
        """
        _MAT2d.MAT2d_Circuit_swiginit(self, _MAT2d.new_MAT2d_Circuit(*args))
    NumberOfItems = _swig_new_instance_method(_MAT2d.MAT2d_Circuit_NumberOfItems)
    Perform = _swig_new_instance_method(_MAT2d.MAT2d_Circuit_Perform)
    RefToEqui = _swig_new_instance_method(_MAT2d.MAT2d_Circuit_RefToEqui)
    Value = _swig_new_instance_method(_MAT2d.MAT2d_Circuit_Value)


    @staticmethod
    def DownCast(t):
      return Handle_MAT2d_Circuit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT2d.delete_MAT2d_Circuit

# Register MAT2d_Circuit in _MAT2d:
_MAT2d.MAT2d_Circuit_swigregister(MAT2d_Circuit)

class MAT2d_Connexion(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Distance = _swig_new_instance_method(_MAT2d.MAT2d_Connexion_Distance)
    Dump = _swig_new_instance_method(_MAT2d.MAT2d_Connexion_Dump)
    IndexFirstLine = _swig_new_instance_method(_MAT2d.MAT2d_Connexion_IndexFirstLine)
    IndexItemOnFirst = _swig_new_instance_method(_MAT2d.MAT2d_Connexion_IndexItemOnFirst)
    IndexItemOnSecond = _swig_new_instance_method(_MAT2d.MAT2d_Connexion_IndexItemOnSecond)
    IndexSecondLine = _swig_new_instance_method(_MAT2d.MAT2d_Connexion_IndexSecondLine)
    IsAfter = _swig_new_instance_method(_MAT2d.MAT2d_Connexion_IsAfter)

    def __init__(self, *args):
        r"""
        :rtype: None:param LineA:
        	:type LineA: int
        	:param LineB:
        	:type LineB: int
        	:param ItemA:
        	:type ItemA: int
        	:param ItemB:
        	:type ItemB: int
        	:param Distance:
        	:type Distance: float
        	:param ParameterOnA:
        	:type ParameterOnA: float
        	:param ParameterOnB:
        	:type ParameterOnB: float
        	:param PointA:
        	:type PointA: gp_Pnt2d
        	:param PointB:
        	:type PointB: gp_Pnt2d
        	:rtype: None
        """
        _MAT2d.MAT2d_Connexion_swiginit(self, _MAT2d.new_MAT2d_Connexion(*args))
    ParameterOnFirst = _swig_new_instance_method(_MAT2d.MAT2d_Connexion_ParameterOnFirst)
    ParameterOnSecond = _swig_new_instance_method(_MAT2d.MAT2d_Connexion_ParameterOnSecond)
    PointOnFirst = _swig_new_instance_method(_MAT2d.MAT2d_Connexion_PointOnFirst)
    PointOnSecond = _swig_new_instance_method(_MAT2d.MAT2d_Connexion_PointOnSecond)
    Reverse = _swig_new_instance_method(_MAT2d.MAT2d_Connexion_Reverse)


    @staticmethod
    def DownCast(t):
      return Handle_MAT2d_Connexion_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT2d.delete_MAT2d_Connexion

# Register MAT2d_Connexion in _MAT2d:
_MAT2d.MAT2d_Connexion_swigregister(MAT2d_Connexion)

class MAT2d_MapBiIntHasher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HashCode = _swig_new_static_method(_MAT2d.MAT2d_MapBiIntHasher_HashCode)
    IsEqual = _swig_new_static_method(_MAT2d.MAT2d_MapBiIntHasher_IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        _MAT2d.MAT2d_MapBiIntHasher_swiginit(self, _MAT2d.new_MAT2d_MapBiIntHasher())
    __swig_destroy__ = _MAT2d.delete_MAT2d_MapBiIntHasher

# Register MAT2d_MapBiIntHasher in _MAT2d:
_MAT2d.MAT2d_MapBiIntHasher_swigregister(MAT2d_MapBiIntHasher)
MAT2d_MapBiIntHasher_HashCode = _MAT2d.MAT2d_MapBiIntHasher_HashCode
MAT2d_MapBiIntHasher_IsEqual = _MAT2d.MAT2d_MapBiIntHasher_IsEqual

class MAT2d_Mat2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bisector = _swig_new_instance_method(_MAT2d.MAT2d_Mat2d_bisector)
    CreateMat = _swig_new_instance_method(_MAT2d.MAT2d_Mat2d_CreateMat)
    CreateMatOpen = _swig_new_instance_method(_MAT2d.MAT2d_Mat2d_CreateMatOpen)
    Init = _swig_new_instance_method(_MAT2d.MAT2d_Mat2d_Init)
    IsDone = _swig_new_instance_method(_MAT2d.MAT2d_Mat2d_IsDone)

    def __init__(self, *args):
        r"""
        * Empty construtor.
        	:param IsOpenResult: default value is Standard_False
        	:type IsOpenResult: bool
        	:rtype: None
        """
        _MAT2d.MAT2d_Mat2d_swiginit(self, _MAT2d.new_MAT2d_Mat2d(*args))
    More = _swig_new_instance_method(_MAT2d.MAT2d_Mat2d_More)
    Next = _swig_new_instance_method(_MAT2d.MAT2d_Mat2d_Next)
    NumberOfBisectors = _swig_new_instance_method(_MAT2d.MAT2d_Mat2d_NumberOfBisectors)
    SemiInfinite = _swig_new_instance_method(_MAT2d.MAT2d_Mat2d_SemiInfinite)

    __repr__ = _dumps_object

    __swig_destroy__ = _MAT2d.delete_MAT2d_Mat2d

# Register MAT2d_Mat2d in _MAT2d:
_MAT2d.MAT2d_Mat2d_swigregister(MAT2d_Mat2d)

class MAT2d_MiniPath(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ConnexionsFrom = _swig_new_instance_method(_MAT2d.MAT2d_MiniPath_ConnexionsFrom)
    Father = _swig_new_instance_method(_MAT2d.MAT2d_MiniPath_Father)
    IsConnexionsFrom = _swig_new_instance_method(_MAT2d.MAT2d_MiniPath_IsConnexionsFrom)
    IsRoot = _swig_new_instance_method(_MAT2d.MAT2d_MiniPath_IsRoot)

    def __init__(self, *args):
        r""":rtype: None"""
        _MAT2d.MAT2d_MiniPath_swiginit(self, _MAT2d.new_MAT2d_MiniPath(*args))
    Path = _swig_new_instance_method(_MAT2d.MAT2d_MiniPath_Path)
    Perform = _swig_new_instance_method(_MAT2d.MAT2d_MiniPath_Perform)
    RunOnConnexions = _swig_new_instance_method(_MAT2d.MAT2d_MiniPath_RunOnConnexions)

    __repr__ = _dumps_object

    __swig_destroy__ = _MAT2d.delete_MAT2d_MiniPath

# Register MAT2d_MiniPath in _MAT2d:
_MAT2d.MAT2d_MiniPath_swigregister(MAT2d_MiniPath)

class MAT2d_Tool2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BisecFusion = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_BisecFusion)
    ChangeGeomBis = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_ChangeGeomBis)
    Circuit = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_Circuit)
    CreateBisector = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_CreateBisector)
    Distance = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_Distance)
    Dump = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_Dump)
    FirstPoint = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_FirstPoint)
    GeomBis = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_GeomBis)
    GeomElt = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_GeomElt)
    GeomPnt = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_GeomPnt)
    GeomVec = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_GeomVec)
    InitItems = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_InitItems)
    IntersectBisector = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_IntersectBisector)

    def __init__(self, *args):
        r"""
        * Empty Constructor.
        	:rtype: None
        """
        _MAT2d.MAT2d_Tool2d_swiginit(self, _MAT2d.new_MAT2d_Tool2d(*args))
    NumberOfItems = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_NumberOfItems)
    Sense = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_Sense)
    SetJoinType = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_SetJoinType)
    Tangent = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_Tangent)
    TangentAfter = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_TangentAfter)
    TangentBefore = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_TangentBefore)
    ToleranceOfConfusion = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_ToleranceOfConfusion)
    TrimBisector = _swig_new_instance_method(_MAT2d.MAT2d_Tool2d_TrimBisector)

    __repr__ = _dumps_object

    __swig_destroy__ = _MAT2d.delete_MAT2d_Tool2d

# Register MAT2d_Tool2d in _MAT2d:
_MAT2d.MAT2d_Tool2d_swigregister(MAT2d_Tool2d)



