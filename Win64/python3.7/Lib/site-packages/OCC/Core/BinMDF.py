# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BinMDF module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_binmdf.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BinMDF
else:
    import _BinMDF

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _BinMDF.SWIG_PyInstanceMethod_New
_swig_new_static_method = _BinMDF.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinMDF.delete_SwigPyIterator
    value = _swig_new_instance_method(_BinMDF.SwigPyIterator_value)
    incr = _swig_new_instance_method(_BinMDF.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_BinMDF.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_BinMDF.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_BinMDF.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_BinMDF.SwigPyIterator_copy)
    next = _swig_new_instance_method(_BinMDF.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_BinMDF.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_BinMDF.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_BinMDF.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_BinMDF.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_BinMDF.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_BinMDF.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_BinMDF.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_BinMDF.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_BinMDF.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BinMDF:
_BinMDF.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.TDF
import OCC.Core.BinObjMgt
import OCC.Core.Storage
Handle_BinMDF_ADriver_Create = _BinMDF.Handle_BinMDF_ADriver_Create
Handle_BinMDF_ADriver_DownCast = _BinMDF.Handle_BinMDF_ADriver_DownCast
Handle_BinMDF_ADriver_IsNull = _BinMDF.Handle_BinMDF_ADriver_IsNull
Handle_BinMDF_ADriverTable_Create = _BinMDF.Handle_BinMDF_ADriverTable_Create
Handle_BinMDF_ADriverTable_DownCast = _BinMDF.Handle_BinMDF_ADriverTable_DownCast
Handle_BinMDF_ADriverTable_IsNull = _BinMDF.Handle_BinMDF_ADriverTable_IsNull
Handle_BinMDF_ReferenceDriver_Create = _BinMDF.Handle_BinMDF_ReferenceDriver_Create
Handle_BinMDF_ReferenceDriver_DownCast = _BinMDF.Handle_BinMDF_ReferenceDriver_DownCast
Handle_BinMDF_ReferenceDriver_IsNull = _BinMDF.Handle_BinMDF_ReferenceDriver_IsNull
Handle_BinMDF_TagSourceDriver_Create = _BinMDF.Handle_BinMDF_TagSourceDriver_Create
Handle_BinMDF_TagSourceDriver_DownCast = _BinMDF.Handle_BinMDF_TagSourceDriver_DownCast
Handle_BinMDF_TagSourceDriver_IsNull = _BinMDF.Handle_BinMDF_TagSourceDriver_IsNull
class BinMDF_TypeIdMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BinMDF.BinMDF_TypeIdMap_swiginit(self, _BinMDF.new_BinMDF_TypeIdMap(*args))
    Exchange = _swig_new_instance_method(_BinMDF.BinMDF_TypeIdMap_Exchange)
    Assign = _swig_new_instance_method(_BinMDF.BinMDF_TypeIdMap_Assign)
    Set = _swig_new_instance_method(_BinMDF.BinMDF_TypeIdMap_Set)
    ReSize = _swig_new_instance_method(_BinMDF.BinMDF_TypeIdMap_ReSize)
    Bind = _swig_new_instance_method(_BinMDF.BinMDF_TypeIdMap_Bind)
    AreBound = _swig_new_instance_method(_BinMDF.BinMDF_TypeIdMap_AreBound)
    IsBound1 = _swig_new_instance_method(_BinMDF.BinMDF_TypeIdMap_IsBound1)
    IsBound2 = _swig_new_instance_method(_BinMDF.BinMDF_TypeIdMap_IsBound2)
    UnBind1 = _swig_new_instance_method(_BinMDF.BinMDF_TypeIdMap_UnBind1)
    UnBind2 = _swig_new_instance_method(_BinMDF.BinMDF_TypeIdMap_UnBind2)
    Find1 = _swig_new_instance_method(_BinMDF.BinMDF_TypeIdMap_Find1)
    Seek1 = _swig_new_instance_method(_BinMDF.BinMDF_TypeIdMap_Seek1)
    Find2 = _swig_new_instance_method(_BinMDF.BinMDF_TypeIdMap_Find2)
    Seek2 = _swig_new_instance_method(_BinMDF.BinMDF_TypeIdMap_Seek2)
    Clear = _swig_new_instance_method(_BinMDF.BinMDF_TypeIdMap_Clear)
    __swig_destroy__ = _BinMDF.delete_BinMDF_TypeIdMap
    Size = _swig_new_instance_method(_BinMDF.BinMDF_TypeIdMap_Size)

# Register BinMDF_TypeIdMap in _BinMDF:
_BinMDF.BinMDF_TypeIdMap_swigregister(BinMDF_TypeIdMap)

class BinMDF_TypeADriverMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_BinMDF.BinMDF_TypeADriverMap_begin)
    end = _swig_new_instance_method(_BinMDF.BinMDF_TypeADriverMap_end)
    cbegin = _swig_new_instance_method(_BinMDF.BinMDF_TypeADriverMap_cbegin)
    cend = _swig_new_instance_method(_BinMDF.BinMDF_TypeADriverMap_cend)

    def __init__(self, *args):
        _BinMDF.BinMDF_TypeADriverMap_swiginit(self, _BinMDF.new_BinMDF_TypeADriverMap(*args))
    Exchange = _swig_new_instance_method(_BinMDF.BinMDF_TypeADriverMap_Exchange)
    Assign = _swig_new_instance_method(_BinMDF.BinMDF_TypeADriverMap_Assign)
    Set = _swig_new_instance_method(_BinMDF.BinMDF_TypeADriverMap_Set)
    ReSize = _swig_new_instance_method(_BinMDF.BinMDF_TypeADriverMap_ReSize)
    Bind = _swig_new_instance_method(_BinMDF.BinMDF_TypeADriverMap_Bind)
    Bound = _swig_new_instance_method(_BinMDF.BinMDF_TypeADriverMap_Bound)
    IsBound = _swig_new_instance_method(_BinMDF.BinMDF_TypeADriverMap_IsBound)
    UnBind = _swig_new_instance_method(_BinMDF.BinMDF_TypeADriverMap_UnBind)
    Seek = _swig_new_instance_method(_BinMDF.BinMDF_TypeADriverMap_Seek)
    Find = _swig_new_instance_method(_BinMDF.BinMDF_TypeADriverMap_Find)
    ChangeSeek = _swig_new_instance_method(_BinMDF.BinMDF_TypeADriverMap_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_BinMDF.BinMDF_TypeADriverMap_ChangeFind)
    __call__ = _swig_new_instance_method(_BinMDF.BinMDF_TypeADriverMap___call__)
    Clear = _swig_new_instance_method(_BinMDF.BinMDF_TypeADriverMap_Clear)
    __swig_destroy__ = _BinMDF.delete_BinMDF_TypeADriverMap
    Size = _swig_new_instance_method(_BinMDF.BinMDF_TypeADriverMap_Size)

# Register BinMDF_TypeADriverMap in _BinMDF:
_BinMDF.BinMDF_TypeADriverMap_swigregister(BinMDF_TypeADriverMap)

class binmdf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddDrivers = _swig_new_static_method(_BinMDF.binmdf_AddDrivers)

    __repr__ = _dumps_object


    def __init__(self):
        _BinMDF.binmdf_swiginit(self, _BinMDF.new_binmdf())
    __swig_destroy__ = _BinMDF.delete_binmdf

# Register binmdf in _BinMDF:
_BinMDF.binmdf_swigregister(binmdf)
binmdf_AddDrivers = _BinMDF.binmdf_AddDrivers

class BinMDF_ADriver(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    NewEmpty = _swig_new_instance_method(_BinMDF.BinMDF_ADriver_NewEmpty)
    Paste = _swig_new_instance_method(_BinMDF.BinMDF_ADriver_Paste)
    SourceType = _swig_new_instance_method(_BinMDF.BinMDF_ADriver_SourceType)
    TypeName = _swig_new_instance_method(_BinMDF.BinMDF_ADriver_TypeName)


    @staticmethod
    def DownCast(t):
      return Handle_BinMDF_ADriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinMDF.delete_BinMDF_ADriver

# Register BinMDF_ADriver in _BinMDF:
_BinMDF.BinMDF_ADriver_swigregister(BinMDF_ADriver)

class BinMDF_ADriverTable(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddDriver = _swig_new_instance_method(_BinMDF.BinMDF_ADriverTable_AddDriver)
    AssignIds = _swig_new_instance_method(_BinMDF.BinMDF_ADriverTable_AssignIds)

    def __init__(self, *args):
        r"""
        * Constructor
        	:rtype: None
        """
        _BinMDF.BinMDF_ADriverTable_swiginit(self, _BinMDF.new_BinMDF_ADriverTable(*args))
    GetDriver = _swig_new_instance_method(_BinMDF.BinMDF_ADriverTable_GetDriver)


    @staticmethod
    def DownCast(t):
      return Handle_BinMDF_ADriverTable_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinMDF.delete_BinMDF_ADriverTable

# Register BinMDF_ADriverTable in _BinMDF:
_BinMDF.BinMDF_ADriverTable_swigregister(BinMDF_ADriverTable)

class BinMDF_ReferenceDriver(BinMDF_ADriver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param theMessageDriver:
        	:type theMessageDriver: Message_Messenger
        	:rtype: None
        """
        _BinMDF.BinMDF_ReferenceDriver_swiginit(self, _BinMDF.new_BinMDF_ReferenceDriver(*args))
    Paste = _swig_new_instance_method(_BinMDF.BinMDF_ReferenceDriver_Paste)


    @staticmethod
    def DownCast(t):
      return Handle_BinMDF_ReferenceDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinMDF.delete_BinMDF_ReferenceDriver

# Register BinMDF_ReferenceDriver in _BinMDF:
_BinMDF.BinMDF_ReferenceDriver_swigregister(BinMDF_ReferenceDriver)

class BinMDF_TagSourceDriver(BinMDF_ADriver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param theMessageDriver:
        	:type theMessageDriver: Message_Messenger
        	:rtype: None
        """
        _BinMDF.BinMDF_TagSourceDriver_swiginit(self, _BinMDF.new_BinMDF_TagSourceDriver(*args))
    Paste = _swig_new_instance_method(_BinMDF.BinMDF_TagSourceDriver_Paste)


    @staticmethod
    def DownCast(t):
      return Handle_BinMDF_TagSourceDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinMDF.delete_BinMDF_TagSourceDriver

# Register BinMDF_TagSourceDriver in _BinMDF:
_BinMDF.BinMDF_TagSourceDriver_swigregister(BinMDF_TagSourceDriver)



