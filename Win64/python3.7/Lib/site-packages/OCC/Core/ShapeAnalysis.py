# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ShapeAnalysis module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_shapeanalysis.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ShapeAnalysis
else:
    import _ShapeAnalysis

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ShapeAnalysis.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ShapeAnalysis.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ShapeAnalysis.delete_SwigPyIterator
    value = _swig_new_instance_method(_ShapeAnalysis.SwigPyIterator_value)
    incr = _swig_new_instance_method(_ShapeAnalysis.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_ShapeAnalysis.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_ShapeAnalysis.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_ShapeAnalysis.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_ShapeAnalysis.SwigPyIterator_copy)
    next = _swig_new_instance_method(_ShapeAnalysis.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_ShapeAnalysis.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_ShapeAnalysis.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_ShapeAnalysis.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_ShapeAnalysis.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_ShapeAnalysis.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_ShapeAnalysis.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_ShapeAnalysis.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_ShapeAnalysis.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_ShapeAnalysis.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ShapeAnalysis:
_ShapeAnalysis.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.ShapeExtend
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TColGeom
import OCC.Core.TopTools
import OCC.Core.Geom2d
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.Adaptor3d
import OCC.Core.Adaptor2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.IntRes2d
Handle_ShapeAnalysis_FreeBoundData_Create = _ShapeAnalysis.Handle_ShapeAnalysis_FreeBoundData_Create
Handle_ShapeAnalysis_FreeBoundData_DownCast = _ShapeAnalysis.Handle_ShapeAnalysis_FreeBoundData_DownCast
Handle_ShapeAnalysis_FreeBoundData_IsNull = _ShapeAnalysis.Handle_ShapeAnalysis_FreeBoundData_IsNull
Handle_ShapeAnalysis_Surface_Create = _ShapeAnalysis.Handle_ShapeAnalysis_Surface_Create
Handle_ShapeAnalysis_Surface_DownCast = _ShapeAnalysis.Handle_ShapeAnalysis_Surface_DownCast
Handle_ShapeAnalysis_Surface_IsNull = _ShapeAnalysis.Handle_ShapeAnalysis_Surface_IsNull
Handle_ShapeAnalysis_TransferParameters_Create = _ShapeAnalysis.Handle_ShapeAnalysis_TransferParameters_Create
Handle_ShapeAnalysis_TransferParameters_DownCast = _ShapeAnalysis.Handle_ShapeAnalysis_TransferParameters_DownCast
Handle_ShapeAnalysis_TransferParameters_IsNull = _ShapeAnalysis.Handle_ShapeAnalysis_TransferParameters_IsNull
Handle_ShapeAnalysis_Wire_Create = _ShapeAnalysis.Handle_ShapeAnalysis_Wire_Create
Handle_ShapeAnalysis_Wire_DownCast = _ShapeAnalysis.Handle_ShapeAnalysis_Wire_DownCast
Handle_ShapeAnalysis_Wire_IsNull = _ShapeAnalysis.Handle_ShapeAnalysis_Wire_IsNull
Handle_ShapeAnalysis_TransferParametersProj_Create = _ShapeAnalysis.Handle_ShapeAnalysis_TransferParametersProj_Create
Handle_ShapeAnalysis_TransferParametersProj_DownCast = _ShapeAnalysis.Handle_ShapeAnalysis_TransferParametersProj_DownCast
Handle_ShapeAnalysis_TransferParametersProj_IsNull = _ShapeAnalysis.Handle_ShapeAnalysis_TransferParametersProj_IsNull
Handle_ShapeAnalysis_HSequenceOfFreeBounds_Create = _ShapeAnalysis.Handle_ShapeAnalysis_HSequenceOfFreeBounds_Create
Handle_ShapeAnalysis_HSequenceOfFreeBounds_DownCast = _ShapeAnalysis.Handle_ShapeAnalysis_HSequenceOfFreeBounds_DownCast
Handle_ShapeAnalysis_HSequenceOfFreeBounds_IsNull = _ShapeAnalysis.Handle_ShapeAnalysis_HSequenceOfFreeBounds_IsNull
class ShapeAnalysis_SequenceOfFreeBounds(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_begin)
    end = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_end)
    cbegin = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_cbegin)
    cend = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_cend)

    def __init__(self, *args):
        _ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_SequenceOfFreeBounds(*args))
    Size = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_Size)
    Length = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_Length)
    Lower = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_Lower)
    Upper = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_Upper)
    IsEmpty = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_IsEmpty)
    Reverse = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_Reverse)
    Exchange = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_Exchange)
    delNode = _swig_new_static_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_delNode)
    Clear = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_Clear)
    Assign = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_Assign)
    Set = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_Set)
    Remove = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_Remove)
    Append = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_Append)
    Prepend = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_Prepend)
    InsertBefore = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_InsertBefore)
    InsertAfter = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_InsertAfter)
    Split = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_Split)
    First = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_First)
    ChangeFirst = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_ChangeFirst)
    Last = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_Last)
    ChangeLast = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_ChangeLast)
    Value = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_Value)
    ChangeValue = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_ChangeValue)
    __call__ = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds___call__)
    SetValue = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_SetValue)
    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_SequenceOfFreeBounds

# Register ShapeAnalysis_SequenceOfFreeBounds in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_swigregister(ShapeAnalysis_SequenceOfFreeBounds)
ShapeAnalysis_SequenceOfFreeBounds_delNode = _ShapeAnalysis.ShapeAnalysis_SequenceOfFreeBounds_delNode

class ShapeAnalysis_DataMapOfShapeListOfReal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_begin)
    end = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_end)
    cbegin = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_cbegin)
    cend = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_cend)

    def __init__(self, *args):
        _ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_DataMapOfShapeListOfReal(*args))
    Exchange = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_Exchange)
    Assign = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_Assign)
    Set = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_Set)
    ReSize = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_ReSize)
    Bind = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_Bind)
    Bound = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_Bound)
    IsBound = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_IsBound)
    UnBind = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_UnBind)
    Seek = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_Seek)
    Find = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_Find)
    ChangeSeek = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_ChangeFind)
    __call__ = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal___call__)
    Clear = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_Clear)
    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_DataMapOfShapeListOfReal
    Size = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_Size)

# Register ShapeAnalysis_DataMapOfShapeListOfReal in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_DataMapOfShapeListOfReal_swigregister(ShapeAnalysis_DataMapOfShapeListOfReal)

class ShapeAnalysis_BoxBndTree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeAnalysis.ShapeAnalysis_BoxBndTree_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_BoxBndTree(*args))
    Add = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_BoxBndTree_Add)
    Select = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_BoxBndTree_Select)
    Clear = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_BoxBndTree_Clear)
    IsEmpty = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_BoxBndTree_IsEmpty)
    Root = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_BoxBndTree_Root)
    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_BoxBndTree
    Allocator = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_BoxBndTree_Allocator)

# Register ShapeAnalysis_BoxBndTree in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_BoxBndTree_swigregister(ShapeAnalysis_BoxBndTree)

class shapeanalysis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AdjustByPeriod = _swig_new_static_method(_ShapeAnalysis.shapeanalysis_AdjustByPeriod)
    AdjustToPeriod = _swig_new_static_method(_ShapeAnalysis.shapeanalysis_AdjustToPeriod)
    ContourArea = _swig_new_static_method(_ShapeAnalysis.shapeanalysis_ContourArea)
    FindBounds = _swig_new_static_method(_ShapeAnalysis.shapeanalysis_FindBounds)
    GetFaceUVBounds = _swig_new_static_method(_ShapeAnalysis.shapeanalysis_GetFaceUVBounds)
    IsOuterBound = _swig_new_static_method(_ShapeAnalysis.shapeanalysis_IsOuterBound)
    OuterWire = _swig_new_static_method(_ShapeAnalysis.shapeanalysis_OuterWire)
    TotCross2D = _swig_new_static_method(_ShapeAnalysis.shapeanalysis_TotCross2D)

    __repr__ = _dumps_object


    def __init__(self):
        _ShapeAnalysis.shapeanalysis_swiginit(self, _ShapeAnalysis.new_shapeanalysis())
    __swig_destroy__ = _ShapeAnalysis.delete_shapeanalysis

# Register shapeanalysis in _ShapeAnalysis:
_ShapeAnalysis.shapeanalysis_swigregister(shapeanalysis)
shapeanalysis_AdjustByPeriod = _ShapeAnalysis.shapeanalysis_AdjustByPeriod
shapeanalysis_AdjustToPeriod = _ShapeAnalysis.shapeanalysis_AdjustToPeriod
shapeanalysis_ContourArea = _ShapeAnalysis.shapeanalysis_ContourArea
shapeanalysis_FindBounds = _ShapeAnalysis.shapeanalysis_FindBounds
shapeanalysis_GetFaceUVBounds = _ShapeAnalysis.shapeanalysis_GetFaceUVBounds
shapeanalysis_IsOuterBound = _ShapeAnalysis.shapeanalysis_IsOuterBound
shapeanalysis_OuterWire = _ShapeAnalysis.shapeanalysis_OuterWire
shapeanalysis_TotCross2D = _ShapeAnalysis.shapeanalysis_TotCross2D

class ShapeAnalysis_CheckSmallFace(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CheckPin = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_CheckPin)
    CheckPinEdges = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_CheckPinEdges)
    CheckPinFace = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_CheckPinFace)
    CheckSingleStrip = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_CheckSingleStrip)
    CheckSplittingVertices = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_CheckSplittingVertices)
    CheckSpotFace = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_CheckSpotFace)
    CheckStripEdges = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_CheckStripEdges)
    CheckStripFace = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_CheckStripFace)
    CheckTwisted = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_CheckTwisted)
    FindStripEdges = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_FindStripEdges)
    IsSpotFace = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_IsSpotFace)
    IsStripSupport = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_IsStripSupport)
    SetTolerance = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_SetTolerance)

    def __init__(self, *args):
        r"""
        * Creates an empty tool Checks a Shape i.e. each of its faces, records checks as diagnostics in the <infos> //! If <infos> has not been set before, no check is done //! For faces which are in a Shell, topological data are recorded to allow recovering connectivities after fixing or removing the small faces or parts of faces Enchains various checks on a face inshell : to compute more informations, relevant to topology
        	:rtype: None
        """
        _ShapeAnalysis.ShapeAnalysis_CheckSmallFace_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_CheckSmallFace(*args))
    Status = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_Status)
    StatusPin = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_StatusPin)
    StatusPinEdges = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_StatusPinEdges)
    StatusPinFace = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_StatusPinFace)
    StatusSplitVert = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_StatusSplitVert)
    StatusSpot = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_StatusSpot)
    StatusStrip = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_StatusStrip)
    StatusTwisted = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_StatusTwisted)
    Tolerance = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_Tolerance)

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_CheckSmallFace

# Register ShapeAnalysis_CheckSmallFace in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_CheckSmallFace_swigregister(ShapeAnalysis_CheckSmallFace)

class ShapeAnalysis_Curve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FillBndBox = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Curve_FillBndBox)
    GetSamplePoints = _swig_new_static_method(_ShapeAnalysis.ShapeAnalysis_Curve_GetSamplePoints)
    IsClosed = _swig_new_static_method(_ShapeAnalysis.ShapeAnalysis_Curve_IsClosed)
    IsPeriodic = _swig_new_static_method(_ShapeAnalysis.ShapeAnalysis_Curve_IsPeriodic)
    IsPlanar = _swig_new_static_method(_ShapeAnalysis.ShapeAnalysis_Curve_IsPlanar)
    NextProject = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Curve_NextProject)
    Project = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Curve_Project)
    ProjectAct = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Curve_ProjectAct)
    SelectForwardSeam = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Curve_SelectForwardSeam)
    ValidateRange = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Curve_ValidateRange)

    __repr__ = _dumps_object


    def __init__(self):
        _ShapeAnalysis.ShapeAnalysis_Curve_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_Curve())
    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_Curve

# Register ShapeAnalysis_Curve in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_Curve_swigregister(ShapeAnalysis_Curve)
ShapeAnalysis_Curve_GetSamplePoints = _ShapeAnalysis.ShapeAnalysis_Curve_GetSamplePoints
ShapeAnalysis_Curve_IsClosed = _ShapeAnalysis.ShapeAnalysis_Curve_IsClosed
ShapeAnalysis_Curve_IsPeriodic = _ShapeAnalysis.ShapeAnalysis_Curve_IsPeriodic
ShapeAnalysis_Curve_IsPlanar = _ShapeAnalysis.ShapeAnalysis_Curve_IsPlanar

class ShapeAnalysis_Edge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BoundUV = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Edge_BoundUV)
    CheckCurve3dWithPCurve = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Edge_CheckCurve3dWithPCurve)
    CheckOverlapping = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Edge_CheckOverlapping)
    CheckPCurveRange = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Edge_CheckPCurveRange)
    CheckSameParameter = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Edge_CheckSameParameter)
    CheckVertexTolerance = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Edge_CheckVertexTolerance)
    CheckVerticesWithCurve3d = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Edge_CheckVerticesWithCurve3d)
    CheckVerticesWithPCurve = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Edge_CheckVerticesWithPCurve)
    ComputeDeviation = _swig_new_static_method(_ShapeAnalysis.ShapeAnalysis_Edge_ComputeDeviation)
    Curve3d = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Edge_Curve3d)
    FirstVertex = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Edge_FirstVertex)
    GetEndTangent2d = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Edge_GetEndTangent2d)
    HasCurve3d = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Edge_HasCurve3d)
    HasPCurve = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Edge_HasPCurve)
    IsClosed3d = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Edge_IsClosed3d)
    IsSeam = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Edge_IsSeam)
    LastVertex = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Edge_LastVertex)
    PCurve = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Edge_PCurve)

    def __init__(self, *args):
        r"""
        * Empty constructor; initialises Status to OK
        	:rtype: None
        """
        _ShapeAnalysis.ShapeAnalysis_Edge_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_Edge(*args))
    Status = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Edge_Status)

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_Edge

# Register ShapeAnalysis_Edge in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_Edge_swigregister(ShapeAnalysis_Edge)
ShapeAnalysis_Edge_ComputeDeviation = _ShapeAnalysis.ShapeAnalysis_Edge_ComputeDeviation

class ShapeAnalysis_FreeBoundData(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddNotch = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundData_AddNotch)
    Area = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundData_Area)
    Clear = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundData_Clear)
    FreeBound = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundData_FreeBound)
    NbNotches = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundData_NbNotches)
    Notch = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundData_Notch)
    NotchWidth = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundData_NotchWidth)
    Notches = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundData_Notches)
    Perimeter = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundData_Perimeter)
    Ratio = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundData_Ratio)
    SetArea = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundData_SetArea)
    SetFreeBound = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundData_SetFreeBound)
    SetPerimeter = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundData_SetPerimeter)
    SetRatio = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundData_SetRatio)
    SetWidth = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundData_SetWidth)

    def __init__(self, *args):
        r"""
        * Empty constructor
        	:rtype: None* Creates object with contour given in the form of TopoDS_Wire
        	:param freebound:
        	:type freebound: TopoDS_Wire
        	:rtype: None
        """
        _ShapeAnalysis.ShapeAnalysis_FreeBoundData_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_FreeBoundData(*args))
    Width = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundData_Width)


    @staticmethod
    def DownCast(t):
      return Handle_ShapeAnalysis_FreeBoundData_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_FreeBoundData

# Register ShapeAnalysis_FreeBoundData in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_FreeBoundData_swigregister(ShapeAnalysis_FreeBoundData)

class ShapeAnalysis_FreeBounds(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ConnectEdgesToWires = _swig_new_static_method(_ShapeAnalysis.ShapeAnalysis_FreeBounds_ConnectEdgesToWires)
    ConnectWiresToWires = _swig_new_static_method(_ShapeAnalysis.ShapeAnalysis_FreeBounds_ConnectWiresToWires)
    DispatchWires = _swig_new_static_method(_ShapeAnalysis.ShapeAnalysis_FreeBounds_DispatchWires)
    GetClosedWires = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBounds_GetClosedWires)
    GetOpenWires = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBounds_GetOpenWires)

    def __init__(self, *args):
        r"""
        * Empty constructor
        	:rtype: None* Builds forecasting free bounds of the <shape>. <shape> should be a compound of faces. This constructor is to be used for forecasting free edges with help of sewing analyzer BRepAlgo_Sewing which is called with tolerance <toler>. Free edges are connected into wires only when their ends are at distance less than <toler>. If <splitclosed> is True extracts closed sub-wires out of built closed wires. If <splitopen> is True extracts closed sub-wires out of built open wires.
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param toler:
        	:type toler: float
        	:param splitclosed: default value is Standard_False
        	:type splitclosed: bool
        	:param splitopen: default value is Standard_True
        	:type splitopen: bool
        	:rtype: None* Builds actual free bounds of the <shape>. <shape> should be a compound of shells. This constructor is to be used for getting free edges (ones referenced by the only face) with help of analyzer ShapeAnalysis_Shell. Free edges are connected into wires only when they share the same vertex. If <splitclosed> is True extracts closed sub-wires out of built closed wires. If <splitopen> is True extracts closed sub-wires out of built open wires.
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param splitclosed: default value is Standard_False
        	:type splitclosed: bool
        	:param splitopen: default value is Standard_True
        	:type splitopen: bool
        	:param checkinternaledges: default value is Standard_False
        	:type checkinternaledges: bool
        	:rtype: None
        """
        _ShapeAnalysis.ShapeAnalysis_FreeBounds_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_FreeBounds(*args))
    SplitWires = _swig_new_static_method(_ShapeAnalysis.ShapeAnalysis_FreeBounds_SplitWires)

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_FreeBounds

# Register ShapeAnalysis_FreeBounds in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_FreeBounds_swigregister(ShapeAnalysis_FreeBounds)
ShapeAnalysis_FreeBounds_ConnectEdgesToWires = _ShapeAnalysis.ShapeAnalysis_FreeBounds_ConnectEdgesToWires
ShapeAnalysis_FreeBounds_ConnectWiresToWires = _ShapeAnalysis.ShapeAnalysis_FreeBounds_ConnectWiresToWires
ShapeAnalysis_FreeBounds_DispatchWires = _ShapeAnalysis.ShapeAnalysis_FreeBounds_DispatchWires
ShapeAnalysis_FreeBounds_SplitWires = _ShapeAnalysis.ShapeAnalysis_FreeBounds_SplitWires

class ShapeAnalysis_FreeBoundsProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CheckContours = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundsProperties_CheckContours)
    CheckNotches = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundsProperties_CheckNotches)
    ClosedFreeBound = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundsProperties_ClosedFreeBound)
    ClosedFreeBounds = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundsProperties_ClosedFreeBounds)
    DispatchBounds = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundsProperties_DispatchBounds)
    FillProperties = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundsProperties_FillProperties)
    Init = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundsProperties_Init)
    IsLoaded = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundsProperties_IsLoaded)
    NbClosedFreeBounds = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundsProperties_NbClosedFreeBounds)
    NbFreeBounds = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundsProperties_NbFreeBounds)
    NbOpenFreeBounds = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundsProperties_NbOpenFreeBounds)
    OpenFreeBound = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundsProperties_OpenFreeBound)
    OpenFreeBounds = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundsProperties_OpenFreeBounds)
    Perform = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundsProperties_Perform)
    Shape = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundsProperties_Shape)

    def __init__(self, *args):
        r"""
        * Empty constructor
        	:rtype: None* Creates the object and calls corresponding Init. <shape> should be a compound of faces.
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param tolerance:
        	:type tolerance: float
        	:param splitclosed: default value is Standard_False
        	:type splitclosed: bool
        	:param splitopen: default value is Standard_False
        	:type splitopen: bool
        	:rtype: None* Creates the object and calls corresponding Init. <shape> should be a compound of shells.
        	:param shape:
        	:type shape: TopoDS_Shape
        	:param splitclosed: default value is Standard_False
        	:type splitclosed: bool
        	:param splitopen: default value is Standard_False
        	:type splitopen: bool
        	:rtype: None
        """
        _ShapeAnalysis.ShapeAnalysis_FreeBoundsProperties_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_FreeBoundsProperties(*args))
    Tolerance = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_FreeBoundsProperties_Tolerance)

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_FreeBoundsProperties

# Register ShapeAnalysis_FreeBoundsProperties in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_FreeBoundsProperties_swigregister(ShapeAnalysis_FreeBoundsProperties)

class ShapeAnalysis_Geom(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NearestPlane = _swig_new_static_method(_ShapeAnalysis.ShapeAnalysis_Geom_NearestPlane)
    PositionTrsf = _swig_new_static_method(_ShapeAnalysis.ShapeAnalysis_Geom_PositionTrsf)

    __repr__ = _dumps_object


    def __init__(self):
        _ShapeAnalysis.ShapeAnalysis_Geom_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_Geom())
    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_Geom

# Register ShapeAnalysis_Geom in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_Geom_swigregister(ShapeAnalysis_Geom)
ShapeAnalysis_Geom_NearestPlane = _ShapeAnalysis.ShapeAnalysis_Geom_NearestPlane
ShapeAnalysis_Geom_PositionTrsf = _ShapeAnalysis.ShapeAnalysis_Geom_PositionTrsf

class ShapeAnalysis_ShapeContents(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BigSplineSec = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_BigSplineSec)
    Clear = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_Clear)
    ClearFlags = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_ClearFlags)
    IndirectSec = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_IndirectSec)
    GetModifyBigSplineMode = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_GetModifyBigSplineMode)
    SetModifyBigSplineMode = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_SetModifyBigSplineMode)
    GetModifyIndirectMode = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_GetModifyIndirectMode)
    SetModifyIndirectMode = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_SetModifyIndirectMode)
    GetModifyOffestSurfaceMode = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_GetModifyOffestSurfaceMode)
    SetModifyOffestSurfaceMode = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_SetModifyOffestSurfaceMode)
    GetModifyOffsetCurveMode = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_GetModifyOffsetCurveMode)
    SetModifyOffsetCurveMode = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_SetModifyOffsetCurveMode)
    GetModifyTrimmed2dMode = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_GetModifyTrimmed2dMode)
    SetModifyTrimmed2dMode = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_SetModifyTrimmed2dMode)
    GetModifyTrimmed3dMode = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_GetModifyTrimmed3dMode)
    SetModifyTrimmed3dMode = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_SetModifyTrimmed3dMode)
    NbBSplibeSurf = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbBSplibeSurf)
    NbBezierSurf = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbBezierSurf)
    NbBigSplines = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbBigSplines)
    NbC0Curves = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbC0Curves)
    NbC0Surfaces = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbC0Surfaces)
    NbEdges = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbEdges)
    NbFaceWithSevWires = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbFaceWithSevWires)
    NbFaces = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbFaces)
    NbFreeEdges = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbFreeEdges)
    NbFreeFaces = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbFreeFaces)
    NbFreeWires = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbFreeWires)
    NbIndirectSurf = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbIndirectSurf)
    NbNoPCurve = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbNoPCurve)
    NbOffsetCurves = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbOffsetCurves)
    NbOffsetSurf = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbOffsetSurf)
    NbSharedEdges = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbSharedEdges)
    NbSharedFaces = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbSharedFaces)
    NbSharedFreeEdges = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbSharedFreeEdges)
    NbSharedFreeWires = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbSharedFreeWires)
    NbSharedShells = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbSharedShells)
    NbSharedSolids = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbSharedSolids)
    NbSharedVertices = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbSharedVertices)
    NbSharedWires = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbSharedWires)
    NbShells = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbShells)
    NbSolids = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbSolids)
    NbSolidsWithVoids = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbSolidsWithVoids)
    NbTrimSurf = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbTrimSurf)
    NbTrimmedCurve2d = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbTrimmedCurve2d)
    NbTrimmedCurve3d = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbTrimmedCurve3d)
    NbVertices = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbVertices)
    NbWireWithSevSeams = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbWireWithSevSeams)
    NbWireWitnSeam = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbWireWitnSeam)
    NbWires = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_NbWires)
    OffsetCurveSec = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_OffsetCurveSec)
    OffsetSurfaceSec = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_OffsetSurfaceSec)
    Perform = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_Perform)

    def __init__(self, *args):
        r"""
        * Initialize fields and call ClearFlags()
        	:rtype: None
        """
        _ShapeAnalysis.ShapeAnalysis_ShapeContents_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_ShapeContents(*args))
    Trimmed2dSec = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_Trimmed2dSec)
    Trimmed3dSec = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeContents_Trimmed3dSec)

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_ShapeContents

# Register ShapeAnalysis_ShapeContents in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_ShapeContents_swigregister(ShapeAnalysis_ShapeContents)

class ShapeAnalysis_ShapeTolerance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddTolerance = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeTolerance_AddTolerance)
    GlobalTolerance = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeTolerance_GlobalTolerance)
    InTolerance = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeTolerance_InTolerance)
    InitTolerance = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeTolerance_InitTolerance)
    OverTolerance = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeTolerance_OverTolerance)

    def __init__(self, *args):
        r"""
        * Empty constructor
        	:rtype: None
        """
        _ShapeAnalysis.ShapeAnalysis_ShapeTolerance_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_ShapeTolerance(*args))
    Tolerance = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_ShapeTolerance_Tolerance)

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_ShapeTolerance

# Register ShapeAnalysis_ShapeTolerance in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_ShapeTolerance_swigregister(ShapeAnalysis_ShapeTolerance)

class ShapeAnalysis_Shell(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BadEdges = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Shell_BadEdges)
    CheckOrientedShells = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Shell_CheckOrientedShells)
    Clear = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Shell_Clear)
    FreeEdges = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Shell_FreeEdges)
    HasBadEdges = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Shell_HasBadEdges)
    HasConnectedEdges = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Shell_HasConnectedEdges)
    HasFreeEdges = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Shell_HasFreeEdges)
    IsLoaded = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Shell_IsLoaded)
    LoadShells = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Shell_LoadShells)
    Loaded = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Shell_Loaded)
    NbLoaded = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Shell_NbLoaded)

    __repr__ = _dumps_object


    def __init__(self):
        _ShapeAnalysis.ShapeAnalysis_Shell_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_Shell())
    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_Shell

# Register ShapeAnalysis_Shell in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_Shell_swigregister(ShapeAnalysis_Shell)

class ShapeAnalysis_Surface(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Adaptor3d = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_Adaptor3d)
    Bounds = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_Bounds)
    ComputeBoundIsos = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_ComputeBoundIsos)
    DegeneratedValues = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_DegeneratedValues)
    Gap = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_Gap)
    GetBoxUF = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_GetBoxUF)
    GetBoxUL = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_GetBoxUL)
    GetBoxVF = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_GetBoxVF)
    GetBoxVL = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_GetBoxVL)
    HasSingularities = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_HasSingularities)
    Init = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_Init)
    IsDegenerated = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_IsDegenerated)
    IsUClosed = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_IsUClosed)
    IsVClosed = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_IsVClosed)
    NbSingularities = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_NbSingularities)
    NextValueOfUV = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_NextValueOfUV)
    ProjectDegenerated = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_ProjectDegenerated)
    SetDomain = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_SetDomain)

    def __init__(self, *args):
        r"""
        * Creates an analyzer object on the basis of existing surface
        	:param S:
        	:type S: Geom_Surface
        	:rtype: None
        """
        _ShapeAnalysis.ShapeAnalysis_Surface_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_Surface(*args))
    Singularity = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_Singularity)
    Surface = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_Surface)
    TrueAdaptor3d = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_TrueAdaptor3d)
    UCloseVal = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_UCloseVal)
    UIso = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_UIso)
    UVFromIso = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_UVFromIso)
    VCloseVal = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_VCloseVal)
    VIso = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_VIso)
    Value = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_Value)
    ValueOfUV = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Surface_ValueOfUV)


    @staticmethod
    def DownCast(t):
      return Handle_ShapeAnalysis_Surface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_Surface

# Register ShapeAnalysis_Surface in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_Surface_swigregister(ShapeAnalysis_Surface)

class ShapeAnalysis_TransferParameters(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Init = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_TransferParameters_Init)
    IsSameRange = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_TransferParameters_IsSameRange)
    Perform = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_TransferParameters_Perform)
    SetMaxTolerance = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_TransferParameters_SetMaxTolerance)

    def __init__(self, *args):
        r"""
        * Creates empty tool with myShift = 0 and myScale = 1
        	:rtype: None* Creates a tool and initializes it with edge and face
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        _ShapeAnalysis.ShapeAnalysis_TransferParameters_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_TransferParameters(*args))
    TransferRange = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_TransferParameters_TransferRange)


    @staticmethod
    def DownCast(t):
      return Handle_ShapeAnalysis_TransferParameters_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_TransferParameters

# Register ShapeAnalysis_TransferParameters in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_TransferParameters_swigregister(ShapeAnalysis_TransferParameters)

class ShapeAnalysis_Wire(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CheckClosed = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckClosed)
    CheckConnected = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckConnected)
    CheckCurveGap = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckCurveGap)
    CheckCurveGaps = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckCurveGaps)
    CheckDegenerated = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckDegenerated)
    CheckEdgeCurves = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckEdgeCurves)
    CheckGap2d = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckGap2d)
    CheckGap3d = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckGap3d)
    CheckGaps2d = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckGaps2d)
    CheckGaps3d = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckGaps3d)
    CheckIntersectingEdges = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckIntersectingEdges)
    CheckLacking = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckLacking)
    CheckLoop = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckLoop)
    CheckNotchedEdges = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckNotchedEdges)
    CheckOrder = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckOrder)
    CheckOuterBound = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckOuterBound)
    CheckSeam = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckSeam)
    CheckSelfIntersectingEdge = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckSelfIntersectingEdge)
    CheckSelfIntersection = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckSelfIntersection)
    CheckShapeConnect = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckShapeConnect)
    CheckSmall = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckSmall)
    CheckSmallArea = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckSmallArea)
    CheckTail = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_CheckTail)
    ClearStatuses = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_ClearStatuses)
    Face = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_Face)
    Init = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_Init)
    IsLoaded = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_IsLoaded)
    IsReady = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_IsReady)
    LastCheckStatus = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_LastCheckStatus)
    Load = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_Load)
    MaxDistance2d = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_MaxDistance2d)
    MaxDistance3d = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_MaxDistance3d)
    MinDistance2d = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_MinDistance2d)
    MinDistance3d = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_MinDistance3d)
    NbEdges = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_NbEdges)
    Perform = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_Perform)
    Precision = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_Precision)
    SetFace = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_SetFace)
    SetPrecision = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_SetPrecision)
    SetSurface = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_SetSurface)

    def __init__(self, *args):
        r"""
        * Empty constructor
        	:rtype: None* Creates object with standard TopoDS_Wire, face and precision
        	:param wire:
        	:type wire: TopoDS_Wire
        	:param face:
        	:type face: TopoDS_Face
        	:param precision:
        	:type precision: float
        	:rtype: None* Creates the object with WireData object, face and precision
        	:param sbwd:
        	:type sbwd: ShapeExtend_WireData
        	:param face:
        	:type face: TopoDS_Face
        	:param precision:
        	:type precision: float
        	:rtype: None
        """
        _ShapeAnalysis.ShapeAnalysis_Wire_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_Wire(*args))
    StatusClosed = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_StatusClosed)
    StatusConnected = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_StatusConnected)
    StatusCurveGaps = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_StatusCurveGaps)
    StatusDegenerated = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_StatusDegenerated)
    StatusEdgeCurves = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_StatusEdgeCurves)
    StatusGaps2d = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_StatusGaps2d)
    StatusGaps3d = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_StatusGaps3d)
    StatusLacking = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_StatusLacking)
    StatusLoop = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_StatusLoop)
    StatusOrder = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_StatusOrder)
    StatusSelfIntersection = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_StatusSelfIntersection)
    StatusSmall = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_StatusSmall)
    Surface = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_Surface)
    WireData = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_Wire_WireData)


    @staticmethod
    def DownCast(t):
      return Handle_ShapeAnalysis_Wire_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_Wire

# Register ShapeAnalysis_Wire in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_Wire_swigregister(ShapeAnalysis_Wire)

class ShapeAnalysis_WireOrder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_Add)
    Chain = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_Chain)
    Clear = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_Clear)
    Couple = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_Couple)
    Gap = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_Gap)
    IsDone = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_IsDone)
    GetKeepLoopsMode = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_GetKeepLoopsMode)
    SetKeepLoopsMode = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_SetKeepLoopsMode)
    NbChains = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_NbChains)
    NbCouples = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_NbCouples)
    NbEdges = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_NbEdges)
    Ordered = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_Ordered)
    Perform = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_Perform)
    SetChains = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_SetChains)
    SetCouples = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_SetCouples)
    SetMode = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_SetMode)

    def __init__(self, *args):
        r"""
        * Empty constructor
        	:rtype: None* Creates a WireOrder in 3D (if mode3d is True) or 2D (if False) with a tolerance
        	:param mode3d:
        	:type mode3d: bool
        	:param tol:
        	:type tol: float
        	:rtype: None
        """
        _ShapeAnalysis.ShapeAnalysis_WireOrder_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_WireOrder(*args))
    Status = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_Status)
    Tolerance = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_Tolerance)
    XY = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_XY)
    XYZ = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireOrder_XYZ)

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_WireOrder

# Register ShapeAnalysis_WireOrder in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_WireOrder_swigregister(ShapeAnalysis_WireOrder)

class ShapeAnalysis_WireVertex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Analyze = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_Analyze)
    Data = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_Data)
    Init = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_Init)
    IsDone = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_IsDone)
    Load = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_Load)
    NbEdges = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_NbEdges)
    NextCriter = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_NextCriter)
    NextStatus = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_NextStatus)
    Position = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_Position)
    Precision = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_Precision)
    SetClose = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_SetClose)
    SetDisjoined = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_SetDisjoined)
    SetEnd = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_SetEnd)
    SetInters = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_SetInters)
    SetPrecision = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_SetPrecision)
    SetSameCoords = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_SetSameCoords)
    SetSameVertex = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_SetSameVertex)
    SetStart = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_SetStart)

    def __init__(self, *args):
        r"""
        * Empty constructor
        	:rtype: None
        """
        _ShapeAnalysis.ShapeAnalysis_WireVertex_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_WireVertex(*args))
    Status = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_Status)
    UFollowing = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_UFollowing)
    UPrevious = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_UPrevious)
    WireData = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_WireVertex_WireData)

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_WireVertex

# Register ShapeAnalysis_WireVertex in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_WireVertex_swigregister(ShapeAnalysis_WireVertex)

class ShapeAnalysis_TransferParametersProj(ShapeAnalysis_TransferParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CopyNMVertex = _swig_new_static_method(_ShapeAnalysis.ShapeAnalysis_TransferParametersProj_CopyNMVertex)
    GetForceProjection = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_TransferParametersProj_GetForceProjection)
    SetForceProjection = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_TransferParametersProj_SetForceProjection)
    Perform = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_TransferParametersProj_Perform)

    def __init__(self, *args):
        r"""
        * Creats empty constructor.
        	:rtype: None:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        _ShapeAnalysis.ShapeAnalysis_TransferParametersProj_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_TransferParametersProj(*args))


    @staticmethod
    def DownCast(t):
      return Handle_ShapeAnalysis_TransferParametersProj_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_TransferParametersProj

# Register ShapeAnalysis_TransferParametersProj in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_TransferParametersProj_swigregister(ShapeAnalysis_TransferParametersProj)
ShapeAnalysis_TransferParametersProj_CopyNMVertex = _ShapeAnalysis.ShapeAnalysis_TransferParametersProj_CopyNMVertex

class ShapeAnalysis_HSequenceOfFreeBounds(ShapeAnalysis_SequenceOfFreeBounds, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ShapeAnalysis.ShapeAnalysis_HSequenceOfFreeBounds_swiginit(self, _ShapeAnalysis.new_ShapeAnalysis_HSequenceOfFreeBounds(*args))
    Sequence = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_HSequenceOfFreeBounds_Sequence)
    Append = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_HSequenceOfFreeBounds_Append)
    ChangeSequence = _swig_new_instance_method(_ShapeAnalysis.ShapeAnalysis_HSequenceOfFreeBounds_ChangeSequence)


    @staticmethod
    def DownCast(t):
      return Handle_ShapeAnalysis_HSequenceOfFreeBounds_DownCast(t)

    __swig_destroy__ = _ShapeAnalysis.delete_ShapeAnalysis_HSequenceOfFreeBounds

# Register ShapeAnalysis_HSequenceOfFreeBounds in _ShapeAnalysis:
_ShapeAnalysis.ShapeAnalysis_HSequenceOfFreeBounds_swigregister(ShapeAnalysis_HSequenceOfFreeBounds)



