# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GeomLib module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_geomlib.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _GeomLib
else:
    import _GeomLib

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _GeomLib.SWIG_PyInstanceMethod_New
_swig_new_static_method = _GeomLib.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomLib.delete_SwigPyIterator
    value = _swig_new_instance_method(_GeomLib.SwigPyIterator_value)
    incr = _swig_new_instance_method(_GeomLib.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_GeomLib.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_GeomLib.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_GeomLib.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_GeomLib.SwigPyIterator_copy)
    next = _swig_new_instance_method(_GeomLib.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_GeomLib.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_GeomLib.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_GeomLib.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_GeomLib.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_GeomLib.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_GeomLib.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_GeomLib.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_GeomLib.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_GeomLib.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _GeomLib:
_GeomLib.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Adaptor3d
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.AdvApprox
import OCC.Core.PLib
GeomLib_NoError = _GeomLib.GeomLib_NoError
GeomLib_NotEnoughtPoints = _GeomLib.GeomLib_NotEnoughtPoints
GeomLib_DegreeSmallerThan3 = _GeomLib.GeomLib_DegreeSmallerThan3
GeomLib_InversionProblem = _GeomLib.GeomLib_InversionProblem
class GeomLib_Array1OfMat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_begin)
    end = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_end)
    cbegin = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_cbegin)
    cend = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_cend)

    def __init__(self, *args):
        _GeomLib.GeomLib_Array1OfMat_swiginit(self, _GeomLib.new_GeomLib_Array1OfMat(*args))
    Init = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_Init)
    Size = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_Size)
    Length = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_Length)
    IsEmpty = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_IsEmpty)
    Lower = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_Lower)
    Upper = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_Upper)
    IsDeletable = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_IsDeletable)
    IsAllocated = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_IsAllocated)
    Assign = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_Assign)
    Move = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_Move)
    Set = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_Set)
    First = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_First)
    ChangeFirst = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_ChangeFirst)
    Last = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_Last)
    ChangeLast = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_ChangeLast)
    Value = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_Value)
    ChangeValue = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_ChangeValue)
    __call__ = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat___call__)
    SetValue = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_SetValue)
    Resize = _swig_new_instance_method(_GeomLib.GeomLib_Array1OfMat_Resize)
    __swig_destroy__ = _GeomLib.delete_GeomLib_Array1OfMat

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register GeomLib_Array1OfMat in _GeomLib:
_GeomLib.GeomLib_Array1OfMat_swigregister(GeomLib_Array1OfMat)

class geomlib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AdjustExtremity = _swig_new_static_method(_GeomLib.geomlib_AdjustExtremity)
    AxeOfInertia = _swig_new_static_method(_GeomLib.geomlib_AxeOfInertia)
    BuildCurve3d = _swig_new_static_method(_GeomLib.geomlib_BuildCurve3d)
    CancelDenominatorDerivative = _swig_new_static_method(_GeomLib.geomlib_CancelDenominatorDerivative)
    DensifyArray1OfReal = _swig_new_static_method(_GeomLib.geomlib_DensifyArray1OfReal)
    EvalMaxDistanceAlongParameter = _swig_new_static_method(_GeomLib.geomlib_EvalMaxDistanceAlongParameter)
    EvalMaxParametricDistance = _swig_new_static_method(_GeomLib.geomlib_EvalMaxParametricDistance)
    ExtendCurveToPoint = _swig_new_static_method(_GeomLib.geomlib_ExtendCurveToPoint)
    ExtendSurfByLength = _swig_new_static_method(_GeomLib.geomlib_ExtendSurfByLength)
    FuseIntervals = _swig_new_static_method(_GeomLib.geomlib_FuseIntervals)
    GTransform = _swig_new_static_method(_GeomLib.geomlib_GTransform)
    Inertia = _swig_new_static_method(_GeomLib.geomlib_Inertia)
    IsBSplUClosed = _swig_new_static_method(_GeomLib.geomlib_IsBSplUClosed)
    IsBSplVClosed = _swig_new_static_method(_GeomLib.geomlib_IsBSplVClosed)
    IsBzUClosed = _swig_new_static_method(_GeomLib.geomlib_IsBzUClosed)
    IsBzVClosed = _swig_new_static_method(_GeomLib.geomlib_IsBzVClosed)
    IsClosed = _swig_new_static_method(_GeomLib.geomlib_IsClosed)
    NormEstim = _swig_new_static_method(_GeomLib.geomlib_NormEstim)
    RemovePointsFromArray = _swig_new_static_method(_GeomLib.geomlib_RemovePointsFromArray)
    SameRange = _swig_new_static_method(_GeomLib.geomlib_SameRange)
    To3d = _swig_new_static_method(_GeomLib.geomlib_To3d)

    __repr__ = _dumps_object


    def __init__(self):
        _GeomLib.geomlib_swiginit(self, _GeomLib.new_geomlib())
    __swig_destroy__ = _GeomLib.delete_geomlib

# Register geomlib in _GeomLib:
_GeomLib.geomlib_swigregister(geomlib)
geomlib_AdjustExtremity = _GeomLib.geomlib_AdjustExtremity
geomlib_AxeOfInertia = _GeomLib.geomlib_AxeOfInertia
geomlib_BuildCurve3d = _GeomLib.geomlib_BuildCurve3d
geomlib_CancelDenominatorDerivative = _GeomLib.geomlib_CancelDenominatorDerivative
geomlib_DensifyArray1OfReal = _GeomLib.geomlib_DensifyArray1OfReal
geomlib_EvalMaxDistanceAlongParameter = _GeomLib.geomlib_EvalMaxDistanceAlongParameter
geomlib_EvalMaxParametricDistance = _GeomLib.geomlib_EvalMaxParametricDistance
geomlib_ExtendCurveToPoint = _GeomLib.geomlib_ExtendCurveToPoint
geomlib_ExtendSurfByLength = _GeomLib.geomlib_ExtendSurfByLength
geomlib_FuseIntervals = _GeomLib.geomlib_FuseIntervals
geomlib_GTransform = _GeomLib.geomlib_GTransform
geomlib_Inertia = _GeomLib.geomlib_Inertia
geomlib_IsBSplUClosed = _GeomLib.geomlib_IsBSplUClosed
geomlib_IsBSplVClosed = _GeomLib.geomlib_IsBSplVClosed
geomlib_IsBzUClosed = _GeomLib.geomlib_IsBzUClosed
geomlib_IsBzVClosed = _GeomLib.geomlib_IsBzVClosed
geomlib_IsClosed = _GeomLib.geomlib_IsClosed
geomlib_NormEstim = _GeomLib.geomlib_NormEstim
geomlib_RemovePointsFromArray = _GeomLib.geomlib_RemovePointsFromArray
geomlib_SameRange = _GeomLib.geomlib_SameRange
geomlib_To3d = _GeomLib.geomlib_To3d

class GeomLib_Check2dBSplineCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FixTangent = _swig_new_instance_method(_GeomLib.GeomLib_Check2dBSplineCurve_FixTangent)
    FixedTangent = _swig_new_instance_method(_GeomLib.GeomLib_Check2dBSplineCurve_FixedTangent)

    def __init__(self, *args):
        r"""
        :param Curve:
        	:type Curve: Geom2d_BSplineCurve
        	:param Tolerance:
        	:type Tolerance: float
        	:param AngularTolerance:
        	:type AngularTolerance: float
        	:rtype: None
        """
        _GeomLib.GeomLib_Check2dBSplineCurve_swiginit(self, _GeomLib.new_GeomLib_Check2dBSplineCurve(*args))
    IsDone = _swig_new_instance_method(_GeomLib.GeomLib_Check2dBSplineCurve_IsDone)
    NeedTangentFix = _swig_new_instance_method(_GeomLib.GeomLib_Check2dBSplineCurve_NeedTangentFix)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomLib.delete_GeomLib_Check2dBSplineCurve

# Register GeomLib_Check2dBSplineCurve in _GeomLib:
_GeomLib.GeomLib_Check2dBSplineCurve_swigregister(GeomLib_Check2dBSplineCurve)

class GeomLib_CheckBSplineCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FixTangent = _swig_new_instance_method(_GeomLib.GeomLib_CheckBSplineCurve_FixTangent)
    FixedTangent = _swig_new_instance_method(_GeomLib.GeomLib_CheckBSplineCurve_FixedTangent)

    def __init__(self, *args):
        r"""
        :param Curve:
        	:type Curve: Geom_BSplineCurve
        	:param Tolerance:
        	:type Tolerance: float
        	:param AngularTolerance:
        	:type AngularTolerance: float
        	:rtype: None
        """
        _GeomLib.GeomLib_CheckBSplineCurve_swiginit(self, _GeomLib.new_GeomLib_CheckBSplineCurve(*args))
    IsDone = _swig_new_instance_method(_GeomLib.GeomLib_CheckBSplineCurve_IsDone)
    NeedTangentFix = _swig_new_instance_method(_GeomLib.GeomLib_CheckBSplineCurve_NeedTangentFix)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomLib.delete_GeomLib_CheckBSplineCurve

# Register GeomLib_CheckBSplineCurve in _GeomLib:
_GeomLib.GeomLib_CheckBSplineCurve_swigregister(GeomLib_CheckBSplineCurve)

class GeomLib_CheckCurveOnSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Curve = _swig_new_instance_method(_GeomLib.GeomLib_CheckCurveOnSurface_Curve)
    ErrorStatus = _swig_new_instance_method(_GeomLib.GeomLib_CheckCurveOnSurface_ErrorStatus)

    def __init__(self, *args):
        r"""
        * Default contructor
        	:param :
        	:type : void
        	:rtype: None* Contructor
        	:param theCurve:
        	:type theCurve: Geom_Curve
        	:param theSurface:
        	:type theSurface: Geom_Surface
        	:param theFirst:
        	:type theFirst: float
        	:param theLast:
        	:type theLast: float
        	:param theTolRange: default value is Precision::Confusion()
        	:type theTolRange: float
        	:rtype: None
        """
        _GeomLib.GeomLib_CheckCurveOnSurface_swiginit(self, _GeomLib.new_GeomLib_CheckCurveOnSurface(*args))
    Init = _swig_new_instance_method(_GeomLib.GeomLib_CheckCurveOnSurface_Init)
    IsDone = _swig_new_instance_method(_GeomLib.GeomLib_CheckCurveOnSurface_IsDone)
    MaxDistance = _swig_new_instance_method(_GeomLib.GeomLib_CheckCurveOnSurface_MaxDistance)
    MaxParameter = _swig_new_instance_method(_GeomLib.GeomLib_CheckCurveOnSurface_MaxParameter)
    Perform = _swig_new_instance_method(_GeomLib.GeomLib_CheckCurveOnSurface_Perform)
    Range = _swig_new_instance_method(_GeomLib.GeomLib_CheckCurveOnSurface_Range)
    Surface = _swig_new_instance_method(_GeomLib.GeomLib_CheckCurveOnSurface_Surface)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomLib.delete_GeomLib_CheckCurveOnSurface

# Register GeomLib_CheckCurveOnSurface in _GeomLib:
_GeomLib.GeomLib_CheckCurveOnSurface_swigregister(GeomLib_CheckCurveOnSurface)

class GeomLib_DenominatorMultiplier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * if the surface is rational this will define the evaluator of a real function of 2 variables a(u,v) such that if we define a new surface by : a(u,v) * N(u,v) NewF(u,v) = ---------------- a(u,v) * D(u,v)
        	:param Surface:
        	:type Surface: Geom_BSplineSurface
        	:param KnotVector:
        	:type KnotVector: TColStd_Array1OfReal
        	:rtype: None
        """
        _GeomLib.GeomLib_DenominatorMultiplier_swiginit(self, _GeomLib.new_GeomLib_DenominatorMultiplier(*args))
    Value = _swig_new_instance_method(_GeomLib.GeomLib_DenominatorMultiplier_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomLib.delete_GeomLib_DenominatorMultiplier

# Register GeomLib_DenominatorMultiplier in _GeomLib:
_GeomLib.GeomLib_DenominatorMultiplier_swigregister(GeomLib_DenominatorMultiplier)

class GeomLib_Interpolate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Curve = _swig_new_instance_method(_GeomLib.GeomLib_Interpolate_Curve)
    Error = _swig_new_instance_method(_GeomLib.GeomLib_Interpolate_Error)

    def __init__(self, *args):
        r"""
        :param Degree:
        	:type Degree: int
        	:param NumPoints:
        	:type NumPoints: int
        	:param Points:
        	:type Points: TColgp_Array1OfPnt
        	:param Parameters:
        	:type Parameters: TColStd_Array1OfReal
        	:rtype: None
        """
        _GeomLib.GeomLib_Interpolate_swiginit(self, _GeomLib.new_GeomLib_Interpolate(*args))
    IsDone = _swig_new_instance_method(_GeomLib.GeomLib_Interpolate_IsDone)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomLib.delete_GeomLib_Interpolate

# Register GeomLib_Interpolate in _GeomLib:
_GeomLib.GeomLib_Interpolate_swigregister(GeomLib_Interpolate)

class GeomLib_IsPlanarSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param S:
        	:type S: Geom_Surface
        	:param Tol: default value is 1.0e-7
        	:type Tol: float
        	:rtype: None
        """
        _GeomLib.GeomLib_IsPlanarSurface_swiginit(self, _GeomLib.new_GeomLib_IsPlanarSurface(*args))
    IsPlanar = _swig_new_instance_method(_GeomLib.GeomLib_IsPlanarSurface_IsPlanar)
    Plan = _swig_new_instance_method(_GeomLib.GeomLib_IsPlanarSurface_Plan)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomLib.delete_GeomLib_IsPlanarSurface

# Register GeomLib_IsPlanarSurface in _GeomLib:
_GeomLib.GeomLib_IsPlanarSurface_swigregister(GeomLib_IsPlanarSurface)

class GeomLib_LogSample(OCC.Core.math.math_FunctionSample):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param A:
        	:type A: float
        	:param B:
        	:type B: float
        	:param N:
        	:type N: int
        	:rtype: None
        """
        _GeomLib.GeomLib_LogSample_swiginit(self, _GeomLib.new_GeomLib_LogSample(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomLib.delete_GeomLib_LogSample

# Register GeomLib_LogSample in _GeomLib:
_GeomLib.GeomLib_LogSample_swigregister(GeomLib_LogSample)

class GeomLib_MakeCurvefromApprox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Curve = _swig_new_instance_method(_GeomLib.GeomLib_MakeCurvefromApprox_Curve)
    Curve2d = _swig_new_instance_method(_GeomLib.GeomLib_MakeCurvefromApprox_Curve2d)
    Curve2dFromTwo1d = _swig_new_instance_method(_GeomLib.GeomLib_MakeCurvefromApprox_Curve2dFromTwo1d)

    def __init__(self, *args):
        r"""
        :param Approx:
        	:type Approx: AdvApprox_ApproxAFunction
        	:rtype: None
        """
        _GeomLib.GeomLib_MakeCurvefromApprox_swiginit(self, _GeomLib.new_GeomLib_MakeCurvefromApprox(*args))
    IsDone = _swig_new_instance_method(_GeomLib.GeomLib_MakeCurvefromApprox_IsDone)
    Nb1DSpaces = _swig_new_instance_method(_GeomLib.GeomLib_MakeCurvefromApprox_Nb1DSpaces)
    Nb2DSpaces = _swig_new_instance_method(_GeomLib.GeomLib_MakeCurvefromApprox_Nb2DSpaces)
    Nb3DSpaces = _swig_new_instance_method(_GeomLib.GeomLib_MakeCurvefromApprox_Nb3DSpaces)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomLib.delete_GeomLib_MakeCurvefromApprox

# Register GeomLib_MakeCurvefromApprox in _GeomLib:
_GeomLib.GeomLib_MakeCurvefromApprox_swigregister(GeomLib_MakeCurvefromApprox)

class GeomLib_PolyFunc(OCC.Core.math.math_FunctionWithDerivative):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param Coeffs:
        	:type Coeffs: math_Vector
        	:rtype: None
        """
        _GeomLib.GeomLib_PolyFunc_swiginit(self, _GeomLib.new_GeomLib_PolyFunc(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomLib.delete_GeomLib_PolyFunc

# Register GeomLib_PolyFunc in _GeomLib:
_GeomLib.GeomLib_PolyFunc_swigregister(GeomLib_PolyFunc)

class GeomLib_Tool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Parameter = _swig_new_static_method(_GeomLib.GeomLib_Tool_Parameter)
    Parameters = _swig_new_static_method(_GeomLib.GeomLib_Tool_Parameters)

    __repr__ = _dumps_object


    def __init__(self):
        _GeomLib.GeomLib_Tool_swiginit(self, _GeomLib.new_GeomLib_Tool())
    __swig_destroy__ = _GeomLib.delete_GeomLib_Tool

# Register GeomLib_Tool in _GeomLib:
_GeomLib.GeomLib_Tool_swigregister(GeomLib_Tool)
GeomLib_Tool_Parameter = _GeomLib.GeomLib_Tool_Parameter
GeomLib_Tool_Parameters = _GeomLib.GeomLib_Tool_Parameters



