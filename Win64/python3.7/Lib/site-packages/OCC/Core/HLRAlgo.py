# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
HLRAlgo module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_hlralgo.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _HLRAlgo
else:
    import _HLRAlgo

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _HLRAlgo.SWIG_PyInstanceMethod_New
_swig_new_static_method = _HLRAlgo.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HLRAlgo.delete_SwigPyIterator
    value = _swig_new_instance_method(_HLRAlgo.SwigPyIterator_value)
    incr = _swig_new_instance_method(_HLRAlgo.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_HLRAlgo.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_HLRAlgo.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_HLRAlgo.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_HLRAlgo.SwigPyIterator_copy)
    next = _swig_new_instance_method(_HLRAlgo.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_HLRAlgo.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_HLRAlgo.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_HLRAlgo.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_HLRAlgo.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_HLRAlgo.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_HLRAlgo.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_HLRAlgo.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_HLRAlgo.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_HLRAlgo.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _HLRAlgo:
_HLRAlgo.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopAbs
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TColgp
import OCC.Core.gp
HLRAlgo_PolyMask_EMskOutLin1 = _HLRAlgo.HLRAlgo_PolyMask_EMskOutLin1
HLRAlgo_PolyMask_EMskOutLin2 = _HLRAlgo.HLRAlgo_PolyMask_EMskOutLin2
HLRAlgo_PolyMask_EMskOutLin3 = _HLRAlgo.HLRAlgo_PolyMask_EMskOutLin3
HLRAlgo_PolyMask_EMskGrALin1 = _HLRAlgo.HLRAlgo_PolyMask_EMskGrALin1
HLRAlgo_PolyMask_EMskGrALin2 = _HLRAlgo.HLRAlgo_PolyMask_EMskGrALin2
HLRAlgo_PolyMask_EMskGrALin3 = _HLRAlgo.HLRAlgo_PolyMask_EMskGrALin3
HLRAlgo_PolyMask_FMskBack = _HLRAlgo.HLRAlgo_PolyMask_FMskBack
HLRAlgo_PolyMask_FMskSide = _HLRAlgo.HLRAlgo_PolyMask_FMskSide
HLRAlgo_PolyMask_FMskHiding = _HLRAlgo.HLRAlgo_PolyMask_FMskHiding
HLRAlgo_PolyMask_FMskFlat = _HLRAlgo.HLRAlgo_PolyMask_FMskFlat
HLRAlgo_PolyMask_FMskOnOutL = _HLRAlgo.HLRAlgo_PolyMask_FMskOnOutL
HLRAlgo_PolyMask_FMskOrBack = _HLRAlgo.HLRAlgo_PolyMask_FMskOrBack
HLRAlgo_PolyMask_FMskFrBack = _HLRAlgo.HLRAlgo_PolyMask_FMskFrBack
Handle_HLRAlgo_EdgesBlock_Create = _HLRAlgo.Handle_HLRAlgo_EdgesBlock_Create
Handle_HLRAlgo_EdgesBlock_DownCast = _HLRAlgo.Handle_HLRAlgo_EdgesBlock_DownCast
Handle_HLRAlgo_EdgesBlock_IsNull = _HLRAlgo.Handle_HLRAlgo_EdgesBlock_IsNull
Handle_HLRAlgo_PolyAlgo_Create = _HLRAlgo.Handle_HLRAlgo_PolyAlgo_Create
Handle_HLRAlgo_PolyAlgo_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyAlgo_DownCast
Handle_HLRAlgo_PolyAlgo_IsNull = _HLRAlgo.Handle_HLRAlgo_PolyAlgo_IsNull
Handle_HLRAlgo_PolyData_Create = _HLRAlgo.Handle_HLRAlgo_PolyData_Create
Handle_HLRAlgo_PolyData_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyData_DownCast
Handle_HLRAlgo_PolyData_IsNull = _HLRAlgo.Handle_HLRAlgo_PolyData_IsNull
Handle_HLRAlgo_PolyInternalData_Create = _HLRAlgo.Handle_HLRAlgo_PolyInternalData_Create
Handle_HLRAlgo_PolyInternalData_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyInternalData_DownCast
Handle_HLRAlgo_PolyInternalData_IsNull = _HLRAlgo.Handle_HLRAlgo_PolyInternalData_IsNull
Handle_HLRAlgo_PolyInternalNode_Create = _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_Create
Handle_HLRAlgo_PolyInternalNode_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_DownCast
Handle_HLRAlgo_PolyInternalNode_IsNull = _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_IsNull
Handle_HLRAlgo_PolyShellData_Create = _HLRAlgo.Handle_HLRAlgo_PolyShellData_Create
Handle_HLRAlgo_PolyShellData_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyShellData_DownCast
Handle_HLRAlgo_PolyShellData_IsNull = _HLRAlgo.Handle_HLRAlgo_PolyShellData_IsNull
Handle_HLRAlgo_WiresBlock_Create = _HLRAlgo.Handle_HLRAlgo_WiresBlock_Create
Handle_HLRAlgo_WiresBlock_DownCast = _HLRAlgo.Handle_HLRAlgo_WiresBlock_DownCast
Handle_HLRAlgo_WiresBlock_IsNull = _HLRAlgo.Handle_HLRAlgo_WiresBlock_IsNull
Handle_HLRAlgo_HArray1OfPINod_Create = _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_Create
Handle_HLRAlgo_HArray1OfPINod_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_DownCast
Handle_HLRAlgo_HArray1OfPINod_IsNull = _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_IsNull
Handle_HLRAlgo_HArray1OfPHDat_Create = _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_Create
Handle_HLRAlgo_HArray1OfPHDat_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_DownCast
Handle_HLRAlgo_HArray1OfPHDat_IsNull = _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_IsNull
Handle_HLRAlgo_HArray1OfTData_Create = _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_Create
Handle_HLRAlgo_HArray1OfTData_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_DownCast
Handle_HLRAlgo_HArray1OfTData_IsNull = _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_IsNull
Handle_HLRAlgo_HArray1OfPISeg_Create = _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_Create
Handle_HLRAlgo_HArray1OfPISeg_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_DownCast
Handle_HLRAlgo_HArray1OfPISeg_IsNull = _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_IsNull
class HLRAlgo_InterferenceList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_HLRAlgo.HLRAlgo_InterferenceList_begin)
    end = _swig_new_instance_method(_HLRAlgo.HLRAlgo_InterferenceList_end)
    cbegin = _swig_new_instance_method(_HLRAlgo.HLRAlgo_InterferenceList_cbegin)
    cend = _swig_new_instance_method(_HLRAlgo.HLRAlgo_InterferenceList_cend)

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_InterferenceList_swiginit(self, _HLRAlgo.new_HLRAlgo_InterferenceList(*args))
    Size = _swig_new_instance_method(_HLRAlgo.HLRAlgo_InterferenceList_Size)
    Assign = _swig_new_instance_method(_HLRAlgo.HLRAlgo_InterferenceList_Assign)
    Set = _swig_new_instance_method(_HLRAlgo.HLRAlgo_InterferenceList_Set)
    Clear = _swig_new_instance_method(_HLRAlgo.HLRAlgo_InterferenceList_Clear)
    First = _swig_new_instance_method(_HLRAlgo.HLRAlgo_InterferenceList_First)
    Last = _swig_new_instance_method(_HLRAlgo.HLRAlgo_InterferenceList_Last)
    Append = _swig_new_instance_method(_HLRAlgo.HLRAlgo_InterferenceList_Append)
    Prepend = _swig_new_instance_method(_HLRAlgo.HLRAlgo_InterferenceList_Prepend)
    RemoveFirst = _swig_new_instance_method(_HLRAlgo.HLRAlgo_InterferenceList_RemoveFirst)
    Remove = _swig_new_instance_method(_HLRAlgo.HLRAlgo_InterferenceList_Remove)
    InsertBefore = _swig_new_instance_method(_HLRAlgo.HLRAlgo_InterferenceList_InsertBefore)
    InsertAfter = _swig_new_instance_method(_HLRAlgo.HLRAlgo_InterferenceList_InsertAfter)
    Reverse = _swig_new_instance_method(_HLRAlgo.HLRAlgo_InterferenceList_Reverse)
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_InterferenceList

# Register HLRAlgo_InterferenceList in _HLRAlgo:
_HLRAlgo.HLRAlgo_InterferenceList_swigregister(HLRAlgo_InterferenceList)

class HLRAlgo_ListIteratorOfInterferenceList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_swiginit(self, _HLRAlgo.new_HLRAlgo_ListIteratorOfInterferenceList(*args))
    More = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_More)
    Next = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_Next)
    Value = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_Value)
    ChangeValue = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_ChangeValue)
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_ListIteratorOfInterferenceList

# Register HLRAlgo_ListIteratorOfInterferenceList in _HLRAlgo:
_HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_swigregister(HLRAlgo_ListIteratorOfInterferenceList)

class HLRAlgo_ListOfBPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListOfBPoint_begin)
    end = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListOfBPoint_end)
    cbegin = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListOfBPoint_cbegin)
    cend = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListOfBPoint_cend)

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_ListOfBPoint_swiginit(self, _HLRAlgo.new_HLRAlgo_ListOfBPoint(*args))
    Size = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListOfBPoint_Size)
    Assign = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListOfBPoint_Assign)
    Set = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListOfBPoint_Set)
    Clear = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListOfBPoint_Clear)
    First = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListOfBPoint_First)
    Last = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListOfBPoint_Last)
    Append = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListOfBPoint_Append)
    Prepend = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListOfBPoint_Prepend)
    RemoveFirst = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListOfBPoint_RemoveFirst)
    Remove = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListOfBPoint_Remove)
    InsertBefore = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListOfBPoint_InsertBefore)
    InsertAfter = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListOfBPoint_InsertAfter)
    Reverse = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListOfBPoint_Reverse)
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_ListOfBPoint

# Register HLRAlgo_ListOfBPoint in _HLRAlgo:
_HLRAlgo.HLRAlgo_ListOfBPoint_swigregister(HLRAlgo_ListOfBPoint)

class HLRAlgo_ListIteratorOfListOfBPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_swiginit(self, _HLRAlgo.new_HLRAlgo_ListIteratorOfListOfBPoint(*args))
    More = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_More)
    Next = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_Next)
    Value = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_Value)
    ChangeValue = _swig_new_instance_method(_HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_ChangeValue)
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_ListIteratorOfListOfBPoint

# Register HLRAlgo_ListIteratorOfListOfBPoint in _HLRAlgo:
_HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_swigregister(HLRAlgo_ListIteratorOfListOfBPoint)

class HLRAlgo_Array1OfTData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_begin)
    end = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_end)
    cbegin = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_cbegin)
    cend = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_cend)

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_Array1OfTData_swiginit(self, _HLRAlgo.new_HLRAlgo_Array1OfTData(*args))
    Init = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_Init)
    Size = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_Size)
    Length = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_Length)
    IsEmpty = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_IsEmpty)
    Lower = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_Lower)
    Upper = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_Upper)
    IsDeletable = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_IsDeletable)
    IsAllocated = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_IsAllocated)
    Assign = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_Assign)
    Move = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_Move)
    Set = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_Set)
    First = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_First)
    ChangeFirst = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_ChangeFirst)
    Last = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_Last)
    ChangeLast = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_ChangeLast)
    Value = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_Value)
    ChangeValue = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_ChangeValue)
    __call__ = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData___call__)
    SetValue = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_SetValue)
    Resize = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfTData_Resize)
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Array1OfTData

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register HLRAlgo_Array1OfTData in _HLRAlgo:
_HLRAlgo.HLRAlgo_Array1OfTData_swigregister(HLRAlgo_Array1OfTData)

class HLRAlgo_Array1OfPISeg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_begin)
    end = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_end)
    cbegin = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_cbegin)
    cend = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_cend)

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_Array1OfPISeg_swiginit(self, _HLRAlgo.new_HLRAlgo_Array1OfPISeg(*args))
    Init = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_Init)
    Size = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_Size)
    Length = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_Length)
    IsEmpty = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_IsEmpty)
    Lower = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_Lower)
    Upper = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_Upper)
    IsDeletable = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_IsDeletable)
    IsAllocated = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_IsAllocated)
    Assign = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_Assign)
    Move = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_Move)
    Set = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_Set)
    First = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_First)
    ChangeFirst = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_ChangeFirst)
    Last = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_Last)
    ChangeLast = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_ChangeLast)
    Value = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_Value)
    ChangeValue = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_ChangeValue)
    __call__ = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg___call__)
    SetValue = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_SetValue)
    Resize = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPISeg_Resize)
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Array1OfPISeg

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register HLRAlgo_Array1OfPISeg in _HLRAlgo:
_HLRAlgo.HLRAlgo_Array1OfPISeg_swigregister(HLRAlgo_Array1OfPISeg)

class HLRAlgo_Array1OfPINod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_begin)
    end = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_end)
    cbegin = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_cbegin)
    cend = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_cend)

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_Array1OfPINod_swiginit(self, _HLRAlgo.new_HLRAlgo_Array1OfPINod(*args))
    Init = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_Init)
    Size = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_Size)
    Length = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_Length)
    IsEmpty = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_IsEmpty)
    Lower = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_Lower)
    Upper = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_Upper)
    IsDeletable = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_IsDeletable)
    IsAllocated = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_IsAllocated)
    Assign = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_Assign)
    Move = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_Move)
    Set = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_Set)
    First = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_First)
    ChangeFirst = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_ChangeFirst)
    Last = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_Last)
    ChangeLast = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_ChangeLast)
    Value = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_Value)
    ChangeValue = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_ChangeValue)
    __call__ = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod___call__)
    SetValue = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_SetValue)
    Resize = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Array1OfPINod_Resize)
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Array1OfPINod

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register HLRAlgo_Array1OfPINod in _HLRAlgo:
_HLRAlgo.HLRAlgo_Array1OfPINod_swigregister(HLRAlgo_Array1OfPINod)

class hlralgo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddMinMax = _swig_new_static_method(_HLRAlgo.hlralgo_AddMinMax)
    CopyMinMax = _swig_new_static_method(_HLRAlgo.hlralgo_CopyMinMax)
    DecodeMinMax = _swig_new_static_method(_HLRAlgo.hlralgo_DecodeMinMax)
    EncodeMinMax = _swig_new_static_method(_HLRAlgo.hlralgo_EncodeMinMax)
    EnlargeMinMax = _swig_new_static_method(_HLRAlgo.hlralgo_EnlargeMinMax)
    InitMinMax = _swig_new_static_method(_HLRAlgo.hlralgo_InitMinMax)
    SizeBox = _swig_new_static_method(_HLRAlgo.hlralgo_SizeBox)
    UpdateMinMax = _swig_new_static_method(_HLRAlgo.hlralgo_UpdateMinMax)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRAlgo.hlralgo_swiginit(self, _HLRAlgo.new_hlralgo())
    __swig_destroy__ = _HLRAlgo.delete_hlralgo

# Register hlralgo in _HLRAlgo:
_HLRAlgo.hlralgo_swigregister(hlralgo)
hlralgo_AddMinMax = _HLRAlgo.hlralgo_AddMinMax
hlralgo_CopyMinMax = _HLRAlgo.hlralgo_CopyMinMax
hlralgo_DecodeMinMax = _HLRAlgo.hlralgo_DecodeMinMax
hlralgo_EncodeMinMax = _HLRAlgo.hlralgo_EncodeMinMax
hlralgo_EnlargeMinMax = _HLRAlgo.hlralgo_EnlargeMinMax
hlralgo_InitMinMax = _HLRAlgo.hlralgo_InitMinMax
hlralgo_SizeBox = _HLRAlgo.hlralgo_SizeBox
hlralgo_UpdateMinMax = _HLRAlgo.hlralgo_UpdateMinMax

class HLRAlgo_BiPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param X1:
        	:type X1: float
        	:param Y1:
        	:type Y1: float
        	:param Z1:
        	:type Z1: float
        	:param X2:
        	:type X2: float
        	:param Y2:
        	:type Y2: float
        	:param Z2:
        	:type Z2: float
        	:param XT1:
        	:type XT1: float
        	:param YT1:
        	:type YT1: float
        	:param ZT1:
        	:type ZT1: float
        	:param XT2:
        	:type XT2: float
        	:param YT2:
        	:type YT2: float
        	:param ZT2:
        	:type ZT2: float
        	:param Index:
        	:type Index: int
        	:param reg1:
        	:type reg1: bool
        	:param regn:
        	:type regn: bool
        	:param outl:
        	:type outl: bool
        	:param intl:
        	:type intl: bool
        	:rtype: None:param X1:
        	:type X1: float
        	:param Y1:
        	:type Y1: float
        	:param Z1:
        	:type Z1: float
        	:param X2:
        	:type X2: float
        	:param Y2:
        	:type Y2: float
        	:param Z2:
        	:type Z2: float
        	:param XT1:
        	:type XT1: float
        	:param YT1:
        	:type YT1: float
        	:param ZT1:
        	:type ZT1: float
        	:param XT2:
        	:type XT2: float
        	:param YT2:
        	:type YT2: float
        	:param ZT2:
        	:type ZT2: float
        	:param Index:
        	:type Index: int
        	:param flag:
        	:type flag: int
        	:rtype: None:param X1:
        	:type X1: float
        	:param Y1:
        	:type Y1: float
        	:param Z1:
        	:type Z1: float
        	:param X2:
        	:type X2: float
        	:param Y2:
        	:type Y2: float
        	:param Z2:
        	:type Z2: float
        	:param XT1:
        	:type XT1: float
        	:param YT1:
        	:type YT1: float
        	:param ZT1:
        	:type ZT1: float
        	:param XT2:
        	:type XT2: float
        	:param YT2:
        	:type YT2: float
        	:param ZT2:
        	:type ZT2: float
        	:param Index:
        	:type Index: int
        	:param i1:
        	:type i1: int
        	:param i1p1:
        	:type i1p1: int
        	:param i1p2:
        	:type i1p2: int
        	:param reg1:
        	:type reg1: bool
        	:param regn:
        	:type regn: bool
        	:param outl:
        	:type outl: bool
        	:param intl:
        	:type intl: bool
        	:rtype: None:param X1:
        	:type X1: float
        	:param Y1:
        	:type Y1: float
        	:param Z1:
        	:type Z1: float
        	:param X2:
        	:type X2: float
        	:param Y2:
        	:type Y2: float
        	:param Z2:
        	:type Z2: float
        	:param XT1:
        	:type XT1: float
        	:param YT1:
        	:type YT1: float
        	:param ZT1:
        	:type ZT1: float
        	:param XT2:
        	:type XT2: float
        	:param YT2:
        	:type YT2: float
        	:param ZT2:
        	:type ZT2: float
        	:param Index:
        	:type Index: int
        	:param i1:
        	:type i1: int
        	:param i1p1:
        	:type i1p1: int
        	:param i1p2:
        	:type i1p2: int
        	:param flag:
        	:type flag: int
        	:rtype: None:param X1:
        	:type X1: float
        	:param Y1:
        	:type Y1: float
        	:param Z1:
        	:type Z1: float
        	:param X2:
        	:type X2: float
        	:param Y2:
        	:type Y2: float
        	:param Z2:
        	:type Z2: float
        	:param XT1:
        	:type XT1: float
        	:param YT1:
        	:type YT1: float
        	:param ZT1:
        	:type ZT1: float
        	:param XT2:
        	:type XT2: float
        	:param YT2:
        	:type YT2: float
        	:param ZT2:
        	:type ZT2: float
        	:param Index:
        	:type Index: int
        	:param i1:
        	:type i1: int
        	:param i1p1:
        	:type i1p1: int
        	:param i1p2:
        	:type i1p2: int
        	:param i2:
        	:type i2: int
        	:param i2p1:
        	:type i2p1: int
        	:param i2p2:
        	:type i2p2: int
        	:param reg1:
        	:type reg1: bool
        	:param regn:
        	:type regn: bool
        	:param outl:
        	:type outl: bool
        	:param intl:
        	:type intl: bool
        	:rtype: None:param X1:
        	:type X1: float
        	:param Y1:
        	:type Y1: float
        	:param Z1:
        	:type Z1: float
        	:param X2:
        	:type X2: float
        	:param Y2:
        	:type Y2: float
        	:param Z2:
        	:type Z2: float
        	:param XT1:
        	:type XT1: float
        	:param YT1:
        	:type YT1: float
        	:param ZT1:
        	:type ZT1: float
        	:param XT2:
        	:type XT2: float
        	:param YT2:
        	:type YT2: float
        	:param ZT2:
        	:type ZT2: float
        	:param Index:
        	:type Index: int
        	:param i1:
        	:type i1: int
        	:param i1p1:
        	:type i1p1: int
        	:param i1p2:
        	:type i1p2: int
        	:param i2:
        	:type i2: int
        	:param i2p1:
        	:type i2p1: int
        	:param i2p2:
        	:type i2p2: int
        	:param flag:
        	:type flag: int
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_BiPoint_swiginit(self, _HLRAlgo.new_HLRAlgo_BiPoint(*args))
    Hidden = _swig_new_instance_method(_HLRAlgo.HLRAlgo_BiPoint_Hidden)
    IntLine = _swig_new_instance_method(_HLRAlgo.HLRAlgo_BiPoint_IntLine)
    OutLine = _swig_new_instance_method(_HLRAlgo.HLRAlgo_BiPoint_OutLine)
    Rg1Line = _swig_new_instance_method(_HLRAlgo.HLRAlgo_BiPoint_Rg1Line)
    RgNLine = _swig_new_instance_method(_HLRAlgo.HLRAlgo_BiPoint_RgNLine)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_BiPoint

# Register HLRAlgo_BiPoint in _HLRAlgo:
_HLRAlgo.HLRAlgo_BiPoint_swigregister(HLRAlgo_BiPoint)

class HLRAlgo_Coincidence(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""":rtype: None"""
        _HLRAlgo.HLRAlgo_Coincidence_swiginit(self, _HLRAlgo.new_HLRAlgo_Coincidence(*args))
    Set2D = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Coincidence_Set2D)
    SetState3D = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Coincidence_SetState3D)
    State3D = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Coincidence_State3D)
    Value2D = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Coincidence_Value2D)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Coincidence

# Register HLRAlgo_Coincidence in _HLRAlgo:
_HLRAlgo.HLRAlgo_Coincidence_swigregister(HLRAlgo_Coincidence)

class HLRAlgo_EdgeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Iterator on the visible or hidden parts of an edge.
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_EdgeIterator_swiginit(self, _HLRAlgo.new_HLRAlgo_EdgeIterator(*args))
    Hidden = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgeIterator_Hidden)
    InitHidden = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgeIterator_InitHidden)
    InitVisible = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgeIterator_InitVisible)
    MoreHidden = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgeIterator_MoreHidden)
    MoreVisible = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgeIterator_MoreVisible)
    NextHidden = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgeIterator_NextHidden)
    NextVisible = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgeIterator_NextVisible)
    Visible = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgeIterator_Visible)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_EdgeIterator

# Register HLRAlgo_EdgeIterator in _HLRAlgo:
_HLRAlgo.HLRAlgo_EdgeIterator_swigregister(HLRAlgo_EdgeIterator)

class HLRAlgo_EdgeStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AllHidden = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgeStatus_AllHidden)
    AllVisible = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgeStatus_AllVisible)
    Bounds = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgeStatus_Bounds)

    def __init__(self, *args):
        r"""
        :rtype: None* Creates a new EdgeStatus. Default visible. The Edge is bounded by the interval <Start>, <End> with the tolerances <TolStart>, <TolEnd>.
        	:param Start:
        	:type Start: float
        	:param TolStart:
        	:type TolStart: Standard_ShortReal
        	:param End:
        	:type End: float
        	:param TolEnd:
        	:type TolEnd: Standard_ShortReal
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_EdgeStatus_swiginit(self, _HLRAlgo.new_HLRAlgo_EdgeStatus(*args))
    Hide = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgeStatus_Hide)
    HideAll = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgeStatus_HideAll)
    Initialize = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgeStatus_Initialize)
    NbVisiblePart = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgeStatus_NbVisiblePart)
    ShowAll = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgeStatus_ShowAll)
    VisiblePart = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgeStatus_VisiblePart)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_EdgeStatus

# Register HLRAlgo_EdgeStatus in _HLRAlgo:
_HLRAlgo.HLRAlgo_EdgeStatus_swigregister(HLRAlgo_EdgeStatus)

class HLRAlgo_EdgesBlock(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Double = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgesBlock_Double)
    Edge = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgesBlock_Edge)

    def __init__(self, *args):
        r"""
        * Create a Block of Edges for a wire.
        	:param NbEdges:
        	:type NbEdges: int
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_EdgesBlock_swiginit(self, _HLRAlgo.new_HLRAlgo_EdgesBlock(*args))
    Internal = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgesBlock_Internal)
    IsoLine = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgesBlock_IsoLine)
    NbEdges = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgesBlock_NbEdges)
    Orientation = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgesBlock_Orientation)
    OutLine = _swig_new_instance_method(_HLRAlgo.HLRAlgo_EdgesBlock_OutLine)


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_EdgesBlock_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_EdgesBlock

# Register HLRAlgo_EdgesBlock in _HLRAlgo:
_HLRAlgo.HLRAlgo_EdgesBlock_swigregister(HLRAlgo_EdgesBlock)

class HLRAlgo_Interference(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Boundary = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Interference_Boundary)
    BoundaryTransition = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Interference_BoundaryTransition)
    ChangeBoundary = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Interference_ChangeBoundary)
    ChangeIntersection = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Interference_ChangeIntersection)

    def __init__(self, *args):
        r"""
        :rtype: None:param Inters:
        	:type Inters: HLRAlgo_Intersection
        	:param Bound:
        	:type Bound: HLRAlgo_Coincidence
        	:param Orient:
        	:type Orient: TopAbs_Orientation
        	:param Trans:
        	:type Trans: TopAbs_Orientation
        	:param BTrans:
        	:type BTrans: TopAbs_Orientation
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_Interference_swiginit(self, _HLRAlgo.new_HLRAlgo_Interference(*args))
    Intersection = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Interference_Intersection)
    Orientation = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Interference_Orientation)
    Transition = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Interference_Transition)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Interference

# Register HLRAlgo_Interference in _HLRAlgo:
_HLRAlgo.HLRAlgo_Interference_swigregister(HLRAlgo_Interference)

class HLRAlgo_Intersection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param Ori:
        	:type Ori: TopAbs_Orientation
        	:param Lev:
        	:type Lev: int
        	:param SegInd:
        	:type SegInd: int
        	:param Ind:
        	:type Ind: int
        	:param P:
        	:type P: float
        	:param Tol:
        	:type Tol: Standard_ShortReal
        	:param S:
        	:type S: TopAbs_State
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_Intersection_swiginit(self, _HLRAlgo.new_HLRAlgo_Intersection(*args))
    Index = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Intersection_Index)
    Level = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Intersection_Level)
    Orientation = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Intersection_Orientation)
    Parameter = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Intersection_Parameter)
    SegIndex = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Intersection_SegIndex)
    State = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Intersection_State)
    Tolerance = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Intersection_Tolerance)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Intersection

# Register HLRAlgo_Intersection in _HLRAlgo:
_HLRAlgo.HLRAlgo_Intersection_swigregister(HLRAlgo_Intersection)

class HLRAlgo_PolyAlgo(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Clear = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyAlgo_Clear)

    def __init__(self, *args):
        r""":rtype: None"""
        _HLRAlgo.HLRAlgo_PolyAlgo_swiginit(self, _HLRAlgo.new_HLRAlgo_PolyAlgo(*args))
    Hide = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyAlgo_Hide)
    Init = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyAlgo_Init)
    InitHide = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyAlgo_InitHide)
    InitShow = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyAlgo_InitShow)
    MoreHide = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyAlgo_MoreHide)
    MoreShow = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyAlgo_MoreShow)
    NextHide = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyAlgo_NextHide)
    NextShow = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyAlgo_NextShow)
    PolyShell = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyAlgo_PolyShell)
    Show = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyAlgo_Show)
    Update = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyAlgo_Update)


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_PolyAlgo_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyAlgo

# Register HLRAlgo_PolyAlgo in _HLRAlgo:
_HLRAlgo.HLRAlgo_PolyAlgo_swigregister(HLRAlgo_PolyAlgo)

class HLRAlgo_PolyData(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FaceIndex = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyData_FaceIndex)

    def __init__(self, *args):
        r""":rtype: None"""
        _HLRAlgo.HLRAlgo_PolyData_swiginit(self, _HLRAlgo.new_HLRAlgo_PolyData(*args))
    HNodes = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyData_HNodes)
    HPHDat = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyData_HPHDat)
    HTData = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyData_HTData)
    Hiding = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyData_Hiding)
    Nodes = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyData_Nodes)
    PHDat = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyData_PHDat)
    TData = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyData_TData)


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_PolyData_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyData

# Register HLRAlgo_PolyData in _HLRAlgo:
_HLRAlgo.HLRAlgo_PolyData_swigregister(HLRAlgo_PolyData)

class HLRAlgo_PolyInternalData(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddNode = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyInternalData_AddNode)
    DecPINod = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyInternalData_DecPINod)
    DecPISeg = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyInternalData_DecPISeg)
    DecTData = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyInternalData_DecTData)
    Dump = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyInternalData_Dump)

    def __init__(self, *args):
        r"""
        :param nbNod:
        	:type nbNod: int
        	:param nbTri:
        	:type nbTri: int
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_PolyInternalData_swiginit(self, _HLRAlgo.new_HLRAlgo_PolyInternalData(*args))
    IncPINod = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyInternalData_IncPINod)
    IncPISeg = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyInternalData_IncPISeg)
    IncTData = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyInternalData_IncTData)
    IntOutL = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyInternalData_IntOutL)
    NbPINod = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyInternalData_NbPINod)
    NbPISeg = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyInternalData_NbPISeg)
    NbTData = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyInternalData_NbTData)
    PINod = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyInternalData_PINod)
    PISeg = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyInternalData_PISeg)
    Planar = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyInternalData_Planar)
    TData = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyInternalData_TData)
    UpdateLinks = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyInternalData_UpdateLinks)


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_PolyInternalData_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyInternalData

# Register HLRAlgo_PolyInternalData in _HLRAlgo:
_HLRAlgo.HLRAlgo_PolyInternalData_swigregister(HLRAlgo_PolyInternalData)

class HLRAlgo_PolyInternalNode(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""":rtype: None"""
        _HLRAlgo.HLRAlgo_PolyInternalNode_swiginit(self, _HLRAlgo.new_HLRAlgo_PolyInternalNode(*args))


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_PolyInternalNode_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyInternalNode

# Register HLRAlgo_PolyInternalNode in _HLRAlgo:
_HLRAlgo.HLRAlgo_PolyInternalNode_swigregister(HLRAlgo_PolyInternalNode)

class HLRAlgo_PolyShellData(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Edges = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyShellData_Edges)

    def __init__(self, *args):
        r"""
        :param nbFace:
        	:type nbFace: int
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_PolyShellData_swiginit(self, _HLRAlgo.new_HLRAlgo_PolyShellData(*args))
    Hiding = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyShellData_Hiding)
    HidingPolyData = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyShellData_HidingPolyData)
    PolyData = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyShellData_PolyData)
    UpdateGlobalMinMax = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyShellData_UpdateGlobalMinMax)
    UpdateHiding = _swig_new_instance_method(_HLRAlgo.HLRAlgo_PolyShellData_UpdateHiding)


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_PolyShellData_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyShellData

# Register HLRAlgo_PolyShellData in _HLRAlgo:
_HLRAlgo.HLRAlgo_PolyShellData_swigregister(HLRAlgo_PolyShellData)

class HLRAlgo_Projector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Directions = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Projector_Directions)
    Focus = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Projector_Focus)
    FullTransformation = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Projector_FullTransformation)

    def __init__(self, *args):
        r"""
        :rtype: None* Creates an axonometric projector. <CS> is the viewing coordinate system.
        	:param CS:
        	:type CS: gp_Ax2
        	:rtype: None* Creates a perspective projector. <CS> is the viewing coordinate system.
        	:param CS:
        	:type CS: gp_Ax2
        	:param Focus:
        	:type Focus: float
        	:rtype: None* build a Projector with automatic minmax directions.
        	:param T:
        	:type T: gp_Trsf
        	:param Persp:
        	:type Persp: bool
        	:param Focus:
        	:type Focus: float
        	:rtype: None* build a Projector with given minmax directions.
        	:param T:
        	:type T: gp_Trsf
        	:param Persp:
        	:type Persp: bool
        	:param Focus:
        	:type Focus: float
        	:param v1:
        	:type v1: gp_Vec2d
        	:param v2:
        	:type v2: gp_Vec2d
        	:param v3:
        	:type v3: gp_Vec2d
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_Projector_swiginit(self, _HLRAlgo.new_HLRAlgo_Projector(*args))
    InvertedTransformation = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Projector_InvertedTransformation)
    Perspective = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Projector_Perspective)
    Project = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Projector_Project)
    Scaled = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Projector_Scaled)
    Set = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Projector_Set)
    Shoot = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Projector_Shoot)
    Transform = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Projector_Transform)
    Transformation = _swig_new_instance_method(_HLRAlgo.HLRAlgo_Projector_Transformation)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Projector

# Register HLRAlgo_Projector in _HLRAlgo:
_HLRAlgo.HLRAlgo_Projector_swigregister(HLRAlgo_Projector)

class HLRAlgo_WiresBlock(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Create a Block of Blocks.
        	:param NbWires:
        	:type NbWires: int
        	:rtype: None
        """
        _HLRAlgo.HLRAlgo_WiresBlock_swiginit(self, _HLRAlgo.new_HLRAlgo_WiresBlock(*args))
    MinMax = _swig_new_instance_method(_HLRAlgo.HLRAlgo_WiresBlock_MinMax)
    NbWires = _swig_new_instance_method(_HLRAlgo.HLRAlgo_WiresBlock_NbWires)
    Set = _swig_new_instance_method(_HLRAlgo.HLRAlgo_WiresBlock_Set)
    UpdateMinMax = _swig_new_instance_method(_HLRAlgo.HLRAlgo_WiresBlock_UpdateMinMax)
    Wire = _swig_new_instance_method(_HLRAlgo.HLRAlgo_WiresBlock_Wire)


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_WiresBlock_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_WiresBlock

# Register HLRAlgo_WiresBlock in _HLRAlgo:
_HLRAlgo.HLRAlgo_WiresBlock_swigregister(HLRAlgo_WiresBlock)

class HLRAlgo_HArray1OfPINod(HLRAlgo_Array1OfPINod, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_HArray1OfPINod_swiginit(self, _HLRAlgo.new_HLRAlgo_HArray1OfPINod(*args))
    Array1 = _swig_new_instance_method(_HLRAlgo.HLRAlgo_HArray1OfPINod_Array1)
    ChangeArray1 = _swig_new_instance_method(_HLRAlgo.HLRAlgo_HArray1OfPINod_ChangeArray1)


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_HArray1OfPINod_DownCast(t)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_HArray1OfPINod

# Register HLRAlgo_HArray1OfPINod in _HLRAlgo:
_HLRAlgo.HLRAlgo_HArray1OfPINod_swigregister(HLRAlgo_HArray1OfPINod)

class HLRAlgo_HArray1OfPHDat(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_HArray1OfPHDat_swiginit(self, _HLRAlgo.new_HLRAlgo_HArray1OfPHDat(*args))
    Array1 = _swig_new_instance_method(_HLRAlgo.HLRAlgo_HArray1OfPHDat_Array1)
    ChangeArray1 = _swig_new_instance_method(_HLRAlgo.HLRAlgo_HArray1OfPHDat_ChangeArray1)


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_HArray1OfPHDat_DownCast(t)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_HArray1OfPHDat

# Register HLRAlgo_HArray1OfPHDat in _HLRAlgo:
_HLRAlgo.HLRAlgo_HArray1OfPHDat_swigregister(HLRAlgo_HArray1OfPHDat)

class HLRAlgo_HArray1OfTData(HLRAlgo_Array1OfTData, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_HArray1OfTData_swiginit(self, _HLRAlgo.new_HLRAlgo_HArray1OfTData(*args))
    Array1 = _swig_new_instance_method(_HLRAlgo.HLRAlgo_HArray1OfTData_Array1)
    ChangeArray1 = _swig_new_instance_method(_HLRAlgo.HLRAlgo_HArray1OfTData_ChangeArray1)


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_HArray1OfTData_DownCast(t)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_HArray1OfTData

# Register HLRAlgo_HArray1OfTData in _HLRAlgo:
_HLRAlgo.HLRAlgo_HArray1OfTData_swigregister(HLRAlgo_HArray1OfTData)

class HLRAlgo_HArray1OfPISeg(HLRAlgo_Array1OfPISeg, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRAlgo.HLRAlgo_HArray1OfPISeg_swiginit(self, _HLRAlgo.new_HLRAlgo_HArray1OfPISeg(*args))
    Array1 = _swig_new_instance_method(_HLRAlgo.HLRAlgo_HArray1OfPISeg_Array1)
    ChangeArray1 = _swig_new_instance_method(_HLRAlgo.HLRAlgo_HArray1OfPISeg_ChangeArray1)


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_HArray1OfPISeg_DownCast(t)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_HArray1OfPISeg

# Register HLRAlgo_HArray1OfPISeg in _HLRAlgo:
_HLRAlgo.HLRAlgo_HArray1OfPISeg_swigregister(HLRAlgo_HArray1OfPISeg)



