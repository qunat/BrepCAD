# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ShapeBuild module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_shapebuild.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ShapeBuild
else:
    import _ShapeBuild

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ShapeBuild.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ShapeBuild.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ShapeBuild.delete_SwigPyIterator
    value = _swig_new_instance_method(_ShapeBuild.SwigPyIterator_value)
    incr = _swig_new_instance_method(_ShapeBuild.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_ShapeBuild.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_ShapeBuild.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_ShapeBuild.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_ShapeBuild.SwigPyIterator_copy)
    next = _swig_new_instance_method(_ShapeBuild.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_ShapeBuild.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_ShapeBuild.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_ShapeBuild.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_ShapeBuild.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_ShapeBuild.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_ShapeBuild.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_ShapeBuild.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_ShapeBuild.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_ShapeBuild.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ShapeBuild:
_ShapeBuild.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.Geom2d
import OCC.Core.BRepTools
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.TopTools
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.ShapeExtend
import OCC.Core.TColGeom
Handle_ShapeBuild_ReShape_Create = _ShapeBuild.Handle_ShapeBuild_ReShape_Create
Handle_ShapeBuild_ReShape_DownCast = _ShapeBuild.Handle_ShapeBuild_ReShape_DownCast
Handle_ShapeBuild_ReShape_IsNull = _ShapeBuild.Handle_ShapeBuild_ReShape_IsNull
class shapebuild(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PlaneXOY = _swig_new_static_method(_ShapeBuild.shapebuild_PlaneXOY)

    __repr__ = _dumps_object


    def __init__(self):
        _ShapeBuild.shapebuild_swiginit(self, _ShapeBuild.new_shapebuild())
    __swig_destroy__ = _ShapeBuild.delete_shapebuild

# Register shapebuild in _ShapeBuild:
_ShapeBuild.shapebuild_swigregister(shapebuild)
shapebuild_PlaneXOY = _ShapeBuild.shapebuild_PlaneXOY

class ShapeBuild_Edge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BuildCurve3d = _swig_new_instance_method(_ShapeBuild.ShapeBuild_Edge_BuildCurve3d)
    Copy = _swig_new_instance_method(_ShapeBuild.ShapeBuild_Edge_Copy)
    CopyPCurves = _swig_new_instance_method(_ShapeBuild.ShapeBuild_Edge_CopyPCurves)
    CopyRanges = _swig_new_instance_method(_ShapeBuild.ShapeBuild_Edge_CopyRanges)
    CopyReplaceVertices = _swig_new_instance_method(_ShapeBuild.ShapeBuild_Edge_CopyReplaceVertices)
    MakeEdge = _swig_new_instance_method(_ShapeBuild.ShapeBuild_Edge_MakeEdge)
    ReassignPCurve = _swig_new_instance_method(_ShapeBuild.ShapeBuild_Edge_ReassignPCurve)
    RemoveCurve3d = _swig_new_instance_method(_ShapeBuild.ShapeBuild_Edge_RemoveCurve3d)
    RemovePCurve = _swig_new_instance_method(_ShapeBuild.ShapeBuild_Edge_RemovePCurve)
    ReplacePCurve = _swig_new_instance_method(_ShapeBuild.ShapeBuild_Edge_ReplacePCurve)
    SetRange3d = _swig_new_instance_method(_ShapeBuild.ShapeBuild_Edge_SetRange3d)
    TransformPCurve = _swig_new_instance_method(_ShapeBuild.ShapeBuild_Edge_TransformPCurve)

    __repr__ = _dumps_object


    def __init__(self):
        _ShapeBuild.ShapeBuild_Edge_swiginit(self, _ShapeBuild.new_ShapeBuild_Edge())
    __swig_destroy__ = _ShapeBuild.delete_ShapeBuild_Edge

# Register ShapeBuild_Edge in _ShapeBuild:
_ShapeBuild.ShapeBuild_Edge_swigregister(ShapeBuild_Edge)

class ShapeBuild_ReShape(OCC.Core.BRepTools.BRepTools_ReShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Apply = _swig_new_instance_method(_ShapeBuild.ShapeBuild_ReShape_Apply)

    def __init__(self, *args):
        r"""
        * Returns an empty Reshape
        	:rtype: None
        """
        _ShapeBuild.ShapeBuild_ReShape_swiginit(self, _ShapeBuild.new_ShapeBuild_ReShape(*args))
    Status = _swig_new_instance_method(_ShapeBuild.ShapeBuild_ReShape_Status)


    @staticmethod
    def DownCast(t):
      return Handle_ShapeBuild_ReShape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeBuild.delete_ShapeBuild_ReShape

# Register ShapeBuild_ReShape in _ShapeBuild:
_ShapeBuild.ShapeBuild_ReShape_swigregister(ShapeBuild_ReShape)

class ShapeBuild_Vertex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CombineVertex = _swig_new_instance_method(_ShapeBuild.ShapeBuild_Vertex_CombineVertex)

    __repr__ = _dumps_object


    def __init__(self):
        _ShapeBuild.ShapeBuild_Vertex_swiginit(self, _ShapeBuild.new_ShapeBuild_Vertex())
    __swig_destroy__ = _ShapeBuild.delete_ShapeBuild_Vertex

# Register ShapeBuild_Vertex in _ShapeBuild:
_ShapeBuild.ShapeBuild_Vertex_swigregister(ShapeBuild_Vertex)



