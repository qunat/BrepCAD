# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Geom2dHatch module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_geom2dhatch.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Geom2dHatch
else:
    import _Geom2dHatch

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _Geom2dHatch.SWIG_PyInstanceMethod_New
_swig_new_static_method = _Geom2dHatch.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geom2dHatch.delete_SwigPyIterator
    value = _swig_new_instance_method(_Geom2dHatch.SwigPyIterator_value)
    incr = _swig_new_instance_method(_Geom2dHatch.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_Geom2dHatch.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_Geom2dHatch.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_Geom2dHatch.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_Geom2dHatch.SwigPyIterator_copy)
    next = _swig_new_instance_method(_Geom2dHatch.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_Geom2dHatch.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_Geom2dHatch.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_Geom2dHatch.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_Geom2dHatch.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_Geom2dHatch.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_Geom2dHatch.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_Geom2dHatch.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_Geom2dHatch.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_Geom2dHatch.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Geom2dHatch:
_Geom2dHatch.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Geom2dAdaptor
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.IntRes2d
import OCC.Core.TopAbs
import OCC.Core.HatchGen
import OCC.Core.Geom2dInt
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.IntCurve
import OCC.Core.Extrema
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAdaptor
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
class Geom2dHatch_MapOfElements(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements_begin)
    end = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements_end)
    cbegin = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements_cbegin)
    cend = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements_cend)

    def __init__(self, *args):
        _Geom2dHatch.Geom2dHatch_MapOfElements_swiginit(self, _Geom2dHatch.new_Geom2dHatch_MapOfElements(*args))
    Exchange = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements_Exchange)
    Assign = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements_Assign)
    Set = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements_Set)
    ReSize = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements_ReSize)
    Bind = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements_Bind)
    Bound = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements_Bound)
    IsBound = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements_IsBound)
    UnBind = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements_UnBind)
    Seek = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements_Seek)
    Find = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements_Find)
    ChangeSeek = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements_ChangeFind)
    __call__ = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements___call__)
    Clear = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements_Clear)
    __swig_destroy__ = _Geom2dHatch.delete_Geom2dHatch_MapOfElements
    Size = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements_Size)
    Keys = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_MapOfElements_Keys)

# Register Geom2dHatch_MapOfElements in _Geom2dHatch:
_Geom2dHatch.Geom2dHatch_MapOfElements_swigregister(Geom2dHatch_MapOfElements)

class Geom2dHatch_Hatchings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings_begin)
    end = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings_end)
    cbegin = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings_cbegin)
    cend = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings_cend)

    def __init__(self, *args):
        _Geom2dHatch.Geom2dHatch_Hatchings_swiginit(self, _Geom2dHatch.new_Geom2dHatch_Hatchings(*args))
    Exchange = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings_Exchange)
    Assign = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings_Assign)
    Set = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings_Set)
    ReSize = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings_ReSize)
    Bind = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings_Bind)
    Bound = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings_Bound)
    IsBound = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings_IsBound)
    UnBind = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings_UnBind)
    Seek = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings_Seek)
    Find = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings_Find)
    ChangeSeek = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings_ChangeFind)
    __call__ = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings___call__)
    Clear = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings_Clear)
    __swig_destroy__ = _Geom2dHatch.delete_Geom2dHatch_Hatchings
    Size = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings_Size)
    Keys = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatchings_Keys)

# Register Geom2dHatch_Hatchings in _Geom2dHatch:
_Geom2dHatch.Geom2dHatch_Hatchings_swigregister(Geom2dHatch_Hatchings)

class Geom2dHatch_Classifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Edge = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Classifier_Edge)
    EdgeParameter = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Classifier_EdgeParameter)

    def __init__(self, *args):
        r"""
        * Empty constructor, undefined algorithm.
        	:rtype: None* Creates an algorithm to classify the Point P with Tolerance <T> on the face described by <F>.
        	:param F:
        	:type F: Geom2dHatch_Elements
        	:param P:
        	:type P: gp_Pnt2d
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _Geom2dHatch.Geom2dHatch_Classifier_swiginit(self, _Geom2dHatch.new_Geom2dHatch_Classifier(*args))
    NoWires = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Classifier_NoWires)
    Perform = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Classifier_Perform)
    Position = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Classifier_Position)
    Rejected = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Classifier_Rejected)
    State = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Classifier_State)

    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dHatch.delete_Geom2dHatch_Classifier

# Register Geom2dHatch_Classifier in _Geom2dHatch:
_Geom2dHatch.Geom2dHatch_Classifier_swigregister(Geom2dHatch_Classifier)

class Geom2dHatch_Element(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ChangeCurve = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Element_ChangeCurve)
    Curve = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Element_Curve)

    def __init__(self, *args):
        r"""
        :rtype: None* Magic constructor.
        	:param Other:
        	:type Other: Geom2dHatch_Element
        	:rtype: None* Creates an element.
        	:param Curve:
        	:type Curve: Geom2dAdaptor_Curve
        	:param Orientation: default value is TopAbs_FORWARD
        	:type Orientation: TopAbs_Orientation
        	:rtype: None
        """
        _Geom2dHatch.Geom2dHatch_Element_swiginit(self, _Geom2dHatch.new_Geom2dHatch_Element(*args))
    Orientation = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Element_Orientation)

    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dHatch.delete_Geom2dHatch_Element

# Register Geom2dHatch_Element in _Geom2dHatch:
_Geom2dHatch.Geom2dHatch_Element_swigregister(Geom2dHatch_Element)

class Geom2dHatch_Elements(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Bind = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Elements_Bind)
    ChangeFind = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Elements_ChangeFind)
    CheckPoint = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Elements_CheckPoint)
    Clear = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Elements_Clear)
    CurrentEdge = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Elements_CurrentEdge)
    Find = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Elements_Find)

    def __init__(self, *args):
        r"""
        :rtype: None:param Other:
        	:type Other: Geom2dHatch_Elements
        	:rtype: None
        """
        _Geom2dHatch.Geom2dHatch_Elements_swiginit(self, _Geom2dHatch.new_Geom2dHatch_Elements(*args))
    InitEdges = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Elements_InitEdges)
    InitWires = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Elements_InitWires)
    IsBound = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Elements_IsBound)
    MoreEdges = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Elements_MoreEdges)
    MoreWires = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Elements_MoreWires)
    NextEdge = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Elements_NextEdge)
    NextWire = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Elements_NextWire)
    OtherSegment = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Elements_OtherSegment)
    Reject = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Elements_Reject)
    RejectEdge = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Elements_RejectEdge)
    RejectWire = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Elements_RejectWire)
    Segment = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Elements_Segment)
    UnBind = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Elements_UnBind)

    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dHatch.delete_Geom2dHatch_Elements

# Register Geom2dHatch_Elements in _Geom2dHatch:
_Geom2dHatch.Geom2dHatch_Elements_swigregister(Geom2dHatch_Elements)

class Geom2dHatch_FClass2dOfClassifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ClosestIntersection = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_ClosestIntersection)
    Compare = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_Compare)

    def __init__(self, *args):
        r"""
        * Creates an undefined classifier.
        	:rtype: None
        """
        _Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_swiginit(self, _Geom2dHatch.new_Geom2dHatch_FClass2dOfClassifier(*args))
    Intersector = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_Intersector)
    IsHeadOrEnd = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_IsHeadOrEnd)
    Parameter = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_Parameter)
    Reset = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_Reset)
    State = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_State)

    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dHatch.delete_Geom2dHatch_FClass2dOfClassifier

# Register Geom2dHatch_FClass2dOfClassifier in _Geom2dHatch:
_Geom2dHatch.Geom2dHatch_FClass2dOfClassifier_swigregister(Geom2dHatch_FClass2dOfClassifier)

class Geom2dHatch_Hatcher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddElement = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_AddElement)
    AddHatching = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_AddHatching)
    ChangeIntersector = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_ChangeIntersector)
    Clear = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_Clear)
    ClrElements = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_ClrElements)
    ClrHatchings = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_ClrHatchings)
    ComputeDomains = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_ComputeDomains)
    Confusion2d = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_Confusion2d)
    Confusion3d = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_Confusion3d)
    Domain = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_Domain)
    Dump = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_Dump)
    ElementCurve = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_ElementCurve)

    def __init__(self, *args):
        r"""
        * Returns an empty hatcher.
        	:param Intersector:
        	:type Intersector: Geom2dHatch_Intersector
        	:param Confusion2d:
        	:type Confusion2d: float
        	:param Confusion3d:
        	:type Confusion3d: float
        	:param KeepPnt: default value is Standard_False
        	:type KeepPnt: bool
        	:param KeepSeg: default value is Standard_False
        	:type KeepSeg: bool
        	:rtype: None
        """
        _Geom2dHatch.Geom2dHatch_Hatcher_swiginit(self, _Geom2dHatch.new_Geom2dHatch_Hatcher(*args))
    HatchingCurve = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_HatchingCurve)
    Intersector = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_Intersector)
    KeepPoints = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_KeepPoints)
    KeepSegments = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_KeepSegments)
    NbDomains = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_NbDomains)
    NbPoints = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_NbPoints)
    Point = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_Point)
    RemElement = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_RemElement)
    RemHatching = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_RemHatching)
    Status = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_Status)
    Trim = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_Trim)
    TrimDone = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_TrimDone)
    TrimFailed = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatcher_TrimFailed)

    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dHatch.delete_Geom2dHatch_Hatcher

# Register Geom2dHatch_Hatcher in _Geom2dHatch:
_Geom2dHatch.Geom2dHatch_Hatcher_swigregister(Geom2dHatch_Hatcher)

class Geom2dHatch_Hatching(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddDomain = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatching_AddDomain)
    AddPoint = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatching_AddPoint)
    ChangeCurve = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatching_ChangeCurve)
    ChangePoint = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatching_ChangePoint)
    ClassificationPoint = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatching_ClassificationPoint)
    ClrDomains = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatching_ClrDomains)
    ClrPoints = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatching_ClrPoints)
    Curve = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatching_Curve)
    Domain = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatching_Domain)

    def __init__(self, *args):
        r"""
        :rtype: None* Creates a hatching.
        	:param Curve:
        	:type Curve: Geom2dAdaptor_Curve
        	:rtype: None
        """
        _Geom2dHatch.Geom2dHatch_Hatching_swiginit(self, _Geom2dHatch.new_Geom2dHatch_Hatching(*args))
    IsDone = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatching_IsDone)
    NbDomains = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatching_NbDomains)
    NbPoints = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatching_NbPoints)
    Point = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatching_Point)
    RemDomain = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatching_RemDomain)
    RemPoint = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatching_RemPoint)
    Status = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatching_Status)
    TrimDone = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatching_TrimDone)
    TrimFailed = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Hatching_TrimFailed)

    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dHatch.delete_Geom2dHatch_Hatching

# Register Geom2dHatch_Hatching in _Geom2dHatch:
_Geom2dHatch.Geom2dHatch_Hatching_swigregister(Geom2dHatch_Hatching)

class Geom2dHatch_Intersector(OCC.Core.Geom2dInt.Geom2dInt_GInter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ConfusionTolerance = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Intersector_ConfusionTolerance)

    def __init__(self, *args):
        r"""
        * Creates an intersector.
        	:param Confusion:
        	:type Confusion: float
        	:param Tangency:
        	:type Tangency: float
        	:rtype: None:rtype: None
        """
        _Geom2dHatch.Geom2dHatch_Intersector_swiginit(self, _Geom2dHatch.new_Geom2dHatch_Intersector(*args))
    Intersect = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Intersector_Intersect)
    LocalGeometry = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Intersector_LocalGeometry)
    Perform = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Intersector_Perform)
    SetConfusionTolerance = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Intersector_SetConfusionTolerance)
    SetTangencyTolerance = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Intersector_SetTangencyTolerance)
    TangencyTolerance = _swig_new_instance_method(_Geom2dHatch.Geom2dHatch_Intersector_TangencyTolerance)

    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dHatch.delete_Geom2dHatch_Intersector

# Register Geom2dHatch_Intersector in _Geom2dHatch:
_Geom2dHatch.Geom2dHatch_Intersector_swigregister(Geom2dHatch_Intersector)



