# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IntAna2d module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_intana2d.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _IntAna2d
else:
    import _IntAna2d

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _IntAna2d.SWIG_PyInstanceMethod_New
_swig_new_static_method = _IntAna2d.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntAna2d.delete_SwigPyIterator
    value = _swig_new_instance_method(_IntAna2d.SwigPyIterator_value)
    incr = _swig_new_instance_method(_IntAna2d.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_IntAna2d.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_IntAna2d.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_IntAna2d.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_IntAna2d.SwigPyIterator_copy)
    next = _swig_new_instance_method(_IntAna2d.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_IntAna2d.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_IntAna2d.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_IntAna2d.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_IntAna2d.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_IntAna2d.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_IntAna2d.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_IntAna2d.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_IntAna2d.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_IntAna2d.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _IntAna2d:
_IntAna2d.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
class IntAna2d_AnaIntersection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IdenticalElements = _swig_new_instance_method(_IntAna2d.IntAna2d_AnaIntersection_IdenticalElements)

    def __init__(self, *args):
        r"""
        * Empty constructor. IsDone returns False.
        	:rtype: None* Intersection between two lines.
        	:param L1:
        	:type L1: gp_Lin2d
        	:param L2:
        	:type L2: gp_Lin2d
        	:rtype: None* Intersection between two circles.
        	:param C1:
        	:type C1: gp_Circ2d
        	:param C2:
        	:type C2: gp_Circ2d
        	:rtype: None* Intersection between a line and a circle.
        	:param L:
        	:type L: gp_Lin2d
        	:param C:
        	:type C: gp_Circ2d
        	:rtype: None* Intersection between a line and a conic.
        	:param L:
        	:type L: gp_Lin2d
        	:param C:
        	:type C: IntAna2d_Conic
        	:rtype: None* Intersection between a circle and another conic.
        	:param C:
        	:type C: gp_Circ2d
        	:param Co:
        	:type Co: IntAna2d_Conic
        	:rtype: None* Intersection between an ellipse and another conic.
        	:param E:
        	:type E: gp_Elips2d
        	:param C:
        	:type C: IntAna2d_Conic
        	:rtype: None* Intersection between a parabola and another conic.
        	:param P:
        	:type P: gp_Parab2d
        	:param C:
        	:type C: IntAna2d_Conic
        	:rtype: None* Intersection between an hyperbola and another conic.
        	:param H:
        	:type H: gp_Hypr2d
        	:param C:
        	:type C: IntAna2d_Conic
        	:rtype: None
        """
        _IntAna2d.IntAna2d_AnaIntersection_swiginit(self, _IntAna2d.new_IntAna2d_AnaIntersection(*args))
    IsDone = _swig_new_instance_method(_IntAna2d.IntAna2d_AnaIntersection_IsDone)
    IsEmpty = _swig_new_instance_method(_IntAna2d.IntAna2d_AnaIntersection_IsEmpty)
    NbPoints = _swig_new_instance_method(_IntAna2d.IntAna2d_AnaIntersection_NbPoints)
    ParallelElements = _swig_new_instance_method(_IntAna2d.IntAna2d_AnaIntersection_ParallelElements)
    Perform = _swig_new_instance_method(_IntAna2d.IntAna2d_AnaIntersection_Perform)
    Point = _swig_new_instance_method(_IntAna2d.IntAna2d_AnaIntersection_Point)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntAna2d.delete_IntAna2d_AnaIntersection

# Register IntAna2d_AnaIntersection in _IntAna2d:
_IntAna2d.IntAna2d_AnaIntersection_swigregister(IntAna2d_AnaIntersection)

class IntAna2d_Conic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Coefficients = _swig_new_instance_method(_IntAna2d.IntAna2d_Conic_Coefficients)
    Grad = _swig_new_instance_method(_IntAna2d.IntAna2d_Conic_Grad)

    def __init__(self, *args):
        r"""
        :param C:
        	:type C: gp_Circ2d
        	:rtype: None:param C:
        	:type C: gp_Lin2d
        	:rtype: None:param C:
        	:type C: gp_Parab2d
        	:rtype: None:param C:
        	:type C: gp_Hypr2d
        	:rtype: None:param C:
        	:type C: gp_Elips2d
        	:rtype: None
        """
        _IntAna2d.IntAna2d_Conic_swiginit(self, _IntAna2d.new_IntAna2d_Conic(*args))
    NewCoefficients = _swig_new_instance_method(_IntAna2d.IntAna2d_Conic_NewCoefficients)
    ValAndGrad = _swig_new_instance_method(_IntAna2d.IntAna2d_Conic_ValAndGrad)
    Value = _swig_new_instance_method(_IntAna2d.IntAna2d_Conic_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntAna2d.delete_IntAna2d_Conic

# Register IntAna2d_Conic in _IntAna2d:
_IntAna2d.IntAna2d_Conic_swigregister(IntAna2d_Conic)

class IntAna2d_IntPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Create an intersection point between 2 parametric 2d lines. X,Y are the coordinate of the point. U1 is the parameter on the first element, U2 the parameter on the second one.
        	:param X:
        	:type X: float
        	:param Y:
        	:type Y: float
        	:param U1:
        	:type U1: float
        	:param U2:
        	:type U2: float
        	:rtype: None* Create an intersection point between a parametric 2d line, and a line given by an implicit equation (ImplicitCurve). X,Y are the coordinate of the point. U1 is the parameter on the parametric element. Empty constructor. It's necessary to use one of the SetValue method after this one.
        	:param X:
        	:type X: float
        	:param Y:
        	:type Y: float
        	:param U1:
        	:type U1: float
        	:rtype: None:rtype: None
        """
        _IntAna2d.IntAna2d_IntPoint_swiginit(self, _IntAna2d.new_IntAna2d_IntPoint(*args))
    ParamOnFirst = _swig_new_instance_method(_IntAna2d.IntAna2d_IntPoint_ParamOnFirst)
    ParamOnSecond = _swig_new_instance_method(_IntAna2d.IntAna2d_IntPoint_ParamOnSecond)
    SecondIsImplicit = _swig_new_instance_method(_IntAna2d.IntAna2d_IntPoint_SecondIsImplicit)
    SetValue = _swig_new_instance_method(_IntAna2d.IntAna2d_IntPoint_SetValue)
    Value = _swig_new_instance_method(_IntAna2d.IntAna2d_IntPoint_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntAna2d.delete_IntAna2d_IntPoint

# Register IntAna2d_IntPoint in _IntAna2d:
_IntAna2d.IntAna2d_IntPoint_swigregister(IntAna2d_IntPoint)



