# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TopoDSToStep module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_topodstostep.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TopoDSToStep
else:
    import _TopoDSToStep

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _TopoDSToStep.SWIG_PyInstanceMethod_New
_swig_new_static_method = _TopoDSToStep.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopoDSToStep.delete_SwigPyIterator
    value = _swig_new_instance_method(_TopoDSToStep.SwigPyIterator_value)
    incr = _swig_new_instance_method(_TopoDSToStep.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_TopoDSToStep.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_TopoDSToStep.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_TopoDSToStep.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_TopoDSToStep.SwigPyIterator_copy)
    next = _swig_new_instance_method(_TopoDSToStep.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_TopoDSToStep.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_TopoDSToStep.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_TopoDSToStep.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_TopoDSToStep.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_TopoDSToStep.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_TopoDSToStep.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_TopoDSToStep.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_TopoDSToStep.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_TopoDSToStep.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TopoDSToStep:
_TopoDSToStep.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Transfer
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
import OCC.Core.StepShape
import OCC.Core.StepGeom
import OCC.Core.StepData
import OCC.Core.StepRepr
import OCC.Core.StepBasic
TopoDSToStep_EdgeDone = _TopoDSToStep.TopoDSToStep_EdgeDone
TopoDSToStep_NonManifoldEdge = _TopoDSToStep.TopoDSToStep_NonManifoldEdge
TopoDSToStep_EdgeOther = _TopoDSToStep.TopoDSToStep_EdgeOther
TopoDSToStep_BuilderDone = _TopoDSToStep.TopoDSToStep_BuilderDone
TopoDSToStep_NoFaceMapped = _TopoDSToStep.TopoDSToStep_NoFaceMapped
TopoDSToStep_BuilderOther = _TopoDSToStep.TopoDSToStep_BuilderOther
TopoDSToStep_VertexDone = _TopoDSToStep.TopoDSToStep_VertexDone
TopoDSToStep_VertexOther = _TopoDSToStep.TopoDSToStep_VertexOther
TopoDSToStep_WireDone = _TopoDSToStep.TopoDSToStep_WireDone
TopoDSToStep_NonManifoldWire = _TopoDSToStep.TopoDSToStep_NonManifoldWire
TopoDSToStep_WireOther = _TopoDSToStep.TopoDSToStep_WireOther
TopoDSToStep_FaceDone = _TopoDSToStep.TopoDSToStep_FaceDone
TopoDSToStep_InfiniteFace = _TopoDSToStep.TopoDSToStep_InfiniteFace
TopoDSToStep_NonManifoldFace = _TopoDSToStep.TopoDSToStep_NonManifoldFace
TopoDSToStep_NoWireMapped = _TopoDSToStep.TopoDSToStep_NoWireMapped
TopoDSToStep_FaceOther = _TopoDSToStep.TopoDSToStep_FaceOther
TopoDSToStep_FacetedDone = _TopoDSToStep.TopoDSToStep_FacetedDone
TopoDSToStep_SurfaceNotPlane = _TopoDSToStep.TopoDSToStep_SurfaceNotPlane
TopoDSToStep_PCurveNotLinear = _TopoDSToStep.TopoDSToStep_PCurveNotLinear
class topodstostep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddResult = _swig_new_static_method(_TopoDSToStep.topodstostep_AddResult)
    DecodeBuilderError = _swig_new_static_method(_TopoDSToStep.topodstostep_DecodeBuilderError)
    DecodeEdgeError = _swig_new_static_method(_TopoDSToStep.topodstostep_DecodeEdgeError)
    DecodeFaceError = _swig_new_static_method(_TopoDSToStep.topodstostep_DecodeFaceError)
    DecodeVertexError = _swig_new_static_method(_TopoDSToStep.topodstostep_DecodeVertexError)
    DecodeWireError = _swig_new_static_method(_TopoDSToStep.topodstostep_DecodeWireError)

    __repr__ = _dumps_object


    def __init__(self):
        _TopoDSToStep.topodstostep_swiginit(self, _TopoDSToStep.new_topodstostep())
    __swig_destroy__ = _TopoDSToStep.delete_topodstostep

# Register topodstostep in _TopoDSToStep:
_TopoDSToStep.topodstostep_swigregister(topodstostep)
topodstostep_AddResult = _TopoDSToStep.topodstostep_AddResult
topodstostep_DecodeBuilderError = _TopoDSToStep.topodstostep_DecodeBuilderError
topodstostep_DecodeEdgeError = _TopoDSToStep.topodstostep_DecodeEdgeError
topodstostep_DecodeFaceError = _TopoDSToStep.topodstostep_DecodeFaceError
topodstostep_DecodeVertexError = _TopoDSToStep.topodstostep_DecodeVertexError
topodstostep_DecodeWireError = _TopoDSToStep.topodstostep_DecodeWireError

class TopoDSToStep_FacetedTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CheckTopoDSShape = _swig_new_static_method(_TopoDSToStep.TopoDSToStep_FacetedTool_CheckTopoDSShape)

    __repr__ = _dumps_object


    def __init__(self):
        _TopoDSToStep.TopoDSToStep_FacetedTool_swiginit(self, _TopoDSToStep.new_TopoDSToStep_FacetedTool())
    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_FacetedTool

# Register TopoDSToStep_FacetedTool in _TopoDSToStep:
_TopoDSToStep.TopoDSToStep_FacetedTool_swigregister(TopoDSToStep_FacetedTool)
TopoDSToStep_FacetedTool_CheckTopoDSShape = _TopoDSToStep.TopoDSToStep_FacetedTool_CheckTopoDSShape

class TopoDSToStep_Root(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IsDone = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Root_IsDone)
    GetTolerance = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Root_GetTolerance)
    SetTolerance = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Root_SetTolerance)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_Root

# Register TopoDSToStep_Root in _TopoDSToStep:
_TopoDSToStep.TopoDSToStep_Root_swigregister(TopoDSToStep_Root)

class TopoDSToStep_Tool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Bind = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_Bind)
    CurrentEdge = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_CurrentEdge)
    CurrentFace = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_CurrentFace)
    CurrentShell = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_CurrentShell)
    CurrentVertex = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_CurrentVertex)
    CurrentWire = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_CurrentWire)
    Faceted = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_Faceted)
    Find = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_Find)
    Init = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_Init)
    IsBound = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_IsBound)
    Lowest3DTolerance = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_Lowest3DTolerance)
    Map = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_Map)
    PCurveMode = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_PCurveMode)
    SetCurrentEdge = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_SetCurrentEdge)
    SetCurrentFace = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_SetCurrentFace)
    SetCurrentShell = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_SetCurrentShell)
    SetCurrentVertex = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_SetCurrentVertex)
    SetCurrentWire = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_SetCurrentWire)
    SetSurfaceReversed = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_SetSurfaceReversed)
    SurfaceReversed = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Tool_SurfaceReversed)

    def __init__(self, *args):
        r"""
        :rtype: None:param M:
        	:type M: MoniTool_DataMapOfShapeTransient
        	:param FacetedContext:
        	:type FacetedContext: bool
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_Tool_swiginit(self, _TopoDSToStep.new_TopoDSToStep_Tool(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_Tool

# Register TopoDSToStep_Tool in _TopoDSToStep:
_TopoDSToStep.TopoDSToStep_Tool_swigregister(TopoDSToStep_Tool)

class TopoDSToStep_Builder(TopoDSToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Error = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Builder_Error)
    Init = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Builder_Init)

    def __init__(self, *args):
        r"""
        :rtype: None:param S:
        	:type S: TopoDS_Shape
        	:param T:
        	:type T: TopoDSToStep_Tool
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_Builder_swiginit(self, _TopoDSToStep.new_TopoDSToStep_Builder(*args))
    Value = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_Builder_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_Builder

# Register TopoDSToStep_Builder in _TopoDSToStep:
_TopoDSToStep.TopoDSToStep_Builder_swigregister(TopoDSToStep_Builder)

class TopoDSToStep_MakeBrepWithVoids(TopoDSToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param S:
        	:type S: TopoDS_Solid
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeBrepWithVoids_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeBrepWithVoids(*args))
    Value = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_MakeBrepWithVoids_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeBrepWithVoids

# Register TopoDSToStep_MakeBrepWithVoids in _TopoDSToStep:
_TopoDSToStep.TopoDSToStep_MakeBrepWithVoids_swigregister(TopoDSToStep_MakeBrepWithVoids)

class TopoDSToStep_MakeFacetedBrep(TopoDSToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param S:
        	:type S: TopoDS_Shell
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None:param S:
        	:type S: TopoDS_Solid
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeFacetedBrep_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeFacetedBrep(*args))
    Value = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_MakeFacetedBrep_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeFacetedBrep

# Register TopoDSToStep_MakeFacetedBrep in _TopoDSToStep:
_TopoDSToStep.TopoDSToStep_MakeFacetedBrep_swigregister(TopoDSToStep_MakeFacetedBrep)

class TopoDSToStep_MakeFacetedBrepAndBrepWithVoids(TopoDSToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param S:
        	:type S: TopoDS_Solid
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeFacetedBrepAndBrepWithVoids_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeFacetedBrepAndBrepWithVoids(*args))
    Value = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_MakeFacetedBrepAndBrepWithVoids_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeFacetedBrepAndBrepWithVoids

# Register TopoDSToStep_MakeFacetedBrepAndBrepWithVoids in _TopoDSToStep:
_TopoDSToStep.TopoDSToStep_MakeFacetedBrepAndBrepWithVoids_swigregister(TopoDSToStep_MakeFacetedBrepAndBrepWithVoids)

class TopoDSToStep_MakeGeometricCurveSet(TopoDSToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param SH:
        	:type SH: TopoDS_Shape
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeGeometricCurveSet_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeGeometricCurveSet(*args))
    Value = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_MakeGeometricCurveSet_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeGeometricCurveSet

# Register TopoDSToStep_MakeGeometricCurveSet in _TopoDSToStep:
_TopoDSToStep.TopoDSToStep_MakeGeometricCurveSet_swigregister(TopoDSToStep_MakeGeometricCurveSet)

class TopoDSToStep_MakeManifoldSolidBrep(TopoDSToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param S:
        	:type S: TopoDS_Shell
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None:param S:
        	:type S: TopoDS_Solid
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeManifoldSolidBrep_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeManifoldSolidBrep(*args))
    Value = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_MakeManifoldSolidBrep_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeManifoldSolidBrep

# Register TopoDSToStep_MakeManifoldSolidBrep in _TopoDSToStep:
_TopoDSToStep.TopoDSToStep_MakeManifoldSolidBrep_swigregister(TopoDSToStep_MakeManifoldSolidBrep)

class TopoDSToStep_MakeShellBasedSurfaceModel(TopoDSToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param F:
        	:type F: TopoDS_Face
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None:param S:
        	:type S: TopoDS_Shell
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None:param S:
        	:type S: TopoDS_Solid
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeShellBasedSurfaceModel_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeShellBasedSurfaceModel(*args))
    Value = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_MakeShellBasedSurfaceModel_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeShellBasedSurfaceModel

# Register TopoDSToStep_MakeShellBasedSurfaceModel in _TopoDSToStep:
_TopoDSToStep.TopoDSToStep_MakeShellBasedSurfaceModel_swigregister(TopoDSToStep_MakeShellBasedSurfaceModel)

class TopoDSToStep_MakeStepEdge(TopoDSToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Error = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_MakeStepEdge_Error)
    Init = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_MakeStepEdge_Init)

    def __init__(self, *args):
        r"""
        :rtype: None:param E:
        	:type E: TopoDS_Edge
        	:param T:
        	:type T: TopoDSToStep_Tool
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeStepEdge_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeStepEdge(*args))
    Value = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_MakeStepEdge_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeStepEdge

# Register TopoDSToStep_MakeStepEdge in _TopoDSToStep:
_TopoDSToStep.TopoDSToStep_MakeStepEdge_swigregister(TopoDSToStep_MakeStepEdge)

class TopoDSToStep_MakeStepFace(TopoDSToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Error = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_MakeStepFace_Error)
    Init = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_MakeStepFace_Init)

    def __init__(self, *args):
        r"""
        :rtype: None:param F:
        	:type F: TopoDS_Face
        	:param T:
        	:type T: TopoDSToStep_Tool
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeStepFace_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeStepFace(*args))
    Value = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_MakeStepFace_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeStepFace

# Register TopoDSToStep_MakeStepFace in _TopoDSToStep:
_TopoDSToStep.TopoDSToStep_MakeStepFace_swigregister(TopoDSToStep_MakeStepFace)

class TopoDSToStep_MakeStepVertex(TopoDSToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Error = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_MakeStepVertex_Error)
    Init = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_MakeStepVertex_Init)

    def __init__(self, *args):
        r"""
        :rtype: None:param V:
        	:type V: TopoDS_Vertex
        	:param T:
        	:type T: TopoDSToStep_Tool
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeStepVertex_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeStepVertex(*args))
    Value = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_MakeStepVertex_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeStepVertex

# Register TopoDSToStep_MakeStepVertex in _TopoDSToStep:
_TopoDSToStep.TopoDSToStep_MakeStepVertex_swigregister(TopoDSToStep_MakeStepVertex)

class TopoDSToStep_MakeStepWire(TopoDSToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Error = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_MakeStepWire_Error)
    Init = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_MakeStepWire_Init)

    def __init__(self, *args):
        r"""
        :rtype: None:param W:
        	:type W: TopoDS_Wire
        	:param T:
        	:type T: TopoDSToStep_Tool
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_MakeStepWire_swiginit(self, _TopoDSToStep.new_TopoDSToStep_MakeStepWire(*args))
    Value = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_MakeStepWire_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeStepWire

# Register TopoDSToStep_MakeStepWire in _TopoDSToStep:
_TopoDSToStep.TopoDSToStep_MakeStepWire_swigregister(TopoDSToStep_MakeStepWire)

class TopoDSToStep_WireframeBuilder(TopoDSToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Error = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_WireframeBuilder_Error)
    GetTrimmedCurveFromEdge = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_WireframeBuilder_GetTrimmedCurveFromEdge)
    GetTrimmedCurveFromFace = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_WireframeBuilder_GetTrimmedCurveFromFace)
    GetTrimmedCurveFromShape = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_WireframeBuilder_GetTrimmedCurveFromShape)
    Init = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_WireframeBuilder_Init)

    def __init__(self, *args):
        r"""
        :rtype: None:param S:
        	:type S: TopoDS_Shape
        	:param T:
        	:type T: TopoDSToStep_Tool
        	:param FP:
        	:type FP: Transfer_FinderProcess
        	:rtype: None
        """
        _TopoDSToStep.TopoDSToStep_WireframeBuilder_swiginit(self, _TopoDSToStep.new_TopoDSToStep_WireframeBuilder(*args))
    Value = _swig_new_instance_method(_TopoDSToStep.TopoDSToStep_WireframeBuilder_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_WireframeBuilder

# Register TopoDSToStep_WireframeBuilder in _TopoDSToStep:
_TopoDSToStep.TopoDSToStep_WireframeBuilder_swigregister(TopoDSToStep_WireframeBuilder)



