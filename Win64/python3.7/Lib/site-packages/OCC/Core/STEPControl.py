# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
STEPControl module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_stepcontrol.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _STEPControl
else:
    import _STEPControl

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _STEPControl.SWIG_PyInstanceMethod_New
_swig_new_static_method = _STEPControl.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _STEPControl.delete_SwigPyIterator
    value = _swig_new_instance_method(_STEPControl.SwigPyIterator_value)
    incr = _swig_new_instance_method(_STEPControl.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_STEPControl.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_STEPControl.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_STEPControl.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_STEPControl.SwigPyIterator_copy)
    next = _swig_new_instance_method(_STEPControl.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_STEPControl.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_STEPControl.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_STEPControl.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_STEPControl.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_STEPControl.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_STEPControl.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_STEPControl.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_STEPControl.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_STEPControl.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _STEPControl:
_STEPControl.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Transfer
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
import OCC.Core.StepRepr
import OCC.Core.StepData
import OCC.Core.StepBasic
import OCC.Core.StepGeom
import OCC.Core.StepShape
import OCC.Core.TopTools
import OCC.Core.XSControl
import OCC.Core.IFSelect
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2d
STEPControl_AsIs = _STEPControl.STEPControl_AsIs
STEPControl_ManifoldSolidBrep = _STEPControl.STEPControl_ManifoldSolidBrep
STEPControl_BrepWithVoids = _STEPControl.STEPControl_BrepWithVoids
STEPControl_FacetedBrep = _STEPControl.STEPControl_FacetedBrep
STEPControl_FacetedBrepAndBrepWithVoids = _STEPControl.STEPControl_FacetedBrepAndBrepWithVoids
STEPControl_ShellBasedSurfaceModel = _STEPControl.STEPControl_ShellBasedSurfaceModel
STEPControl_GeometricCurveSet = _STEPControl.STEPControl_GeometricCurveSet
STEPControl_Hybrid = _STEPControl.STEPControl_Hybrid
Handle_STEPControl_ActorRead_Create = _STEPControl.Handle_STEPControl_ActorRead_Create
Handle_STEPControl_ActorRead_DownCast = _STEPControl.Handle_STEPControl_ActorRead_DownCast
Handle_STEPControl_ActorRead_IsNull = _STEPControl.Handle_STEPControl_ActorRead_IsNull
Handle_STEPControl_ActorWrite_Create = _STEPControl.Handle_STEPControl_ActorWrite_Create
Handle_STEPControl_ActorWrite_DownCast = _STEPControl.Handle_STEPControl_ActorWrite_DownCast
Handle_STEPControl_ActorWrite_IsNull = _STEPControl.Handle_STEPControl_ActorWrite_IsNull
Handle_STEPControl_Controller_Create = _STEPControl.Handle_STEPControl_Controller_Create
Handle_STEPControl_Controller_DownCast = _STEPControl.Handle_STEPControl_Controller_DownCast
Handle_STEPControl_Controller_IsNull = _STEPControl.Handle_STEPControl_Controller_IsNull
class STEPControl_ActorRead(OCC.Core.Transfer.Transfer_ActorOfTransientProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ComputeSRRWT = _swig_new_instance_method(_STEPControl.STEPControl_ActorRead_ComputeSRRWT)
    ComputeTransformation = _swig_new_instance_method(_STEPControl.STEPControl_ActorRead_ComputeTransformation)
    PrepareUnits = _swig_new_instance_method(_STEPControl.STEPControl_ActorRead_PrepareUnits)
    ResetUnits = _swig_new_instance_method(_STEPControl.STEPControl_ActorRead_ResetUnits)

    def __init__(self, *args):
        r""":rtype: None"""
        _STEPControl.STEPControl_ActorRead_swiginit(self, _STEPControl.new_STEPControl_ActorRead(*args))
    TransferShape = _swig_new_instance_method(_STEPControl.STEPControl_ActorRead_TransferShape)


    @staticmethod
    def DownCast(t):
      return Handle_STEPControl_ActorRead_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPControl.delete_STEPControl_ActorRead

# Register STEPControl_ActorRead in _STEPControl:
_STEPControl.STEPControl_ActorRead_swigregister(STEPControl_ActorRead)

class STEPControl_ActorWrite(OCC.Core.Transfer.Transfer_ActorOfFinderProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GroupMode = _swig_new_instance_method(_STEPControl.STEPControl_ActorWrite_GroupMode)
    IsAssembly = _swig_new_instance_method(_STEPControl.STEPControl_ActorWrite_IsAssembly)
    Mode = _swig_new_instance_method(_STEPControl.STEPControl_ActorWrite_Mode)

    def __init__(self, *args):
        r""":rtype: None"""
        _STEPControl.STEPControl_ActorWrite_swiginit(self, _STEPControl.new_STEPControl_ActorWrite(*args))
    SetGroupMode = _swig_new_instance_method(_STEPControl.STEPControl_ActorWrite_SetGroupMode)
    SetMode = _swig_new_instance_method(_STEPControl.STEPControl_ActorWrite_SetMode)
    SetTolerance = _swig_new_instance_method(_STEPControl.STEPControl_ActorWrite_SetTolerance)
    TransferCompound = _swig_new_instance_method(_STEPControl.STEPControl_ActorWrite_TransferCompound)
    TransferShape = _swig_new_instance_method(_STEPControl.STEPControl_ActorWrite_TransferShape)
    TransferSubShape = _swig_new_instance_method(_STEPControl.STEPControl_ActorWrite_TransferSubShape)


    @staticmethod
    def DownCast(t):
      return Handle_STEPControl_ActorWrite_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPControl.delete_STEPControl_ActorWrite

# Register STEPControl_ActorWrite in _STEPControl:
_STEPControl.STEPControl_ActorWrite_swigregister(STEPControl_ActorWrite)

class STEPControl_Controller(OCC.Core.XSControl.XSControl_Controller):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Init = _swig_new_static_method(_STEPControl.STEPControl_Controller_Init)

    def __init__(self, *args):
        r"""
        * Initializes the use of STEP Norm (the first time) and returns a Controller
        	:rtype: None
        """
        _STEPControl.STEPControl_Controller_swiginit(self, _STEPControl.new_STEPControl_Controller(*args))


    @staticmethod
    def DownCast(t):
      return Handle_STEPControl_Controller_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPControl.delete_STEPControl_Controller

# Register STEPControl_Controller in _STEPControl:
_STEPControl.STEPControl_Controller_swigregister(STEPControl_Controller)
STEPControl_Controller_Init = _STEPControl.STEPControl_Controller_Init

class STEPControl_Reader(OCC.Core.XSControl.XSControl_Reader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FileUnits = _swig_new_instance_method(_STEPControl.STEPControl_Reader_FileUnits)

    def __init__(self, *args):
        r"""
        * Creates a reader object with an empty STEP model.
        	:rtype: None* Creates a Reader for STEP from an already existing Session Clears the session if it was not yet set for STEP
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:param scratch: default value is Standard_True
        	:type scratch: bool
        	:rtype: None
        """
        _STEPControl.STEPControl_Reader_swiginit(self, _STEPControl.new_STEPControl_Reader(*args))
    StepModel = _swig_new_instance_method(_STEPControl.STEPControl_Reader_StepModel)
    TransferRoot = _swig_new_instance_method(_STEPControl.STEPControl_Reader_TransferRoot)

    __repr__ = _dumps_object

    __swig_destroy__ = _STEPControl.delete_STEPControl_Reader

# Register STEPControl_Reader in _STEPControl:
_STEPControl.STEPControl_Reader_swigregister(STEPControl_Reader)

class STEPControl_Writer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Model = _swig_new_instance_method(_STEPControl.STEPControl_Writer_Model)
    PrintStatsTransfer = _swig_new_instance_method(_STEPControl.STEPControl_Writer_PrintStatsTransfer)

    def __init__(self, *args):
        r"""
        * Creates a Writer from scratch
        	:rtype: None* Creates a Writer from an already existing Session If <scratch> is True (D), clears already recorded data
        	:param WS:
        	:type WS: XSControl_WorkSession
        	:param scratch: default value is Standard_True
        	:type scratch: bool
        	:rtype: None
        """
        _STEPControl.STEPControl_Writer_swiginit(self, _STEPControl.new_STEPControl_Writer(*args))
    SetTolerance = _swig_new_instance_method(_STEPControl.STEPControl_Writer_SetTolerance)
    SetWS = _swig_new_instance_method(_STEPControl.STEPControl_Writer_SetWS)
    Transfer = _swig_new_instance_method(_STEPControl.STEPControl_Writer_Transfer)
    UnsetTolerance = _swig_new_instance_method(_STEPControl.STEPControl_Writer_UnsetTolerance)
    WS = _swig_new_instance_method(_STEPControl.STEPControl_Writer_WS)
    Write = _swig_new_instance_method(_STEPControl.STEPControl_Writer_Write)

    __repr__ = _dumps_object

    __swig_destroy__ = _STEPControl.delete_STEPControl_Writer

# Register STEPControl_Writer in _STEPControl:
_STEPControl.STEPControl_Writer_swigregister(STEPControl_Writer)



