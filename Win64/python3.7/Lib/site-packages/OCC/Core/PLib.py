# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
PLib module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_plib.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PLib
else:
    import _PLib

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _PLib.SWIG_PyInstanceMethod_New
_swig_new_static_method = _PLib.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PLib.delete_SwigPyIterator
    value = _swig_new_instance_method(_PLib.SwigPyIterator_value)
    incr = _swig_new_instance_method(_PLib.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_PLib.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_PLib.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_PLib.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_PLib.SwigPyIterator_copy)
    next = _swig_new_instance_method(_PLib.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_PLib.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_PLib.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_PLib.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_PLib.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_PLib.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_PLib.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_PLib.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_PLib.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_PLib.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PLib:
_PLib.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.gp
Handle_PLib_Base_Create = _PLib.Handle_PLib_Base_Create
Handle_PLib_Base_DownCast = _PLib.Handle_PLib_Base_DownCast
Handle_PLib_Base_IsNull = _PLib.Handle_PLib_Base_IsNull
Handle_PLib_HermitJacobi_Create = _PLib.Handle_PLib_HermitJacobi_Create
Handle_PLib_HermitJacobi_DownCast = _PLib.Handle_PLib_HermitJacobi_DownCast
Handle_PLib_HermitJacobi_IsNull = _PLib.Handle_PLib_HermitJacobi_IsNull
Handle_PLib_JacobiPolynomial_Create = _PLib.Handle_PLib_JacobiPolynomial_Create
Handle_PLib_JacobiPolynomial_DownCast = _PLib.Handle_PLib_JacobiPolynomial_DownCast
Handle_PLib_JacobiPolynomial_IsNull = _PLib.Handle_PLib_JacobiPolynomial_IsNull
class plib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Bin = _swig_new_static_method(_PLib.plib_Bin)
    CoefficientsPoles = _swig_new_static_method(_PLib.plib_CoefficientsPoles)
    ConstraintOrder = _swig_new_static_method(_PLib.plib_ConstraintOrder)
    EvalCubicHermite = _swig_new_static_method(_PLib.plib_EvalCubicHermite)
    EvalLagrange = _swig_new_static_method(_PLib.plib_EvalLagrange)
    EvalLength = _swig_new_static_method(_PLib.plib_EvalLength)
    EvalPoly2Var = _swig_new_static_method(_PLib.plib_EvalPoly2Var)
    EvalPolynomial = _swig_new_static_method(_PLib.plib_EvalPolynomial)
    GetPoles = _swig_new_static_method(_PLib.plib_GetPoles)
    HermiteCoefficients = _swig_new_static_method(_PLib.plib_HermiteCoefficients)
    HermiteInterpolate = _swig_new_static_method(_PLib.plib_HermiteInterpolate)
    JacobiParameters = _swig_new_static_method(_PLib.plib_JacobiParameters)
    NivConstr = _swig_new_static_method(_PLib.plib_NivConstr)
    NoDerivativeEvalPolynomial = _swig_new_static_method(_PLib.plib_NoDerivativeEvalPolynomial)
    NoWeights = _swig_new_static_method(_PLib.plib_NoWeights)
    NoWeights2 = _swig_new_static_method(_PLib.plib_NoWeights2)
    RationalDerivative = _swig_new_static_method(_PLib.plib_RationalDerivative)
    RationalDerivatives = _swig_new_static_method(_PLib.plib_RationalDerivatives)
    SetPoles = _swig_new_static_method(_PLib.plib_SetPoles)
    Trimming = _swig_new_static_method(_PLib.plib_Trimming)
    UTrimming = _swig_new_static_method(_PLib.plib_UTrimming)
    VTrimming = _swig_new_static_method(_PLib.plib_VTrimming)

    __repr__ = _dumps_object


    def __init__(self):
        _PLib.plib_swiginit(self, _PLib.new_plib())
    __swig_destroy__ = _PLib.delete_plib

# Register plib in _PLib:
_PLib.plib_swigregister(plib)
plib_Bin = _PLib.plib_Bin
plib_CoefficientsPoles = _PLib.plib_CoefficientsPoles
plib_ConstraintOrder = _PLib.plib_ConstraintOrder
plib_EvalCubicHermite = _PLib.plib_EvalCubicHermite
plib_EvalLagrange = _PLib.plib_EvalLagrange
plib_EvalLength = _PLib.plib_EvalLength
plib_EvalPoly2Var = _PLib.plib_EvalPoly2Var
plib_EvalPolynomial = _PLib.plib_EvalPolynomial
plib_GetPoles = _PLib.plib_GetPoles
plib_HermiteCoefficients = _PLib.plib_HermiteCoefficients
plib_HermiteInterpolate = _PLib.plib_HermiteInterpolate
plib_JacobiParameters = _PLib.plib_JacobiParameters
plib_NivConstr = _PLib.plib_NivConstr
plib_NoDerivativeEvalPolynomial = _PLib.plib_NoDerivativeEvalPolynomial
plib_NoWeights = _PLib.plib_NoWeights
plib_NoWeights2 = _PLib.plib_NoWeights2
plib_RationalDerivative = _PLib.plib_RationalDerivative
plib_RationalDerivatives = _PLib.plib_RationalDerivatives
plib_SetPoles = _PLib.plib_SetPoles
plib_Trimming = _PLib.plib_Trimming
plib_UTrimming = _PLib.plib_UTrimming
plib_VTrimming = _PLib.plib_VTrimming

class PLib_Base(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    D0 = _swig_new_instance_method(_PLib.PLib_Base_D0)
    D1 = _swig_new_instance_method(_PLib.PLib_Base_D1)
    D2 = _swig_new_instance_method(_PLib.PLib_Base_D2)
    D3 = _swig_new_instance_method(_PLib.PLib_Base_D3)
    ReduceDegree = _swig_new_instance_method(_PLib.PLib_Base_ReduceDegree)
    ToCoefficients = _swig_new_instance_method(_PLib.PLib_Base_ToCoefficients)
    WorkDegree = _swig_new_instance_method(_PLib.PLib_Base_WorkDegree)


    @staticmethod
    def DownCast(t):
      return Handle_PLib_Base_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _PLib.delete_PLib_Base

# Register PLib_Base in _PLib:
_PLib.PLib_Base_swigregister(PLib_Base)

class PLib_DoubleJacobiPolynomial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AverageError = _swig_new_instance_method(_PLib.PLib_DoubleJacobiPolynomial_AverageError)
    MaxError = _swig_new_instance_method(_PLib.PLib_DoubleJacobiPolynomial_MaxError)
    MaxErrorU = _swig_new_instance_method(_PLib.PLib_DoubleJacobiPolynomial_MaxErrorU)
    MaxErrorV = _swig_new_instance_method(_PLib.PLib_DoubleJacobiPolynomial_MaxErrorV)

    def __init__(self, *args):
        r"""
        :rtype: None:param JacPolU:
        	:type JacPolU: PLib_JacobiPolynomial
        	:param JacPolV:
        	:type JacPolV: PLib_JacobiPolynomial
        	:rtype: None
        """
        _PLib.PLib_DoubleJacobiPolynomial_swiginit(self, _PLib.new_PLib_DoubleJacobiPolynomial(*args))
    ReduceDegree = _swig_new_instance_method(_PLib.PLib_DoubleJacobiPolynomial_ReduceDegree)
    TabMaxU = _swig_new_instance_method(_PLib.PLib_DoubleJacobiPolynomial_TabMaxU)
    TabMaxV = _swig_new_instance_method(_PLib.PLib_DoubleJacobiPolynomial_TabMaxV)
    U = _swig_new_instance_method(_PLib.PLib_DoubleJacobiPolynomial_U)
    V = _swig_new_instance_method(_PLib.PLib_DoubleJacobiPolynomial_V)
    WDoubleJacobiToCoefficients = _swig_new_instance_method(_PLib.PLib_DoubleJacobiPolynomial_WDoubleJacobiToCoefficients)

    __repr__ = _dumps_object

    __swig_destroy__ = _PLib.delete_PLib_DoubleJacobiPolynomial

# Register PLib_DoubleJacobiPolynomial in _PLib:
_PLib.PLib_DoubleJacobiPolynomial_swigregister(PLib_DoubleJacobiPolynomial)

class PLib_HermitJacobi(PLib_Base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AverageError = _swig_new_instance_method(_PLib.PLib_HermitJacobi_AverageError)
    MaxError = _swig_new_instance_method(_PLib.PLib_HermitJacobi_MaxError)
    NivConstr = _swig_new_instance_method(_PLib.PLib_HermitJacobi_NivConstr)

    def __init__(self, *args):
        r"""
        * Initialize the polynomial class Degree has to be <= 30 ConstraintOrder has to be GeomAbs_C0 GeomAbs_C1 GeomAbs_C2
        	:param WorkDegree:
        	:type WorkDegree: int
        	:param ConstraintOrder:
        	:type ConstraintOrder: GeomAbs_Shape
        	:rtype: None
        """
        _PLib.PLib_HermitJacobi_swiginit(self, _PLib.new_PLib_HermitJacobi(*args))


    @staticmethod
    def DownCast(t):
      return Handle_PLib_HermitJacobi_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _PLib.delete_PLib_HermitJacobi

# Register PLib_HermitJacobi in _PLib:
_PLib.PLib_HermitJacobi_swigregister(PLib_HermitJacobi)

class PLib_JacobiPolynomial(PLib_Base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AverageError = _swig_new_instance_method(_PLib.PLib_JacobiPolynomial_AverageError)
    MaxError = _swig_new_instance_method(_PLib.PLib_JacobiPolynomial_MaxError)
    MaxValue = _swig_new_instance_method(_PLib.PLib_JacobiPolynomial_MaxValue)
    NivConstr = _swig_new_instance_method(_PLib.PLib_JacobiPolynomial_NivConstr)

    def __init__(self, *args):
        r"""
        * Initialize the polynomial class Degree has to be <= 30 ConstraintOrder has to be GeomAbs_C0 GeomAbs_C1 GeomAbs_C2
        	:param WorkDegree:
        	:type WorkDegree: int
        	:param ConstraintOrder:
        	:type ConstraintOrder: GeomAbs_Shape
        	:rtype: None
        """
        _PLib.PLib_JacobiPolynomial_swiginit(self, _PLib.new_PLib_JacobiPolynomial(*args))
    Points = _swig_new_instance_method(_PLib.PLib_JacobiPolynomial_Points)
    Weights = _swig_new_instance_method(_PLib.PLib_JacobiPolynomial_Weights)


    @staticmethod
    def DownCast(t):
      return Handle_PLib_JacobiPolynomial_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _PLib.delete_PLib_JacobiPolynomial

# Register PLib_JacobiPolynomial in _PLib:
_PLib.PLib_JacobiPolynomial_swigregister(PLib_JacobiPolynomial)



