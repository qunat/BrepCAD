# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepLib module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_breplib.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BRepLib
else:
    import _BRepLib

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _BRepLib.SWIG_PyInstanceMethod_New
_swig_new_static_method = _BRepLib.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepLib.delete_SwigPyIterator
    value = _swig_new_instance_method(_BRepLib.SwigPyIterator_value)
    incr = _swig_new_instance_method(_BRepLib.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_BRepLib.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_BRepLib.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_BRepLib.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_BRepLib.SwigPyIterator_copy)
    next = _swig_new_instance_method(_BRepLib.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_BRepLib.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_BRepLib.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_BRepLib.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_BRepLib.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_BRepLib.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_BRepLib.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_BRepLib.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_BRepLib.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_BRepLib.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BRepLib:
_BRepLib.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.GeomAbs
import OCC.Core.Geom2d
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopTools
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.Adaptor2d
import OCC.Core.math
import OCC.Core.BRepTools
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
BRepLib_EdgeDone = _BRepLib.BRepLib_EdgeDone
BRepLib_PointProjectionFailed = _BRepLib.BRepLib_PointProjectionFailed
BRepLib_ParameterOutOfRange = _BRepLib.BRepLib_ParameterOutOfRange
BRepLib_DifferentPointsOnClosedCurve = _BRepLib.BRepLib_DifferentPointsOnClosedCurve
BRepLib_PointWithInfiniteParameter = _BRepLib.BRepLib_PointWithInfiniteParameter
BRepLib_DifferentsPointAndParameter = _BRepLib.BRepLib_DifferentsPointAndParameter
BRepLib_LineThroughIdenticPoints = _BRepLib.BRepLib_LineThroughIdenticPoints
BRepLib_ShellDone = _BRepLib.BRepLib_ShellDone
BRepLib_EmptyShell = _BRepLib.BRepLib_EmptyShell
BRepLib_DisconnectedShell = _BRepLib.BRepLib_DisconnectedShell
BRepLib_ShellParametersOutOfRange = _BRepLib.BRepLib_ShellParametersOutOfRange
BRepLib_Preserved = _BRepLib.BRepLib_Preserved
BRepLib_Deleted = _BRepLib.BRepLib_Deleted
BRepLib_Trimmed = _BRepLib.BRepLib_Trimmed
BRepLib_Merged = _BRepLib.BRepLib_Merged
BRepLib_BoundaryModified = _BRepLib.BRepLib_BoundaryModified
BRepLib_WireDone = _BRepLib.BRepLib_WireDone
BRepLib_EmptyWire = _BRepLib.BRepLib_EmptyWire
BRepLib_DisconnectedWire = _BRepLib.BRepLib_DisconnectedWire
BRepLib_NonManifoldWire = _BRepLib.BRepLib_NonManifoldWire
BRepLib_FaceDone = _BRepLib.BRepLib_FaceDone
BRepLib_NoFace = _BRepLib.BRepLib_NoFace
BRepLib_NotPlanar = _BRepLib.BRepLib_NotPlanar
BRepLib_CurveProjectionFailed = _BRepLib.BRepLib_CurveProjectionFailed
BRepLib_ParametersOutOfRange = _BRepLib.BRepLib_ParametersOutOfRange
class breplib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BoundingVertex = _swig_new_static_method(_BRepLib.breplib_BoundingVertex)
    BuildCurve3d = _swig_new_static_method(_BRepLib.breplib_BuildCurve3d)
    BuildCurves3d = _swig_new_static_method(_BRepLib.breplib_BuildCurves3d)
    BuildPCurveForEdgeOnPlane = _swig_new_static_method(_BRepLib.breplib_BuildPCurveForEdgeOnPlane)
    CheckSameRange = _swig_new_static_method(_BRepLib.breplib_CheckSameRange)
    EncodeRegularity = _swig_new_static_method(_BRepLib.breplib_EncodeRegularity)
    EnsureNormalConsistency = _swig_new_static_method(_BRepLib.breplib_EnsureNormalConsistency)
    ExtendFace = _swig_new_static_method(_BRepLib.breplib_ExtendFace)
    FindValidRange = _swig_new_static_method(_BRepLib.breplib_FindValidRange)
    OrientClosedSolid = _swig_new_static_method(_BRepLib.breplib_OrientClosedSolid)
    Plane = _swig_new_static_method(_BRepLib.breplib_Plane)
    Precision = _swig_new_static_method(_BRepLib.breplib_Precision)
    ReverseSortFaces = _swig_new_static_method(_BRepLib.breplib_ReverseSortFaces)
    SameParameter = _swig_new_static_method(_BRepLib.breplib_SameParameter)
    SameRange = _swig_new_static_method(_BRepLib.breplib_SameRange)
    SortFaces = _swig_new_static_method(_BRepLib.breplib_SortFaces)
    UpdateEdgeTol = _swig_new_static_method(_BRepLib.breplib_UpdateEdgeTol)
    UpdateEdgeTolerance = _swig_new_static_method(_BRepLib.breplib_UpdateEdgeTolerance)
    UpdateInnerTolerances = _swig_new_static_method(_BRepLib.breplib_UpdateInnerTolerances)
    UpdateTolerances = _swig_new_static_method(_BRepLib.breplib_UpdateTolerances)

    __repr__ = _dumps_object


    def __init__(self):
        _BRepLib.breplib_swiginit(self, _BRepLib.new_breplib())
    __swig_destroy__ = _BRepLib.delete_breplib

# Register breplib in _BRepLib:
_BRepLib.breplib_swigregister(breplib)
breplib_BoundingVertex = _BRepLib.breplib_BoundingVertex
breplib_BuildCurve3d = _BRepLib.breplib_BuildCurve3d
breplib_BuildCurves3d = _BRepLib.breplib_BuildCurves3d
breplib_BuildPCurveForEdgeOnPlane = _BRepLib.breplib_BuildPCurveForEdgeOnPlane
breplib_CheckSameRange = _BRepLib.breplib_CheckSameRange
breplib_EncodeRegularity = _BRepLib.breplib_EncodeRegularity
breplib_EnsureNormalConsistency = _BRepLib.breplib_EnsureNormalConsistency
breplib_ExtendFace = _BRepLib.breplib_ExtendFace
breplib_FindValidRange = _BRepLib.breplib_FindValidRange
breplib_OrientClosedSolid = _BRepLib.breplib_OrientClosedSolid
breplib_Plane = _BRepLib.breplib_Plane
breplib_Precision = _BRepLib.breplib_Precision
breplib_ReverseSortFaces = _BRepLib.breplib_ReverseSortFaces
breplib_SameParameter = _BRepLib.breplib_SameParameter
breplib_SameRange = _BRepLib.breplib_SameRange
breplib_SortFaces = _BRepLib.breplib_SortFaces
breplib_UpdateEdgeTol = _BRepLib.breplib_UpdateEdgeTol
breplib_UpdateEdgeTolerance = _BRepLib.breplib_UpdateEdgeTolerance
breplib_UpdateInnerTolerances = _BRepLib.breplib_UpdateInnerTolerances
breplib_UpdateTolerances = _BRepLib.breplib_UpdateTolerances

class BRepLib_CheckCurveOnSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Default contructor
        	:rtype: None* Contructor
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:rtype: None
        """
        _BRepLib.BRepLib_CheckCurveOnSurface_swiginit(self, _BRepLib.new_BRepLib_CheckCurveOnSurface(*args))
    Curve = _swig_new_instance_method(_BRepLib.BRepLib_CheckCurveOnSurface_Curve)
    ErrorStatus = _swig_new_instance_method(_BRepLib.BRepLib_CheckCurveOnSurface_ErrorStatus)
    Init = _swig_new_instance_method(_BRepLib.BRepLib_CheckCurveOnSurface_Init)
    IsDone = _swig_new_instance_method(_BRepLib.BRepLib_CheckCurveOnSurface_IsDone)
    MaxDistance = _swig_new_instance_method(_BRepLib.BRepLib_CheckCurveOnSurface_MaxDistance)
    MaxParameter = _swig_new_instance_method(_BRepLib.BRepLib_CheckCurveOnSurface_MaxParameter)
    PCurve = _swig_new_instance_method(_BRepLib.BRepLib_CheckCurveOnSurface_PCurve)
    PCurve2 = _swig_new_instance_method(_BRepLib.BRepLib_CheckCurveOnSurface_PCurve2)
    Perform = _swig_new_instance_method(_BRepLib.BRepLib_CheckCurveOnSurface_Perform)
    Range = _swig_new_instance_method(_BRepLib.BRepLib_CheckCurveOnSurface_Range)
    Surface = _swig_new_instance_method(_BRepLib.BRepLib_CheckCurveOnSurface_Surface)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_CheckCurveOnSurface

# Register BRepLib_CheckCurveOnSurface in _BRepLib:
_BRepLib.BRepLib_CheckCurveOnSurface_swigregister(BRepLib_CheckCurveOnSurface)

class BRepLib_Command(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Check = _swig_new_instance_method(_BRepLib.BRepLib_Command_Check)
    IsDone = _swig_new_instance_method(_BRepLib.BRepLib_Command_IsDone)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_Command

# Register BRepLib_Command in _BRepLib:
_BRepLib.BRepLib_Command_swigregister(BRepLib_Command)

class BRepLib_FindSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None* Computes the Surface from the edges of <S> with the given tolerance. if <OnlyPlane> is true, the computed surface will be a plane. If it is not possible to find a plane, the flag NotDone will be set. If <OnlyClosed> is true, then S sould be a wire and the existing surface, on which wire S is not closed in 2D, will be ignored.
        	:param S:
        	:type S: TopoDS_Shape
        	:param Tol: default value is -1
        	:type Tol: float
        	:param OnlyPlane: default value is Standard_False
        	:type OnlyPlane: bool
        	:param OnlyClosed: default value is Standard_False
        	:type OnlyClosed: bool
        	:rtype: None
        """
        _BRepLib.BRepLib_FindSurface_swiginit(self, _BRepLib.new_BRepLib_FindSurface(*args))
    Existed = _swig_new_instance_method(_BRepLib.BRepLib_FindSurface_Existed)
    Found = _swig_new_instance_method(_BRepLib.BRepLib_FindSurface_Found)
    Init = _swig_new_instance_method(_BRepLib.BRepLib_FindSurface_Init)
    Location = _swig_new_instance_method(_BRepLib.BRepLib_FindSurface_Location)
    Surface = _swig_new_instance_method(_BRepLib.BRepLib_FindSurface_Surface)
    Tolerance = _swig_new_instance_method(_BRepLib.BRepLib_FindSurface_Tolerance)
    ToleranceReached = _swig_new_instance_method(_BRepLib.BRepLib_FindSurface_ToleranceReached)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_FindSurface

# Register BRepLib_FindSurface in _BRepLib:
_BRepLib.BRepLib_FindSurface_swigregister(BRepLib_FindSurface)

class BRepLib_FuseEdges(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AvoidEdges = _swig_new_instance_method(_BRepLib.BRepLib_FuseEdges_AvoidEdges)

    def __init__(self, *args):
        r"""
        * Initialise members and build construction of map of ancestors.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param PerformNow: default value is Standard_False
        	:type PerformNow: bool
        	:rtype: None
        """
        _BRepLib.BRepLib_FuseEdges_swiginit(self, _BRepLib.new_BRepLib_FuseEdges(*args))
    Edges = _swig_new_instance_method(_BRepLib.BRepLib_FuseEdges_Edges)
    Faces = _swig_new_instance_method(_BRepLib.BRepLib_FuseEdges_Faces)
    NbVertices = _swig_new_instance_method(_BRepLib.BRepLib_FuseEdges_NbVertices)
    Perform = _swig_new_instance_method(_BRepLib.BRepLib_FuseEdges_Perform)
    ResultEdges = _swig_new_instance_method(_BRepLib.BRepLib_FuseEdges_ResultEdges)
    SetConcatBSpl = _swig_new_instance_method(_BRepLib.BRepLib_FuseEdges_SetConcatBSpl)
    Shape = _swig_new_instance_method(_BRepLib.BRepLib_FuseEdges_Shape)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_FuseEdges

# Register BRepLib_FuseEdges in _BRepLib:
_BRepLib.BRepLib_FuseEdges_swigregister(BRepLib_FuseEdges)

class BRepLib_MakeShape(BRepLib_Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Build = _swig_new_instance_method(_BRepLib.BRepLib_MakeShape_Build)
    DescendantFaces = _swig_new_instance_method(_BRepLib.BRepLib_MakeShape_DescendantFaces)
    FaceStatus = _swig_new_instance_method(_BRepLib.BRepLib_MakeShape_FaceStatus)
    FacesFromEdges = _swig_new_instance_method(_BRepLib.BRepLib_MakeShape_FacesFromEdges)
    HasDescendants = _swig_new_instance_method(_BRepLib.BRepLib_MakeShape_HasDescendants)
    NbSurfaces = _swig_new_instance_method(_BRepLib.BRepLib_MakeShape_NbSurfaces)
    NewFaces = _swig_new_instance_method(_BRepLib.BRepLib_MakeShape_NewFaces)
    Shape = _swig_new_instance_method(_BRepLib.BRepLib_MakeShape_Shape)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_MakeShape

# Register BRepLib_MakeShape in _BRepLib:
_BRepLib.BRepLib_MakeShape_swigregister(BRepLib_MakeShape)

class BRepLib_MakeEdge(BRepLib_MakeShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None:param L:
        	:type L: gp_Lin
        	:rtype: None:param L:
        	:type L: gp_Lin
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None:param L:
        	:type L: gp_Lin
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None:param L:
        	:type L: gp_Lin
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None:param L:
        	:type L: gp_Circ
        	:rtype: None:param L:
        	:type L: gp_Circ
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None:param L:
        	:type L: gp_Circ
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None:param L:
        	:type L: gp_Circ
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None:param L:
        	:type L: gp_Elips
        	:rtype: None:param L:
        	:type L: gp_Elips
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None:param L:
        	:type L: gp_Elips
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None:param L:
        	:type L: gp_Elips
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None:param L:
        	:type L: gp_Hypr
        	:rtype: None:param L:
        	:type L: gp_Hypr
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None:param L:
        	:type L: gp_Hypr
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None:param L:
        	:type L: gp_Hypr
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None:param L:
        	:type L: gp_Parab
        	:rtype: None:param L:
        	:type L: gp_Parab
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None:param L:
        	:type L: gp_Parab
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None:param L:
        	:type L: gp_Parab
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None:param L:
        	:type L: Geom_Curve
        	:rtype: None:param L:
        	:type L: Geom_Curve
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None:param L:
        	:type L: Geom_Curve
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None:param L:
        	:type L: Geom_Curve
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None:param L:
        	:type L: Geom_Curve
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None:param L:
        	:type L: Geom_Curve
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None:param L:
        	:type L: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:rtype: None:param L:
        	:type L: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None:param L:
        	:type L: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None:param L:
        	:type L: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None:param L:
        	:type L: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None:param L:
        	:type L: Geom2d_Curve
        	:param S:
        	:type S: Geom_Surface
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        """
        _BRepLib.BRepLib_MakeEdge_swiginit(self, _BRepLib.new_BRepLib_MakeEdge(*args))
    Edge = _swig_new_instance_method(_BRepLib.BRepLib_MakeEdge_Edge)
    Error = _swig_new_instance_method(_BRepLib.BRepLib_MakeEdge_Error)
    Init = _swig_new_instance_method(_BRepLib.BRepLib_MakeEdge_Init)
    Vertex1 = _swig_new_instance_method(_BRepLib.BRepLib_MakeEdge_Vertex1)
    Vertex2 = _swig_new_instance_method(_BRepLib.BRepLib_MakeEdge_Vertex2)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_MakeEdge

# Register BRepLib_MakeEdge in _BRepLib:
_BRepLib.BRepLib_MakeEdge_swigregister(BRepLib_MakeEdge)

class BRepLib_MakeEdge2d(BRepLib_MakeShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None:param L:
        	:type L: gp_Lin2d
        	:rtype: None:param L:
        	:type L: gp_Lin2d
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None:param L:
        	:type L: gp_Lin2d
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None:param L:
        	:type L: gp_Lin2d
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None:param L:
        	:type L: gp_Circ2d
        	:rtype: None:param L:
        	:type L: gp_Circ2d
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None:param L:
        	:type L: gp_Circ2d
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None:param L:
        	:type L: gp_Circ2d
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None:param L:
        	:type L: gp_Elips2d
        	:rtype: None:param L:
        	:type L: gp_Elips2d
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None:param L:
        	:type L: gp_Elips2d
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None:param L:
        	:type L: gp_Elips2d
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None:param L:
        	:type L: gp_Hypr2d
        	:rtype: None:param L:
        	:type L: gp_Hypr2d
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None:param L:
        	:type L: gp_Hypr2d
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None:param L:
        	:type L: gp_Hypr2d
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None:param L:
        	:type L: gp_Parab2d
        	:rtype: None:param L:
        	:type L: gp_Parab2d
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None:param L:
        	:type L: gp_Parab2d
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None:param L:
        	:type L: gp_Parab2d
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None:param L:
        	:type L: Geom2d_Curve
        	:rtype: None:param L:
        	:type L: Geom2d_Curve
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None:param L:
        	:type L: Geom2d_Curve
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:rtype: None:param L:
        	:type L: Geom2d_Curve
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None:param L:
        	:type L: Geom2d_Curve
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None:param L:
        	:type L: Geom2d_Curve
        	:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:param p1:
        	:type p1: float
        	:param p2:
        	:type p2: float
        	:rtype: None
        """
        _BRepLib.BRepLib_MakeEdge2d_swiginit(self, _BRepLib.new_BRepLib_MakeEdge2d(*args))
    Edge = _swig_new_instance_method(_BRepLib.BRepLib_MakeEdge2d_Edge)
    Error = _swig_new_instance_method(_BRepLib.BRepLib_MakeEdge2d_Error)
    Init = _swig_new_instance_method(_BRepLib.BRepLib_MakeEdge2d_Init)
    Vertex1 = _swig_new_instance_method(_BRepLib.BRepLib_MakeEdge2d_Vertex1)
    Vertex2 = _swig_new_instance_method(_BRepLib.BRepLib_MakeEdge2d_Vertex2)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_MakeEdge2d

# Register BRepLib_MakeEdge2d in _BRepLib:
_BRepLib.BRepLib_MakeEdge2d_swigregister(BRepLib_MakeEdge2d)

class BRepLib_MakeFace(BRepLib_MakeShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_BRepLib.BRepLib_MakeFace_Add)

    def __init__(self, *args):
        r"""
        * Not done.
        	:rtype: None* Load a face. Usefull to add wires.
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None* Make a face from a plane.
        	:param P:
        	:type P: gp_Pln
        	:rtype: None* Make a face from a cylinder.
        	:param C:
        	:type C: gp_Cylinder
        	:rtype: None* Make a face from a cone.
        	:param C:
        	:type C: gp_Cone
        	:rtype: None* Make a face from a sphere.
        	:param S:
        	:type S: gp_Sphere
        	:rtype: None* Make a face from a torus.
        	:param C:
        	:type C: gp_Torus
        	:rtype: None* Make a face from a Surface. Accepts tolerance value (TolDegen) for resolution of degenerated edges.
        	:param S:
        	:type S: Geom_Surface
        	:param TolDegen:
        	:type TolDegen: float
        	:rtype: None* Make a face from a plane.
        	:param P:
        	:type P: gp_Pln
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:rtype: None* Make a face from a cylinder.
        	:param C:
        	:type C: gp_Cylinder
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:rtype: None* Make a face from a cone.
        	:param C:
        	:type C: gp_Cone
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:rtype: None* Make a face from a sphere.
        	:param S:
        	:type S: gp_Sphere
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:rtype: None* Make a face from a torus.
        	:param C:
        	:type C: gp_Torus
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:rtype: None* Make a face from a Surface. Accepts min & max parameters to construct the face's bounds. Also accepts tolerance value (TolDegen) for resolution of degenerated edges.
        	:param S:
        	:type S: Geom_Surface
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:param TolDegen:
        	:type TolDegen: float
        	:rtype: None* Find a surface from the wire and make a face. if <OnlyPlane> is true, the computed surface will be a plane. If it is not possible to find a plane, the flag NotDone will be set.
        	:param W:
        	:type W: TopoDS_Wire
        	:param OnlyPlane: default value is Standard_False
        	:type OnlyPlane: bool
        	:rtype: None* Make a face from a plane and a wire.
        	:param P:
        	:type P: gp_Pln
        	:param W:
        	:type W: TopoDS_Wire
        	:param Inside: default value is Standard_True
        	:type Inside: bool
        	:rtype: None* Make a face from a cylinder and a wire.
        	:param C:
        	:type C: gp_Cylinder
        	:param W:
        	:type W: TopoDS_Wire
        	:param Inside: default value is Standard_True
        	:type Inside: bool
        	:rtype: None* Make a face from a cone and a wire.
        	:param C:
        	:type C: gp_Cone
        	:param W:
        	:type W: TopoDS_Wire
        	:param Inside: default value is Standard_True
        	:type Inside: bool
        	:rtype: None* Make a face from a sphere and a wire.
        	:param S:
        	:type S: gp_Sphere
        	:param W:
        	:type W: TopoDS_Wire
        	:param Inside: default value is Standard_True
        	:type Inside: bool
        	:rtype: None* Make a face from a torus and a wire.
        	:param C:
        	:type C: gp_Torus
        	:param W:
        	:type W: TopoDS_Wire
        	:param Inside: default value is Standard_True
        	:type Inside: bool
        	:rtype: None* Make a face from a Surface and a wire.
        	:param S:
        	:type S: Geom_Surface
        	:param W:
        	:type W: TopoDS_Wire
        	:param Inside: default value is Standard_True
        	:type Inside: bool
        	:rtype: None* Adds the wire <W> in the face <F>
        	:param F:
        	:type F: TopoDS_Face
        	:param W:
        	:type W: TopoDS_Wire
        	:rtype: None
        """
        _BRepLib.BRepLib_MakeFace_swiginit(self, _BRepLib.new_BRepLib_MakeFace(*args))
    Error = _swig_new_instance_method(_BRepLib.BRepLib_MakeFace_Error)
    Face = _swig_new_instance_method(_BRepLib.BRepLib_MakeFace_Face)
    Init = _swig_new_instance_method(_BRepLib.BRepLib_MakeFace_Init)
    IsDegenerated = _swig_new_static_method(_BRepLib.BRepLib_MakeFace_IsDegenerated)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_MakeFace

# Register BRepLib_MakeFace in _BRepLib:
_BRepLib.BRepLib_MakeFace_swigregister(BRepLib_MakeFace)
BRepLib_MakeFace_IsDegenerated = _BRepLib.BRepLib_MakeFace_IsDegenerated

class BRepLib_MakePolygon(BRepLib_MakeShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_BRepLib.BRepLib_MakePolygon_Add)
    Added = _swig_new_instance_method(_BRepLib.BRepLib_MakePolygon_Added)

    def __init__(self, *args):
        r"""
        * Creates an empty MakePolygon.
        	:rtype: None:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:rtype: None:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:param P3:
        	:type P3: gp_Pnt
        	:param Close: default value is Standard_False
        	:type Close: bool
        	:rtype: None:param P1:
        	:type P1: gp_Pnt
        	:param P2:
        	:type P2: gp_Pnt
        	:param P3:
        	:type P3: gp_Pnt
        	:param P4:
        	:type P4: gp_Pnt
        	:param Close: default value is Standard_False
        	:type Close: bool
        	:rtype: None:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:rtype: None:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:param V3:
        	:type V3: TopoDS_Vertex
        	:param Close: default value is Standard_False
        	:type Close: bool
        	:rtype: None:param V1:
        	:type V1: TopoDS_Vertex
        	:param V2:
        	:type V2: TopoDS_Vertex
        	:param V3:
        	:type V3: TopoDS_Vertex
        	:param V4:
        	:type V4: TopoDS_Vertex
        	:param Close: default value is Standard_False
        	:type Close: bool
        	:rtype: None
        """
        _BRepLib.BRepLib_MakePolygon_swiginit(self, _BRepLib.new_BRepLib_MakePolygon(*args))
    Close = _swig_new_instance_method(_BRepLib.BRepLib_MakePolygon_Close)
    Edge = _swig_new_instance_method(_BRepLib.BRepLib_MakePolygon_Edge)
    FirstVertex = _swig_new_instance_method(_BRepLib.BRepLib_MakePolygon_FirstVertex)
    LastVertex = _swig_new_instance_method(_BRepLib.BRepLib_MakePolygon_LastVertex)
    Wire = _swig_new_instance_method(_BRepLib.BRepLib_MakePolygon_Wire)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_MakePolygon

# Register BRepLib_MakePolygon in _BRepLib:
_BRepLib.BRepLib_MakePolygon_swigregister(BRepLib_MakePolygon)

class BRepLib_MakeShell(BRepLib_MakeShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Not done.
        	:rtype: None:param S:
        	:type S: Geom_Surface
        	:param Segment: default value is Standard_False
        	:type Segment: bool
        	:rtype: None:param S:
        	:type S: Geom_Surface
        	:param UMin:
        	:type UMin: float
        	:param UMax:
        	:type UMax: float
        	:param VMin:
        	:type VMin: float
        	:param VMax:
        	:type VMax: float
        	:param Segment: default value is Standard_False
        	:type Segment: bool
        	:rtype: None
        """
        _BRepLib.BRepLib_MakeShell_swiginit(self, _BRepLib.new_BRepLib_MakeShell(*args))
    Error = _swig_new_instance_method(_BRepLib.BRepLib_MakeShell_Error)
    Init = _swig_new_instance_method(_BRepLib.BRepLib_MakeShell_Init)
    Shell = _swig_new_instance_method(_BRepLib.BRepLib_MakeShell_Shell)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_MakeShell

# Register BRepLib_MakeShell in _BRepLib:
_BRepLib.BRepLib_MakeShell_swigregister(BRepLib_MakeShell)

class BRepLib_MakeSolid(BRepLib_MakeShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_BRepLib.BRepLib_MakeSolid_Add)

    def __init__(self, *args):
        r"""
        * Solid covers whole space.
        	:rtype: None* Make a solid from a CompSolid.
        	:param S:
        	:type S: TopoDS_CompSolid
        	:rtype: None* Make a solid from a shell.
        	:param S:
        	:type S: TopoDS_Shell
        	:rtype: None* Make a solid from two shells.
        	:param S1:
        	:type S1: TopoDS_Shell
        	:param S2:
        	:type S2: TopoDS_Shell
        	:rtype: None* Make a solid from three shells.
        	:param S1:
        	:type S1: TopoDS_Shell
        	:param S2:
        	:type S2: TopoDS_Shell
        	:param S3:
        	:type S3: TopoDS_Shell
        	:rtype: None* Make a solid from a solid. Usefull for adding later.
        	:param So:
        	:type So: TopoDS_Solid
        	:rtype: None* Add a shell to a solid.
        	:param So:
        	:type So: TopoDS_Solid
        	:param S:
        	:type S: TopoDS_Shell
        	:rtype: None
        """
        _BRepLib.BRepLib_MakeSolid_swiginit(self, _BRepLib.new_BRepLib_MakeSolid(*args))
    Solid = _swig_new_instance_method(_BRepLib.BRepLib_MakeSolid_Solid)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_MakeSolid

# Register BRepLib_MakeSolid in _BRepLib:
_BRepLib.BRepLib_MakeSolid_swigregister(BRepLib_MakeSolid)

class BRepLib_MakeVertex(BRepLib_MakeShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param P:
        	:type P: gp_Pnt
        	:rtype: None
        """
        _BRepLib.BRepLib_MakeVertex_swiginit(self, _BRepLib.new_BRepLib_MakeVertex(*args))
    Vertex = _swig_new_instance_method(_BRepLib.BRepLib_MakeVertex_Vertex)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_MakeVertex

# Register BRepLib_MakeVertex in _BRepLib:
_BRepLib.BRepLib_MakeVertex_swigregister(BRepLib_MakeVertex)

class BRepLib_MakeWire(BRepLib_MakeShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_BRepLib.BRepLib_MakeWire_Add)

    def __init__(self, *args):
        r"""
        * NotDone MakeWire.
        	:rtype: None* Make a Wire from an edge.
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None* Make a Wire from two edges.
        	:param E1:
        	:type E1: TopoDS_Edge
        	:param E2:
        	:type E2: TopoDS_Edge
        	:rtype: None* Make a Wire from three edges.
        	:param E1:
        	:type E1: TopoDS_Edge
        	:param E2:
        	:type E2: TopoDS_Edge
        	:param E3:
        	:type E3: TopoDS_Edge
        	:rtype: None* Make a Wire from four edges.
        	:param E1:
        	:type E1: TopoDS_Edge
        	:param E2:
        	:type E2: TopoDS_Edge
        	:param E3:
        	:type E3: TopoDS_Edge
        	:param E4:
        	:type E4: TopoDS_Edge
        	:rtype: None* Make a Wire from a Wire. Usefull for adding later.
        	:param W:
        	:type W: TopoDS_Wire
        	:rtype: None* Add an edge to a wire.
        	:param W:
        	:type W: TopoDS_Wire
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        _BRepLib.BRepLib_MakeWire_swiginit(self, _BRepLib.new_BRepLib_MakeWire(*args))
    Edge = _swig_new_instance_method(_BRepLib.BRepLib_MakeWire_Edge)
    Error = _swig_new_instance_method(_BRepLib.BRepLib_MakeWire_Error)
    Vertex = _swig_new_instance_method(_BRepLib.BRepLib_MakeWire_Vertex)
    Wire = _swig_new_instance_method(_BRepLib.BRepLib_MakeWire_Wire)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepLib.delete_BRepLib_MakeWire

# Register BRepLib_MakeWire in _BRepLib:
_BRepLib.BRepLib_MakeWire_swigregister(BRepLib_MakeWire)



