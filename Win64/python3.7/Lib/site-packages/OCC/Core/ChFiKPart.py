# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ChFiKPart module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_chfikpart.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ChFiKPart
else:
    import _ChFiKPart

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ChFiKPart.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ChFiKPart.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ChFiKPart.delete_SwigPyIterator
    value = _swig_new_instance_method(_ChFiKPart.SwigPyIterator_value)
    incr = _swig_new_instance_method(_ChFiKPart.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_ChFiKPart.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_ChFiKPart.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_ChFiKPart.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_ChFiKPart.SwigPyIterator_copy)
    next = _swig_new_instance_method(_ChFiKPart.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_ChFiKPart.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_ChFiKPart.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_ChFiKPart.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_ChFiKPart.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_ChFiKPart.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_ChFiKPart.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_ChFiKPart.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_ChFiKPart.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_ChFiKPart.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ChFiKPart:
_ChFiKPart.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopOpeBRepDS
import OCC.Core.Geom
import OCC.Core.TopAbs
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopLoc
import OCC.Core.TopOpeBRepTool
import OCC.Core.TopTools
import OCC.Core.BRepClass3d
import OCC.Core.IntCurveSurface
import OCC.Core.math
import OCC.Core.Adaptor3d
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.IntSurf
import OCC.Core.IntCurvesFace
import OCC.Core.BRepAdaptor
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.TopExp
import OCC.Core.Extrema
import OCC.Core.ChFiDS
import OCC.Core.Law
class ChFiKPart_RstMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap_begin)
    end = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap_end)
    cbegin = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap_cbegin)
    cend = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap_cend)

    def __init__(self, *args):
        _ChFiKPart.ChFiKPart_RstMap_swiginit(self, _ChFiKPart.new_ChFiKPart_RstMap(*args))
    Exchange = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap_Exchange)
    Assign = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap_Assign)
    Set = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap_Set)
    ReSize = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap_ReSize)
    Bind = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap_Bind)
    Bound = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap_Bound)
    IsBound = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap_IsBound)
    UnBind = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap_UnBind)
    Seek = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap_Seek)
    Find = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap_Find)
    ChangeSeek = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap_ChangeFind)
    __call__ = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap___call__)
    Clear = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap_Clear)
    __swig_destroy__ = _ChFiKPart.delete_ChFiKPart_RstMap
    Size = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap_Size)
    Keys = _swig_new_instance_method(_ChFiKPart.ChFiKPart_RstMap_Keys)

# Register ChFiKPart_RstMap in _ChFiKPart:
_ChFiKPart.ChFiKPart_RstMap_swigregister(ChFiKPart_RstMap)

class ChFiKPart_ComputeData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Compute = _swig_new_static_method(_ChFiKPart.ChFiKPart_ComputeData_Compute)
    ComputeCorner = _swig_new_static_method(_ChFiKPart.ChFiKPart_ComputeData_ComputeCorner)

    __repr__ = _dumps_object


    def __init__(self):
        _ChFiKPart.ChFiKPart_ComputeData_swiginit(self, _ChFiKPart.new_ChFiKPart_ComputeData())
    __swig_destroy__ = _ChFiKPart.delete_ChFiKPart_ComputeData

# Register ChFiKPart_ComputeData in _ChFiKPart:
_ChFiKPart.ChFiKPart_ComputeData_swigregister(ChFiKPart_ComputeData)
ChFiKPart_ComputeData_Compute = _ChFiKPart.ChFiKPart_ComputeData_Compute
ChFiKPart_ComputeData_ComputeCorner = _ChFiKPart.ChFiKPart_ComputeData_ComputeCorner



