# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Graphic3d module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_graphic3d.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Graphic3d
else:
    import _Graphic3d

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _Graphic3d.SWIG_PyInstanceMethod_New
_swig_new_static_method = _Graphic3d.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Graphic3d.delete_SwigPyIterator
    value = _swig_new_instance_method(_Graphic3d.SwigPyIterator_value)
    incr = _swig_new_instance_method(_Graphic3d.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_Graphic3d.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_Graphic3d.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_Graphic3d.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_Graphic3d.SwigPyIterator_copy)
    next = _swig_new_instance_method(_Graphic3d.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_Graphic3d.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_Graphic3d.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_Graphic3d.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_Graphic3d.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_Graphic3d.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_Graphic3d.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_Graphic3d.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_Graphic3d.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_Graphic3d.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Graphic3d:
_Graphic3d.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.BVH
import OCC.Core.Quantity
import OCC.Core.TCollection
import OCC.Core.gp
import OCC.Core.Aspect
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.Bnd
import OCC.Core.Image
import OCC.Core.OSD
Graphic3d_ClipState_Out = _Graphic3d.Graphic3d_ClipState_Out
Graphic3d_ClipState_In = _Graphic3d.Graphic3d_ClipState_In
Graphic3d_ClipState_On = _Graphic3d.Graphic3d_ClipState_On
Graphic3d_BT_RGB = _Graphic3d.Graphic3d_BT_RGB
Graphic3d_BT_RGBA = _Graphic3d.Graphic3d_BT_RGBA
Graphic3d_BT_Depth = _Graphic3d.Graphic3d_BT_Depth
Graphic3d_BT_RGB_RayTraceHdrLeft = _Graphic3d.Graphic3d_BT_RGB_RayTraceHdrLeft
Graphic3d_FrameStatsTimer_ElapsedFrame = _Graphic3d.Graphic3d_FrameStatsTimer_ElapsedFrame
Graphic3d_FrameStatsTimer_CpuFrame = _Graphic3d.Graphic3d_FrameStatsTimer_CpuFrame
Graphic3d_FrameStatsTimer_CpuCulling = _Graphic3d.Graphic3d_FrameStatsTimer_CpuCulling
Graphic3d_FrameStatsTimer_CpuPicking = _Graphic3d.Graphic3d_FrameStatsTimer_CpuPicking
Graphic3d_FrameStatsTimer_CpuDynamics = _Graphic3d.Graphic3d_FrameStatsTimer_CpuDynamics
Graphic3d_FrameStatsTimer_NB = _Graphic3d.Graphic3d_FrameStatsTimer_NB
Graphic3d_VTA_BOTTOM = _Graphic3d.Graphic3d_VTA_BOTTOM
Graphic3d_VTA_CENTER = _Graphic3d.Graphic3d_VTA_CENTER
Graphic3d_VTA_TOP = _Graphic3d.Graphic3d_VTA_TOP
Graphic3d_VTA_TOPFIRSTLINE = _Graphic3d.Graphic3d_VTA_TOPFIRSTLINE
Graphic3d_LOTA_OFF = _Graphic3d.Graphic3d_LOTA_OFF
Graphic3d_LOTA_FAST = _Graphic3d.Graphic3d_LOTA_FAST
Graphic3d_LOTA_MIDDLE = _Graphic3d.Graphic3d_LOTA_MIDDLE
Graphic3d_LOTA_QUALITY = _Graphic3d.Graphic3d_LOTA_QUALITY
Graphic3d_TypeOfLimit_MaxNbLights = _Graphic3d.Graphic3d_TypeOfLimit_MaxNbLights
Graphic3d_TypeOfLimit_MaxNbClipPlanes = _Graphic3d.Graphic3d_TypeOfLimit_MaxNbClipPlanes
Graphic3d_TypeOfLimit_MaxNbViews = _Graphic3d.Graphic3d_TypeOfLimit_MaxNbViews
Graphic3d_TypeOfLimit_MaxTextureSize = _Graphic3d.Graphic3d_TypeOfLimit_MaxTextureSize
Graphic3d_TypeOfLimit_MaxViewDumpSizeX = _Graphic3d.Graphic3d_TypeOfLimit_MaxViewDumpSizeX
Graphic3d_TypeOfLimit_MaxViewDumpSizeY = _Graphic3d.Graphic3d_TypeOfLimit_MaxViewDumpSizeY
Graphic3d_TypeOfLimit_MaxCombinedTextureUnits = _Graphic3d.Graphic3d_TypeOfLimit_MaxCombinedTextureUnits
Graphic3d_TypeOfLimit_MaxMsaa = _Graphic3d.Graphic3d_TypeOfLimit_MaxMsaa
Graphic3d_TypeOfLimit_HasRayTracing = _Graphic3d.Graphic3d_TypeOfLimit_HasRayTracing
Graphic3d_TypeOfLimit_HasRayTracingTextures = _Graphic3d.Graphic3d_TypeOfLimit_HasRayTracingTextures
Graphic3d_TypeOfLimit_HasRayTracingAdaptiveSampling = _Graphic3d.Graphic3d_TypeOfLimit_HasRayTracingAdaptiveSampling
Graphic3d_TypeOfLimit_HasRayTracingAdaptiveSamplingAtomic = _Graphic3d.Graphic3d_TypeOfLimit_HasRayTracingAdaptiveSamplingAtomic
Graphic3d_TypeOfLimit_HasBlendedOit = _Graphic3d.Graphic3d_TypeOfLimit_HasBlendedOit
Graphic3d_TypeOfLimit_HasBlendedOitMsaa = _Graphic3d.Graphic3d_TypeOfLimit_HasBlendedOitMsaa
Graphic3d_TypeOfLimit_HasFlatShading = _Graphic3d.Graphic3d_TypeOfLimit_HasFlatShading
Graphic3d_TypeOfLimit_HasMeshEdges = _Graphic3d.Graphic3d_TypeOfLimit_HasMeshEdges
Graphic3d_TypeOfLimit_IsWorkaroundFBO = _Graphic3d.Graphic3d_TypeOfLimit_IsWorkaroundFBO
Graphic3d_TypeOfLimit_NB = _Graphic3d.Graphic3d_TypeOfLimit_NB
Graphic3d_DiagnosticInfo_Device = _Graphic3d.Graphic3d_DiagnosticInfo_Device
Graphic3d_DiagnosticInfo_FrameBuffer = _Graphic3d.Graphic3d_DiagnosticInfo_FrameBuffer
Graphic3d_DiagnosticInfo_Limits = _Graphic3d.Graphic3d_DiagnosticInfo_Limits
Graphic3d_DiagnosticInfo_Memory = _Graphic3d.Graphic3d_DiagnosticInfo_Memory
Graphic3d_DiagnosticInfo_NativePlatform = _Graphic3d.Graphic3d_DiagnosticInfo_NativePlatform
Graphic3d_DiagnosticInfo_Extensions = _Graphic3d.Graphic3d_DiagnosticInfo_Extensions
Graphic3d_DiagnosticInfo_Short = _Graphic3d.Graphic3d_DiagnosticInfo_Short
Graphic3d_DiagnosticInfo_Basic = _Graphic3d.Graphic3d_DiagnosticInfo_Basic
Graphic3d_DiagnosticInfo_Complete = _Graphic3d.Graphic3d_DiagnosticInfo_Complete
Graphic3d_StereoMode_QuadBuffer = _Graphic3d.Graphic3d_StereoMode_QuadBuffer
Graphic3d_StereoMode_Anaglyph = _Graphic3d.Graphic3d_StereoMode_Anaglyph
Graphic3d_StereoMode_RowInterlaced = _Graphic3d.Graphic3d_StereoMode_RowInterlaced
Graphic3d_StereoMode_ColumnInterlaced = _Graphic3d.Graphic3d_StereoMode_ColumnInterlaced
Graphic3d_StereoMode_ChessBoard = _Graphic3d.Graphic3d_StereoMode_ChessBoard
Graphic3d_StereoMode_SideBySide = _Graphic3d.Graphic3d_StereoMode_SideBySide
Graphic3d_StereoMode_OverUnder = _Graphic3d.Graphic3d_StereoMode_OverUnder
Graphic3d_StereoMode_SoftPageFlip = _Graphic3d.Graphic3d_StereoMode_SoftPageFlip
Graphic3d_StereoMode_NB = _Graphic3d.Graphic3d_StereoMode_NB
Graphic3d_AlphaMode_Opaque = _Graphic3d.Graphic3d_AlphaMode_Opaque
Graphic3d_AlphaMode_Mask = _Graphic3d.Graphic3d_AlphaMode_Mask
Graphic3d_AlphaMode_Blend = _Graphic3d.Graphic3d_AlphaMode_Blend
Graphic3d_AlphaMode_BlendAuto = _Graphic3d.Graphic3d_AlphaMode_BlendAuto
Graphic3d_FM_SCHLICK = _Graphic3d.Graphic3d_FM_SCHLICK
Graphic3d_FM_CONSTANT = _Graphic3d.Graphic3d_FM_CONSTANT
Graphic3d_FM_CONDUCTOR = _Graphic3d.Graphic3d_FM_CONDUCTOR
Graphic3d_FM_DIELECTRIC = _Graphic3d.Graphic3d_FM_DIELECTRIC
Graphic3d_TOR_AMBIENT = _Graphic3d.Graphic3d_TOR_AMBIENT
Graphic3d_TOR_DIFFUSE = _Graphic3d.Graphic3d_TOR_DIFFUSE
Graphic3d_TOR_SPECULAR = _Graphic3d.Graphic3d_TOR_SPECULAR
Graphic3d_TOR_EMISSION = _Graphic3d.Graphic3d_TOR_EMISSION
Graphic3d_TypeOfReflection_NB = _Graphic3d.Graphic3d_TypeOfReflection_NB
Graphic3d_RTM_BLEND_UNORDERED = _Graphic3d.Graphic3d_RTM_BLEND_UNORDERED
Graphic3d_RTM_BLEND_OIT = _Graphic3d.Graphic3d_RTM_BLEND_OIT
Graphic3d_RM_RASTERIZATION = _Graphic3d.Graphic3d_RM_RASTERIZATION
Graphic3d_RM_RAYTRACING = _Graphic3d.Graphic3d_RM_RAYTRACING
Graphic3d_FrameStatsCounter_NbLayers = _Graphic3d.Graphic3d_FrameStatsCounter_NbLayers
Graphic3d_FrameStatsCounter_NbLayersNotCulled = _Graphic3d.Graphic3d_FrameStatsCounter_NbLayersNotCulled
Graphic3d_FrameStatsCounter_NbStructs = _Graphic3d.Graphic3d_FrameStatsCounter_NbStructs
Graphic3d_FrameStatsCounter_NbStructsNotCulled = _Graphic3d.Graphic3d_FrameStatsCounter_NbStructsNotCulled
Graphic3d_FrameStatsCounter_NbGroupsNotCulled = _Graphic3d.Graphic3d_FrameStatsCounter_NbGroupsNotCulled
Graphic3d_FrameStatsCounter_NbElemsNotCulled = _Graphic3d.Graphic3d_FrameStatsCounter_NbElemsNotCulled
Graphic3d_FrameStatsCounter_NbElemsFillNotCulled = _Graphic3d.Graphic3d_FrameStatsCounter_NbElemsFillNotCulled
Graphic3d_FrameStatsCounter_NbElemsLineNotCulled = _Graphic3d.Graphic3d_FrameStatsCounter_NbElemsLineNotCulled
Graphic3d_FrameStatsCounter_NbElemsPointNotCulled = _Graphic3d.Graphic3d_FrameStatsCounter_NbElemsPointNotCulled
Graphic3d_FrameStatsCounter_NbElemsTextNotCulled = _Graphic3d.Graphic3d_FrameStatsCounter_NbElemsTextNotCulled
Graphic3d_FrameStatsCounter_NbTrianglesNotCulled = _Graphic3d.Graphic3d_FrameStatsCounter_NbTrianglesNotCulled
Graphic3d_FrameStatsCounter_NbPointsNotCulled = _Graphic3d.Graphic3d_FrameStatsCounter_NbPointsNotCulled
Graphic3d_FrameStatsCounter_EstimatedBytesGeom = _Graphic3d.Graphic3d_FrameStatsCounter_EstimatedBytesGeom
Graphic3d_FrameStatsCounter_EstimatedBytesFbos = _Graphic3d.Graphic3d_FrameStatsCounter_EstimatedBytesFbos
Graphic3d_FrameStatsCounter_EstimatedBytesTextures = _Graphic3d.Graphic3d_FrameStatsCounter_EstimatedBytesTextures
Graphic3d_FrameStatsCounter_NB = _Graphic3d.Graphic3d_FrameStatsCounter_NB
Graphic3d_TOB_NONE = _Graphic3d.Graphic3d_TOB_NONE
Graphic3d_TOB_GRADIENT = _Graphic3d.Graphic3d_TOB_GRADIENT
Graphic3d_TOB_TEXTURE = _Graphic3d.Graphic3d_TOB_TEXTURE
Graphic3d_TOB_CUBEMAP = _Graphic3d.Graphic3d_TOB_CUBEMAP
Graphic3d_TypeOfBackground_NB = _Graphic3d.Graphic3d_TypeOfBackground_NB
Graphic3d_TOS_WIREFRAME = _Graphic3d.Graphic3d_TOS_WIREFRAME
Graphic3d_TOS_SHADING = _Graphic3d.Graphic3d_TOS_SHADING
Graphic3d_TOS_COMPUTED = _Graphic3d.Graphic3d_TOS_COMPUTED
Graphic3d_TOS_ALL = _Graphic3d.Graphic3d_TOS_ALL
Graphic3d_TOTM_OBJECT = _Graphic3d.Graphic3d_TOTM_OBJECT
Graphic3d_TOTM_SPHERE = _Graphic3d.Graphic3d_TOTM_SPHERE
Graphic3d_TOTM_EYE = _Graphic3d.Graphic3d_TOTM_EYE
Graphic3d_TOTM_MANUAL = _Graphic3d.Graphic3d_TOTM_MANUAL
Graphic3d_TOTM_SPRITE = _Graphic3d.Graphic3d_TOTM_SPRITE
Graphic3d_TOS_VERTEX = _Graphic3d.Graphic3d_TOS_VERTEX
Graphic3d_TOS_TESS_CONTROL = _Graphic3d.Graphic3d_TOS_TESS_CONTROL
Graphic3d_TOS_TESS_EVALUATION = _Graphic3d.Graphic3d_TOS_TESS_EVALUATION
Graphic3d_TOS_GEOMETRY = _Graphic3d.Graphic3d_TOS_GEOMETRY
Graphic3d_TOS_FRAGMENT = _Graphic3d.Graphic3d_TOS_FRAGMENT
Graphic3d_TOS_COMPUTE = _Graphic3d.Graphic3d_TOS_COMPUTE
Graphic3d_ZLayerDepthTest = _Graphic3d.Graphic3d_ZLayerDepthTest
Graphic3d_ZLayerDepthWrite = _Graphic3d.Graphic3d_ZLayerDepthWrite
Graphic3d_ZLayerDepthClear = _Graphic3d.Graphic3d_ZLayerDepthClear
Graphic3d_ZLayerDepthOffset = _Graphic3d.Graphic3d_ZLayerDepthOffset
Graphic3d_CappingFlags_None = _Graphic3d.Graphic3d_CappingFlags_None
Graphic3d_CappingFlags_ObjectMaterial = _Graphic3d.Graphic3d_CappingFlags_ObjectMaterial
Graphic3d_CappingFlags_ObjectTexture = _Graphic3d.Graphic3d_CappingFlags_ObjectTexture
Graphic3d_CappingFlags_ObjectShader = _Graphic3d.Graphic3d_CappingFlags_ObjectShader
Graphic3d_CappingFlags_ObjectAspect = _Graphic3d.Graphic3d_CappingFlags_ObjectAspect
Graphic3d_NOTP_XY = _Graphic3d.Graphic3d_NOTP_XY
Graphic3d_NOTP_YZ = _Graphic3d.Graphic3d_NOTP_YZ
Graphic3d_NOTP_ZX = _Graphic3d.Graphic3d_NOTP_ZX
Graphic3d_NOTP_UNKNOWN = _Graphic3d.Graphic3d_NOTP_UNKNOWN
Graphic3d_TOSM_DEFAULT = _Graphic3d.Graphic3d_TOSM_DEFAULT
Graphic3d_TOSM_UNLIT = _Graphic3d.Graphic3d_TOSM_UNLIT
Graphic3d_TOSM_FACET = _Graphic3d.Graphic3d_TOSM_FACET
Graphic3d_TOSM_VERTEX = _Graphic3d.Graphic3d_TOSM_VERTEX
Graphic3d_TOSM_FRAGMENT = _Graphic3d.Graphic3d_TOSM_FRAGMENT
Graphic3d_TOSM_NONE = _Graphic3d.Graphic3d_TOSM_NONE
V3d_COLOR = _Graphic3d.V3d_COLOR
V3d_FLAT = _Graphic3d.V3d_FLAT
V3d_GOURAUD = _Graphic3d.V3d_GOURAUD
V3d_PHONG = _Graphic3d.V3d_PHONG
Graphic3d_TypeOfShadingModel_NB = _Graphic3d.Graphic3d_TypeOfShadingModel_NB
Graphic3d_TOPA_UNDEFINED = _Graphic3d.Graphic3d_TOPA_UNDEFINED
Graphic3d_TOPA_POINTS = _Graphic3d.Graphic3d_TOPA_POINTS
Graphic3d_TOPA_SEGMENTS = _Graphic3d.Graphic3d_TOPA_SEGMENTS
Graphic3d_TOPA_POLYLINES = _Graphic3d.Graphic3d_TOPA_POLYLINES
Graphic3d_TOPA_TRIANGLES = _Graphic3d.Graphic3d_TOPA_TRIANGLES
Graphic3d_TOPA_TRIANGLESTRIPS = _Graphic3d.Graphic3d_TOPA_TRIANGLESTRIPS
Graphic3d_TOPA_TRIANGLEFANS = _Graphic3d.Graphic3d_TOPA_TRIANGLEFANS
Graphic3d_TOPA_LINES_ADJACENCY = _Graphic3d.Graphic3d_TOPA_LINES_ADJACENCY
Graphic3d_TOPA_LINE_STRIP_ADJACENCY = _Graphic3d.Graphic3d_TOPA_LINE_STRIP_ADJACENCY
Graphic3d_TOPA_TRIANGLES_ADJACENCY = _Graphic3d.Graphic3d_TOPA_TRIANGLES_ADJACENCY
Graphic3d_TOPA_TRIANGLE_STRIP_ADJACENCY = _Graphic3d.Graphic3d_TOPA_TRIANGLE_STRIP_ADJACENCY
Graphic3d_TOPA_QUADRANGLES = _Graphic3d.Graphic3d_TOPA_QUADRANGLES
Graphic3d_TOPA_QUADRANGLESTRIPS = _Graphic3d.Graphic3d_TOPA_QUADRANGLESTRIPS
Graphic3d_TOPA_POLYGONS = _Graphic3d.Graphic3d_TOPA_POLYGONS
Graphic3d_ToneMappingMethod_Disabled = _Graphic3d.Graphic3d_ToneMappingMethod_Disabled
Graphic3d_ToneMappingMethod_Filmic = _Graphic3d.Graphic3d_ToneMappingMethod_Filmic
Graphic3d_TOT_1D = _Graphic3d.Graphic3d_TOT_1D
Graphic3d_TOT_2D = _Graphic3d.Graphic3d_TOT_2D
Graphic3d_TOT_2D_MIPMAP = _Graphic3d.Graphic3d_TOT_2D_MIPMAP
Graphic3d_TOT_CUBEMAP = _Graphic3d.Graphic3d_TOT_CUBEMAP
Graphic3d_MATERIAL_ASPECT = _Graphic3d.Graphic3d_MATERIAL_ASPECT
Graphic3d_MATERIAL_PHYSIC = _Graphic3d.Graphic3d_MATERIAL_PHYSIC
Graphic3d_TOBM_AUTOMATIC = _Graphic3d.Graphic3d_TOBM_AUTOMATIC
Graphic3d_TOBM_FORCE = _Graphic3d.Graphic3d_TOBM_FORCE
Graphic3d_TOBM_DISABLE = _Graphic3d.Graphic3d_TOBM_DISABLE
Graphic3d_HTA_LEFT = _Graphic3d.Graphic3d_HTA_LEFT
Graphic3d_HTA_CENTER = _Graphic3d.Graphic3d_HTA_CENTER
Graphic3d_HTA_RIGHT = _Graphic3d.Graphic3d_HTA_RIGHT
Graphic3d_TMF_None = _Graphic3d.Graphic3d_TMF_None
Graphic3d_TMF_ZoomPers = _Graphic3d.Graphic3d_TMF_ZoomPers
Graphic3d_TMF_RotatePers = _Graphic3d.Graphic3d_TMF_RotatePers
Graphic3d_TMF_TriedronPers = _Graphic3d.Graphic3d_TMF_TriedronPers
Graphic3d_TMF_2d = _Graphic3d.Graphic3d_TMF_2d
Graphic3d_TMF_ZoomRotatePers = _Graphic3d.Graphic3d_TMF_ZoomRotatePers
Graphic3d_ArrayFlags_None = _Graphic3d.Graphic3d_ArrayFlags_None
Graphic3d_ArrayFlags_VertexNormal = _Graphic3d.Graphic3d_ArrayFlags_VertexNormal
Graphic3d_ArrayFlags_VertexColor = _Graphic3d.Graphic3d_ArrayFlags_VertexColor
Graphic3d_ArrayFlags_VertexTexel = _Graphic3d.Graphic3d_ArrayFlags_VertexTexel
Graphic3d_ArrayFlags_BoundColor = _Graphic3d.Graphic3d_ArrayFlags_BoundColor
Graphic3d_ArrayFlags_AttribsMutable = _Graphic3d.Graphic3d_ArrayFlags_AttribsMutable
Graphic3d_ArrayFlags_AttribsDeinterleaved = _Graphic3d.Graphic3d_ArrayFlags_AttribsDeinterleaved
Graphic3d_ArrayFlags_IndexesMutable = _Graphic3d.Graphic3d_ArrayFlags_IndexesMutable
Graphic3d_TOA_YES = _Graphic3d.Graphic3d_TOA_YES
Graphic3d_TOA_NO = _Graphic3d.Graphic3d_TOA_NO
Graphic3d_TOA_COMPUTE = _Graphic3d.Graphic3d_TOA_COMPUTE
Graphic3d_ASPECT_LINE = _Graphic3d.Graphic3d_ASPECT_LINE
Graphic3d_ASPECT_TEXT = _Graphic3d.Graphic3d_ASPECT_TEXT
Graphic3d_ASPECT_MARKER = _Graphic3d.Graphic3d_ASPECT_MARKER
Graphic3d_ASPECT_FILL_AREA = _Graphic3d.Graphic3d_ASPECT_FILL_AREA
Graphic3d_TextureUnit_0 = _Graphic3d.Graphic3d_TextureUnit_0
Graphic3d_TextureUnit_1 = _Graphic3d.Graphic3d_TextureUnit_1
Graphic3d_TextureUnit_2 = _Graphic3d.Graphic3d_TextureUnit_2
Graphic3d_TextureUnit_3 = _Graphic3d.Graphic3d_TextureUnit_3
Graphic3d_TextureUnit_4 = _Graphic3d.Graphic3d_TextureUnit_4
Graphic3d_TextureUnit_5 = _Graphic3d.Graphic3d_TextureUnit_5
Graphic3d_TextureUnit_6 = _Graphic3d.Graphic3d_TextureUnit_6
Graphic3d_TextureUnit_7 = _Graphic3d.Graphic3d_TextureUnit_7
Graphic3d_TextureUnit_8 = _Graphic3d.Graphic3d_TextureUnit_8
Graphic3d_TextureUnit_9 = _Graphic3d.Graphic3d_TextureUnit_9
Graphic3d_TextureUnit_10 = _Graphic3d.Graphic3d_TextureUnit_10
Graphic3d_TextureUnit_11 = _Graphic3d.Graphic3d_TextureUnit_11
Graphic3d_TextureUnit_12 = _Graphic3d.Graphic3d_TextureUnit_12
Graphic3d_TextureUnit_13 = _Graphic3d.Graphic3d_TextureUnit_13
Graphic3d_TextureUnit_14 = _Graphic3d.Graphic3d_TextureUnit_14
Graphic3d_TextureUnit_15 = _Graphic3d.Graphic3d_TextureUnit_15
Graphic3d_TextureUnit_BaseColor = _Graphic3d.Graphic3d_TextureUnit_BaseColor
Graphic3d_TextureUnit_EnvMap = _Graphic3d.Graphic3d_TextureUnit_EnvMap
Graphic3d_TextureUnit_NB = _Graphic3d.Graphic3d_TextureUnit_NB
Graphic3d_TOC_ANCESTOR = _Graphic3d.Graphic3d_TOC_ANCESTOR
Graphic3d_TOC_DESCENDANT = _Graphic3d.Graphic3d_TOC_DESCENDANT
Graphic3d_NOT_1D_ELEVATION = _Graphic3d.Graphic3d_NOT_1D_ELEVATION
Graphic3d_NOT_1D_UNKNOWN = _Graphic3d.Graphic3d_NOT_1D_UNKNOWN
Graphic3d_TP_UP = _Graphic3d.Graphic3d_TP_UP
Graphic3d_TP_DOWN = _Graphic3d.Graphic3d_TP_DOWN
Graphic3d_TP_LEFT = _Graphic3d.Graphic3d_TP_LEFT
Graphic3d_TP_RIGHT = _Graphic3d.Graphic3d_TP_RIGHT
Graphic3d_CMS_POS_X = _Graphic3d.Graphic3d_CMS_POS_X
Graphic3d_CMS_NEG_X = _Graphic3d.Graphic3d_CMS_NEG_X
Graphic3d_CMS_POS_Y = _Graphic3d.Graphic3d_CMS_POS_Y
Graphic3d_CMS_NEG_Y = _Graphic3d.Graphic3d_CMS_NEG_Y
Graphic3d_CMS_POS_Z = _Graphic3d.Graphic3d_CMS_POS_Z
Graphic3d_CMS_NEG_Z = _Graphic3d.Graphic3d_CMS_NEG_Z
Graphic3d_ZLayerId_UNKNOWN = _Graphic3d.Graphic3d_ZLayerId_UNKNOWN
Graphic3d_ZLayerId_Default = _Graphic3d.Graphic3d_ZLayerId_Default
Graphic3d_ZLayerId_Top = _Graphic3d.Graphic3d_ZLayerId_Top
Graphic3d_ZLayerId_Topmost = _Graphic3d.Graphic3d_ZLayerId_Topmost
Graphic3d_ZLayerId_TopOSD = _Graphic3d.Graphic3d_ZLayerId_TopOSD
Graphic3d_ZLayerId_BotOSD = _Graphic3d.Graphic3d_ZLayerId_BotOSD
Graphic3d_TOC_REPLACE = _Graphic3d.Graphic3d_TOC_REPLACE
Graphic3d_TOC_POSTCONCATENATE = _Graphic3d.Graphic3d_TOC_POSTCONCATENATE
Graphic3d_TOA_POS = _Graphic3d.Graphic3d_TOA_POS
Graphic3d_TOA_NORM = _Graphic3d.Graphic3d_TOA_NORM
Graphic3d_TOA_UV = _Graphic3d.Graphic3d_TOA_UV
Graphic3d_TOA_COLOR = _Graphic3d.Graphic3d_TOA_COLOR
Graphic3d_TOA_CUSTOM = _Graphic3d.Graphic3d_TOA_CUSTOM
Graphic3d_TOD_USHORT = _Graphic3d.Graphic3d_TOD_USHORT
Graphic3d_TOD_UINT = _Graphic3d.Graphic3d_TOD_UINT
Graphic3d_TOD_VEC2 = _Graphic3d.Graphic3d_TOD_VEC2
Graphic3d_TOD_VEC3 = _Graphic3d.Graphic3d_TOD_VEC3
Graphic3d_TOD_VEC4 = _Graphic3d.Graphic3d_TOD_VEC4
Graphic3d_TOD_VEC4UB = _Graphic3d.Graphic3d_TOD_VEC4UB
Graphic3d_TOD_FLOAT = _Graphic3d.Graphic3d_TOD_FLOAT
Graphic3d_NOT_2D_MATRA = _Graphic3d.Graphic3d_NOT_2D_MATRA
Graphic3d_NOT_2D_ALIENSKIN = _Graphic3d.Graphic3d_NOT_2D_ALIENSKIN
Graphic3d_NOT_2D_BLUE_ROCK = _Graphic3d.Graphic3d_NOT_2D_BLUE_ROCK
Graphic3d_NOT_2D_BLUEWHITE_PAPER = _Graphic3d.Graphic3d_NOT_2D_BLUEWHITE_PAPER
Graphic3d_NOT_2D_BRUSHED = _Graphic3d.Graphic3d_NOT_2D_BRUSHED
Graphic3d_NOT_2D_BUBBLES = _Graphic3d.Graphic3d_NOT_2D_BUBBLES
Graphic3d_NOT_2D_BUMP = _Graphic3d.Graphic3d_NOT_2D_BUMP
Graphic3d_NOT_2D_CAST = _Graphic3d.Graphic3d_NOT_2D_CAST
Graphic3d_NOT_2D_CHIPBD = _Graphic3d.Graphic3d_NOT_2D_CHIPBD
Graphic3d_NOT_2D_CLOUDS = _Graphic3d.Graphic3d_NOT_2D_CLOUDS
Graphic3d_NOT_2D_FLESH = _Graphic3d.Graphic3d_NOT_2D_FLESH
Graphic3d_NOT_2D_FLOOR = _Graphic3d.Graphic3d_NOT_2D_FLOOR
Graphic3d_NOT_2D_GALVNISD = _Graphic3d.Graphic3d_NOT_2D_GALVNISD
Graphic3d_NOT_2D_GRASS = _Graphic3d.Graphic3d_NOT_2D_GRASS
Graphic3d_NOT_2D_ALUMINUM = _Graphic3d.Graphic3d_NOT_2D_ALUMINUM
Graphic3d_NOT_2D_ROCK = _Graphic3d.Graphic3d_NOT_2D_ROCK
Graphic3d_NOT_2D_KNURL = _Graphic3d.Graphic3d_NOT_2D_KNURL
Graphic3d_NOT_2D_MAPLE = _Graphic3d.Graphic3d_NOT_2D_MAPLE
Graphic3d_NOT_2D_MARBLE = _Graphic3d.Graphic3d_NOT_2D_MARBLE
Graphic3d_NOT_2D_MOTTLED = _Graphic3d.Graphic3d_NOT_2D_MOTTLED
Graphic3d_NOT_2D_RAIN = _Graphic3d.Graphic3d_NOT_2D_RAIN
Graphic3d_NOT_2D_CHESS = _Graphic3d.Graphic3d_NOT_2D_CHESS
Graphic3d_NOT_2D_UNKNOWN = _Graphic3d.Graphic3d_NOT_2D_UNKNOWN
Graphic3d_NOM_BRASS = _Graphic3d.Graphic3d_NOM_BRASS
Graphic3d_NOM_BRONZE = _Graphic3d.Graphic3d_NOM_BRONZE
Graphic3d_NOM_COPPER = _Graphic3d.Graphic3d_NOM_COPPER
Graphic3d_NOM_GOLD = _Graphic3d.Graphic3d_NOM_GOLD
Graphic3d_NOM_PEWTER = _Graphic3d.Graphic3d_NOM_PEWTER
Graphic3d_NOM_PLASTER = _Graphic3d.Graphic3d_NOM_PLASTER
Graphic3d_NOM_PLASTIC = _Graphic3d.Graphic3d_NOM_PLASTIC
Graphic3d_NOM_SILVER = _Graphic3d.Graphic3d_NOM_SILVER
Graphic3d_NOM_STEEL = _Graphic3d.Graphic3d_NOM_STEEL
Graphic3d_NOM_STONE = _Graphic3d.Graphic3d_NOM_STONE
Graphic3d_NOM_SHINY_PLASTIC = _Graphic3d.Graphic3d_NOM_SHINY_PLASTIC
Graphic3d_NOM_SATIN = _Graphic3d.Graphic3d_NOM_SATIN
Graphic3d_NOM_METALIZED = _Graphic3d.Graphic3d_NOM_METALIZED
Graphic3d_NOM_NEON_GNC = _Graphic3d.Graphic3d_NOM_NEON_GNC
Graphic3d_NOM_CHROME = _Graphic3d.Graphic3d_NOM_CHROME
Graphic3d_NOM_ALUMINIUM = _Graphic3d.Graphic3d_NOM_ALUMINIUM
Graphic3d_NOM_OBSIDIAN = _Graphic3d.Graphic3d_NOM_OBSIDIAN
Graphic3d_NOM_NEON_PHC = _Graphic3d.Graphic3d_NOM_NEON_PHC
Graphic3d_NOM_JADE = _Graphic3d.Graphic3d_NOM_JADE
Graphic3d_NOM_CHARCOAL = _Graphic3d.Graphic3d_NOM_CHARCOAL
Graphic3d_NOM_WATER = _Graphic3d.Graphic3d_NOM_WATER
Graphic3d_NOM_GLASS = _Graphic3d.Graphic3d_NOM_GLASS
Graphic3d_NOM_DIAMOND = _Graphic3d.Graphic3d_NOM_DIAMOND
Graphic3d_NOM_TRANSPARENT = _Graphic3d.Graphic3d_NOM_TRANSPARENT
Graphic3d_NOM_DEFAULT = _Graphic3d.Graphic3d_NOM_DEFAULT
Graphic3d_NOM_UserDefined = _Graphic3d.Graphic3d_NOM_UserDefined
Graphic3d_TOTF_NEAREST = _Graphic3d.Graphic3d_TOTF_NEAREST
Graphic3d_TOTF_BILINEAR = _Graphic3d.Graphic3d_TOTF_BILINEAR
Graphic3d_TOTF_TRILINEAR = _Graphic3d.Graphic3d_TOTF_TRILINEAR
Graphic3d_TOV_WIREFRAME = _Graphic3d.Graphic3d_TOV_WIREFRAME
Graphic3d_TOV_SHADING = _Graphic3d.Graphic3d_TOV_SHADING
Graphic3d_TOLS_AMBIENT = _Graphic3d.Graphic3d_TOLS_AMBIENT
Graphic3d_TOLS_DIRECTIONAL = _Graphic3d.Graphic3d_TOLS_DIRECTIONAL
Graphic3d_TOLS_POSITIONAL = _Graphic3d.Graphic3d_TOLS_POSITIONAL
Graphic3d_TOLS_SPOT = _Graphic3d.Graphic3d_TOLS_SPOT
V3d_AMBIENT = _Graphic3d.V3d_AMBIENT
V3d_DIRECTIONAL = _Graphic3d.V3d_DIRECTIONAL
V3d_POSITIONAL = _Graphic3d.V3d_POSITIONAL
V3d_SPOT = _Graphic3d.V3d_SPOT
Graphic3d_TypeOfLightSource_NB = _Graphic3d.Graphic3d_TypeOfLightSource_NB
Graphic3d_NOT_ENV_CLOUDS = _Graphic3d.Graphic3d_NOT_ENV_CLOUDS
Graphic3d_NOT_ENV_CV = _Graphic3d.Graphic3d_NOT_ENV_CV
Graphic3d_NOT_ENV_MEDIT = _Graphic3d.Graphic3d_NOT_ENV_MEDIT
Graphic3d_NOT_ENV_PEARL = _Graphic3d.Graphic3d_NOT_ENV_PEARL
Graphic3d_NOT_ENV_SKY1 = _Graphic3d.Graphic3d_NOT_ENV_SKY1
Graphic3d_NOT_ENV_SKY2 = _Graphic3d.Graphic3d_NOT_ENV_SKY2
Graphic3d_NOT_ENV_LINES = _Graphic3d.Graphic3d_NOT_ENV_LINES
Graphic3d_NOT_ENV_ROAD = _Graphic3d.Graphic3d_NOT_ENV_ROAD
Graphic3d_NOT_ENV_UNKNOWN = _Graphic3d.Graphic3d_NOT_ENV_UNKNOWN
Handle_Graphic3d_ArrayOfPrimitives_Create = _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_Create
Handle_Graphic3d_ArrayOfPrimitives_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_DownCast
Handle_Graphic3d_ArrayOfPrimitives_IsNull = _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_IsNull
Handle_Graphic3d_Aspects_Create = _Graphic3d.Handle_Graphic3d_Aspects_Create
Handle_Graphic3d_Aspects_DownCast = _Graphic3d.Handle_Graphic3d_Aspects_DownCast
Handle_Graphic3d_Aspects_IsNull = _Graphic3d.Handle_Graphic3d_Aspects_IsNull
Handle_Graphic3d_BoundBuffer_Create = _Graphic3d.Handle_Graphic3d_BoundBuffer_Create
Handle_Graphic3d_BoundBuffer_DownCast = _Graphic3d.Handle_Graphic3d_BoundBuffer_DownCast
Handle_Graphic3d_BoundBuffer_IsNull = _Graphic3d.Handle_Graphic3d_BoundBuffer_IsNull
Handle_Graphic3d_CLight_Create = _Graphic3d.Handle_Graphic3d_CLight_Create
Handle_Graphic3d_CLight_DownCast = _Graphic3d.Handle_Graphic3d_CLight_DownCast
Handle_Graphic3d_CLight_IsNull = _Graphic3d.Handle_Graphic3d_CLight_IsNull
Handle_Graphic3d_CStructure_Create = _Graphic3d.Handle_Graphic3d_CStructure_Create
Handle_Graphic3d_CStructure_DownCast = _Graphic3d.Handle_Graphic3d_CStructure_DownCast
Handle_Graphic3d_CStructure_IsNull = _Graphic3d.Handle_Graphic3d_CStructure_IsNull
Handle_Graphic3d_Camera_Create = _Graphic3d.Handle_Graphic3d_Camera_Create
Handle_Graphic3d_Camera_DownCast = _Graphic3d.Handle_Graphic3d_Camera_DownCast
Handle_Graphic3d_Camera_IsNull = _Graphic3d.Handle_Graphic3d_Camera_IsNull
Handle_Graphic3d_ClipPlane_Create = _Graphic3d.Handle_Graphic3d_ClipPlane_Create
Handle_Graphic3d_ClipPlane_DownCast = _Graphic3d.Handle_Graphic3d_ClipPlane_DownCast
Handle_Graphic3d_ClipPlane_IsNull = _Graphic3d.Handle_Graphic3d_ClipPlane_IsNull
Handle_Graphic3d_DataStructureManager_Create = _Graphic3d.Handle_Graphic3d_DataStructureManager_Create
Handle_Graphic3d_DataStructureManager_DownCast = _Graphic3d.Handle_Graphic3d_DataStructureManager_DownCast
Handle_Graphic3d_DataStructureManager_IsNull = _Graphic3d.Handle_Graphic3d_DataStructureManager_IsNull
Handle_Graphic3d_FrameStats_Create = _Graphic3d.Handle_Graphic3d_FrameStats_Create
Handle_Graphic3d_FrameStats_DownCast = _Graphic3d.Handle_Graphic3d_FrameStats_DownCast
Handle_Graphic3d_FrameStats_IsNull = _Graphic3d.Handle_Graphic3d_FrameStats_IsNull
Handle_Graphic3d_GraphicDriver_Create = _Graphic3d.Handle_Graphic3d_GraphicDriver_Create
Handle_Graphic3d_GraphicDriver_DownCast = _Graphic3d.Handle_Graphic3d_GraphicDriver_DownCast
Handle_Graphic3d_GraphicDriver_IsNull = _Graphic3d.Handle_Graphic3d_GraphicDriver_IsNull
Handle_Graphic3d_Group_Create = _Graphic3d.Handle_Graphic3d_Group_Create
Handle_Graphic3d_Group_DownCast = _Graphic3d.Handle_Graphic3d_Group_DownCast
Handle_Graphic3d_Group_IsNull = _Graphic3d.Handle_Graphic3d_Group_IsNull
Handle_Graphic3d_HatchStyle_Create = _Graphic3d.Handle_Graphic3d_HatchStyle_Create
Handle_Graphic3d_HatchStyle_DownCast = _Graphic3d.Handle_Graphic3d_HatchStyle_DownCast
Handle_Graphic3d_HatchStyle_IsNull = _Graphic3d.Handle_Graphic3d_HatchStyle_IsNull
Handle_Graphic3d_Layer_Create = _Graphic3d.Handle_Graphic3d_Layer_Create
Handle_Graphic3d_Layer_DownCast = _Graphic3d.Handle_Graphic3d_Layer_DownCast
Handle_Graphic3d_Layer_IsNull = _Graphic3d.Handle_Graphic3d_Layer_IsNull
Handle_Graphic3d_LightSet_Create = _Graphic3d.Handle_Graphic3d_LightSet_Create
Handle_Graphic3d_LightSet_DownCast = _Graphic3d.Handle_Graphic3d_LightSet_DownCast
Handle_Graphic3d_LightSet_IsNull = _Graphic3d.Handle_Graphic3d_LightSet_IsNull
Handle_Graphic3d_MarkerImage_Create = _Graphic3d.Handle_Graphic3d_MarkerImage_Create
Handle_Graphic3d_MarkerImage_DownCast = _Graphic3d.Handle_Graphic3d_MarkerImage_DownCast
Handle_Graphic3d_MarkerImage_IsNull = _Graphic3d.Handle_Graphic3d_MarkerImage_IsNull
Handle_Graphic3d_PresentationAttributes_Create = _Graphic3d.Handle_Graphic3d_PresentationAttributes_Create
Handle_Graphic3d_PresentationAttributes_DownCast = _Graphic3d.Handle_Graphic3d_PresentationAttributes_DownCast
Handle_Graphic3d_PresentationAttributes_IsNull = _Graphic3d.Handle_Graphic3d_PresentationAttributes_IsNull
Handle_Graphic3d_SequenceOfHClipPlane_Create = _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_Create
Handle_Graphic3d_SequenceOfHClipPlane_DownCast = _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_DownCast
Handle_Graphic3d_SequenceOfHClipPlane_IsNull = _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_IsNull
Handle_Graphic3d_ShaderAttribute_Create = _Graphic3d.Handle_Graphic3d_ShaderAttribute_Create
Handle_Graphic3d_ShaderAttribute_DownCast = _Graphic3d.Handle_Graphic3d_ShaderAttribute_DownCast
Handle_Graphic3d_ShaderAttribute_IsNull = _Graphic3d.Handle_Graphic3d_ShaderAttribute_IsNull
Handle_Graphic3d_ShaderObject_Create = _Graphic3d.Handle_Graphic3d_ShaderObject_Create
Handle_Graphic3d_ShaderObject_DownCast = _Graphic3d.Handle_Graphic3d_ShaderObject_DownCast
Handle_Graphic3d_ShaderObject_IsNull = _Graphic3d.Handle_Graphic3d_ShaderObject_IsNull
Handle_Graphic3d_ShaderProgram_Create = _Graphic3d.Handle_Graphic3d_ShaderProgram_Create
Handle_Graphic3d_ShaderProgram_DownCast = _Graphic3d.Handle_Graphic3d_ShaderProgram_DownCast
Handle_Graphic3d_ShaderProgram_IsNull = _Graphic3d.Handle_Graphic3d_ShaderProgram_IsNull
Handle_Graphic3d_ShaderVariable_Create = _Graphic3d.Handle_Graphic3d_ShaderVariable_Create
Handle_Graphic3d_ShaderVariable_DownCast = _Graphic3d.Handle_Graphic3d_ShaderVariable_DownCast
Handle_Graphic3d_ShaderVariable_IsNull = _Graphic3d.Handle_Graphic3d_ShaderVariable_IsNull
Handle_Graphic3d_Structure_Create = _Graphic3d.Handle_Graphic3d_Structure_Create
Handle_Graphic3d_Structure_DownCast = _Graphic3d.Handle_Graphic3d_Structure_DownCast
Handle_Graphic3d_Structure_IsNull = _Graphic3d.Handle_Graphic3d_Structure_IsNull
Handle_Graphic3d_StructureManager_Create = _Graphic3d.Handle_Graphic3d_StructureManager_Create
Handle_Graphic3d_StructureManager_DownCast = _Graphic3d.Handle_Graphic3d_StructureManager_DownCast
Handle_Graphic3d_StructureManager_IsNull = _Graphic3d.Handle_Graphic3d_StructureManager_IsNull
Handle_Graphic3d_Text_Create = _Graphic3d.Handle_Graphic3d_Text_Create
Handle_Graphic3d_Text_DownCast = _Graphic3d.Handle_Graphic3d_Text_DownCast
Handle_Graphic3d_Text_IsNull = _Graphic3d.Handle_Graphic3d_Text_IsNull
Handle_Graphic3d_TextureParams_Create = _Graphic3d.Handle_Graphic3d_TextureParams_Create
Handle_Graphic3d_TextureParams_DownCast = _Graphic3d.Handle_Graphic3d_TextureParams_DownCast
Handle_Graphic3d_TextureParams_IsNull = _Graphic3d.Handle_Graphic3d_TextureParams_IsNull
Handle_Graphic3d_TextureRoot_Create = _Graphic3d.Handle_Graphic3d_TextureRoot_Create
Handle_Graphic3d_TextureRoot_DownCast = _Graphic3d.Handle_Graphic3d_TextureRoot_DownCast
Handle_Graphic3d_TextureRoot_IsNull = _Graphic3d.Handle_Graphic3d_TextureRoot_IsNull
Handle_Graphic3d_ViewAffinity_Create = _Graphic3d.Handle_Graphic3d_ViewAffinity_Create
Handle_Graphic3d_ViewAffinity_DownCast = _Graphic3d.Handle_Graphic3d_ViewAffinity_DownCast
Handle_Graphic3d_ViewAffinity_IsNull = _Graphic3d.Handle_Graphic3d_ViewAffinity_IsNull
Handle_Graphic3d_ArrayOfPoints_Create = _Graphic3d.Handle_Graphic3d_ArrayOfPoints_Create
Handle_Graphic3d_ArrayOfPoints_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfPoints_DownCast
Handle_Graphic3d_ArrayOfPoints_IsNull = _Graphic3d.Handle_Graphic3d_ArrayOfPoints_IsNull
Handle_Graphic3d_ArrayOfPolygons_Create = _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_Create
Handle_Graphic3d_ArrayOfPolygons_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_DownCast
Handle_Graphic3d_ArrayOfPolygons_IsNull = _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_IsNull
Handle_Graphic3d_ArrayOfPolylines_Create = _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_Create
Handle_Graphic3d_ArrayOfPolylines_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_DownCast
Handle_Graphic3d_ArrayOfPolylines_IsNull = _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_IsNull
Handle_Graphic3d_ArrayOfQuadrangleStrips_Create = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_Create
Handle_Graphic3d_ArrayOfQuadrangleStrips_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_DownCast
Handle_Graphic3d_ArrayOfQuadrangleStrips_IsNull = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_IsNull
Handle_Graphic3d_ArrayOfQuadrangles_Create = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_Create
Handle_Graphic3d_ArrayOfQuadrangles_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_DownCast
Handle_Graphic3d_ArrayOfQuadrangles_IsNull = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_IsNull
Handle_Graphic3d_ArrayOfSegments_Create = _Graphic3d.Handle_Graphic3d_ArrayOfSegments_Create
Handle_Graphic3d_ArrayOfSegments_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfSegments_DownCast
Handle_Graphic3d_ArrayOfSegments_IsNull = _Graphic3d.Handle_Graphic3d_ArrayOfSegments_IsNull
Handle_Graphic3d_ArrayOfTriangleFans_Create = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_Create
Handle_Graphic3d_ArrayOfTriangleFans_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_DownCast
Handle_Graphic3d_ArrayOfTriangleFans_IsNull = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_IsNull
Handle_Graphic3d_ArrayOfTriangleStrips_Create = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_Create
Handle_Graphic3d_ArrayOfTriangleStrips_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_DownCast
Handle_Graphic3d_ArrayOfTriangleStrips_IsNull = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_IsNull
Handle_Graphic3d_ArrayOfTriangles_Create = _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_Create
Handle_Graphic3d_ArrayOfTriangles_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_DownCast
Handle_Graphic3d_ArrayOfTriangles_IsNull = _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_IsNull
Handle_Graphic3d_AspectFillArea3d_Create = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_Create
Handle_Graphic3d_AspectFillArea3d_DownCast = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_DownCast
Handle_Graphic3d_AspectFillArea3d_IsNull = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_IsNull
Handle_Graphic3d_AspectLine3d_Create = _Graphic3d.Handle_Graphic3d_AspectLine3d_Create
Handle_Graphic3d_AspectLine3d_DownCast = _Graphic3d.Handle_Graphic3d_AspectLine3d_DownCast
Handle_Graphic3d_AspectLine3d_IsNull = _Graphic3d.Handle_Graphic3d_AspectLine3d_IsNull
Handle_Graphic3d_AspectMarker3d_Create = _Graphic3d.Handle_Graphic3d_AspectMarker3d_Create
Handle_Graphic3d_AspectMarker3d_DownCast = _Graphic3d.Handle_Graphic3d_AspectMarker3d_DownCast
Handle_Graphic3d_AspectMarker3d_IsNull = _Graphic3d.Handle_Graphic3d_AspectMarker3d_IsNull
Handle_Graphic3d_AspectText3d_Create = _Graphic3d.Handle_Graphic3d_AspectText3d_Create
Handle_Graphic3d_AspectText3d_DownCast = _Graphic3d.Handle_Graphic3d_AspectText3d_DownCast
Handle_Graphic3d_AspectText3d_IsNull = _Graphic3d.Handle_Graphic3d_AspectText3d_IsNull
Handle_Graphic3d_CView_Create = _Graphic3d.Handle_Graphic3d_CView_Create
Handle_Graphic3d_CView_DownCast = _Graphic3d.Handle_Graphic3d_CView_DownCast
Handle_Graphic3d_CView_IsNull = _Graphic3d.Handle_Graphic3d_CView_IsNull
Handle_Graphic3d_MediaTextureSet_Create = _Graphic3d.Handle_Graphic3d_MediaTextureSet_Create
Handle_Graphic3d_MediaTextureSet_DownCast = _Graphic3d.Handle_Graphic3d_MediaTextureSet_DownCast
Handle_Graphic3d_MediaTextureSet_IsNull = _Graphic3d.Handle_Graphic3d_MediaTextureSet_IsNull
Handle_Graphic3d_TextureEnv_Create = _Graphic3d.Handle_Graphic3d_TextureEnv_Create
Handle_Graphic3d_TextureEnv_DownCast = _Graphic3d.Handle_Graphic3d_TextureEnv_DownCast
Handle_Graphic3d_TextureEnv_IsNull = _Graphic3d.Handle_Graphic3d_TextureEnv_IsNull
Handle_Graphic3d_TextureMap_Create = _Graphic3d.Handle_Graphic3d_TextureMap_Create
Handle_Graphic3d_TextureMap_DownCast = _Graphic3d.Handle_Graphic3d_TextureMap_DownCast
Handle_Graphic3d_TextureMap_IsNull = _Graphic3d.Handle_Graphic3d_TextureMap_IsNull
Handle_Graphic3d_CubeMap_Create = _Graphic3d.Handle_Graphic3d_CubeMap_Create
Handle_Graphic3d_CubeMap_DownCast = _Graphic3d.Handle_Graphic3d_CubeMap_DownCast
Handle_Graphic3d_CubeMap_IsNull = _Graphic3d.Handle_Graphic3d_CubeMap_IsNull
Handle_Graphic3d_Texture1D_Create = _Graphic3d.Handle_Graphic3d_Texture1D_Create
Handle_Graphic3d_Texture1D_DownCast = _Graphic3d.Handle_Graphic3d_Texture1D_DownCast
Handle_Graphic3d_Texture1D_IsNull = _Graphic3d.Handle_Graphic3d_Texture1D_IsNull
Handle_Graphic3d_Texture2D_Create = _Graphic3d.Handle_Graphic3d_Texture2D_Create
Handle_Graphic3d_Texture2D_DownCast = _Graphic3d.Handle_Graphic3d_Texture2D_DownCast
Handle_Graphic3d_Texture2D_IsNull = _Graphic3d.Handle_Graphic3d_Texture2D_IsNull
Handle_Graphic3d_CubeMapSeparate_Create = _Graphic3d.Handle_Graphic3d_CubeMapSeparate_Create
Handle_Graphic3d_CubeMapSeparate_DownCast = _Graphic3d.Handle_Graphic3d_CubeMapSeparate_DownCast
Handle_Graphic3d_CubeMapSeparate_IsNull = _Graphic3d.Handle_Graphic3d_CubeMapSeparate_IsNull
Handle_Graphic3d_MediaTexture_Create = _Graphic3d.Handle_Graphic3d_MediaTexture_Create
Handle_Graphic3d_MediaTexture_DownCast = _Graphic3d.Handle_Graphic3d_MediaTexture_DownCast
Handle_Graphic3d_MediaTexture_IsNull = _Graphic3d.Handle_Graphic3d_MediaTexture_IsNull
Handle_Graphic3d_Texture1Dmanual_Create = _Graphic3d.Handle_Graphic3d_Texture1Dmanual_Create
Handle_Graphic3d_Texture1Dmanual_DownCast = _Graphic3d.Handle_Graphic3d_Texture1Dmanual_DownCast
Handle_Graphic3d_Texture1Dmanual_IsNull = _Graphic3d.Handle_Graphic3d_Texture1Dmanual_IsNull
Handle_Graphic3d_Texture1Dsegment_Create = _Graphic3d.Handle_Graphic3d_Texture1Dsegment_Create
Handle_Graphic3d_Texture1Dsegment_DownCast = _Graphic3d.Handle_Graphic3d_Texture1Dsegment_DownCast
Handle_Graphic3d_Texture1Dsegment_IsNull = _Graphic3d.Handle_Graphic3d_Texture1Dsegment_IsNull
Handle_Graphic3d_Texture2Dmanual_Create = _Graphic3d.Handle_Graphic3d_Texture2Dmanual_Create
Handle_Graphic3d_Texture2Dmanual_DownCast = _Graphic3d.Handle_Graphic3d_Texture2Dmanual_DownCast
Handle_Graphic3d_Texture2Dmanual_IsNull = _Graphic3d.Handle_Graphic3d_Texture2Dmanual_IsNull
Handle_Graphic3d_Texture2Dplane_Create = _Graphic3d.Handle_Graphic3d_Texture2Dplane_Create
Handle_Graphic3d_Texture2Dplane_DownCast = _Graphic3d.Handle_Graphic3d_Texture2Dplane_DownCast
Handle_Graphic3d_Texture2Dplane_IsNull = _Graphic3d.Handle_Graphic3d_Texture2Dplane_IsNull
class Graphic3d_IndexedMapOfStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cbegin = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfStructure_cbegin)
    cend = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfStructure_cend)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_IndexedMapOfStructure_swiginit(self, _Graphic3d.new_Graphic3d_IndexedMapOfStructure(*args))
    Exchange = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfStructure_Exchange)
    Assign = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfStructure_Assign)
    Set = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfStructure_Set)
    ReSize = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfStructure_ReSize)
    Add = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfStructure_Add)
    Contains = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfStructure_Contains)
    Substitute = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfStructure_Substitute)
    Swap = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfStructure_Swap)
    RemoveLast = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfStructure_RemoveLast)
    RemoveFromIndex = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfStructure_RemoveFromIndex)
    RemoveKey = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfStructure_RemoveKey)
    FindKey = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfStructure_FindKey)
    __call__ = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfStructure___call__)
    FindIndex = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfStructure_FindIndex)
    Clear = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfStructure_Clear)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_IndexedMapOfStructure
    Size = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfStructure_Size)

# Register Graphic3d_IndexedMapOfStructure in _Graphic3d:
_Graphic3d.Graphic3d_IndexedMapOfStructure_swigregister(Graphic3d_IndexedMapOfStructure)

class Graphic3d_ArrayOfIndexedMapOfStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_begin)
    end = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_end)
    cbegin = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_cbegin)
    cend = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_cend)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_swiginit(self, _Graphic3d.new_Graphic3d_ArrayOfIndexedMapOfStructure(*args))
    Init = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_Init)
    Size = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_Size)
    Length = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_Length)
    IsEmpty = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_IsEmpty)
    Lower = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_Lower)
    Upper = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_Upper)
    IsDeletable = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_IsDeletable)
    IsAllocated = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_IsAllocated)
    Assign = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_Assign)
    Move = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_Move)
    Set = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_Set)
    First = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_First)
    ChangeFirst = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_ChangeFirst)
    Last = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_Last)
    ChangeLast = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_ChangeLast)
    Value = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_Value)
    ChangeValue = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_ChangeValue)
    __call__ = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure___call__)
    SetValue = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_SetValue)
    Resize = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_Resize)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfIndexedMapOfStructure

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register Graphic3d_ArrayOfIndexedMapOfStructure in _Graphic3d:
_Graphic3d.Graphic3d_ArrayOfIndexedMapOfStructure_swigregister(Graphic3d_ArrayOfIndexedMapOfStructure)

class Graphic3d_CameraLerp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Graphic3d_CameraLerp_swiginit(self, _Graphic3d.new_Graphic3d_CameraLerp(*args))
    Init = _swig_new_instance_method(_Graphic3d.Graphic3d_CameraLerp_Init)
    Interpolate = _swig_new_instance_method(_Graphic3d.Graphic3d_CameraLerp_Interpolate)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_CameraLerp

# Register Graphic3d_CameraLerp in _Graphic3d:
_Graphic3d.Graphic3d_CameraLerp_swigregister(Graphic3d_CameraLerp)

class Graphic3d_SequenceOfGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_begin)
    end = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_end)
    cbegin = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_cbegin)
    cend = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_cend)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_SequenceOfGroup_swiginit(self, _Graphic3d.new_Graphic3d_SequenceOfGroup(*args))
    Size = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_Size)
    Length = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_Length)
    Lower = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_Lower)
    Upper = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_Upper)
    IsEmpty = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_IsEmpty)
    Reverse = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_Reverse)
    Exchange = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_Exchange)
    delNode = _swig_new_static_method(_Graphic3d.Graphic3d_SequenceOfGroup_delNode)
    Clear = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_Clear)
    Assign = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_Assign)
    Set = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_Set)
    Remove = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_Remove)
    Append = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_Append)
    Prepend = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_Prepend)
    InsertBefore = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_InsertBefore)
    InsertAfter = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_InsertAfter)
    Split = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_Split)
    First = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_First)
    ChangeFirst = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_ChangeFirst)
    Last = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_Last)
    ChangeLast = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_ChangeLast)
    Value = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_Value)
    ChangeValue = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_ChangeValue)
    __call__ = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup___call__)
    SetValue = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfGroup_SetValue)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_SequenceOfGroup

# Register Graphic3d_SequenceOfGroup in _Graphic3d:
_Graphic3d.Graphic3d_SequenceOfGroup_swigregister(Graphic3d_SequenceOfGroup)
Graphic3d_SequenceOfGroup_delNode = _Graphic3d.Graphic3d_SequenceOfGroup_delNode

class Graphic3d_Mat4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Rows = _swig_new_static_method(_Graphic3d.Graphic3d_Mat4_Rows)
    Cols = _swig_new_static_method(_Graphic3d.Graphic3d_Mat4_Cols)

    def __init__(self):
        _Graphic3d.Graphic3d_Mat4_swiginit(self, _Graphic3d.new_Graphic3d_Mat4())
    GetValue = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_GetValue)
    ChangeValue = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_ChangeValue)
    SetValue = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_SetValue)
    GetRow = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_GetRow)
    SetRow = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_SetRow)
    GetColumn = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_GetColumn)
    SetColumn = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_SetColumn)
    GetDiagonal = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_GetDiagonal)
    SetDiagonal = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_SetDiagonal)
    InitIdentity = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_InitIdentity)
    IsIdentity = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_IsIdentity)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_IsEqual)
    __eq__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4___eq__)
    __ne__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4___ne__)
    GetData = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_GetData)
    ChangeData = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_ChangeData)
    Multiply = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_Multiply)
    __imul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4___imul__)
    __mul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4___mul__)
    Multiplied = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_Multiplied)
    Translate = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_Translate)
    Transposed = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_Transposed)
    Transpose = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_Transpose)
    Inverted = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4_Inverted)
    Map = _swig_new_static_method(_Graphic3d.Graphic3d_Mat4_Map)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Mat4

# Register Graphic3d_Mat4 in _Graphic3d:
_Graphic3d.Graphic3d_Mat4_swigregister(Graphic3d_Mat4)
Graphic3d_Mat4_Rows = _Graphic3d.Graphic3d_Mat4_Rows
Graphic3d_Mat4_Cols = _Graphic3d.Graphic3d_Mat4_Cols
Graphic3d_Mat4_Map = _Graphic3d.Graphic3d_Mat4_Map

class Graphic3d_IndexedMapOfView(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cbegin = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfView_cbegin)
    cend = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfView_cend)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_IndexedMapOfView_swiginit(self, _Graphic3d.new_Graphic3d_IndexedMapOfView(*args))
    Exchange = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfView_Exchange)
    Assign = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfView_Assign)
    Set = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfView_Set)
    ReSize = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfView_ReSize)
    Add = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfView_Add)
    Contains = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfView_Contains)
    Substitute = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfView_Substitute)
    Swap = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfView_Swap)
    RemoveLast = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfView_RemoveLast)
    RemoveFromIndex = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfView_RemoveFromIndex)
    RemoveKey = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfView_RemoveKey)
    FindKey = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfView_FindKey)
    __call__ = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfView___call__)
    FindIndex = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfView_FindIndex)
    Clear = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfView_Clear)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_IndexedMapOfView
    Size = _swig_new_instance_method(_Graphic3d.Graphic3d_IndexedMapOfView_Size)

# Register Graphic3d_IndexedMapOfView in _Graphic3d:
_Graphic3d.Graphic3d_IndexedMapOfView_swigregister(Graphic3d_IndexedMapOfView)

class Graphic3d_BndBox4f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Graphic3d_BndBox4f_swiginit(self, _Graphic3d.new_Graphic3d_BndBox4f(*args))
    Clear = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4f_Clear)
    IsValid = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4f_IsValid)
    Add = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4f_Add)
    Combine = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4f_Combine)
    CornerMin = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4f_CornerMin)
    CornerMax = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4f_CornerMax)
    Area = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4f_Area)
    Size = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4f_Size)
    Center = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4f_Center)
    DumpJson = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4f_DumpJson)
    Contains = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4f_Contains)
    IsOut = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4f_IsOut)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_BndBox4f

# Register Graphic3d_BndBox4f in _Graphic3d:
_Graphic3d.Graphic3d_BndBox4f_swigregister(Graphic3d_BndBox4f)

class Graphic3d_SequenceOfStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_begin)
    end = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_end)
    cbegin = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_cbegin)
    cend = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_cend)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_SequenceOfStructure_swiginit(self, _Graphic3d.new_Graphic3d_SequenceOfStructure(*args))
    Size = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_Size)
    Length = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_Length)
    Lower = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_Lower)
    Upper = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_Upper)
    IsEmpty = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_IsEmpty)
    Reverse = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_Reverse)
    Exchange = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_Exchange)
    delNode = _swig_new_static_method(_Graphic3d.Graphic3d_SequenceOfStructure_delNode)
    Clear = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_Clear)
    Assign = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_Assign)
    Set = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_Set)
    Remove = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_Remove)
    Append = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_Append)
    Prepend = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_Prepend)
    InsertBefore = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_InsertBefore)
    InsertAfter = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_InsertAfter)
    Split = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_Split)
    First = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_First)
    ChangeFirst = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_ChangeFirst)
    Last = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_Last)
    ChangeLast = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_ChangeLast)
    Value = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_Value)
    ChangeValue = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_ChangeValue)
    __call__ = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure___call__)
    SetValue = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfStructure_SetValue)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_SequenceOfStructure

# Register Graphic3d_SequenceOfStructure in _Graphic3d:
_Graphic3d.Graphic3d_SequenceOfStructure_swigregister(Graphic3d_SequenceOfStructure)
Graphic3d_SequenceOfStructure_delNode = _Graphic3d.Graphic3d_SequenceOfStructure_delNode

class Graphic3d_Vec2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Length = _swig_new_static_method(_Graphic3d.Graphic3d_Vec2_Length)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_Vec2_swiginit(self, _Graphic3d.new_Graphic3d_Vec2(*args))
    SetValues = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2_SetValues)
    xy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2_xy)
    yx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2_yx)
    x = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2_x)
    y = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2_y)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2_IsEqual)
    __eq__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2___eq__)
    __ne__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2___ne__)
    GetData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2_GetData)
    ChangeData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2_ChangeData)
    __iadd__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2___iadd__)
    __isub__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2___isub__)
    __neg__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2___neg__)
    Multiply = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2_Multiply)
    Multiplied = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2_Multiplied)
    cwiseMin = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2_cwiseMin)
    cwiseMax = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2_cwiseMax)
    cwiseAbs = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2_cwiseAbs)
    maxComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2_maxComp)
    minComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2_minComp)
    __imul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2___imul__)

    def __itruediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec2___itruediv__(self, *args)
    __idiv__ = __itruediv__


    __mul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2___mul__)

    def __truediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec2___truediv__(self, *args)
    __div__ = __truediv__


    Dot = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2_Dot)
    Modulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2_Modulus)
    SquareModulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2_SquareModulus)
    DX = _swig_new_static_method(_Graphic3d.Graphic3d_Vec2_DX)
    DY = _swig_new_static_method(_Graphic3d.Graphic3d_Vec2_DY)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Vec2

# Register Graphic3d_Vec2 in _Graphic3d:
_Graphic3d.Graphic3d_Vec2_swigregister(Graphic3d_Vec2)
Graphic3d_Vec2_Length = _Graphic3d.Graphic3d_Vec2_Length
Graphic3d_Vec2_DX = _Graphic3d.Graphic3d_Vec2_DX
Graphic3d_Vec2_DY = _Graphic3d.Graphic3d_Vec2_DY

class Graphic3d_Vec2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Length = _swig_new_static_method(_Graphic3d.Graphic3d_Vec2d_Length)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_Vec2d_swiginit(self, _Graphic3d.new_Graphic3d_Vec2d(*args))
    SetValues = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d_SetValues)
    xy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d_xy)
    yx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d_yx)
    x = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d_x)
    y = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d_y)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d_IsEqual)
    __eq__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d___eq__)
    __ne__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d___ne__)
    GetData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d_GetData)
    ChangeData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d_ChangeData)
    __iadd__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d___iadd__)
    __isub__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d___isub__)
    __neg__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d___neg__)
    Multiply = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d_Multiply)
    Multiplied = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d_Multiplied)
    cwiseMin = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d_cwiseMin)
    cwiseMax = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d_cwiseMax)
    cwiseAbs = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d_cwiseAbs)
    maxComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d_maxComp)
    minComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d_minComp)
    __imul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d___imul__)

    def __itruediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec2d___itruediv__(self, *args)
    __idiv__ = __itruediv__


    __mul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d___mul__)

    def __truediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec2d___truediv__(self, *args)
    __div__ = __truediv__


    Dot = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d_Dot)
    Modulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d_Modulus)
    SquareModulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2d_SquareModulus)
    DX = _swig_new_static_method(_Graphic3d.Graphic3d_Vec2d_DX)
    DY = _swig_new_static_method(_Graphic3d.Graphic3d_Vec2d_DY)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Vec2d

# Register Graphic3d_Vec2d in _Graphic3d:
_Graphic3d.Graphic3d_Vec2d_swigregister(Graphic3d_Vec2d)
Graphic3d_Vec2d_Length = _Graphic3d.Graphic3d_Vec2d_Length
Graphic3d_Vec2d_DX = _Graphic3d.Graphic3d_Vec2d_DX
Graphic3d_Vec2d_DY = _Graphic3d.Graphic3d_Vec2d_DY

class Graphic3d_Vec2i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Length = _swig_new_static_method(_Graphic3d.Graphic3d_Vec2i_Length)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_Vec2i_swiginit(self, _Graphic3d.new_Graphic3d_Vec2i(*args))
    SetValues = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i_SetValues)
    xy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i_xy)
    yx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i_yx)
    x = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i_x)
    y = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i_y)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i_IsEqual)
    __eq__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i___eq__)
    __ne__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i___ne__)
    GetData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i_GetData)
    ChangeData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i_ChangeData)
    __iadd__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i___iadd__)
    __isub__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i___isub__)
    __neg__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i___neg__)
    Multiply = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i_Multiply)
    Multiplied = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i_Multiplied)
    cwiseMin = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i_cwiseMin)
    cwiseMax = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i_cwiseMax)
    cwiseAbs = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i_cwiseAbs)
    maxComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i_maxComp)
    minComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i_minComp)
    __imul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i___imul__)

    def __itruediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec2i___itruediv__(self, *args)
    __idiv__ = __itruediv__


    __mul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i___mul__)

    def __truediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec2i___truediv__(self, *args)
    __div__ = __truediv__


    Dot = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i_Dot)
    Modulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i_Modulus)
    SquareModulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2i_SquareModulus)
    DX = _swig_new_static_method(_Graphic3d.Graphic3d_Vec2i_DX)
    DY = _swig_new_static_method(_Graphic3d.Graphic3d_Vec2i_DY)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Vec2i

# Register Graphic3d_Vec2i in _Graphic3d:
_Graphic3d.Graphic3d_Vec2i_swigregister(Graphic3d_Vec2i)
Graphic3d_Vec2i_Length = _Graphic3d.Graphic3d_Vec2i_Length
Graphic3d_Vec2i_DX = _Graphic3d.Graphic3d_Vec2i_DX
Graphic3d_Vec2i_DY = _Graphic3d.Graphic3d_Vec2i_DY

class Graphic3d_Vec2ub(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Length = _swig_new_static_method(_Graphic3d.Graphic3d_Vec2ub_Length)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_Vec2ub_swiginit(self, _Graphic3d.new_Graphic3d_Vec2ub(*args))
    SetValues = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub_SetValues)
    xy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub_xy)
    yx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub_yx)
    x = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub_x)
    y = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub_y)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub_IsEqual)
    __eq__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub___eq__)
    __ne__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub___ne__)
    GetData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub_GetData)
    ChangeData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub_ChangeData)
    __iadd__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub___iadd__)
    __isub__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub___isub__)
    __neg__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub___neg__)
    Multiply = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub_Multiply)
    Multiplied = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub_Multiplied)
    cwiseMin = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub_cwiseMin)
    cwiseMax = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub_cwiseMax)
    cwiseAbs = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub_cwiseAbs)
    maxComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub_maxComp)
    minComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub_minComp)
    __imul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub___imul__)

    def __itruediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec2ub___itruediv__(self, *args)
    __idiv__ = __itruediv__


    __mul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub___mul__)

    def __truediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec2ub___truediv__(self, *args)
    __div__ = __truediv__


    Dot = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub_Dot)
    Modulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub_Modulus)
    SquareModulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2ub_SquareModulus)
    DX = _swig_new_static_method(_Graphic3d.Graphic3d_Vec2ub_DX)
    DY = _swig_new_static_method(_Graphic3d.Graphic3d_Vec2ub_DY)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Vec2ub

# Register Graphic3d_Vec2ub in _Graphic3d:
_Graphic3d.Graphic3d_Vec2ub_swigregister(Graphic3d_Vec2ub)
Graphic3d_Vec2ub_Length = _Graphic3d.Graphic3d_Vec2ub_Length
Graphic3d_Vec2ub_DX = _Graphic3d.Graphic3d_Vec2ub_DX
Graphic3d_Vec2ub_DY = _Graphic3d.Graphic3d_Vec2ub_DY

class Graphic3d_Vec2b(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Length = _swig_new_static_method(_Graphic3d.Graphic3d_Vec2b_Length)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_Vec2b_swiginit(self, _Graphic3d.new_Graphic3d_Vec2b(*args))
    SetValues = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b_SetValues)
    xy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b_xy)
    yx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b_yx)
    x = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b_x)
    y = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b_y)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b_IsEqual)
    __eq__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b___eq__)
    __ne__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b___ne__)
    GetData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b_GetData)
    ChangeData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b_ChangeData)
    __iadd__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b___iadd__)
    __isub__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b___isub__)
    __neg__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b___neg__)
    Multiply = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b_Multiply)
    Multiplied = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b_Multiplied)
    cwiseMin = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b_cwiseMin)
    cwiseMax = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b_cwiseMax)
    cwiseAbs = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b_cwiseAbs)
    maxComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b_maxComp)
    minComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b_minComp)
    __imul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b___imul__)

    def __itruediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec2b___itruediv__(self, *args)
    __idiv__ = __itruediv__


    __mul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b___mul__)

    def __truediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec2b___truediv__(self, *args)
    __div__ = __truediv__


    Dot = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b_Dot)
    Modulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b_Modulus)
    SquareModulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec2b_SquareModulus)
    DX = _swig_new_static_method(_Graphic3d.Graphic3d_Vec2b_DX)
    DY = _swig_new_static_method(_Graphic3d.Graphic3d_Vec2b_DY)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Vec2b

# Register Graphic3d_Vec2b in _Graphic3d:
_Graphic3d.Graphic3d_Vec2b_swigregister(Graphic3d_Vec2b)
Graphic3d_Vec2b_Length = _Graphic3d.Graphic3d_Vec2b_Length
Graphic3d_Vec2b_DX = _Graphic3d.Graphic3d_Vec2b_DX
Graphic3d_Vec2b_DY = _Graphic3d.Graphic3d_Vec2b_DY

class Graphic3d_ShaderObjectList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_begin)
    end = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_end)
    cbegin = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_cbegin)
    cend = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_cend)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_ShaderObjectList_swiginit(self, _Graphic3d.new_Graphic3d_ShaderObjectList(*args))
    Size = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_Size)
    Length = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_Length)
    Lower = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_Lower)
    Upper = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_Upper)
    IsEmpty = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_IsEmpty)
    Reverse = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_Reverse)
    Exchange = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_Exchange)
    delNode = _swig_new_static_method(_Graphic3d.Graphic3d_ShaderObjectList_delNode)
    Clear = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_Clear)
    Assign = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_Assign)
    Set = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_Set)
    Remove = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_Remove)
    Append = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_Append)
    Prepend = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_Prepend)
    InsertBefore = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_InsertBefore)
    InsertAfter = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_InsertAfter)
    Split = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_Split)
    First = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_First)
    ChangeFirst = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_ChangeFirst)
    Last = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_Last)
    ChangeLast = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_ChangeLast)
    Value = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_Value)
    ChangeValue = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_ChangeValue)
    __call__ = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList___call__)
    SetValue = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObjectList_SetValue)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ShaderObjectList

# Register Graphic3d_ShaderObjectList in _Graphic3d:
_Graphic3d.Graphic3d_ShaderObjectList_swigregister(Graphic3d_ShaderObjectList)
Graphic3d_ShaderObjectList_delNode = _Graphic3d.Graphic3d_ShaderObjectList_delNode

class Graphic3d_ShaderVariableList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_begin)
    end = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_end)
    cbegin = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_cbegin)
    cend = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_cend)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_ShaderVariableList_swiginit(self, _Graphic3d.new_Graphic3d_ShaderVariableList(*args))
    Size = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_Size)
    Length = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_Length)
    Lower = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_Lower)
    Upper = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_Upper)
    IsEmpty = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_IsEmpty)
    Reverse = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_Reverse)
    Exchange = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_Exchange)
    delNode = _swig_new_static_method(_Graphic3d.Graphic3d_ShaderVariableList_delNode)
    Clear = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_Clear)
    Assign = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_Assign)
    Set = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_Set)
    Remove = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_Remove)
    Append = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_Append)
    Prepend = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_Prepend)
    InsertBefore = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_InsertBefore)
    InsertAfter = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_InsertAfter)
    Split = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_Split)
    First = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_First)
    ChangeFirst = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_ChangeFirst)
    Last = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_Last)
    ChangeLast = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_ChangeLast)
    Value = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_Value)
    ChangeValue = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_ChangeValue)
    __call__ = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList___call__)
    SetValue = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariableList_SetValue)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ShaderVariableList

# Register Graphic3d_ShaderVariableList in _Graphic3d:
_Graphic3d.Graphic3d_ShaderVariableList_swigregister(Graphic3d_ShaderVariableList)
Graphic3d_ShaderVariableList_delNode = _Graphic3d.Graphic3d_ShaderVariableList_delNode

class Graphic3d_ShaderAttributeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_begin)
    end = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_end)
    cbegin = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_cbegin)
    cend = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_cend)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_ShaderAttributeList_swiginit(self, _Graphic3d.new_Graphic3d_ShaderAttributeList(*args))
    Size = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_Size)
    Length = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_Length)
    Lower = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_Lower)
    Upper = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_Upper)
    IsEmpty = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_IsEmpty)
    Reverse = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_Reverse)
    Exchange = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_Exchange)
    delNode = _swig_new_static_method(_Graphic3d.Graphic3d_ShaderAttributeList_delNode)
    Clear = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_Clear)
    Assign = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_Assign)
    Set = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_Set)
    Remove = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_Remove)
    Append = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_Append)
    Prepend = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_Prepend)
    InsertBefore = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_InsertBefore)
    InsertAfter = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_InsertAfter)
    Split = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_Split)
    First = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_First)
    ChangeFirst = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_ChangeFirst)
    Last = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_Last)
    ChangeLast = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_ChangeLast)
    Value = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_Value)
    ChangeValue = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_ChangeValue)
    __call__ = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList___call__)
    SetValue = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttributeList_SetValue)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ShaderAttributeList

# Register Graphic3d_ShaderAttributeList in _Graphic3d:
_Graphic3d.Graphic3d_ShaderAttributeList_swigregister(Graphic3d_ShaderAttributeList)
Graphic3d_ShaderAttributeList_delNode = _Graphic3d.Graphic3d_ShaderAttributeList_delNode

class Graphic3d_MapOfAspectsToAspects(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfAspectsToAspects_begin)
    end = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfAspectsToAspects_end)
    cbegin = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfAspectsToAspects_cbegin)
    cend = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfAspectsToAspects_cend)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_MapOfAspectsToAspects_swiginit(self, _Graphic3d.new_Graphic3d_MapOfAspectsToAspects(*args))
    Exchange = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfAspectsToAspects_Exchange)
    Assign = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfAspectsToAspects_Assign)
    Set = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfAspectsToAspects_Set)
    ReSize = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfAspectsToAspects_ReSize)
    Bind = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfAspectsToAspects_Bind)
    Bound = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfAspectsToAspects_Bound)
    IsBound = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfAspectsToAspects_IsBound)
    UnBind = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfAspectsToAspects_UnBind)
    Seek = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfAspectsToAspects_Seek)
    Find = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfAspectsToAspects_Find)
    ChangeSeek = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfAspectsToAspects_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfAspectsToAspects_ChangeFind)
    __call__ = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfAspectsToAspects___call__)
    Clear = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfAspectsToAspects_Clear)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_MapOfAspectsToAspects
    Size = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfAspectsToAspects_Size)

# Register Graphic3d_MapOfAspectsToAspects in _Graphic3d:
_Graphic3d.Graphic3d_MapOfAspectsToAspects_swigregister(Graphic3d_MapOfAspectsToAspects)

class Graphic3d_Vec4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Length = _swig_new_static_method(_Graphic3d.Graphic3d_Vec4_Length)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_Vec4_swiginit(self, _Graphic3d.new_Graphic3d_Vec4(*args))
    SetValues = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_SetValues)
    xy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_xy)
    yx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_yx)
    xz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_xz)
    zx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_zx)
    xw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_xw)
    wx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_wx)
    yz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_yz)
    zy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_zy)
    yw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_yw)
    wy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_wy)
    zw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_zw)
    wz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_wz)
    xyz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_xyz)
    xzy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_xzy)
    yxz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_yxz)
    yzx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_yzx)
    zyx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_zyx)
    zxy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_zxy)
    xyw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_xyw)
    xwy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_xwy)
    yxw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_yxw)
    ywx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_ywx)
    wyx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_wyx)
    wxy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_wxy)
    xzw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_xzw)
    xwz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_xwz)
    zxw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_zxw)
    zwx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_zwx)
    wzx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_wzx)
    wxz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_wxz)
    yzw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_yzw)
    ywz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_ywz)
    zyw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_zyw)
    zwy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_zwy)
    wzy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_wzy)
    wyz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_wyz)
    rgb = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_rgb)
    rbg = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_rbg)
    grb = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_grb)
    gbr = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_gbr)
    bgr = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_bgr)
    brg = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_brg)
    x = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_x)
    r = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_r)
    y = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_y)
    g = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_g)
    z = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_z)
    b = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_b)
    w = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_w)
    a = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_a)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_IsEqual)
    __eq__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4___eq__)
    __ne__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4___ne__)
    GetData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_GetData)
    ChangeData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_ChangeData)
    __iadd__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4___iadd__)
    __neg__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4___neg__)
    __isub__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4___isub__)
    Multiply = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_Multiply)
    __imul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4___imul__)
    __mul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4___mul__)
    Multiplied = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_Multiplied)
    cwiseMin = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_cwiseMin)
    cwiseMax = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_cwiseMax)
    cwiseAbs = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_cwiseAbs)
    maxComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_maxComp)
    minComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_minComp)
    Dot = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4_Dot)

    def __itruediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec4___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec4___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Vec4

# Register Graphic3d_Vec4 in _Graphic3d:
_Graphic3d.Graphic3d_Vec4_swigregister(Graphic3d_Vec4)
Graphic3d_Vec4_Length = _Graphic3d.Graphic3d_Vec4_Length

class Graphic3d_Vec4d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Length = _swig_new_static_method(_Graphic3d.Graphic3d_Vec4d_Length)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_Vec4d_swiginit(self, _Graphic3d.new_Graphic3d_Vec4d(*args))
    SetValues = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_SetValues)
    xy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_xy)
    yx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_yx)
    xz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_xz)
    zx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_zx)
    xw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_xw)
    wx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_wx)
    yz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_yz)
    zy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_zy)
    yw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_yw)
    wy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_wy)
    zw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_zw)
    wz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_wz)
    xyz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_xyz)
    xzy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_xzy)
    yxz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_yxz)
    yzx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_yzx)
    zyx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_zyx)
    zxy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_zxy)
    xyw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_xyw)
    xwy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_xwy)
    yxw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_yxw)
    ywx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_ywx)
    wyx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_wyx)
    wxy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_wxy)
    xzw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_xzw)
    xwz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_xwz)
    zxw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_zxw)
    zwx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_zwx)
    wzx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_wzx)
    wxz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_wxz)
    yzw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_yzw)
    ywz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_ywz)
    zyw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_zyw)
    zwy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_zwy)
    wzy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_wzy)
    wyz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_wyz)
    rgb = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_rgb)
    rbg = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_rbg)
    grb = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_grb)
    gbr = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_gbr)
    bgr = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_bgr)
    brg = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_brg)
    x = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_x)
    r = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_r)
    y = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_y)
    g = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_g)
    z = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_z)
    b = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_b)
    w = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_w)
    a = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_a)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_IsEqual)
    __eq__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d___eq__)
    __ne__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d___ne__)
    GetData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_GetData)
    ChangeData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_ChangeData)
    __iadd__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d___iadd__)
    __neg__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d___neg__)
    __isub__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d___isub__)
    Multiply = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_Multiply)
    __imul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d___imul__)
    __mul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d___mul__)
    Multiplied = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_Multiplied)
    cwiseMin = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_cwiseMin)
    cwiseMax = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_cwiseMax)
    cwiseAbs = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_cwiseAbs)
    maxComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_maxComp)
    minComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_minComp)
    Dot = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4d_Dot)

    def __itruediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec4d___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec4d___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Vec4d

# Register Graphic3d_Vec4d in _Graphic3d:
_Graphic3d.Graphic3d_Vec4d_swigregister(Graphic3d_Vec4d)
Graphic3d_Vec4d_Length = _Graphic3d.Graphic3d_Vec4d_Length

class Graphic3d_Vec4i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Length = _swig_new_static_method(_Graphic3d.Graphic3d_Vec4i_Length)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_Vec4i_swiginit(self, _Graphic3d.new_Graphic3d_Vec4i(*args))
    SetValues = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_SetValues)
    xy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_xy)
    yx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_yx)
    xz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_xz)
    zx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_zx)
    xw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_xw)
    wx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_wx)
    yz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_yz)
    zy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_zy)
    yw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_yw)
    wy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_wy)
    zw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_zw)
    wz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_wz)
    xyz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_xyz)
    xzy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_xzy)
    yxz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_yxz)
    yzx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_yzx)
    zyx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_zyx)
    zxy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_zxy)
    xyw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_xyw)
    xwy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_xwy)
    yxw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_yxw)
    ywx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_ywx)
    wyx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_wyx)
    wxy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_wxy)
    xzw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_xzw)
    xwz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_xwz)
    zxw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_zxw)
    zwx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_zwx)
    wzx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_wzx)
    wxz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_wxz)
    yzw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_yzw)
    ywz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_ywz)
    zyw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_zyw)
    zwy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_zwy)
    wzy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_wzy)
    wyz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_wyz)
    rgb = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_rgb)
    rbg = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_rbg)
    grb = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_grb)
    gbr = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_gbr)
    bgr = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_bgr)
    brg = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_brg)
    x = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_x)
    r = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_r)
    y = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_y)
    g = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_g)
    z = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_z)
    b = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_b)
    w = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_w)
    a = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_a)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_IsEqual)
    __eq__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i___eq__)
    __ne__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i___ne__)
    GetData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_GetData)
    ChangeData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_ChangeData)
    __iadd__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i___iadd__)
    __neg__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i___neg__)
    __isub__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i___isub__)
    Multiply = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_Multiply)
    __imul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i___imul__)
    __mul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i___mul__)
    Multiplied = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_Multiplied)
    cwiseMin = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_cwiseMin)
    cwiseMax = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_cwiseMax)
    cwiseAbs = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_cwiseAbs)
    maxComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_maxComp)
    minComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_minComp)
    Dot = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4i_Dot)

    def __itruediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec4i___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec4i___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Vec4i

# Register Graphic3d_Vec4i in _Graphic3d:
_Graphic3d.Graphic3d_Vec4i_swigregister(Graphic3d_Vec4i)
Graphic3d_Vec4i_Length = _Graphic3d.Graphic3d_Vec4i_Length

class Graphic3d_Vec4ub(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Length = _swig_new_static_method(_Graphic3d.Graphic3d_Vec4ub_Length)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_Vec4ub_swiginit(self, _Graphic3d.new_Graphic3d_Vec4ub(*args))
    SetValues = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_SetValues)
    xy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_xy)
    yx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_yx)
    xz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_xz)
    zx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_zx)
    xw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_xw)
    wx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_wx)
    yz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_yz)
    zy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_zy)
    yw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_yw)
    wy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_wy)
    zw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_zw)
    wz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_wz)
    xyz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_xyz)
    xzy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_xzy)
    yxz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_yxz)
    yzx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_yzx)
    zyx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_zyx)
    zxy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_zxy)
    xyw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_xyw)
    xwy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_xwy)
    yxw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_yxw)
    ywx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_ywx)
    wyx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_wyx)
    wxy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_wxy)
    xzw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_xzw)
    xwz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_xwz)
    zxw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_zxw)
    zwx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_zwx)
    wzx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_wzx)
    wxz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_wxz)
    yzw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_yzw)
    ywz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_ywz)
    zyw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_zyw)
    zwy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_zwy)
    wzy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_wzy)
    wyz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_wyz)
    rgb = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_rgb)
    rbg = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_rbg)
    grb = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_grb)
    gbr = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_gbr)
    bgr = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_bgr)
    brg = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_brg)
    x = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_x)
    r = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_r)
    y = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_y)
    g = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_g)
    z = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_z)
    b = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_b)
    w = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_w)
    a = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_a)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_IsEqual)
    __eq__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub___eq__)
    __ne__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub___ne__)
    GetData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_GetData)
    ChangeData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_ChangeData)
    __iadd__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub___iadd__)
    __neg__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub___neg__)
    __isub__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub___isub__)
    Multiply = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_Multiply)
    __imul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub___imul__)
    __mul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub___mul__)
    Multiplied = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_Multiplied)
    cwiseMin = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_cwiseMin)
    cwiseMax = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_cwiseMax)
    cwiseAbs = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_cwiseAbs)
    maxComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_maxComp)
    minComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_minComp)
    Dot = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4ub_Dot)

    def __itruediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec4ub___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec4ub___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Vec4ub

# Register Graphic3d_Vec4ub in _Graphic3d:
_Graphic3d.Graphic3d_Vec4ub_swigregister(Graphic3d_Vec4ub)
Graphic3d_Vec4ub_Length = _Graphic3d.Graphic3d_Vec4ub_Length

class Graphic3d_Vec4b(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Length = _swig_new_static_method(_Graphic3d.Graphic3d_Vec4b_Length)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_Vec4b_swiginit(self, _Graphic3d.new_Graphic3d_Vec4b(*args))
    SetValues = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_SetValues)
    xy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_xy)
    yx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_yx)
    xz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_xz)
    zx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_zx)
    xw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_xw)
    wx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_wx)
    yz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_yz)
    zy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_zy)
    yw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_yw)
    wy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_wy)
    zw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_zw)
    wz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_wz)
    xyz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_xyz)
    xzy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_xzy)
    yxz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_yxz)
    yzx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_yzx)
    zyx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_zyx)
    zxy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_zxy)
    xyw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_xyw)
    xwy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_xwy)
    yxw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_yxw)
    ywx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_ywx)
    wyx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_wyx)
    wxy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_wxy)
    xzw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_xzw)
    xwz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_xwz)
    zxw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_zxw)
    zwx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_zwx)
    wzx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_wzx)
    wxz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_wxz)
    yzw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_yzw)
    ywz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_ywz)
    zyw = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_zyw)
    zwy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_zwy)
    wzy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_wzy)
    wyz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_wyz)
    rgb = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_rgb)
    rbg = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_rbg)
    grb = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_grb)
    gbr = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_gbr)
    bgr = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_bgr)
    brg = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_brg)
    x = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_x)
    r = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_r)
    y = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_y)
    g = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_g)
    z = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_z)
    b = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_b)
    w = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_w)
    a = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_a)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_IsEqual)
    __eq__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b___eq__)
    __ne__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b___ne__)
    GetData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_GetData)
    ChangeData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_ChangeData)
    __iadd__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b___iadd__)
    __neg__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b___neg__)
    __isub__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b___isub__)
    Multiply = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_Multiply)
    __imul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b___imul__)
    __mul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b___mul__)
    Multiplied = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_Multiplied)
    cwiseMin = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_cwiseMin)
    cwiseMax = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_cwiseMax)
    cwiseAbs = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_cwiseAbs)
    maxComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_maxComp)
    minComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_minComp)
    Dot = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec4b_Dot)

    def __itruediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec4b___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec4b___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Vec4b

# Register Graphic3d_Vec4b in _Graphic3d:
_Graphic3d.Graphic3d_Vec4b_swigregister(Graphic3d_Vec4b)
Graphic3d_Vec4b_Length = _Graphic3d.Graphic3d_Vec4b_Length

class Graphic3d_BndBox4d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Graphic3d_BndBox4d_swiginit(self, _Graphic3d.new_Graphic3d_BndBox4d(*args))
    Clear = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4d_Clear)
    IsValid = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4d_IsValid)
    Add = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4d_Add)
    Combine = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4d_Combine)
    CornerMin = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4d_CornerMin)
    CornerMax = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4d_CornerMax)
    Area = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4d_Area)
    Size = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4d_Size)
    Center = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4d_Center)
    DumpJson = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4d_DumpJson)
    Contains = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4d_Contains)
    IsOut = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox4d_IsOut)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_BndBox4d

# Register Graphic3d_BndBox4d in _Graphic3d:
_Graphic3d.Graphic3d_BndBox4d_swigregister(Graphic3d_BndBox4d)

class Graphic3d_MapOfStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cbegin = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_cbegin)
    cend = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_cend)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_MapOfStructure_swiginit(self, _Graphic3d.new_Graphic3d_MapOfStructure(*args))
    Exchange = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_Exchange)
    Assign = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_Assign)
    Set = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_Set)
    ReSize = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_ReSize)
    Add = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_Add)
    Added = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_Added)
    Remove = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_Remove)
    Clear = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_Clear)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_MapOfStructure
    Size = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_Size)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_IsEqual)
    Contains = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_Contains)
    Union = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_Union)
    Unite = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_Unite)
    HasIntersection = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_HasIntersection)
    Intersection = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_Intersection)
    Intersect = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_Intersect)
    Subtraction = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_Subtraction)
    Subtract = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_Subtract)
    Difference = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_Difference)
    Differ = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfStructure_Differ)

# Register Graphic3d_MapOfStructure in _Graphic3d:
_Graphic3d.Graphic3d_MapOfStructure_swigregister(Graphic3d_MapOfStructure)

class Graphic3d_Vec3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Length = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3_Length)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_Vec3_swiginit(self, _Graphic3d.new_Graphic3d_Vec3(*args))
    SetValues = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_SetValues)
    xy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_xy)
    yx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_yx)
    xz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_xz)
    zx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_zx)
    yz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_yz)
    zy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_zy)
    xyz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_xyz)
    xzy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_xzy)
    yxz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_yxz)
    yzx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_yzx)
    zyx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_zyx)
    zxy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_zxy)
    x = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_x)
    r = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_r)
    y = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_y)
    g = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_g)
    z = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_z)
    b = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_b)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_IsEqual)
    __eq__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3___eq__)
    __ne__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3___ne__)
    GetData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_GetData)
    ChangeData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_ChangeData)
    __iadd__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3___iadd__)
    __neg__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3___neg__)
    __isub__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3___isub__)
    Multiply = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_Multiply)
    __imul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3___imul__)
    __mul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3___mul__)
    Multiplied = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_Multiplied)
    cwiseMin = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_cwiseMin)
    cwiseMax = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_cwiseMax)
    cwiseAbs = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_cwiseAbs)
    maxComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_maxComp)
    minComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_minComp)

    def __itruediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec3___truediv__(self, *args)
    __div__ = __truediv__


    Dot = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_Dot)
    Modulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_Modulus)
    SquareModulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_SquareModulus)
    Normalize = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_Normalize)
    Normalized = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3_Normalized)
    Cross = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3_Cross)
    GetLERP = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3_GetLERP)
    DX = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3_DX)
    DY = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3_DY)
    DZ = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3_DZ)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Vec3

# Register Graphic3d_Vec3 in _Graphic3d:
_Graphic3d.Graphic3d_Vec3_swigregister(Graphic3d_Vec3)
Graphic3d_Vec3_Length = _Graphic3d.Graphic3d_Vec3_Length
Graphic3d_Vec3_Cross = _Graphic3d.Graphic3d_Vec3_Cross
Graphic3d_Vec3_GetLERP = _Graphic3d.Graphic3d_Vec3_GetLERP
Graphic3d_Vec3_DX = _Graphic3d.Graphic3d_Vec3_DX
Graphic3d_Vec3_DY = _Graphic3d.Graphic3d_Vec3_DY
Graphic3d_Vec3_DZ = _Graphic3d.Graphic3d_Vec3_DZ

class Graphic3d_Vec3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Length = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3d_Length)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_Vec3d_swiginit(self, _Graphic3d.new_Graphic3d_Vec3d(*args))
    SetValues = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_SetValues)
    xy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_xy)
    yx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_yx)
    xz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_xz)
    zx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_zx)
    yz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_yz)
    zy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_zy)
    xyz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_xyz)
    xzy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_xzy)
    yxz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_yxz)
    yzx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_yzx)
    zyx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_zyx)
    zxy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_zxy)
    x = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_x)
    r = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_r)
    y = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_y)
    g = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_g)
    z = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_z)
    b = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_b)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_IsEqual)
    __eq__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d___eq__)
    __ne__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d___ne__)
    GetData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_GetData)
    ChangeData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_ChangeData)
    __iadd__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d___iadd__)
    __neg__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d___neg__)
    __isub__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d___isub__)
    Multiply = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_Multiply)
    __imul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d___imul__)
    __mul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d___mul__)
    Multiplied = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_Multiplied)
    cwiseMin = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_cwiseMin)
    cwiseMax = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_cwiseMax)
    cwiseAbs = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_cwiseAbs)
    maxComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_maxComp)
    minComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_minComp)

    def __itruediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec3d___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec3d___truediv__(self, *args)
    __div__ = __truediv__


    Dot = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_Dot)
    Modulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_Modulus)
    SquareModulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_SquareModulus)
    Normalize = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_Normalize)
    Normalized = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3d_Normalized)
    Cross = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3d_Cross)
    GetLERP = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3d_GetLERP)
    DX = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3d_DX)
    DY = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3d_DY)
    DZ = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3d_DZ)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Vec3d

# Register Graphic3d_Vec3d in _Graphic3d:
_Graphic3d.Graphic3d_Vec3d_swigregister(Graphic3d_Vec3d)
Graphic3d_Vec3d_Length = _Graphic3d.Graphic3d_Vec3d_Length
Graphic3d_Vec3d_Cross = _Graphic3d.Graphic3d_Vec3d_Cross
Graphic3d_Vec3d_GetLERP = _Graphic3d.Graphic3d_Vec3d_GetLERP
Graphic3d_Vec3d_DX = _Graphic3d.Graphic3d_Vec3d_DX
Graphic3d_Vec3d_DY = _Graphic3d.Graphic3d_Vec3d_DY
Graphic3d_Vec3d_DZ = _Graphic3d.Graphic3d_Vec3d_DZ

class Graphic3d_Vec3i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Length = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3i_Length)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_Vec3i_swiginit(self, _Graphic3d.new_Graphic3d_Vec3i(*args))
    SetValues = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_SetValues)
    xy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_xy)
    yx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_yx)
    xz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_xz)
    zx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_zx)
    yz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_yz)
    zy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_zy)
    xyz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_xyz)
    xzy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_xzy)
    yxz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_yxz)
    yzx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_yzx)
    zyx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_zyx)
    zxy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_zxy)
    x = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_x)
    r = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_r)
    y = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_y)
    g = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_g)
    z = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_z)
    b = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_b)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_IsEqual)
    __eq__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i___eq__)
    __ne__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i___ne__)
    GetData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_GetData)
    ChangeData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_ChangeData)
    __iadd__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i___iadd__)
    __neg__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i___neg__)
    __isub__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i___isub__)
    Multiply = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_Multiply)
    __imul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i___imul__)
    __mul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i___mul__)
    Multiplied = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_Multiplied)
    cwiseMin = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_cwiseMin)
    cwiseMax = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_cwiseMax)
    cwiseAbs = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_cwiseAbs)
    maxComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_maxComp)
    minComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_minComp)

    def __itruediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec3i___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec3i___truediv__(self, *args)
    __div__ = __truediv__


    Dot = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_Dot)
    Modulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_Modulus)
    SquareModulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_SquareModulus)
    Normalize = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_Normalize)
    Normalized = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3i_Normalized)
    Cross = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3i_Cross)
    GetLERP = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3i_GetLERP)
    DX = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3i_DX)
    DY = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3i_DY)
    DZ = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3i_DZ)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Vec3i

# Register Graphic3d_Vec3i in _Graphic3d:
_Graphic3d.Graphic3d_Vec3i_swigregister(Graphic3d_Vec3i)
Graphic3d_Vec3i_Length = _Graphic3d.Graphic3d_Vec3i_Length
Graphic3d_Vec3i_Cross = _Graphic3d.Graphic3d_Vec3i_Cross
Graphic3d_Vec3i_GetLERP = _Graphic3d.Graphic3d_Vec3i_GetLERP
Graphic3d_Vec3i_DX = _Graphic3d.Graphic3d_Vec3i_DX
Graphic3d_Vec3i_DY = _Graphic3d.Graphic3d_Vec3i_DY
Graphic3d_Vec3i_DZ = _Graphic3d.Graphic3d_Vec3i_DZ

class Graphic3d_Vec3ub(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Length = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3ub_Length)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_Vec3ub_swiginit(self, _Graphic3d.new_Graphic3d_Vec3ub(*args))
    SetValues = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_SetValues)
    xy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_xy)
    yx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_yx)
    xz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_xz)
    zx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_zx)
    yz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_yz)
    zy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_zy)
    xyz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_xyz)
    xzy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_xzy)
    yxz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_yxz)
    yzx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_yzx)
    zyx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_zyx)
    zxy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_zxy)
    x = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_x)
    r = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_r)
    y = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_y)
    g = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_g)
    z = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_z)
    b = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_b)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_IsEqual)
    __eq__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub___eq__)
    __ne__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub___ne__)
    GetData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_GetData)
    ChangeData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_ChangeData)
    __iadd__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub___iadd__)
    __neg__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub___neg__)
    __isub__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub___isub__)
    Multiply = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_Multiply)
    __imul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub___imul__)
    __mul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub___mul__)
    Multiplied = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_Multiplied)
    cwiseMin = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_cwiseMin)
    cwiseMax = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_cwiseMax)
    cwiseAbs = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_cwiseAbs)
    maxComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_maxComp)
    minComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_minComp)

    def __itruediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec3ub___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec3ub___truediv__(self, *args)
    __div__ = __truediv__


    Dot = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_Dot)
    Modulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_Modulus)
    SquareModulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_SquareModulus)
    Normalize = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_Normalize)
    Normalized = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3ub_Normalized)
    Cross = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3ub_Cross)
    GetLERP = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3ub_GetLERP)
    DX = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3ub_DX)
    DY = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3ub_DY)
    DZ = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3ub_DZ)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Vec3ub

# Register Graphic3d_Vec3ub in _Graphic3d:
_Graphic3d.Graphic3d_Vec3ub_swigregister(Graphic3d_Vec3ub)
Graphic3d_Vec3ub_Length = _Graphic3d.Graphic3d_Vec3ub_Length
Graphic3d_Vec3ub_Cross = _Graphic3d.Graphic3d_Vec3ub_Cross
Graphic3d_Vec3ub_GetLERP = _Graphic3d.Graphic3d_Vec3ub_GetLERP
Graphic3d_Vec3ub_DX = _Graphic3d.Graphic3d_Vec3ub_DX
Graphic3d_Vec3ub_DY = _Graphic3d.Graphic3d_Vec3ub_DY
Graphic3d_Vec3ub_DZ = _Graphic3d.Graphic3d_Vec3ub_DZ

class Graphic3d_Vec3b(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Length = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3b_Length)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_Vec3b_swiginit(self, _Graphic3d.new_Graphic3d_Vec3b(*args))
    SetValues = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_SetValues)
    xy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_xy)
    yx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_yx)
    xz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_xz)
    zx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_zx)
    yz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_yz)
    zy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_zy)
    xyz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_xyz)
    xzy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_xzy)
    yxz = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_yxz)
    yzx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_yzx)
    zyx = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_zyx)
    zxy = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_zxy)
    x = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_x)
    r = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_r)
    y = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_y)
    g = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_g)
    z = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_z)
    b = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_b)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_IsEqual)
    __eq__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b___eq__)
    __ne__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b___ne__)
    GetData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_GetData)
    ChangeData = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_ChangeData)
    __iadd__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b___iadd__)
    __neg__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b___neg__)
    __isub__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b___isub__)
    Multiply = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_Multiply)
    __imul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b___imul__)
    __mul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b___mul__)
    Multiplied = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_Multiplied)
    cwiseMin = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_cwiseMin)
    cwiseMax = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_cwiseMax)
    cwiseAbs = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_cwiseAbs)
    maxComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_maxComp)
    minComp = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_minComp)

    def __itruediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec3b___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _Graphic3d.Graphic3d_Vec3b___truediv__(self, *args)
    __div__ = __truediv__


    Dot = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_Dot)
    Modulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_Modulus)
    SquareModulus = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_SquareModulus)
    Normalize = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_Normalize)
    Normalized = _swig_new_instance_method(_Graphic3d.Graphic3d_Vec3b_Normalized)
    Cross = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3b_Cross)
    GetLERP = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3b_GetLERP)
    DX = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3b_DX)
    DY = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3b_DY)
    DZ = _swig_new_static_method(_Graphic3d.Graphic3d_Vec3b_DZ)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Vec3b

# Register Graphic3d_Vec3b in _Graphic3d:
_Graphic3d.Graphic3d_Vec3b_swigregister(Graphic3d_Vec3b)
Graphic3d_Vec3b_Length = _Graphic3d.Graphic3d_Vec3b_Length
Graphic3d_Vec3b_Cross = _Graphic3d.Graphic3d_Vec3b_Cross
Graphic3d_Vec3b_GetLERP = _Graphic3d.Graphic3d_Vec3b_GetLERP
Graphic3d_Vec3b_DX = _Graphic3d.Graphic3d_Vec3b_DX
Graphic3d_Vec3b_DY = _Graphic3d.Graphic3d_Vec3b_DY
Graphic3d_Vec3b_DZ = _Graphic3d.Graphic3d_Vec3b_DZ

class Graphic3d_MapOfZLayerSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfZLayerSettings_begin)
    end = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfZLayerSettings_end)
    cbegin = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfZLayerSettings_cbegin)
    cend = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfZLayerSettings_cend)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_MapOfZLayerSettings_swiginit(self, _Graphic3d.new_Graphic3d_MapOfZLayerSettings(*args))
    Exchange = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfZLayerSettings_Exchange)
    Assign = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfZLayerSettings_Assign)
    Set = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfZLayerSettings_Set)
    ReSize = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfZLayerSettings_ReSize)
    Bind = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfZLayerSettings_Bind)
    Bound = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfZLayerSettings_Bound)
    IsBound = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfZLayerSettings_IsBound)
    UnBind = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfZLayerSettings_UnBind)
    Seek = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfZLayerSettings_Seek)
    Find = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfZLayerSettings_Find)
    ChangeSeek = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfZLayerSettings_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfZLayerSettings_ChangeFind)
    __call__ = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfZLayerSettings___call__)
    Clear = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfZLayerSettings_Clear)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_MapOfZLayerSettings
    Size = _swig_new_instance_method(_Graphic3d.Graphic3d_MapOfZLayerSettings_Size)

# Register Graphic3d_MapOfZLayerSettings in _Graphic3d:
_Graphic3d.Graphic3d_MapOfZLayerSettings_swigregister(Graphic3d_MapOfZLayerSettings)

class Graphic3d_BndBox3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Graphic3d.Graphic3d_BndBox3d_swiginit(self, _Graphic3d.new_Graphic3d_BndBox3d(*args))
    Clear = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox3d_Clear)
    IsValid = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox3d_IsValid)
    Add = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox3d_Add)
    Combine = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox3d_Combine)
    CornerMin = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox3d_CornerMin)
    CornerMax = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox3d_CornerMax)
    Area = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox3d_Area)
    Size = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox3d_Size)
    Center = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox3d_Center)
    DumpJson = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox3d_DumpJson)
    Contains = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox3d_Contains)
    IsOut = _swig_new_instance_method(_Graphic3d.Graphic3d_BndBox3d_IsOut)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_BndBox3d

# Register Graphic3d_BndBox3d in _Graphic3d:
_Graphic3d.Graphic3d_BndBox3d_swigregister(Graphic3d_BndBox3d)

class Graphic3d_Array1OfAttribute(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_begin)
    end = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_end)
    cbegin = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_cbegin)
    cend = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_cend)

    def __init__(self, *args):
        _Graphic3d.Graphic3d_Array1OfAttribute_swiginit(self, _Graphic3d.new_Graphic3d_Array1OfAttribute(*args))
    Init = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_Init)
    Size = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_Size)
    Length = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_Length)
    IsEmpty = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_IsEmpty)
    Lower = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_Lower)
    Upper = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_Upper)
    IsDeletable = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_IsDeletable)
    IsAllocated = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_IsAllocated)
    Assign = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_Assign)
    Move = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_Move)
    Set = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_Set)
    First = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_First)
    ChangeFirst = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_ChangeFirst)
    Last = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_Last)
    ChangeLast = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_ChangeLast)
    Value = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_Value)
    ChangeValue = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_ChangeValue)
    __call__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute___call__)
    SetValue = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_SetValue)
    Resize = _swig_new_instance_method(_Graphic3d.Graphic3d_Array1OfAttribute_Resize)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Array1OfAttribute

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register Graphic3d_Array1OfAttribute in _Graphic3d:
_Graphic3d.Graphic3d_Array1OfAttribute_swigregister(Graphic3d_Array1OfAttribute)

class Graphic3d_Mat4d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Rows = _swig_new_static_method(_Graphic3d.Graphic3d_Mat4d_Rows)
    Cols = _swig_new_static_method(_Graphic3d.Graphic3d_Mat4d_Cols)

    def __init__(self):
        _Graphic3d.Graphic3d_Mat4d_swiginit(self, _Graphic3d.new_Graphic3d_Mat4d())
    GetValue = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_GetValue)
    ChangeValue = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_ChangeValue)
    SetValue = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_SetValue)
    GetRow = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_GetRow)
    SetRow = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_SetRow)
    GetColumn = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_GetColumn)
    SetColumn = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_SetColumn)
    GetDiagonal = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_GetDiagonal)
    SetDiagonal = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_SetDiagonal)
    InitIdentity = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_InitIdentity)
    IsIdentity = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_IsIdentity)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_IsEqual)
    __eq__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d___eq__)
    __ne__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d___ne__)
    GetData = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_GetData)
    ChangeData = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_ChangeData)
    Multiply = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_Multiply)
    __imul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d___imul__)
    __mul__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d___mul__)
    Multiplied = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_Multiplied)
    Translate = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_Translate)
    Transposed = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_Transposed)
    Transpose = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_Transpose)
    Inverted = _swig_new_instance_method(_Graphic3d.Graphic3d_Mat4d_Inverted)
    Map = _swig_new_static_method(_Graphic3d.Graphic3d_Mat4d_Map)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Mat4d

# Register Graphic3d_Mat4d in _Graphic3d:
_Graphic3d.Graphic3d_Mat4d_swigregister(Graphic3d_Mat4d)
Graphic3d_Mat4d_Rows = _Graphic3d.Graphic3d_Mat4d_Rows
Graphic3d_Mat4d_Cols = _Graphic3d.Graphic3d_Mat4d_Cols
Graphic3d_Mat4d_Map = _Graphic3d.Graphic3d_Mat4d_Map

class Graphic3d_ArrayOfPrimitives(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    AddBound = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_AddBound)
    AddEdge = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_AddEdge)
    AddEdges = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_AddEdges)
    AddPolylineEdges = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_AddPolylineEdges)
    AddQuadEdges = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_AddQuadEdges)
    AddQuadTriangleEdges = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_AddQuadTriangleEdges)
    AddSegmentEdges = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_AddSegmentEdges)
    AddTriangleEdges = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_AddTriangleEdges)
    AddTriangleFanEdges = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_AddTriangleFanEdges)
    AddTriangleStripEdges = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_AddTriangleStripEdges)
    AddVertex = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_AddVertex)
    Attributes = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_Attributes)
    Bound = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_Bound)
    BoundColor = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_BoundColor)
    BoundNumber = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_BoundNumber)
    BoundNumberAllocated = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_BoundNumberAllocated)
    Bounds = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_Bounds)
    CreateArray = _swig_new_static_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_CreateArray)
    Edge = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_Edge)
    EdgeNumber = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_EdgeNumber)
    EdgeNumberAllocated = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_EdgeNumberAllocated)
    HasBoundColors = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_HasBoundColors)
    HasVertexColors = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_HasVertexColors)
    HasVertexNormals = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_HasVertexNormals)
    HasVertexTexels = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_HasVertexTexels)
    Indices = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_Indices)
    IsValid = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_IsValid)
    ItemNumber = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_ItemNumber)
    SetBoundColor = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_SetBoundColor)
    SetVertexColor = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_SetVertexColor)
    SetVertexNormal = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_SetVertexNormal)
    SetVertexTexel = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_SetVertexTexel)
    SetVertice = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_SetVertice)
    StringType = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_StringType)
    Type = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_Type)
    VertexColor = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_VertexColor)
    VertexNormal = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_VertexNormal)
    VertexNumber = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_VertexNumber)
    VertexNumberAllocated = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_VertexNumberAllocated)
    VertexTexel = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_VertexTexel)
    Vertice = _swig_new_instance_method(_Graphic3d.Graphic3d_ArrayOfPrimitives_Vertice)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_ArrayOfPrimitives_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfPrimitives

# Register Graphic3d_ArrayOfPrimitives in _Graphic3d:
_Graphic3d.Graphic3d_ArrayOfPrimitives_swigregister(Graphic3d_ArrayOfPrimitives)
Graphic3d_ArrayOfPrimitives_CreateArray = _Graphic3d.Graphic3d_ArrayOfPrimitives_CreateArray

class Graphic3d_Aspects(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AllowBackFace = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_AllowBackFace)
    AlphaCutoff = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_AlphaCutoff)
    AlphaMode = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_AlphaMode)
    BackFace = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_BackFace)
    BackInteriorColor = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_BackInteriorColor)
    BackInteriorColorRGBA = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_BackInteriorColorRGBA)
    BackMaterial = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_BackMaterial)
    ChangeBackMaterial = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_ChangeBackMaterial)
    ChangeFrontMaterial = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_ChangeFrontMaterial)
    Color = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_Color)
    ColorRGBA = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_ColorRGBA)
    ColorSubTitle = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_ColorSubTitle)
    ColorSubTitleRGBA = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_ColorSubTitleRGBA)
    Distinguish = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_Distinguish)
    DumpJsonToString = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_DumpJsonToString)
    EdgeColor = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_EdgeColor)
    EdgeColorRGBA = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_EdgeColorRGBA)
    EdgeLineType = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_EdgeLineType)
    EdgeWidth = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_EdgeWidth)
    FrontMaterial = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_FrontMaterial)

    def __init__(self, *args):
        r"""
        * Creates a context table for drawing primitives defined with the following default values:
        	:rtype: None
        """
        _Graphic3d.Graphic3d_Aspects_swiginit(self, _Graphic3d.new_Graphic3d_Aspects(*args))
    HatchStyle = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_HatchStyle)
    InteriorColor = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_InteriorColor)
    InteriorColorRGBA = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_InteriorColorRGBA)
    InteriorStyle = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_InteriorStyle)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_IsEqual)
    IsMarkerSprite = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_IsMarkerSprite)
    IsTextZoomable = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_IsTextZoomable)
    LineType = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_LineType)
    LineWidth = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_LineWidth)
    MarkerImage = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_MarkerImage)
    MarkerScale = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_MarkerScale)
    MarkerType = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_MarkerType)
    PolygonOffset = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_PolygonOffset)
    PolygonOffsets = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_PolygonOffsets)
    SetAlphaMode = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetAlphaMode)
    SetBackInteriorColor = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetBackInteriorColor)
    SetBackMaterial = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetBackMaterial)
    SetColor = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetColor)
    SetColorSubTitle = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetColorSubTitle)
    SetDistinguish = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetDistinguish)
    SetDistinguishOff = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetDistinguishOff)
    SetDistinguishOn = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetDistinguishOn)
    SetDrawEdges = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetDrawEdges)
    SetDrawSilhouette = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetDrawSilhouette)
    SetEdgeColor = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetEdgeColor)
    SetEdgeLineType = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetEdgeLineType)
    SetEdgeOff = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetEdgeOff)
    SetEdgeOn = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetEdgeOn)
    SetEdgeWidth = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetEdgeWidth)
    SetFrontMaterial = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetFrontMaterial)
    SetHatchStyle = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetHatchStyle)
    SetInteriorColor = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetInteriorColor)
    SetInteriorStyle = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetInteriorStyle)
    SetLineType = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetLineType)
    SetLineWidth = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetLineWidth)
    SetMarkerImage = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetMarkerImage)
    SetMarkerScale = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetMarkerScale)
    SetMarkerType = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetMarkerType)
    SetPolygonOffset = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetPolygonOffset)
    SetPolygonOffsets = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetPolygonOffsets)
    SetShaderProgram = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetShaderProgram)
    SetShadingModel = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetShadingModel)
    SetSkipFirstEdge = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetSkipFirstEdge)
    SetSuppressBackFaces = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetSuppressBackFaces)
    SetTextAngle = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetTextAngle)
    SetTextDisplayType = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetTextDisplayType)
    SetTextFont = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetTextFont)
    SetTextFontAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetTextFontAspect)
    SetTextStyle = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetTextStyle)
    SetTextZoomable = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetTextZoomable)
    SetTextureMap = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetTextureMap)
    SetTextureMapOff = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetTextureMapOff)
    SetTextureMapOn = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetTextureMapOn)
    SetTextureSet = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SetTextureSet)
    ShaderProgram = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_ShaderProgram)
    ShadingModel = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_ShadingModel)
    SuppressBackFace = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_SuppressBackFace)
    TextAngle = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_TextAngle)
    TextDisplayType = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_TextDisplayType)
    TextFont = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_TextFont)
    TextFontAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_TextFontAspect)
    TextStyle = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_TextStyle)
    TextureMap = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_TextureMap)
    TextureMapState = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_TextureMapState)
    TextureSet = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_TextureSet)
    ToDrawEdges = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_ToDrawEdges)
    ToDrawSilhouette = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_ToDrawSilhouette)
    ToMapTexture = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_ToMapTexture)
    ToSkipFirstEdge = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_ToSkipFirstEdge)
    ToSuppressBackFaces = _swig_new_instance_method(_Graphic3d.Graphic3d_Aspects_ToSuppressBackFaces)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_Aspects_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Aspects

# Register Graphic3d_Aspects in _Graphic3d:
_Graphic3d.Graphic3d_Aspects_swigregister(Graphic3d_Aspects)

class Graphic3d_Attribute(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Id = property(_Graphic3d.Graphic3d_Attribute_Id_get, _Graphic3d.Graphic3d_Attribute_Id_set)
    DataType = property(_Graphic3d.Graphic3d_Attribute_DataType_get, _Graphic3d.Graphic3d_Attribute_DataType_set)
    Stride = _swig_new_static_method(_Graphic3d.Graphic3d_Attribute_Stride)

    __repr__ = _dumps_object


    def __init__(self):
        _Graphic3d.Graphic3d_Attribute_swiginit(self, _Graphic3d.new_Graphic3d_Attribute())
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Attribute

# Register Graphic3d_Attribute in _Graphic3d:
_Graphic3d.Graphic3d_Attribute_swigregister(Graphic3d_Attribute)
Graphic3d_Attribute_Stride = _Graphic3d.Graphic3d_Attribute_Stride

class Graphic3d_AxisAspect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Color = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_Color)

    def __init__(self, *args):
        r"""
        :param theName: default value is 
        	:type theName: TCollection_ExtendedString
        	:param theNameColor: default value is Quantity_NOC_BLACK
        	:type theNameColor: Quantity_Color
        	:param theColor: default value is Quantity_NOC_BLACK
        	:type theColor: Quantity_Color
        	:param theValuesOffset: default value is 10
        	:type theValuesOffset: int
        	:param theNameOffset: default value is 30
        	:type theNameOffset: int
        	:param theTickmarksNumber: default value is 5
        	:type theTickmarksNumber: int
        	:param theTickmarksLength: default value is 10
        	:type theTickmarksLength: int
        	:param theToDrawName: default value is Standard_True
        	:type theToDrawName: bool
        	:param theToDrawValues: default value is Standard_True
        	:type theToDrawValues: bool
        	:param theToDrawTickmarks: default value is Standard_True
        	:type theToDrawTickmarks: bool
        	:rtype: None
        """
        _Graphic3d.Graphic3d_AxisAspect_swiginit(self, _Graphic3d.new_Graphic3d_AxisAspect(*args))
    Name = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_Name)
    NameColor = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_NameColor)
    NameOffset = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_NameOffset)
    SetColor = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_SetColor)
    SetDrawName = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_SetDrawName)
    SetDrawTickmarks = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_SetDrawTickmarks)
    SetDrawValues = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_SetDrawValues)
    SetName = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_SetName)
    SetNameColor = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_SetNameColor)
    SetNameOffset = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_SetNameOffset)
    SetTickmarksLength = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_SetTickmarksLength)
    SetTickmarksNumber = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_SetTickmarksNumber)
    SetValuesOffset = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_SetValuesOffset)
    TickmarksLength = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_TickmarksLength)
    TickmarksNumber = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_TickmarksNumber)
    ToDrawName = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_ToDrawName)
    ToDrawTickmarks = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_ToDrawTickmarks)
    ToDrawValues = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_ToDrawValues)
    ValuesOffset = _swig_new_instance_method(_Graphic3d.Graphic3d_AxisAspect_ValuesOffset)

    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_AxisAspect

# Register Graphic3d_AxisAspect in _Graphic3d:
_Graphic3d.Graphic3d_AxisAspect_swigregister(Graphic3d_AxisAspect)

class Graphic3d_BSDF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Kc = property(_Graphic3d.Graphic3d_BSDF_Kc_get, _Graphic3d.Graphic3d_BSDF_Kc_set)
    Kd = property(_Graphic3d.Graphic3d_BSDF_Kd_get, _Graphic3d.Graphic3d_BSDF_Kd_set)
    Ks = property(_Graphic3d.Graphic3d_BSDF_Ks_get, _Graphic3d.Graphic3d_BSDF_Ks_set)
    Kt = property(_Graphic3d.Graphic3d_BSDF_Kt_get, _Graphic3d.Graphic3d_BSDF_Kt_set)
    Le = property(_Graphic3d.Graphic3d_BSDF_Le_get, _Graphic3d.Graphic3d_BSDF_Le_set)
    Absorption = property(_Graphic3d.Graphic3d_BSDF_Absorption_get, _Graphic3d.Graphic3d_BSDF_Absorption_set)
    FresnelCoat = property(_Graphic3d.Graphic3d_BSDF_FresnelCoat_get, _Graphic3d.Graphic3d_BSDF_FresnelCoat_set)
    FresnelBase = property(_Graphic3d.Graphic3d_BSDF_FresnelBase_get, _Graphic3d.Graphic3d_BSDF_FresnelBase_set)
    CreateDiffuse = _swig_new_static_method(_Graphic3d.Graphic3d_BSDF_CreateDiffuse)
    CreateGlass = _swig_new_static_method(_Graphic3d.Graphic3d_BSDF_CreateGlass)
    CreateMetallic = _swig_new_static_method(_Graphic3d.Graphic3d_BSDF_CreateMetallic)
    CreateTransparent = _swig_new_static_method(_Graphic3d.Graphic3d_BSDF_CreateTransparent)

    def __init__(self, *args):
        r"""
        * Creates uninitialized BSDF.
        	:rtype: None
        """
        _Graphic3d.Graphic3d_BSDF_swiginit(self, _Graphic3d.new_Graphic3d_BSDF(*args))
    Normalize = _swig_new_instance_method(_Graphic3d.Graphic3d_BSDF_Normalize)
    __eq_wrapper__ = _swig_new_instance_method(_Graphic3d.Graphic3d_BSDF___eq_wrapper__)

    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_BSDF

# Register Graphic3d_BSDF in _Graphic3d:
_Graphic3d.Graphic3d_BSDF_swigregister(Graphic3d_BSDF)
Graphic3d_BSDF_CreateDiffuse = _Graphic3d.Graphic3d_BSDF_CreateDiffuse
Graphic3d_BSDF_CreateGlass = _Graphic3d.Graphic3d_BSDF_CreateGlass
Graphic3d_BSDF_CreateMetallic = _Graphic3d.Graphic3d_BSDF_CreateMetallic
Graphic3d_BSDF_CreateTransparent = _Graphic3d.Graphic3d_BSDF_CreateTransparent

class Graphic3d_BoundBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Colors = property(_Graphic3d.Graphic3d_BoundBuffer_Colors_get, _Graphic3d.Graphic3d_BoundBuffer_Colors_set)
    Bounds = property(_Graphic3d.Graphic3d_BoundBuffer_Bounds_get, _Graphic3d.Graphic3d_BoundBuffer_Bounds_set)
    NbBounds = property(_Graphic3d.Graphic3d_BoundBuffer_NbBounds_get, _Graphic3d.Graphic3d_BoundBuffer_NbBounds_set)
    NbMaxBounds = property(_Graphic3d.Graphic3d_BoundBuffer_NbMaxBounds_get, _Graphic3d.Graphic3d_BoundBuffer_NbMaxBounds_set)

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:param theAlloc:
        	:type theAlloc: NCollection_BaseAllocator
        	:rtype: None
        """
        _Graphic3d.Graphic3d_BoundBuffer_swiginit(self, _Graphic3d.new_Graphic3d_BoundBuffer(*args))
    Init = _swig_new_instance_method(_Graphic3d.Graphic3d_BoundBuffer_Init)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_BoundBuffer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_BoundBuffer

# Register Graphic3d_BoundBuffer in _Graphic3d:
_Graphic3d.Graphic3d_BoundBuffer_swigregister(Graphic3d_BoundBuffer)

class Graphic3d_BufferRange(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Start = property(_Graphic3d.Graphic3d_BufferRange_Start_get, _Graphic3d.Graphic3d_BufferRange_Start_set)
    Length = property(_Graphic3d.Graphic3d_BufferRange_Length_get, _Graphic3d.Graphic3d_BufferRange_Length_set)
    Clear = _swig_new_instance_method(_Graphic3d.Graphic3d_BufferRange_Clear)

    def __init__(self, *args):
        r"""
        * //!< number of elements within the range Empty constructor.
        	:rtype: None* Constructor.
        	:param theStart:
        	:type theStart: int
        	:param theLength:
        	:type theLength: int
        	:rtype: None
        """
        _Graphic3d.Graphic3d_BufferRange_swiginit(self, _Graphic3d.new_Graphic3d_BufferRange(*args))
    IsEmpty = _swig_new_instance_method(_Graphic3d.Graphic3d_BufferRange_IsEmpty)
    Unite = _swig_new_instance_method(_Graphic3d.Graphic3d_BufferRange_Unite)
    Upper = _swig_new_instance_method(_Graphic3d.Graphic3d_BufferRange_Upper)

    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_BufferRange

# Register Graphic3d_BufferRange in _Graphic3d:
_Graphic3d.Graphic3d_BufferRange_swigregister(Graphic3d_BufferRange)

class Graphic3d_BvhCStructureSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Box = _swig_new_instance_method(_Graphic3d.Graphic3d_BvhCStructureSet_Box)
    Center = _swig_new_instance_method(_Graphic3d.Graphic3d_BvhCStructureSet_Center)
    Size = _swig_new_instance_method(_Graphic3d.Graphic3d_BvhCStructureSet_Size)
    Structures = _swig_new_instance_method(_Graphic3d.Graphic3d_BvhCStructureSet_Structures)
    Swap = _swig_new_instance_method(_Graphic3d.Graphic3d_BvhCStructureSet_Swap)

    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_BvhCStructureSet

# Register Graphic3d_BvhCStructureSet in _Graphic3d:
_Graphic3d.Graphic3d_BvhCStructureSet_swigregister(Graphic3d_BvhCStructureSet)

class Graphic3d_CLight(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Angle = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_Angle)
    Attenuation = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_Attenuation)
    Color = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_Color)
    Concentration = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_Concentration)
    ConstAttenuation = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_ConstAttenuation)
    Direction = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_Direction)
    GetId = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_GetId)

    def __init__(self, *args):
        r"""
        * Empty constructor, which should be followed by light source properties configuration.
        	:param theType:
        	:type theType: Graphic3d_TypeOfLightSource
        	:rtype: None
        """
        _Graphic3d.Graphic3d_CLight_swiginit(self, _Graphic3d.new_Graphic3d_CLight(*args))
    Headlight = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_Headlight)
    Intensity = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_Intensity)
    IsEnabled = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_IsEnabled)
    IsHeadlight = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_IsHeadlight)
    LinearAttenuation = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_LinearAttenuation)
    Name = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_Name)
    PackedColor = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_PackedColor)
    PackedDirection = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_PackedDirection)
    PackedParams = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_PackedParams)
    Position = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_Position)
    Revision = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_Revision)
    SetAngle = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_SetAngle)
    SetAttenuation = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_SetAttenuation)
    SetColor = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_SetColor)
    SetConcentration = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_SetConcentration)
    SetDirection = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_SetDirection)
    SetEnabled = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_SetEnabled)
    SetHeadlight = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_SetHeadlight)
    SetIntensity = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_SetIntensity)
    SetName = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_SetName)
    SetPosition = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_SetPosition)
    SetSmoothAngle = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_SetSmoothAngle)
    SetSmoothRadius = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_SetSmoothRadius)
    Smoothness = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_Smoothness)
    Type = _swig_new_instance_method(_Graphic3d.Graphic3d_CLight_Type)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_CLight_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_CLight

# Register Graphic3d_CLight in _Graphic3d:
_Graphic3d.Graphic3d_CLight_swigregister(Graphic3d_CLight)

class Graphic3d_CStructure(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Id = property(_Graphic3d.Graphic3d_CStructure_Id_get, _Graphic3d.Graphic3d_CStructure_Id_set)
    myZLayer = property(_Graphic3d.Graphic3d_CStructure_myZLayer_get, _Graphic3d.Graphic3d_CStructure_myZLayer_set)
    Priority = property(_Graphic3d.Graphic3d_CStructure_Priority_get, _Graphic3d.Graphic3d_CStructure_Priority_set)
    PreviousPriority = property(_Graphic3d.Graphic3d_CStructure_PreviousPriority_get, _Graphic3d.Graphic3d_CStructure_PreviousPriority_set)
    ContainsFacet = property(_Graphic3d.Graphic3d_CStructure_ContainsFacet_get, _Graphic3d.Graphic3d_CStructure_ContainsFacet_set)
    ViewAffinity = property(_Graphic3d.Graphic3d_CStructure_ViewAffinity_get, _Graphic3d.Graphic3d_CStructure_ViewAffinity_set)
    IsInfinite = property(_Graphic3d.Graphic3d_CStructure_IsInfinite_get, _Graphic3d.Graphic3d_CStructure_IsInfinite_set)
    stick = property(_Graphic3d.Graphic3d_CStructure_stick_get, _Graphic3d.Graphic3d_CStructure_stick_set)
    highlight = property(_Graphic3d.Graphic3d_CStructure_highlight_get, _Graphic3d.Graphic3d_CStructure_highlight_set)
    visible = property(_Graphic3d.Graphic3d_CStructure_visible_get, _Graphic3d.Graphic3d_CStructure_visible_set)
    HLRValidation = property(_Graphic3d.Graphic3d_CStructure_HLRValidation_get, _Graphic3d.Graphic3d_CStructure_HLRValidation_set)
    IsForHighlight = property(_Graphic3d.Graphic3d_CStructure_IsForHighlight_get, _Graphic3d.Graphic3d_CStructure_IsForHighlight_set)
    IsMutable = property(_Graphic3d.Graphic3d_CStructure_IsMutable_get, _Graphic3d.Graphic3d_CStructure_IsMutable_set)
    Is2dText = property(_Graphic3d.Graphic3d_CStructure_Is2dText_get, _Graphic3d.Graphic3d_CStructure_Is2dText_set)
    BndBoxClipCheck = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_BndBoxClipCheck)
    BoundingBox = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_BoundingBox)
    ChangeBoundingBox = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_ChangeBoundingBox)
    Clear = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_Clear)
    ClipPlanes = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_ClipPlanes)
    Connect = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_Connect)
    Disconnect = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_Disconnect)
    GraphicDriver = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_GraphicDriver)
    GraphicHighlight = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_GraphicHighlight)
    GraphicUnhighlight = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_GraphicUnhighlight)
    Groups = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_Groups)
    HighlightStyle = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_HighlightStyle)
    IsAlwaysRendered = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_IsAlwaysRendered)
    IsCulled = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_IsCulled)
    IsVisible = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_IsVisible)
    MarkAsNotCulled = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_MarkAsNotCulled)
    NewGroup = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_NewGroup)
    OnVisibilityChanged = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_OnVisibilityChanged)
    RemoveGroup = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_RemoveGroup)
    SetBndBoxClipCheck = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_SetBndBoxClipCheck)
    SetClipPlanes = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_SetClipPlanes)
    SetCulled = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_SetCulled)
    SetTransformPersistence = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_SetTransformPersistence)
    SetTransformation = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_SetTransformation)
    SetZLayer = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_SetZLayer)
    ShadowLink = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_ShadowLink)
    TransformPersistence = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_TransformPersistence)
    Transformation = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_Transformation)
    ZLayer = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_ZLayer)
    updateLayerTransformation = _swig_new_instance_method(_Graphic3d.Graphic3d_CStructure_updateLayerTransformation)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_CStructure_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_CStructure

# Register Graphic3d_CStructure in _Graphic3d:
_Graphic3d.Graphic3d_CStructure_swigregister(Graphic3d_CStructure)

class Graphic3d_CTexture(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TextureMap = property(_Graphic3d.Graphic3d_CTexture_TextureMap_get, _Graphic3d.Graphic3d_CTexture_TextureMap_set)
    doTextureMap = property(_Graphic3d.Graphic3d_CTexture_doTextureMap_get, _Graphic3d.Graphic3d_CTexture_doTextureMap_set)

    def __init__(self, *args):
        r""":rtype: None"""
        _Graphic3d.Graphic3d_CTexture_swiginit(self, _Graphic3d.new_Graphic3d_CTexture(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_CTexture

# Register Graphic3d_CTexture in _Graphic3d:
_Graphic3d.Graphic3d_CTexture_swigregister(Graphic3d_CTexture)

class Graphic3d_Camera(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Projection_Orthographic = _Graphic3d.Graphic3d_Camera_Projection_Orthographic
    Projection_Perspective = _Graphic3d.Graphic3d_Camera_Projection_Perspective
    Projection_Stereo = _Graphic3d.Graphic3d_Camera_Projection_Stereo
    Projection_MonoLeftEye = _Graphic3d.Graphic3d_Camera_Projection_MonoLeftEye
    Projection_MonoRightEye = _Graphic3d.Graphic3d_Camera_Projection_MonoRightEye
    FocusType_Absolute = _Graphic3d.Graphic3d_Camera_FocusType_Absolute
    FocusType_Relative = _Graphic3d.Graphic3d_Camera_FocusType_Relative
    IODType_Absolute = _Graphic3d.Graphic3d_Camera_IODType_Absolute
    IODType_Relative = _Graphic3d.Graphic3d_Camera_IODType_Relative
    FrustumVert_LeftBottomNear = _Graphic3d.Graphic3d_Camera_FrustumVert_LeftBottomNear
    FrustumVert_LeftBottomFar = _Graphic3d.Graphic3d_Camera_FrustumVert_LeftBottomFar
    FrustumVert_LeftTopNear = _Graphic3d.Graphic3d_Camera_FrustumVert_LeftTopNear
    FrustumVert_LeftTopFar = _Graphic3d.Graphic3d_Camera_FrustumVert_LeftTopFar
    FrustumVert_RightBottomNear = _Graphic3d.Graphic3d_Camera_FrustumVert_RightBottomNear
    FrustumVert_RightBottomFar = _Graphic3d.Graphic3d_Camera_FrustumVert_RightBottomFar
    FrustumVert_RightTopNear = _Graphic3d.Graphic3d_Camera_FrustumVert_RightTopNear
    FrustumVert_RightTopFar = _Graphic3d.Graphic3d_Camera_FrustumVert_RightTopFar
    FrustumVerticesNB = _Graphic3d.Graphic3d_Camera_FrustumVerticesNB
    Aspect = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_Aspect)
    AxialScale = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_AxialScale)
    Center = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_Center)
    ConvertProj2View = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_ConvertProj2View)
    ConvertView2Proj = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_ConvertView2Proj)
    ConvertView2World = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_ConvertView2World)
    ConvertWorld2View = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_ConvertWorld2View)
    Copy = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_Copy)
    CopyMappingData = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_CopyMappingData)
    CopyOrientationData = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_CopyOrientationData)
    Direction = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_Direction)
    Distance = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_Distance)
    Eye = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_Eye)
    FOVy = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_FOVy)
    Frustum = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_Frustum)
    FrustumPoints = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_FrustumPoints)
    GetIODType = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_GetIODType)

    def __init__(self, *args):
        r"""
        * Default constructor. Initializes camera with the following properties: Eye (0, 0, -2); Center (0, 0, 0); Up (0, 1, 0); Type (Orthographic); FOVy (45); Scale (1000); IsStereo(false); ZNear (0.001); ZFar (3000.0); Aspect(1); ZFocus(1.0); ZFocusType(Relative); IOD(0.05); IODType(Relative)
        	:rtype: None* Copy constructor. @param theOther [in] the camera to copy from.
        	:param theOther:
        	:type theOther: Graphic3d_Camera
        	:rtype: None
        """
        _Graphic3d.Graphic3d_Camera_swiginit(self, _Graphic3d.new_Graphic3d_Camera(*args))
    IOD = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_IOD)
    InvalidateOrientation = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_InvalidateOrientation)
    InvalidateProjection = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_InvalidateProjection)
    IsOrthographic = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_IsOrthographic)
    IsStereo = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_IsStereo)
    MoveEyeTo = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_MoveEyeTo)
    OrientationMatrix = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_OrientationMatrix)
    OrientationMatrixF = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_OrientationMatrixF)
    OrthogonalizeUp = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_OrthogonalizeUp)
    OrthogonalizedUp = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_OrthogonalizedUp)
    Project = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_Project)
    ProjectionMatrix = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_ProjectionMatrix)
    ProjectionMatrixF = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_ProjectionMatrixF)
    ProjectionState = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_ProjectionState)
    ProjectionStereoLeft = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_ProjectionStereoLeft)
    ProjectionStereoLeftF = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_ProjectionStereoLeftF)
    ProjectionStereoRight = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_ProjectionStereoRight)
    ProjectionStereoRightF = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_ProjectionStereoRightF)
    ProjectionType = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_ProjectionType)
    Scale = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_Scale)
    SetAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_SetAspect)
    SetAxialScale = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_SetAxialScale)
    SetCenter = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_SetCenter)
    SetDirection = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_SetDirection)
    SetDirectionFromEye = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_SetDirectionFromEye)
    SetDistance = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_SetDistance)
    SetEye = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_SetEye)
    SetEyeAndCenter = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_SetEyeAndCenter)
    SetFOVy = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_SetFOVy)
    SetIOD = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_SetIOD)
    SetProjectionType = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_SetProjectionType)
    SetScale = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_SetScale)
    SetTile = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_SetTile)
    SetUp = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_SetUp)
    SetZFocus = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_SetZFocus)
    SetZRange = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_SetZRange)
    Tile = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_Tile)
    Transform = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_Transform)
    UnProject = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_UnProject)
    Up = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_Up)
    ViewDimensions = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_ViewDimensions)
    WorldViewProjState = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_WorldViewProjState)
    WorldViewState = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_WorldViewState)
    ZFar = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_ZFar)
    ZFitAll = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_ZFitAll)
    ZFocus = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_ZFocus)
    ZFocusType = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_ZFocusType)
    ZNear = _swig_new_instance_method(_Graphic3d.Graphic3d_Camera_ZNear)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_Camera_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Camera

# Register Graphic3d_Camera in _Graphic3d:
_Graphic3d.Graphic3d_Camera_swigregister(Graphic3d_Camera)

class Graphic3d_CameraTile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TotalSize = property(_Graphic3d.Graphic3d_CameraTile_TotalSize_get, _Graphic3d.Graphic3d_CameraTile_TotalSize_set)
    TileSize = property(_Graphic3d.Graphic3d_CameraTile_TileSize_get, _Graphic3d.Graphic3d_CameraTile_TileSize_set)
    Offset = property(_Graphic3d.Graphic3d_CameraTile_Offset_get, _Graphic3d.Graphic3d_CameraTile_Offset_set)
    IsTopDown = property(_Graphic3d.Graphic3d_CameraTile_IsTopDown_get, _Graphic3d.Graphic3d_CameraTile_IsTopDown_set)
    Cropped = _swig_new_instance_method(_Graphic3d.Graphic3d_CameraTile_Cropped)

    def __init__(self, *args):
        r"""
        * //!< indicate the offset coordinate system - lower-left (default) or top-down Default constructor. Initializes the empty Tile of zero size and lower-left offset orientation. Such Tile is considered uninitialized (invalid).
        	:rtype: None
        """
        _Graphic3d.Graphic3d_CameraTile_swiginit(self, _Graphic3d.new_Graphic3d_CameraTile(*args))
    IsValid = _swig_new_instance_method(_Graphic3d.Graphic3d_CameraTile_IsValid)
    OffsetLowerLeft = _swig_new_instance_method(_Graphic3d.Graphic3d_CameraTile_OffsetLowerLeft)
    __eq_wrapper__ = _swig_new_instance_method(_Graphic3d.Graphic3d_CameraTile___eq_wrapper__)

    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_CameraTile

# Register Graphic3d_CameraTile in _Graphic3d:
_Graphic3d.Graphic3d_CameraTile_swigregister(Graphic3d_CameraTile)

class Graphic3d_ClipPlane(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CappingAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_CappingAspect)
    CappingColor = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_CappingColor)
    CappingCustomHatch = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_CappingCustomHatch)
    CappingHatch = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_CappingHatch)
    CappingMaterial = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_CappingMaterial)
    CappingTexture = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_CappingTexture)
    ChainNextPlane = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_ChainNextPlane)
    ChainPreviousPlane = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_ChainPreviousPlane)
    Clone = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_Clone)
    GetEquation = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_GetEquation)
    GetId = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_GetId)

    def __init__(self, *args):
        r"""
        * Default constructor. Initializes clip plane container with the following properties: - Equation (0.0, 0.0, 1.0, 0) - IsOn (True), - IsCapping (False), - Material (Graphic3d_NOM_DEFAULT), - Texture (NULL), - HatchStyle (Aspect_HS_HORIZONTAL), - IsHatchOn (False)
        	:rtype: None* Copy constructor. @param theOther [in] the copied plane.
        	:param theOther:
        	:type theOther: Graphic3d_ClipPlane
        	:rtype: None* Construct clip plane for the passed equation. By default the plane is on, capping is turned off. @param theEquation [in] the plane equation.
        	:param theEquation:
        	:type theEquation: Graphic3d_Vec4d
        	:rtype: None* Construct clip plane from the passed geometrical definition. By default the plane is on, capping is turned off. @param thePlane [in] the plane.
        	:param thePlane:
        	:type thePlane: gp_Pln
        	:rtype: None
        """
        _Graphic3d.Graphic3d_ClipPlane_swiginit(self, _Graphic3d.new_Graphic3d_ClipPlane(*args))
    IsBoxFullInHalfspace = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_IsBoxFullInHalfspace)
    IsBoxFullOutHalfspace = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_IsBoxFullOutHalfspace)
    IsCapping = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_IsCapping)
    IsChain = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_IsChain)
    IsHatchOn = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_IsHatchOn)
    IsOn = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_IsOn)
    IsPointOutHalfspace = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_IsPointOutHalfspace)
    MCountAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_MCountAspect)
    MCountEquation = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_MCountEquation)
    NbChainNextPlanes = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_NbChainNextPlanes)
    ProbeBox = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_ProbeBox)
    ProbeBoxHalfspace = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_ProbeBoxHalfspace)
    ProbeBoxMaxPointHalfspace = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_ProbeBoxMaxPointHalfspace)
    ProbeBoxTouch = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_ProbeBoxTouch)
    ProbePoint = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_ProbePoint)
    ProbePointHalfspace = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_ProbePointHalfspace)
    ReversedEquation = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_ReversedEquation)
    SetCapping = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_SetCapping)
    SetCappingAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_SetCappingAspect)
    SetCappingColor = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_SetCappingColor)
    SetCappingCustomHatch = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_SetCappingCustomHatch)
    SetCappingHatch = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_SetCappingHatch)
    SetCappingHatchOff = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_SetCappingHatchOff)
    SetCappingHatchOn = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_SetCappingHatchOn)
    SetCappingMaterial = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_SetCappingMaterial)
    SetCappingTexture = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_SetCappingTexture)
    SetChainNextPlane = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_SetChainNextPlane)
    SetEquation = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_SetEquation)
    SetOn = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_SetOn)
    SetUseObjectMaterial = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_SetUseObjectMaterial)
    SetUseObjectShader = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_SetUseObjectShader)
    SetUseObjectTexture = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_SetUseObjectTexture)
    ToPlane = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_ToPlane)
    ToUseObjectMaterial = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_ToUseObjectMaterial)
    ToUseObjectProperties = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_ToUseObjectProperties)
    ToUseObjectShader = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_ToUseObjectShader)
    ToUseObjectTexture = _swig_new_instance_method(_Graphic3d.Graphic3d_ClipPlane_ToUseObjectTexture)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_ClipPlane_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ClipPlane

# Register Graphic3d_ClipPlane in _Graphic3d:
_Graphic3d.Graphic3d_ClipPlane_swigregister(Graphic3d_ClipPlane)

class Graphic3d_CullingTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CacheClipPtsProjections = _swig_new_instance_method(_Graphic3d.Graphic3d_CullingTool_CacheClipPtsProjections)
    Camera = _swig_new_instance_method(_Graphic3d.Graphic3d_CullingTool_Camera)

    def __init__(self, *args):
        r"""
        * Creates an empty selector object with parallel projection type by default.
        	:rtype: None
        """
        _Graphic3d.Graphic3d_CullingTool_swiginit(self, _Graphic3d.new_Graphic3d_CullingTool(*args))
    IsCulled = _swig_new_instance_method(_Graphic3d.Graphic3d_CullingTool_IsCulled)
    ProjectionMatrix = _swig_new_instance_method(_Graphic3d.Graphic3d_CullingTool_ProjectionMatrix)
    SetCullingDistance = _swig_new_instance_method(_Graphic3d.Graphic3d_CullingTool_SetCullingDistance)
    SetCullingSize = _swig_new_instance_method(_Graphic3d.Graphic3d_CullingTool_SetCullingSize)
    SetViewVolume = _swig_new_instance_method(_Graphic3d.Graphic3d_CullingTool_SetViewVolume)
    SetViewportSize = _swig_new_instance_method(_Graphic3d.Graphic3d_CullingTool_SetViewportSize)
    ViewportHeight = _swig_new_instance_method(_Graphic3d.Graphic3d_CullingTool_ViewportHeight)
    ViewportWidth = _swig_new_instance_method(_Graphic3d.Graphic3d_CullingTool_ViewportWidth)
    WorldViewMatrix = _swig_new_instance_method(_Graphic3d.Graphic3d_CullingTool_WorldViewMatrix)
    WorldViewProjState = _swig_new_instance_method(_Graphic3d.Graphic3d_CullingTool_WorldViewProjState)

    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_CullingTool

# Register Graphic3d_CullingTool in _Graphic3d:
_Graphic3d.Graphic3d_CullingTool_swigregister(Graphic3d_CullingTool)

class Graphic3d_DataStructureManager(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_DataStructureManager_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_DataStructureManager

# Register Graphic3d_DataStructureManager in _Graphic3d:
_Graphic3d.Graphic3d_DataStructureManager_swigregister(Graphic3d_DataStructureManager)

class Graphic3d_FrameStats(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ActiveDataFrame = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_ActiveDataFrame)
    ChangeCounter = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_ChangeCounter)
    ChangeDataFrames = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_ChangeDataFrames)
    GetChangeTimer = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_GetChangeTimer)
    SetChangeTimer = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_SetChangeTimer)
    CounterValue = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_CounterValue)
    DataFrames = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_DataFrames)
    FormatStats = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_FormatStats)
    FrameDuration = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_FrameDuration)
    FrameEnd = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_FrameEnd)
    FrameRate = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_FrameRate)
    FrameRateCpu = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_FrameRateCpu)
    FrameStart = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_FrameStart)
    HasCulledLayers = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_HasCulledLayers)
    HasCulledStructs = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_HasCulledStructs)
    IsLongLineFormat = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_IsLongLineFormat)
    LastDataFrame = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_LastDataFrame)
    LastDataFrameIndex = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_LastDataFrameIndex)
    SetLongLineFormat = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_SetLongLineFormat)
    SetUpdateInterval = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_SetUpdateInterval)
    TimerValue = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_TimerValue)
    UpdateInterval = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStats_UpdateInterval)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_FrameStats_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_FrameStats

# Register Graphic3d_FrameStats in _Graphic3d:
_Graphic3d.Graphic3d_FrameStats_swigregister(Graphic3d_FrameStats)

class Graphic3d_FrameStatsData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CounterValue = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStatsData_CounterValue)
    FillMax = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStatsData_FillMax)
    FrameRate = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStatsData_FrameRate)
    FrameRateCpu = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStatsData_FrameRateCpu)

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:rtype: None
        """
        _Graphic3d.Graphic3d_FrameStatsData_swiginit(self, _Graphic3d.new_Graphic3d_FrameStatsData(*args))
    Reset = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStatsData_Reset)
    TimerValue = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStatsData_TimerValue)
    Set = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStatsData_Set)

    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_FrameStatsData

# Register Graphic3d_FrameStatsData in _Graphic3d:
_Graphic3d.Graphic3d_FrameStatsData_swigregister(Graphic3d_FrameStatsData)

class Graphic3d_Fresnel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CreateConductor = _swig_new_static_method(_Graphic3d.Graphic3d_Fresnel_CreateConductor)
    CreateConstant = _swig_new_static_method(_Graphic3d.Graphic3d_Fresnel_CreateConstant)
    CreateDielectric = _swig_new_static_method(_Graphic3d.Graphic3d_Fresnel_CreateDielectric)
    CreateSchlick = _swig_new_static_method(_Graphic3d.Graphic3d_Fresnel_CreateSchlick)
    FresnelType = _swig_new_instance_method(_Graphic3d.Graphic3d_Fresnel_FresnelType)

    def __init__(self, *args):
        r"""
        * Creates uninitialized Fresnel factor.
        	:rtype: None
        """
        _Graphic3d.Graphic3d_Fresnel_swiginit(self, _Graphic3d.new_Graphic3d_Fresnel(*args))
    Serialize = _swig_new_instance_method(_Graphic3d.Graphic3d_Fresnel_Serialize)
    __eq_wrapper__ = _swig_new_instance_method(_Graphic3d.Graphic3d_Fresnel___eq_wrapper__)

    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Fresnel

# Register Graphic3d_Fresnel in _Graphic3d:
_Graphic3d.Graphic3d_Fresnel_swigregister(Graphic3d_Fresnel)
Graphic3d_Fresnel_CreateConductor = _Graphic3d.Graphic3d_Fresnel_CreateConductor
Graphic3d_Fresnel_CreateConstant = _Graphic3d.Graphic3d_Fresnel_CreateConstant
Graphic3d_Fresnel_CreateDielectric = _Graphic3d.Graphic3d_Fresnel_CreateDielectric
Graphic3d_Fresnel_CreateSchlick = _Graphic3d.Graphic3d_Fresnel_CreateSchlick

class Graphic3d_GraduatedTrihedron(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PtrView = property(_Graphic3d.Graphic3d_GraduatedTrihedron_PtrView_get, _Graphic3d.Graphic3d_GraduatedTrihedron_PtrView_set)
    ArrowsLength = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_ArrowsLength)
    AxisAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_AxisAspect)
    ChangeAxisAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_ChangeAxisAspect)
    ChangeXAxisAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_ChangeXAxisAspect)
    ChangeYAxisAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_ChangeYAxisAspect)
    ChangeZAxisAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_ChangeZAxisAspect)

    def __init__(self, *args):
        r"""
        * Default constructor Constructs the default graduated trihedron with grid, X, Y, Z axes, and tickmarks
        	:param theNamesFont: default value is 'Arial'
        	:type theNamesFont: TCollection_AsciiString
        	:param theNamesStyle: default value is Font_FA_Bold
        	:type theNamesStyle: Font_FontAspect
        	:param theNamesSize: default value is 12
        	:type theNamesSize: int
        	:param theValuesFont: default value is 'Arial'
        	:type theValuesFont: TCollection_AsciiString
        	:param theValuesStyle: default value is Font_FA_Regular
        	:type theValuesStyle: Font_FontAspect
        	:param theValuesSize: default value is 12
        	:type theValuesSize: int
        	:param theArrowsLength: default value is 30.0f
        	:type theArrowsLength: Standard_ShortReal
        	:param theGridColor: default value is Quantity_NOC_WHITE
        	:type theGridColor: Quantity_Color
        	:param theToDrawGrid: default value is Standard_True
        	:type theToDrawGrid: bool
        	:param theToDrawAxes: default value is Standard_True
        	:type theToDrawAxes: bool
        	:rtype: None
        """
        _Graphic3d.Graphic3d_GraduatedTrihedron_swiginit(self, _Graphic3d.new_Graphic3d_GraduatedTrihedron(*args))
    GridColor = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_GridColor)
    NamesFont = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_NamesFont)
    NamesFontAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_NamesFontAspect)
    NamesSize = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_NamesSize)
    SetArrowsLength = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_SetArrowsLength)
    SetDrawAxes = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_SetDrawAxes)
    SetDrawGrid = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_SetDrawGrid)
    SetGridColor = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_SetGridColor)
    SetNamesFont = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_SetNamesFont)
    SetNamesFontAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_SetNamesFontAspect)
    SetNamesSize = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_SetNamesSize)
    SetValuesFont = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_SetValuesFont)
    SetValuesFontAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_SetValuesFontAspect)
    SetValuesSize = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_SetValuesSize)
    ToDrawAxes = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_ToDrawAxes)
    ToDrawGrid = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_ToDrawGrid)
    ValuesFont = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_ValuesFont)
    ValuesFontAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_ValuesFontAspect)
    ValuesSize = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_ValuesSize)
    XAxisAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_XAxisAspect)
    YAxisAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_YAxisAspect)
    ZAxisAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_GraduatedTrihedron_ZAxisAspect)

    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_GraduatedTrihedron

# Register Graphic3d_GraduatedTrihedron in _Graphic3d:
_Graphic3d.Graphic3d_GraduatedTrihedron_swigregister(Graphic3d_GraduatedTrihedron)

class Graphic3d_GraphicDriver(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    CreateStructure = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_CreateStructure)
    CreateView = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_CreateView)
    DefaultTextHeight = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_DefaultTextHeight)
    EnableVBO = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_EnableVBO)
    GetDisplayConnection = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_GetDisplayConnection)
    InquireLightLimit = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_InquireLightLimit)
    InquireLimit = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_InquireLimit)
    InquirePlaneLimit = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_InquirePlaneLimit)
    InquireViewLimit = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_InquireViewLimit)
    InsertLayerAfter = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_InsertLayerAfter)
    InsertLayerBefore = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_InsertLayerBefore)
    MemoryInfo = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_MemoryInfo)
    NewIdentification = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_NewIdentification)
    RemoveIdentification = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_RemoveIdentification)
    RemoveStructure = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_RemoveStructure)
    RemoveView = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_RemoveView)
    RemoveZLayer = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_RemoveZLayer)
    SetZLayerSettings = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_SetZLayerSettings)
    TextSize = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_TextSize)
    ViewExists = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_ViewExists)
    ZLayerSettings = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_ZLayerSettings)
    ZLayers = _swig_new_instance_method(_Graphic3d.Graphic3d_GraphicDriver_ZLayers)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_GraphicDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_GraphicDriver

# Register Graphic3d_GraphicDriver in _Graphic3d:
_Graphic3d.Graphic3d_GraphicDriver_swigregister(Graphic3d_GraphicDriver)

class Graphic3d_Group(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    AddPrimitiveArray = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_AddPrimitiveArray)
    AddText = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_AddText)
    Aspects = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_Aspects)
    BoundingBox = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_BoundingBox)
    ChangeBoundingBox = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_ChangeBoundingBox)
    Clear = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_Clear)
    ContainsFacet = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_ContainsFacet)
    DumpJsonToString = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_DumpJsonToString)
    IsClosed = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_IsClosed)
    IsDeleted = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_IsDeleted)
    IsEmpty = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_IsEmpty)
    Marker = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_Marker)
    MinMaxValues = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_MinMaxValues)
    Remove = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_Remove)
    ReplaceAspects = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_ReplaceAspects)
    SetClosed = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_SetClosed)
    SetFlippingOptions = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_SetFlippingOptions)
    SetMinMaxValues = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_SetMinMaxValues)
    SetPrimitivesAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_SetPrimitivesAspect)
    SetStencilTestOptions = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_SetStencilTestOptions)
    Structure = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_Structure)
    SynchronizeAspects = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_SynchronizeAspects)
    Text = _swig_new_instance_method(_Graphic3d.Graphic3d_Group_Text)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_Group_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Group

# Register Graphic3d_Group in _Graphic3d:
_Graphic3d.Graphic3d_Group_swigregister(Graphic3d_Group)

class Graphic3d_HatchStyle(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates a new custom hatch style with the given pattern and unique style id @warning Raises a program error if given pattern image is not a valid 32*32 bitmap
        	:param thePattern:
        	:type thePattern: Image_PixMap
        	:rtype: None* Creates a new predefined hatch style with the given id in Aspect_HatchStyle enum. GPU memory for the pattern will not be allocated.
        	:param theType:
        	:type theType: Aspect_HatchStyle
        	:rtype: None
        """
        _Graphic3d.Graphic3d_HatchStyle_swiginit(self, _Graphic3d.new_Graphic3d_HatchStyle(*args))
    HatchType = _swig_new_instance_method(_Graphic3d.Graphic3d_HatchStyle_HatchType)
    Pattern = _swig_new_instance_method(_Graphic3d.Graphic3d_HatchStyle_Pattern)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_HatchStyle_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_HatchStyle

# Register Graphic3d_HatchStyle in _Graphic3d:
_Graphic3d.Graphic3d_HatchStyle_swigregister(Graphic3d_HatchStyle)

class Graphic3d_Layer(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_Add)
    Append = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_Append)
    ArrayOfStructures = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_ArrayOfStructures)
    BoundingBox = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_BoundingBox)
    CullableStructuresBVH = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_CullableStructuresBVH)
    CullableTrsfPersStructuresBVH = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_CullableTrsfPersStructuresBVH)
    InvalidateBVHData = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_InvalidateBVHData)
    InvalidateBoundingBox = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_InvalidateBoundingBox)
    IsCulled = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_IsCulled)
    IsImmediate = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_IsImmediate)
    LayerId = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_LayerId)
    LayerSettings = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_LayerSettings)
    NbOfTransformPersistenceObjects = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_NbOfTransformPersistenceObjects)
    NbPriorities = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_NbPriorities)
    NbStructures = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_NbStructures)
    NbStructuresNotCulled = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_NbStructuresNotCulled)
    NonCullableStructures = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_NonCullableStructures)
    Remove = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_Remove)
    SetLayerSettings = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_SetLayerSettings)
    UpdateCulling = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_UpdateCulling)
    considerZoomPersistenceObjects = _swig_new_instance_method(_Graphic3d.Graphic3d_Layer_considerZoomPersistenceObjects)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_Layer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Layer

# Register Graphic3d_Layer in _Graphic3d:
_Graphic3d.Graphic3d_Layer_swigregister(Graphic3d_Layer)

class Graphic3d_LightSet(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IterationFilter_None = _Graphic3d.Graphic3d_LightSet_IterationFilter_None
    IterationFilter_ExcludeAmbient = _Graphic3d.Graphic3d_LightSet_IterationFilter_ExcludeAmbient
    IterationFilter_ExcludeDisabled = _Graphic3d.Graphic3d_LightSet_IterationFilter_ExcludeDisabled
    IterationFilter_ExcludeDisabledAndAmbient = _Graphic3d.Graphic3d_LightSet_IterationFilter_ExcludeDisabledAndAmbient
    Add = _swig_new_instance_method(_Graphic3d.Graphic3d_LightSet_Add)
    AmbientColor = _swig_new_instance_method(_Graphic3d.Graphic3d_LightSet_AmbientColor)
    Contains = _swig_new_instance_method(_Graphic3d.Graphic3d_LightSet_Contains)
    Extent = _swig_new_instance_method(_Graphic3d.Graphic3d_LightSet_Extent)

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:rtype: None
        """
        _Graphic3d.Graphic3d_LightSet_swiginit(self, _Graphic3d.new_Graphic3d_LightSet(*args))
    IsEmpty = _swig_new_instance_method(_Graphic3d.Graphic3d_LightSet_IsEmpty)
    KeyEnabledLong = _swig_new_instance_method(_Graphic3d.Graphic3d_LightSet_KeyEnabledLong)
    KeyEnabledShort = _swig_new_instance_method(_Graphic3d.Graphic3d_LightSet_KeyEnabledShort)
    Lower = _swig_new_instance_method(_Graphic3d.Graphic3d_LightSet_Lower)
    NbEnabled = _swig_new_instance_method(_Graphic3d.Graphic3d_LightSet_NbEnabled)
    NbEnabledLightsOfType = _swig_new_instance_method(_Graphic3d.Graphic3d_LightSet_NbEnabledLightsOfType)
    NbLightsOfType = _swig_new_instance_method(_Graphic3d.Graphic3d_LightSet_NbLightsOfType)
    Remove = _swig_new_instance_method(_Graphic3d.Graphic3d_LightSet_Remove)
    Revision = _swig_new_instance_method(_Graphic3d.Graphic3d_LightSet_Revision)
    UpdateRevision = _swig_new_instance_method(_Graphic3d.Graphic3d_LightSet_UpdateRevision)
    Upper = _swig_new_instance_method(_Graphic3d.Graphic3d_LightSet_Upper)
    Value = _swig_new_instance_method(_Graphic3d.Graphic3d_LightSet_Value)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_LightSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_LightSet

# Register Graphic3d_LightSet in _Graphic3d:
_Graphic3d.Graphic3d_LightSet_swigregister(Graphic3d_LightSet)

class Graphic3d_MarkerImage(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GetBitMapArray = _swig_new_instance_method(_Graphic3d.Graphic3d_MarkerImage_GetBitMapArray)
    GetImage = _swig_new_instance_method(_Graphic3d.Graphic3d_MarkerImage_GetImage)
    GetImageAlpha = _swig_new_instance_method(_Graphic3d.Graphic3d_MarkerImage_GetImageAlpha)
    GetImageAlphaId = _swig_new_instance_method(_Graphic3d.Graphic3d_MarkerImage_GetImageAlphaId)
    GetImageId = _swig_new_instance_method(_Graphic3d.Graphic3d_MarkerImage_GetImageId)
    GetTextureSize = _swig_new_instance_method(_Graphic3d.Graphic3d_MarkerImage_GetTextureSize)

    def __init__(self, *args):
        r"""
        * @param theImage - source image
        	:param theImage:
        	:type theImage: Image_PixMap
        	:rtype: None* Creates marker image from array of bytes (method for compatibility with old markers definition). @param theBitMap - source bitmap stored as array of bytes @param theWidth - number of bits in a row @param theHeight - number of bits in a column
        	:param theBitMap:
        	:type theBitMap: TColStd_HArray1OfByte
        	:param theWidth:
        	:type theWidth: int
        	:param theHeight:
        	:type theHeight: int
        	:rtype: None
        """
        _Graphic3d.Graphic3d_MarkerImage_swiginit(self, _Graphic3d.new_Graphic3d_MarkerImage(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_MarkerImage_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_MarkerImage

# Register Graphic3d_MarkerImage in _Graphic3d:
_Graphic3d.Graphic3d_MarkerImage_swigregister(Graphic3d_MarkerImage)

class Graphic3d_MaterialAspect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Alpha = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_Alpha)
    AmbientColor = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_AmbientColor)
    BSDF = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_BSDF)
    Color = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_Color)
    DiffuseColor = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_DiffuseColor)
    EmissiveColor = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_EmissiveColor)

    def __init__(self, *args):
        r"""
        * Creates a material from default values.
        	:rtype: None* Creates a generic material.
        	:param theName:
        	:type theName: Graphic3d_NameOfMaterial
        	:rtype: None
        """
        _Graphic3d.Graphic3d_MaterialAspect_swiginit(self, _Graphic3d.new_Graphic3d_MaterialAspect(*args))
    IncreaseShine = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_IncreaseShine)
    IsDifferent = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_IsDifferent)
    IsEqual = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_IsEqual)
    MaterialFromName = _swig_new_static_method(_Graphic3d.Graphic3d_MaterialAspect_MaterialFromName)
    MaterialName = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_MaterialName)
    MaterialType = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_MaterialType)
    Name = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_Name)
    NumberOfMaterials = _swig_new_static_method(_Graphic3d.Graphic3d_MaterialAspect_NumberOfMaterials)
    ReflectionMode = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_ReflectionMode)
    RefractionIndex = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_RefractionIndex)
    RequestedName = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_RequestedName)
    Reset = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_Reset)
    SetAlpha = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_SetAlpha)
    SetAmbientColor = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_SetAmbientColor)
    SetBSDF = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_SetBSDF)
    SetColor = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_SetColor)
    SetDiffuseColor = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_SetDiffuseColor)
    SetEmissiveColor = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_SetEmissiveColor)
    SetMaterialName = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_SetMaterialName)
    SetMaterialType = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_SetMaterialType)
    SetReflectionModeOff = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_SetReflectionModeOff)
    SetRefractionIndex = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_SetRefractionIndex)
    SetShininess = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_SetShininess)
    SetSpecularColor = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_SetSpecularColor)
    SetTransparency = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_SetTransparency)
    Shininess = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_Shininess)
    SpecularColor = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_SpecularColor)
    StringName = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_StringName)
    Transparency = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect_Transparency)
    __eq_wrapper__ = _swig_new_instance_method(_Graphic3d.Graphic3d_MaterialAspect___eq_wrapper__)

    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_MaterialAspect

# Register Graphic3d_MaterialAspect in _Graphic3d:
_Graphic3d.Graphic3d_MaterialAspect_swigregister(Graphic3d_MaterialAspect)
Graphic3d_MaterialAspect_MaterialFromName = _Graphic3d.Graphic3d_MaterialAspect_MaterialFromName
Graphic3d_MaterialAspect_NumberOfMaterials = _Graphic3d.Graphic3d_MaterialAspect_NumberOfMaterials

class Graphic3d_PolygonOffset(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Mode = property(_Graphic3d.Graphic3d_PolygonOffset_Mode_get, _Graphic3d.Graphic3d_PolygonOffset_Mode_set)
    Factor = property(_Graphic3d.Graphic3d_PolygonOffset_Factor_get, _Graphic3d.Graphic3d_PolygonOffset_Factor_set)
    Units = property(_Graphic3d.Graphic3d_PolygonOffset_Units_get, _Graphic3d.Graphic3d_PolygonOffset_Units_set)
    DumpJsonToString = _swig_new_instance_method(_Graphic3d.Graphic3d_PolygonOffset_DumpJsonToString)

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:rtype: None
        """
        _Graphic3d.Graphic3d_PolygonOffset_swiginit(self, _Graphic3d.new_Graphic3d_PolygonOffset(*args))
    __eq_wrapper__ = _swig_new_instance_method(_Graphic3d.Graphic3d_PolygonOffset___eq_wrapper__)

    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_PolygonOffset

# Register Graphic3d_PolygonOffset in _Graphic3d:
_Graphic3d.Graphic3d_PolygonOffset_swigregister(Graphic3d_PolygonOffset)

class Graphic3d_PresentationAttributes(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BasicFillAreaAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_PresentationAttributes_BasicFillAreaAspect)
    Color = _swig_new_instance_method(_Graphic3d.Graphic3d_PresentationAttributes_Color)
    ColorRGBA = _swig_new_instance_method(_Graphic3d.Graphic3d_PresentationAttributes_ColorRGBA)
    DisplayMode = _swig_new_instance_method(_Graphic3d.Graphic3d_PresentationAttributes_DisplayMode)

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:rtype: None
        """
        _Graphic3d.Graphic3d_PresentationAttributes_swiginit(self, _Graphic3d.new_Graphic3d_PresentationAttributes(*args))
    Method = _swig_new_instance_method(_Graphic3d.Graphic3d_PresentationAttributes_Method)
    SetBasicFillAreaAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_PresentationAttributes_SetBasicFillAreaAspect)
    SetColor = _swig_new_instance_method(_Graphic3d.Graphic3d_PresentationAttributes_SetColor)
    SetDisplayMode = _swig_new_instance_method(_Graphic3d.Graphic3d_PresentationAttributes_SetDisplayMode)
    SetMethod = _swig_new_instance_method(_Graphic3d.Graphic3d_PresentationAttributes_SetMethod)
    SetTransparency = _swig_new_instance_method(_Graphic3d.Graphic3d_PresentationAttributes_SetTransparency)
    SetZLayer = _swig_new_instance_method(_Graphic3d.Graphic3d_PresentationAttributes_SetZLayer)
    Transparency = _swig_new_instance_method(_Graphic3d.Graphic3d_PresentationAttributes_Transparency)
    ZLayer = _swig_new_instance_method(_Graphic3d.Graphic3d_PresentationAttributes_ZLayer)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_PresentationAttributes_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_PresentationAttributes

# Register Graphic3d_PresentationAttributes in _Graphic3d:
_Graphic3d.Graphic3d_PresentationAttributes_swigregister(Graphic3d_PresentationAttributes)

class Graphic3d_RenderingParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Anaglyph_RedCyan_Simple = _Graphic3d.Graphic3d_RenderingParams_Anaglyph_RedCyan_Simple
    Anaglyph_RedCyan_Optimized = _Graphic3d.Graphic3d_RenderingParams_Anaglyph_RedCyan_Optimized
    Anaglyph_YellowBlue_Simple = _Graphic3d.Graphic3d_RenderingParams_Anaglyph_YellowBlue_Simple
    Anaglyph_YellowBlue_Optimized = _Graphic3d.Graphic3d_RenderingParams_Anaglyph_YellowBlue_Optimized
    Anaglyph_GreenMagenta_Simple = _Graphic3d.Graphic3d_RenderingParams_Anaglyph_GreenMagenta_Simple
    Anaglyph_UserDefined = _Graphic3d.Graphic3d_RenderingParams_Anaglyph_UserDefined
    PerfCounters_NONE = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_NONE
    PerfCounters_FrameRate = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_FrameRate
    PerfCounters_CPU = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_CPU
    PerfCounters_Layers = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_Layers
    PerfCounters_Structures = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_Structures
    PerfCounters_Groups = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_Groups
    PerfCounters_GroupArrays = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_GroupArrays
    PerfCounters_Triangles = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_Triangles
    PerfCounters_Points = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_Points
    PerfCounters_EstimMem = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_EstimMem
    PerfCounters_FrameTime = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_FrameTime
    PerfCounters_FrameTimeMax = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_FrameTimeMax
    PerfCounters_SkipImmediate = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_SkipImmediate
    PerfCounters_Basic = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_Basic
    PerfCounters_Extended = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_Extended
    PerfCounters_All = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_All
    FrustumCulling_Off = _Graphic3d.Graphic3d_RenderingParams_FrustumCulling_Off
    FrustumCulling_On = _Graphic3d.Graphic3d_RenderingParams_FrustumCulling_On
    FrustumCulling_NoUpdate = _Graphic3d.Graphic3d_RenderingParams_FrustumCulling_NoUpdate
    Method = property(_Graphic3d.Graphic3d_RenderingParams_Method_get, _Graphic3d.Graphic3d_RenderingParams_Method_set)
    TransparencyMethod = property(_Graphic3d.Graphic3d_RenderingParams_TransparencyMethod_get, _Graphic3d.Graphic3d_RenderingParams_TransparencyMethod_set)
    LineFeather = property(_Graphic3d.Graphic3d_RenderingParams_LineFeather_get, _Graphic3d.Graphic3d_RenderingParams_LineFeather_set)
    OitDepthFactor = property(_Graphic3d.Graphic3d_RenderingParams_OitDepthFactor_get, _Graphic3d.Graphic3d_RenderingParams_OitDepthFactor_set)
    NbMsaaSamples = property(_Graphic3d.Graphic3d_RenderingParams_NbMsaaSamples_get, _Graphic3d.Graphic3d_RenderingParams_NbMsaaSamples_set)
    RenderResolutionScale = property(_Graphic3d.Graphic3d_RenderingParams_RenderResolutionScale_get, _Graphic3d.Graphic3d_RenderingParams_RenderResolutionScale_set)
    ToEnableDepthPrepass = property(_Graphic3d.Graphic3d_RenderingParams_ToEnableDepthPrepass_get, _Graphic3d.Graphic3d_RenderingParams_ToEnableDepthPrepass_set)
    ToEnableAlphaToCoverage = property(_Graphic3d.Graphic3d_RenderingParams_ToEnableAlphaToCoverage_get, _Graphic3d.Graphic3d_RenderingParams_ToEnableAlphaToCoverage_set)
    IsGlobalIlluminationEnabled = property(_Graphic3d.Graphic3d_RenderingParams_IsGlobalIlluminationEnabled_get, _Graphic3d.Graphic3d_RenderingParams_IsGlobalIlluminationEnabled_set)
    SamplesPerPixel = property(_Graphic3d.Graphic3d_RenderingParams_SamplesPerPixel_get, _Graphic3d.Graphic3d_RenderingParams_SamplesPerPixel_set)
    RaytracingDepth = property(_Graphic3d.Graphic3d_RenderingParams_RaytracingDepth_get, _Graphic3d.Graphic3d_RenderingParams_RaytracingDepth_set)
    IsShadowEnabled = property(_Graphic3d.Graphic3d_RenderingParams_IsShadowEnabled_get, _Graphic3d.Graphic3d_RenderingParams_IsShadowEnabled_set)
    IsReflectionEnabled = property(_Graphic3d.Graphic3d_RenderingParams_IsReflectionEnabled_get, _Graphic3d.Graphic3d_RenderingParams_IsReflectionEnabled_set)
    IsAntialiasingEnabled = property(_Graphic3d.Graphic3d_RenderingParams_IsAntialiasingEnabled_get, _Graphic3d.Graphic3d_RenderingParams_IsAntialiasingEnabled_set)
    IsTransparentShadowEnabled = property(_Graphic3d.Graphic3d_RenderingParams_IsTransparentShadowEnabled_get, _Graphic3d.Graphic3d_RenderingParams_IsTransparentShadowEnabled_set)
    UseEnvironmentMapBackground = property(_Graphic3d.Graphic3d_RenderingParams_UseEnvironmentMapBackground_get, _Graphic3d.Graphic3d_RenderingParams_UseEnvironmentMapBackground_set)
    CoherentPathTracingMode = property(_Graphic3d.Graphic3d_RenderingParams_CoherentPathTracingMode_get, _Graphic3d.Graphic3d_RenderingParams_CoherentPathTracingMode_set)
    AdaptiveScreenSampling = property(_Graphic3d.Graphic3d_RenderingParams_AdaptiveScreenSampling_get, _Graphic3d.Graphic3d_RenderingParams_AdaptiveScreenSampling_set)
    AdaptiveScreenSamplingAtomic = property(_Graphic3d.Graphic3d_RenderingParams_AdaptiveScreenSamplingAtomic_get, _Graphic3d.Graphic3d_RenderingParams_AdaptiveScreenSamplingAtomic_set)
    ShowSamplingTiles = property(_Graphic3d.Graphic3d_RenderingParams_ShowSamplingTiles_get, _Graphic3d.Graphic3d_RenderingParams_ShowSamplingTiles_set)
    TwoSidedBsdfModels = property(_Graphic3d.Graphic3d_RenderingParams_TwoSidedBsdfModels_get, _Graphic3d.Graphic3d_RenderingParams_TwoSidedBsdfModels_set)
    RadianceClampingValue = property(_Graphic3d.Graphic3d_RenderingParams_RadianceClampingValue_get, _Graphic3d.Graphic3d_RenderingParams_RadianceClampingValue_set)
    RebuildRayTracingShaders = property(_Graphic3d.Graphic3d_RenderingParams_RebuildRayTracingShaders_get, _Graphic3d.Graphic3d_RenderingParams_RebuildRayTracingShaders_set)
    RayTracingTileSize = property(_Graphic3d.Graphic3d_RenderingParams_RayTracingTileSize_get, _Graphic3d.Graphic3d_RenderingParams_RayTracingTileSize_set)
    NbRayTracingTiles = property(_Graphic3d.Graphic3d_RenderingParams_NbRayTracingTiles_get, _Graphic3d.Graphic3d_RenderingParams_NbRayTracingTiles_set)
    CameraApertureRadius = property(_Graphic3d.Graphic3d_RenderingParams_CameraApertureRadius_get, _Graphic3d.Graphic3d_RenderingParams_CameraApertureRadius_set)
    CameraFocalPlaneDist = property(_Graphic3d.Graphic3d_RenderingParams_CameraFocalPlaneDist_get, _Graphic3d.Graphic3d_RenderingParams_CameraFocalPlaneDist_set)
    FrustumCullingState = property(_Graphic3d.Graphic3d_RenderingParams_FrustumCullingState_get, _Graphic3d.Graphic3d_RenderingParams_FrustumCullingState_set)
    ToneMappingMethod = property(_Graphic3d.Graphic3d_RenderingParams_ToneMappingMethod_get, _Graphic3d.Graphic3d_RenderingParams_ToneMappingMethod_set)
    Exposure = property(_Graphic3d.Graphic3d_RenderingParams_Exposure_get, _Graphic3d.Graphic3d_RenderingParams_Exposure_set)
    WhitePoint = property(_Graphic3d.Graphic3d_RenderingParams_WhitePoint_get, _Graphic3d.Graphic3d_RenderingParams_WhitePoint_set)
    StereoMode = property(_Graphic3d.Graphic3d_RenderingParams_StereoMode_get, _Graphic3d.Graphic3d_RenderingParams_StereoMode_set)
    AnaglyphFilter = property(_Graphic3d.Graphic3d_RenderingParams_AnaglyphFilter_get, _Graphic3d.Graphic3d_RenderingParams_AnaglyphFilter_set)
    AnaglyphLeft = property(_Graphic3d.Graphic3d_RenderingParams_AnaglyphLeft_get, _Graphic3d.Graphic3d_RenderingParams_AnaglyphLeft_set)
    AnaglyphRight = property(_Graphic3d.Graphic3d_RenderingParams_AnaglyphRight_get, _Graphic3d.Graphic3d_RenderingParams_AnaglyphRight_set)
    ToReverseStereo = property(_Graphic3d.Graphic3d_RenderingParams_ToReverseStereo_get, _Graphic3d.Graphic3d_RenderingParams_ToReverseStereo_set)
    StatsPosition = property(_Graphic3d.Graphic3d_RenderingParams_StatsPosition_get, _Graphic3d.Graphic3d_RenderingParams_StatsPosition_set)
    ChartPosition = property(_Graphic3d.Graphic3d_RenderingParams_ChartPosition_get, _Graphic3d.Graphic3d_RenderingParams_ChartPosition_set)
    ChartSize = property(_Graphic3d.Graphic3d_RenderingParams_ChartSize_get, _Graphic3d.Graphic3d_RenderingParams_ChartSize_set)
    StatsTextAspect = property(_Graphic3d.Graphic3d_RenderingParams_StatsTextAspect_get, _Graphic3d.Graphic3d_RenderingParams_StatsTextAspect_set)
    StatsUpdateInterval = property(_Graphic3d.Graphic3d_RenderingParams_StatsUpdateInterval_get, _Graphic3d.Graphic3d_RenderingParams_StatsUpdateInterval_set)
    StatsTextHeight = property(_Graphic3d.Graphic3d_RenderingParams_StatsTextHeight_get, _Graphic3d.Graphic3d_RenderingParams_StatsTextHeight_set)
    StatsNbFrames = property(_Graphic3d.Graphic3d_RenderingParams_StatsNbFrames_get, _Graphic3d.Graphic3d_RenderingParams_StatsNbFrames_set)
    StatsMaxChartTime = property(_Graphic3d.Graphic3d_RenderingParams_StatsMaxChartTime_get, _Graphic3d.Graphic3d_RenderingParams_StatsMaxChartTime_set)
    CollectedStats = property(_Graphic3d.Graphic3d_RenderingParams_CollectedStats_get, _Graphic3d.Graphic3d_RenderingParams_CollectedStats_set)
    ToShowStats = property(_Graphic3d.Graphic3d_RenderingParams_ToShowStats_get, _Graphic3d.Graphic3d_RenderingParams_ToShowStats_set)
    Resolution = property(_Graphic3d.Graphic3d_RenderingParams_Resolution_get, _Graphic3d.Graphic3d_RenderingParams_Resolution_set)

    def __init__(self, *args):
        r"""
        * Creates default rendering parameters.
        	:rtype: None
        """
        _Graphic3d.Graphic3d_RenderingParams_swiginit(self, _Graphic3d.new_Graphic3d_RenderingParams(*args))
    ResolutionRatio = _swig_new_instance_method(_Graphic3d.Graphic3d_RenderingParams_ResolutionRatio)

    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_RenderingParams

# Register Graphic3d_RenderingParams in _Graphic3d:
_Graphic3d.Graphic3d_RenderingParams_swigregister(Graphic3d_RenderingParams)

class Graphic3d_SequenceOfHClipPlane(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Append = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfHClipPlane_Append)
    Clear = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfHClipPlane_Clear)
    First = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfHClipPlane_First)

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:rtype: None
        """
        _Graphic3d.Graphic3d_SequenceOfHClipPlane_swiginit(self, _Graphic3d.new_Graphic3d_SequenceOfHClipPlane(*args))
    IsEmpty = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfHClipPlane_IsEmpty)
    Remove = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfHClipPlane_Remove)
    SetOverrideGlobal = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfHClipPlane_SetOverrideGlobal)
    Size = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfHClipPlane_Size)
    ToOverrideGlobal = _swig_new_instance_method(_Graphic3d.Graphic3d_SequenceOfHClipPlane_ToOverrideGlobal)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_SequenceOfHClipPlane_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_SequenceOfHClipPlane

# Register Graphic3d_SequenceOfHClipPlane in _Graphic3d:
_Graphic3d.Graphic3d_SequenceOfHClipPlane_swigregister(Graphic3d_SequenceOfHClipPlane)

class Graphic3d_ShaderAttribute(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates new attribute.
        	:param theName:
        	:type theName: TCollection_AsciiString
        	:param theLocation:
        	:type theLocation: int
        	:rtype: None
        """
        _Graphic3d.Graphic3d_ShaderAttribute_swiginit(self, _Graphic3d.new_Graphic3d_ShaderAttribute(*args))
    Location = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttribute_Location)
    Name = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderAttribute_Name)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_ShaderAttribute_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ShaderAttribute

# Register Graphic3d_ShaderAttribute in _Graphic3d:
_Graphic3d.Graphic3d_ShaderAttribute_swigregister(Graphic3d_ShaderAttribute)

class Graphic3d_ShaderObject(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    CreateFromFile = _swig_new_static_method(_Graphic3d.Graphic3d_ShaderObject_CreateFromFile)
    CreateFromSource = _swig_new_static_method(_Graphic3d.Graphic3d_ShaderObject_CreateFromSource)
    GetId = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObject_GetId)
    IsDone = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObject_IsDone)
    Path = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObject_Path)
    Source = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObject_Source)
    Type = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderObject_Type)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_ShaderObject_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ShaderObject

# Register Graphic3d_ShaderObject in _Graphic3d:
_Graphic3d.Graphic3d_ShaderObject_swigregister(Graphic3d_ShaderObject)
Graphic3d_ShaderObject_CreateFromFile = _Graphic3d.Graphic3d_ShaderObject_CreateFromFile
Graphic3d_ShaderObject_CreateFromSource = _Graphic3d.Graphic3d_ShaderObject_CreateFromSource

class Graphic3d_ShaderProgram(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AppendToHeader = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_AppendToHeader)
    AttachShader = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_AttachShader)
    ClearVariables = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_ClearVariables)
    DetachShader = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_DetachShader)
    GetId = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_GetId)

    def __init__(self, *args):
        r"""
        * Creates new empty program object.
        	:rtype: None
        """
        _Graphic3d.Graphic3d_ShaderProgram_swiginit(self, _Graphic3d.new_Graphic3d_ShaderProgram(*args))
    HasAlphaTest = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_HasAlphaTest)
    HasDefaultSampler = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_HasDefaultSampler)
    HasWeightOitOutput = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_HasWeightOitOutput)
    Header = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_Header)
    IsDone = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_IsDone)
    NbClipPlanesMax = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_NbClipPlanesMax)
    NbFragmentOutputs = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_NbFragmentOutputs)
    NbLightsMax = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_NbLightsMax)
    PushVariableFloat = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_PushVariableFloat)
    PushVariableInt = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_PushVariableInt)
    PushVariableVec2 = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_PushVariableVec2)
    PushVariableVec2i = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_PushVariableVec2i)
    PushVariableVec3 = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_PushVariableVec3)
    PushVariableVec3i = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_PushVariableVec3i)
    PushVariableVec4 = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_PushVariableVec4)
    PushVariableVec4i = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_PushVariableVec4i)
    SetAlphaTest = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_SetAlphaTest)
    SetDefaultSampler = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_SetDefaultSampler)
    SetHeader = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_SetHeader)
    SetId = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_SetId)
    SetNbClipPlanesMax = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_SetNbClipPlanesMax)
    SetNbFragmentOutputs = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_SetNbFragmentOutputs)
    SetNbLightsMax = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_SetNbLightsMax)
    SetVertexAttributes = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_SetVertexAttributes)
    SetWeightOitOutput = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_SetWeightOitOutput)
    ShaderObjects = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_ShaderObjects)
    ShadersFolder = _swig_new_static_method(_Graphic3d.Graphic3d_ShaderProgram_ShadersFolder)
    Variables = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_Variables)
    VertexAttributes = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderProgram_VertexAttributes)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_ShaderProgram_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ShaderProgram

# Register Graphic3d_ShaderProgram in _Graphic3d:
_Graphic3d.Graphic3d_ShaderProgram_swigregister(Graphic3d_ShaderProgram)
Graphic3d_ShaderProgram_ShadersFolder = _Graphic3d.Graphic3d_ShaderProgram_ShadersFolder

class Graphic3d_ShaderVariable(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IsDone = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariable_IsDone)
    Name = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariable_Name)
    Value = _swig_new_instance_method(_Graphic3d.Graphic3d_ShaderVariable_Value)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_ShaderVariable_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ShaderVariable

# Register Graphic3d_ShaderVariable in _Graphic3d:
_Graphic3d.Graphic3d_ShaderVariable_swigregister(Graphic3d_ShaderVariable)

class Graphic3d_Structure(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AcceptConnection = _swig_new_static_method(_Graphic3d.Graphic3d_Structure_AcceptConnection)
    Ancestors = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_Ancestors)
    CStructure = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_CStructure)
    CalculateBoundBox = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_CalculateBoundBox)
    Clear = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_Clear)
    ClipPlanes = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_ClipPlanes)
    Compute = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_Compute)
    ComputeVisual = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_ComputeVisual)
    Connect = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_Connect)
    ContainsFacet = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_ContainsFacet)
    CurrentGroup = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_CurrentGroup)
    Descendants = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_Descendants)
    Disconnect = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_Disconnect)
    DisconnectAll = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_DisconnectAll)
    Display = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_Display)
    DisplayPriority = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_DisplayPriority)
    Erase = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_Erase)
    GetZLayer = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_GetZLayer)

    def __init__(self, *args):
        r"""
        * Creates a graphic object in the manager theManager. It will appear in all the views of the visualiser. The structure is not displayed when it is created. @param theManager structure manager holding this structure @param theLinkPrs another structure for creating a shadow (linked) structure
        	:param theManager:
        	:type theManager: Graphic3d_StructureManager
        	:param theLinkPrs: default value is opencascade::handle<Graphic3d_Structure>()
        	:type theLinkPrs: Graphic3d_Structure
        	:rtype: None
        """
        _Graphic3d.Graphic3d_Structure_swiginit(self, _Graphic3d.new_Graphic3d_Structure(*args))
    GraphicClear = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_GraphicClear)
    GraphicConnect = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_GraphicConnect)
    GraphicDisconnect = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_GraphicDisconnect)
    GraphicTransform = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_GraphicTransform)
    Groups = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_Groups)
    HLRValidation = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_HLRValidation)
    Highlight = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_Highlight)
    HighlightStyle = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_HighlightStyle)
    Identification = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_Identification)
    IsDeleted = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_IsDeleted)
    IsDisplayed = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_IsDisplayed)
    IsEmpty = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_IsEmpty)
    IsHighlighted = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_IsHighlighted)
    IsInfinite = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_IsInfinite)
    IsMutable = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_IsMutable)
    IsTransformed = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_IsTransformed)
    IsVisible = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_IsVisible)
    MinMaxValues = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_MinMaxValues)
    Network = _swig_new_static_method(_Graphic3d.Graphic3d_Structure_Network)
    NewGroup = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_NewGroup)
    NumberOfGroups = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_NumberOfGroups)
    Owner = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_Owner)
    PrintNetwork = _swig_new_static_method(_Graphic3d.Graphic3d_Structure_PrintNetwork)
    ReCompute = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_ReCompute)
    Remove = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_Remove)
    RemoveAll = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_RemoveAll)
    ResetDisplayPriority = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_ResetDisplayPriority)
    SetClipPlanes = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_SetClipPlanes)
    SetComputeVisual = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_SetComputeVisual)
    SetDisplayPriority = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_SetDisplayPriority)
    SetHLRValidation = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_SetHLRValidation)
    SetInfiniteState = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_SetInfiniteState)
    SetIsForHighlight = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_SetIsForHighlight)
    SetMutable = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_SetMutable)
    SetOwner = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_SetOwner)
    SetTransformPersistence = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_SetTransformPersistence)
    SetTransformation = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_SetTransformation)
    SetVisible = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_SetVisible)
    SetVisual = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_SetVisual)
    SetZLayer = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_SetZLayer)
    SetZoomLimit = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_SetZoomLimit)
    Transform = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_Transform)
    TransformPersistence = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_TransformPersistence)
    Transformation = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_Transformation)
    Transforms = _swig_new_static_method(_Graphic3d.Graphic3d_Structure_Transforms)
    UnHighlight = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_UnHighlight)
    Visual = _swig_new_instance_method(_Graphic3d.Graphic3d_Structure_Visual)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_Structure_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Structure

# Register Graphic3d_Structure in _Graphic3d:
_Graphic3d.Graphic3d_Structure_swigregister(Graphic3d_Structure)
Graphic3d_Structure_AcceptConnection = _Graphic3d.Graphic3d_Structure_AcceptConnection
Graphic3d_Structure_Network = _Graphic3d.Graphic3d_Structure_Network
Graphic3d_Structure_PrintNetwork = _Graphic3d.Graphic3d_Structure_PrintNetwork
Graphic3d_Structure_Transforms = _Graphic3d.Graphic3d_Structure_Transforms

class Graphic3d_StructureManager(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ChangeDisplayPriority = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_ChangeDisplayPriority)
    ChangeZLayer = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_ChangeZLayer)
    Clear = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_Clear)
    Connect = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_Connect)
    DefinedViews = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_DefinedViews)
    Disconnect = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_Disconnect)
    Display = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_Display)
    DisplayedStructures = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_DisplayedStructures)
    Erase = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_Erase)

    def __init__(self, *args):
        r"""
        * Initializes the ViewManager. Currently creating of more than 100 viewer instances is not supported and leads to InitializationError and initialization failure. This limitation might be addressed in some future OCCT releases. Warning: Raises InitialisationError if the initialization of the ViewManager failed.
        	:param theDriver:
        	:type theDriver: Graphic3d_GraphicDriver
        	:rtype: None
        """
        _Graphic3d.Graphic3d_StructureManager_swiginit(self, _Graphic3d.new_Graphic3d_StructureManager(*args))
    GraphicDriver = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_GraphicDriver)
    Highlight = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_Highlight)
    HighlightedStructures = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_HighlightedStructures)
    Identification = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_Identification)
    IsDeviceLost = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_IsDeviceLost)
    MaxNumOfViews = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_MaxNumOfViews)
    ObjectAffinity = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_ObjectAffinity)
    ReCompute = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_ReCompute)
    RecomputeStructures = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_RecomputeStructures)
    RegisterObject = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_RegisterObject)
    Remove = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_Remove)
    SetDeviceLost = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_SetDeviceLost)
    SetTransform = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_SetTransform)
    UnHighlight = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_UnHighlight)
    UnIdentification = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_UnIdentification)
    UnregisterObject = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_UnregisterObject)
    Update = _swig_new_instance_method(_Graphic3d.Graphic3d_StructureManager_Update)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_StructureManager_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_StructureManager

# Register Graphic3d_StructureManager in _Graphic3d:
_Graphic3d.Graphic3d_StructureManager_swigregister(Graphic3d_StructureManager)

class Graphic3d_Text(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates default text parameters.
        	:param theHeight:
        	:type theHeight: Standard_ShortReal
        	:rtype: None
        """
        _Graphic3d.Graphic3d_Text_swiginit(self, _Graphic3d.new_Graphic3d_Text(*args))
    HasOwnAnchorPoint = _swig_new_instance_method(_Graphic3d.Graphic3d_Text_HasOwnAnchorPoint)
    HasPlane = _swig_new_instance_method(_Graphic3d.Graphic3d_Text_HasPlane)
    Height = _swig_new_instance_method(_Graphic3d.Graphic3d_Text_Height)
    HorizontalAlignment = _swig_new_instance_method(_Graphic3d.Graphic3d_Text_HorizontalAlignment)
    Orientation = _swig_new_instance_method(_Graphic3d.Graphic3d_Text_Orientation)
    Position = _swig_new_instance_method(_Graphic3d.Graphic3d_Text_Position)
    ResetOrientation = _swig_new_instance_method(_Graphic3d.Graphic3d_Text_ResetOrientation)
    SetHeight = _swig_new_instance_method(_Graphic3d.Graphic3d_Text_SetHeight)
    SetHorizontalAlignment = _swig_new_instance_method(_Graphic3d.Graphic3d_Text_SetHorizontalAlignment)
    SetOrientation = _swig_new_instance_method(_Graphic3d.Graphic3d_Text_SetOrientation)
    SetOwnAnchorPoint = _swig_new_instance_method(_Graphic3d.Graphic3d_Text_SetOwnAnchorPoint)
    SetPosition = _swig_new_instance_method(_Graphic3d.Graphic3d_Text_SetPosition)
    SetText = _swig_new_instance_method(_Graphic3d.Graphic3d_Text_SetText)
    SetVerticalAlignment = _swig_new_instance_method(_Graphic3d.Graphic3d_Text_SetVerticalAlignment)
    Text = _swig_new_instance_method(_Graphic3d.Graphic3d_Text_Text)
    VerticalAlignment = _swig_new_instance_method(_Graphic3d.Graphic3d_Text_VerticalAlignment)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_Text_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Text

# Register Graphic3d_Text in _Graphic3d:
_Graphic3d.Graphic3d_Text_swigregister(Graphic3d_Text)

class Graphic3d_TextureParams(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AnisoFilter = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_AnisoFilter)
    Filter = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_Filter)
    GenMode = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_GenMode)
    GenPlaneS = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_GenPlaneS)
    GenPlaneT = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_GenPlaneT)

    def __init__(self, *args):
        r"""
        * Default constructor.
        	:rtype: None
        """
        _Graphic3d.Graphic3d_TextureParams_swiginit(self, _Graphic3d.new_Graphic3d_TextureParams(*args))
    IsModulate = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_IsModulate)
    IsRepeat = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_IsRepeat)
    Rotation = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_Rotation)
    SamplerRevision = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_SamplerRevision)
    Scale = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_Scale)
    SetAnisoFilter = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_SetAnisoFilter)
    SetFilter = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_SetFilter)
    SetGenMode = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_SetGenMode)
    SetModulate = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_SetModulate)
    SetRepeat = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_SetRepeat)
    SetRotation = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_SetRotation)
    SetScale = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_SetScale)
    SetTextureUnit = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_SetTextureUnit)
    SetTranslation = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_SetTranslation)
    TextureUnit = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_TextureUnit)
    Translation = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureParams_Translation)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_TextureParams_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_TextureParams

# Register Graphic3d_TextureParams in _Graphic3d:
_Graphic3d.Graphic3d_TextureParams_swigregister(Graphic3d_TextureParams)

class Graphic3d_TextureRoot(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetId = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureRoot_GetId)
    GetImage = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureRoot_GetImage)
    GetParams = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureRoot_GetParams)
    IsDone = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureRoot_IsDone)
    Path = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureRoot_Path)
    Revision = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureRoot_Revision)
    TexturesFolder = _swig_new_static_method(_Graphic3d.Graphic3d_TextureRoot_TexturesFolder)
    Type = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureRoot_Type)
    UpdateRevision = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureRoot_UpdateRevision)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_TextureRoot_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_TextureRoot

# Register Graphic3d_TextureRoot in _Graphic3d:
_Graphic3d.Graphic3d_TextureRoot_swigregister(Graphic3d_TextureRoot)
Graphic3d_TextureRoot_TexturesFolder = _Graphic3d.Graphic3d_TextureRoot_TexturesFolder

class Graphic3d_ValidatedCubeMapOrder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __deref__ = _swig_new_instance_method(_Graphic3d.Graphic3d_ValidatedCubeMapOrder___deref__)

    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ValidatedCubeMapOrder

# Register Graphic3d_ValidatedCubeMapOrder in _Graphic3d:
_Graphic3d.Graphic3d_ValidatedCubeMapOrder_swigregister(Graphic3d_ValidatedCubeMapOrder)

class Graphic3d_ValueInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    TypeID = _swig_new_instance_method(_Graphic3d.Graphic3d_ValueInterface_TypeID)

    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ValueInterface

# Register Graphic3d_ValueInterface in _Graphic3d:
_Graphic3d.Graphic3d_ValueInterface_swigregister(Graphic3d_ValueInterface)

class Graphic3d_Vertex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    xyz = property(_Graphic3d.Graphic3d_Vertex_xyz_get, _Graphic3d.Graphic3d_Vertex_xyz_set)
    Coord = _swig_new_instance_method(_Graphic3d.Graphic3d_Vertex_Coord)
    Distance = _swig_new_instance_method(_Graphic3d.Graphic3d_Vertex_Distance)

    def __init__(self, *args):
        r"""
        * Creates a point with 0.0, 0.0, 0.0 coordinates.
        	:rtype: None* Creates a point with coordinates identical to thePoint.
        	:param thePoint:
        	:type thePoint: Graphic3d_Vertex
        	:rtype: None* Creates a point with theX, theY and theZ coordinates.
        	:param theX:
        	:type theX: Standard_ShortReal
        	:param theY:
        	:type theY: Standard_ShortReal
        	:param theZ:
        	:type theZ: Standard_ShortReal
        	:rtype: None* Creates a point with theX, theY and theZ coordinates.
        	:param theX:
        	:type theX: float
        	:param theY:
        	:type theY: float
        	:param theZ:
        	:type theZ: float
        	:rtype: None
        """
        _Graphic3d.Graphic3d_Vertex_swiginit(self, _Graphic3d.new_Graphic3d_Vertex(*args))
    SetCoord = _swig_new_instance_method(_Graphic3d.Graphic3d_Vertex_SetCoord)
    X = _swig_new_instance_method(_Graphic3d.Graphic3d_Vertex_X)
    Y = _swig_new_instance_method(_Graphic3d.Graphic3d_Vertex_Y)
    Z = _swig_new_instance_method(_Graphic3d.Graphic3d_Vertex_Z)

    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Vertex

# Register Graphic3d_Vertex in _Graphic3d:
_Graphic3d.Graphic3d_Vertex_swigregister(Graphic3d_Vertex)

class Graphic3d_ViewAffinity(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:rtype: None
        """
        _Graphic3d.Graphic3d_ViewAffinity_swiginit(self, _Graphic3d.new_Graphic3d_ViewAffinity(*args))
    IsVisible = _swig_new_instance_method(_Graphic3d.Graphic3d_ViewAffinity_IsVisible)
    SetVisible = _swig_new_instance_method(_Graphic3d.Graphic3d_ViewAffinity_SetVisible)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_ViewAffinity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ViewAffinity

# Register Graphic3d_ViewAffinity in _Graphic3d:
_Graphic3d.Graphic3d_ViewAffinity_swigregister(Graphic3d_ViewAffinity)

class Graphic3d_WorldViewProjState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Default constructor.
        	:rtype: None* Constructor for custom projector type. @param theProjectionState [in] the projection state. @param theWorldViewState [in] the world view state. @param theCamera [in] the pointer to the class supplying projection and  world view matrices (camera).
        	:param theProjectionState:
        	:type theProjectionState: Standard_Size
        	:param theWorldViewState:
        	:type theWorldViewState: Standard_Size
        	:param theCamera: default value is NULL
        	:type theCamera: Standard_Transient *
        	:rtype: None
        """
        _Graphic3d.Graphic3d_WorldViewProjState_swiginit(self, _Graphic3d.new_Graphic3d_WorldViewProjState(*args))
    Initialize = _swig_new_instance_method(_Graphic3d.Graphic3d_WorldViewProjState_Initialize)
    IsChanged = _swig_new_instance_method(_Graphic3d.Graphic3d_WorldViewProjState_IsChanged)
    IsProjectionChanged = _swig_new_instance_method(_Graphic3d.Graphic3d_WorldViewProjState_IsProjectionChanged)
    IsValid = _swig_new_instance_method(_Graphic3d.Graphic3d_WorldViewProjState_IsValid)
    IsWorldViewChanged = _swig_new_instance_method(_Graphic3d.Graphic3d_WorldViewProjState_IsWorldViewChanged)
    ProjectionState = _swig_new_instance_method(_Graphic3d.Graphic3d_WorldViewProjState_ProjectionState)
    Reset = _swig_new_instance_method(_Graphic3d.Graphic3d_WorldViewProjState_Reset)
    WorldViewState = _swig_new_instance_method(_Graphic3d.Graphic3d_WorldViewProjState_WorldViewState)
    Set = _swig_new_instance_method(_Graphic3d.Graphic3d_WorldViewProjState_Set)
    __eq_wrapper__ = _swig_new_instance_method(_Graphic3d.Graphic3d_WorldViewProjState___eq_wrapper__)

    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_WorldViewProjState

# Register Graphic3d_WorldViewProjState in _Graphic3d:
_Graphic3d.Graphic3d_WorldViewProjState_swigregister(Graphic3d_WorldViewProjState)

class Graphic3d_ZLayerSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ChangePolygonOffset = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_ChangePolygonOffset)
    CullingDistance = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_CullingDistance)
    CullingSize = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_CullingSize)
    DisableSetting = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_DisableSetting)
    EnableSetting = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_EnableSetting)

    def __init__(self, *args):
        r"""
        * Default settings.
        	:rtype: None
        """
        _Graphic3d.Graphic3d_ZLayerSettings_swiginit(self, _Graphic3d.new_Graphic3d_ZLayerSettings(*args))
    HasCullingDistance = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_HasCullingDistance)
    HasCullingSize = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_HasCullingSize)
    IsImmediate = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_IsImmediate)
    IsRaytracable = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_IsRaytracable)
    IsSettingEnabled = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_IsSettingEnabled)
    Lights = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_Lights)
    Name = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_Name)
    Origin = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_Origin)
    OriginTransformation = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_OriginTransformation)
    PolygonOffset = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_PolygonOffset)
    SetClearDepth = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_SetClearDepth)
    SetCullingDistance = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_SetCullingDistance)
    SetCullingSize = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_SetCullingSize)
    SetDepthOffsetNegative = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_SetDepthOffsetNegative)
    SetDepthOffsetPositive = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_SetDepthOffsetPositive)
    SetEnableDepthTest = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_SetEnableDepthTest)
    SetEnableDepthWrite = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_SetEnableDepthWrite)
    SetEnvironmentTexture = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_SetEnvironmentTexture)
    SetImmediate = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_SetImmediate)
    SetLights = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_SetLights)
    SetName = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_SetName)
    SetOrigin = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_SetOrigin)
    SetPolygonOffset = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_SetPolygonOffset)
    SetRaytracable = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_SetRaytracable)
    SetRenderInDepthPrepass = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_SetRenderInDepthPrepass)
    ToClearDepth = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_ToClearDepth)
    ToEnableDepthTest = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_ToEnableDepthTest)
    ToEnableDepthWrite = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_ToEnableDepthWrite)
    ToRenderInDepthPrepass = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_ToRenderInDepthPrepass)
    UseEnvironmentTexture = _swig_new_instance_method(_Graphic3d.Graphic3d_ZLayerSettings_UseEnvironmentTexture)

    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ZLayerSettings

# Register Graphic3d_ZLayerSettings in _Graphic3d:
_Graphic3d.Graphic3d_ZLayerSettings_swigregister(Graphic3d_ZLayerSettings)

class Graphic3d_ArrayOfPoints(Graphic3d_ArrayOfPrimitives):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates an array of points (Graphic3d_TOPA_POINTS). The array must be filled using the AddVertex(Point) method. @param theMaxVertexs maximum number of points @param theArrayFlags array flags
        	:param theMaxVertexs:
        	:type theMaxVertexs: int
        	:param theArrayFlags:
        	:type theArrayFlags: int
        	:rtype: None* Creates an array of points (Graphic3d_TOPA_POINTS). The array must be filled using the AddVertex(Point) method. @param theMaxVertexs maximum number of points @param theHasVColors when True, AddVertex(Point,Color) should be used for specifying vertex color @param theHasVNormals when True, AddVertex(Point,Normal) should be used for specifying vertex normal
        	:param theMaxVertexs:
        	:type theMaxVertexs: int
        	:param theHasVColors: default value is Standard_False
        	:type theHasVColors: bool
        	:param theHasVNormals: default value is Standard_False
        	:type theHasVNormals: bool
        	:rtype: None
        """
        _Graphic3d.Graphic3d_ArrayOfPoints_swiginit(self, _Graphic3d.new_Graphic3d_ArrayOfPoints(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_ArrayOfPoints_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfPoints

# Register Graphic3d_ArrayOfPoints in _Graphic3d:
_Graphic3d.Graphic3d_ArrayOfPoints_swigregister(Graphic3d_ArrayOfPoints)

class Graphic3d_ArrayOfPolygons(Graphic3d_ArrayOfPrimitives):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates an array of polygons (Graphic3d_TOPA_POLYGONS), a polygon can be filled as: 1) Creating a single polygon defined with his vertexes, i.e: @code myArray = Graphic3d_ArrayOfPolygons (7); myArray->AddVertex (x1, y1, z1); .... myArray->AddVertex (x7, y7, z7); @endcode 2) Creating separate polygons defined with a predefined number of bounds and the number of vertex per bound, i.e: @code myArray = Graphic3d_ArrayOfPolygons (7, 2); myArray->AddBound (4); myArray->AddVertex (x1, y1, z1); .... myArray->AddVertex (x4, y4, z4); myArray->AddBound (3); myArray->AddVertex (x5, y5, z5); .... myArray->AddVertex (x7, y7, z7); @endcode 3) Creating a single indexed polygon defined with his vertex ans edges, i.e: @code myArray = Graphic3d_ArrayOfPolygons (4, 0, 6); myArray->AddVertex (x1, y1, z1); .... myArray->AddVertex (x4, y4, z4); myArray->AddEdge (1); myArray->AddEdge (2); myArray->AddEdge (3); myArray->AddEdge (1); myArray->AddEdge (2); myArray->AddEdge (4); @endcode 4) Creating separate polygons defined with a predefined number of bounds and the number of edges per bound, i.e: @code myArray = Graphic3d_ArrayOfPolygons (6, 4, 14); myArray->AddBound (3); myArray->AddVertex (x1, y1, z1); myArray->AddVertex (x2, y2, z2); myArray->AddVertex (x3, y3, z3); myArray->AddEdge (1); myArray->AddEdge (2); myArray->AddEdge (3); myArray->AddBound (3); myArray->AddVertex (x4, y4, z4); myArray->AddVertex (x5, y5, z5); myArray->AddVertex (x6, y6, z6); myArray->AddEdge (4); myArray->AddEdge (5); myArray->AddEdge (6); myArray->AddBound (4); myArray->AddEdge (2); myArray->AddEdge (3); myArray->AddEdge (5); myArray->AddEdge (6); myArray->AddBound (4); myArray->AddEdge (1); myArray->AddEdge (3); myArray->AddEdge (5); myArray->AddEdge (4); @endcode @param theMaxVertexs defines the maximum allowed vertex number in the array @param theMaxBounds defines the maximum allowed bound number in the array @param theMaxEdges defines the maximum allowed edge number in the array @param theArrayFlags array flags
        	:param theMaxVertexs:
        	:type theMaxVertexs: int
        	:param theMaxBounds:
        	:type theMaxBounds: int
        	:param theMaxEdges:
        	:type theMaxEdges: int
        	:param theArrayFlags:
        	:type theArrayFlags: int
        	:rtype: None* Creates an array of polygons (Graphic3d_TOPA_POLYGONS): @param theMaxVertexs defines the maximum allowed vertex number in the array @param theMaxBounds defines the maximum allowed bound number in the array @param theMaxEdges defines the maximum allowed edge number in the array
        	:param theMaxVertexs:
        	:type theMaxVertexs: int
        	:param theMaxBounds: default value is 0
        	:type theMaxBounds: int
        	:param theMaxEdges: default value is 0
        	:type theMaxEdges: int
        	:param theHasVNormals: default value is Standard_False
        	:type theHasVNormals: bool
        	:param theHasVColors: default value is Standard_False
        	:type theHasVColors: bool
        	:param theHasBColors: default value is Standard_False
        	:type theHasBColors: bool
        	:param theHasVTexels: default value is Standard_False
        	:type theHasVTexels: bool
        	:rtype: None
        """
        _Graphic3d.Graphic3d_ArrayOfPolygons_swiginit(self, _Graphic3d.new_Graphic3d_ArrayOfPolygons(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_ArrayOfPolygons_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfPolygons

# Register Graphic3d_ArrayOfPolygons in _Graphic3d:
_Graphic3d.Graphic3d_ArrayOfPolygons_swigregister(Graphic3d_ArrayOfPolygons)

class Graphic3d_ArrayOfPolylines(Graphic3d_ArrayOfPrimitives):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates an array of polylines (Graphic3d_TOPA_POLYLINES), a polyline can be filled as: 1) Creating a single polyline defined with his vertexes, i.e: @code myArray = Graphic3d_ArrayOfPolylines (7); myArray->AddVertex (x1, y1, z1); .... myArray->AddVertex (x7, y7, z7); @endcode 2) Creating separate polylines defined with a predefined number of bounds and the number of vertex per bound, i.e: @code myArray = Graphic3d_ArrayOfPolylines (7, 2); myArray->AddBound (4); myArray->AddVertex (x1, y1, z1); .... myArray->AddVertex (x4, y4, z4); myArray->AddBound (3); myArray->AddVertex (x5, y5, z5); .... myArray->AddVertex (x7, y7, z7); @endcode 3) Creating a single indexed polyline defined with his vertex and edges, i.e: @code myArray = Graphic3d_ArrayOfPolylines (4, 0, 6); myArray->AddVertex (x1, y1, z1); .... myArray->AddVertex (x4, y4, z4); myArray->AddEdge (1); myArray->AddEdge (2); myArray->AddEdge (3); myArray->AddEdge (1); myArray->AddEdge (2); myArray->AddEdge (4); @endcode 4) creating separate polylines defined with a predefined number of bounds and the number of edges per bound, i.e: @code myArray = Graphic3d_ArrayOfPolylines (6, 4, 14); myArray->AddBound (3); myArray->AddVertex (x1, y1, z1); myArray->AddVertex (x2, y2, z2); myArray->AddVertex (x3, y3, z3); myArray->AddEdge (1); myArray->AddEdge (2); myArray->AddEdge (3); myArray->AddBound (3); myArray->AddVertex (x4, y4, z4); myArray->AddVertex (x5, y5, z5); myArray->AddVertex (x6, y6, z6); myArray->AddEdge (4); myArray->AddEdge (5); myArray->AddEdge (6); myArray->AddBound (4); myArray->AddEdge (2); myArray->AddEdge (3); myArray->AddEdge (5); myArray->AddEdge (6); myArray->AddBound (4); myArray->AddEdge (1); myArray->AddEdge (3); myArray->AddEdge (5); myArray->AddEdge (4); @endcode @param theMaxVertexs defines the maximum allowed vertex number in the array @param theMaxBounds defines the maximum allowed bound number in the array @param theMaxEdges defines the maximum allowed edge number in the array @param theArrayFlags array flags
        	:param theMaxVertexs:
        	:type theMaxVertexs: int
        	:param theMaxBounds:
        	:type theMaxBounds: int
        	:param theMaxEdges:
        	:type theMaxEdges: int
        	:param theArrayFlags:
        	:type theArrayFlags: int
        	:rtype: None* Creates an array of polylines (Graphic3d_TOPA_POLYLINES). @param theMaxVertexs defines the maximum allowed vertex number in the array @param theMaxBounds defines the maximum allowed bound number in the array @param theMaxEdges defines the maximum allowed edge number in the array @param theHasVColors when True AddVertex(Point,Color) or AddVertex(Point,Normal,Color) should be used to specify per-vertex color values @param theHasBColors when True AddBound(number,Color) should be used to specify sub-group color
        	:param theMaxVertexs:
        	:type theMaxVertexs: int
        	:param theMaxBounds: default value is 0
        	:type theMaxBounds: int
        	:param theMaxEdges: default value is 0
        	:type theMaxEdges: int
        	:param theHasVColors: default value is Standard_False
        	:type theHasVColors: bool
        	:param theHasBColors: default value is Standard_False
        	:type theHasBColors: bool
        	:rtype: None
        """
        _Graphic3d.Graphic3d_ArrayOfPolylines_swiginit(self, _Graphic3d.new_Graphic3d_ArrayOfPolylines(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_ArrayOfPolylines_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfPolylines

# Register Graphic3d_ArrayOfPolylines in _Graphic3d:
_Graphic3d.Graphic3d_ArrayOfPolylines_swigregister(Graphic3d_ArrayOfPolylines)

class Graphic3d_ArrayOfQuadrangleStrips(Graphic3d_ArrayOfPrimitives):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates an array of quadrangle strips (Graphic3d_TOPA_QUADRANGLESTRIPS), a polygon can be filled as: 1) Creating a single strip defined with his vertexes, i.e: @code myArray = Graphic3d_ArrayOfQuadrangleStrips (7); myArray->AddVertex (x1, y1, z1); .... myArray->AddVertex (x7, y7, z7); @endcode 2) Creating separate strips defined with a predefined number of strips and the number of vertex per strip, i.e: @code myArray = Graphic3d_ArrayOfQuadrangleStrips (8, 2); myArray->AddBound (4); myArray->AddVertex (x1, y1, z1); .... myArray->AddVertex (x4, y4, z4); myArray->AddBound (4); myArray->AddVertex (x5, y5, z5); .... myArray->AddVertex (x8, y8, z8); @endcode The number of quadrangle really drawn is: VertexNumber()/2 - Min(1, BoundNumber()). @param theMaxVertexs defines the maximum allowed vertex number in the array @param theMaxStrips defines the maximum allowed strip number in the array @param theArrayFlags array flags
        	:param theMaxVertexs:
        	:type theMaxVertexs: int
        	:param theMaxStrips:
        	:type theMaxStrips: int
        	:param theArrayFlags:
        	:type theArrayFlags: int
        	:rtype: None* Creates an array of quadrangle strips (Graphic3d_TOPA_QUADRANGLESTRIPS). @param theMaxVertexs defines the maximum allowed vertex number in the array @param theMaxStrips defines the maximum allowed strip number in the array
        	:param theMaxVertexs:
        	:type theMaxVertexs: int
        	:param theMaxStrips: default value is 0
        	:type theMaxStrips: int
        	:param theHasVNormals: default value is Standard_False
        	:type theHasVNormals: bool
        	:param theHasVColors: default value is Standard_False
        	:type theHasVColors: bool
        	:param theHasSColors: default value is Standard_False
        	:type theHasSColors: bool
        	:param theHasVTexels: default value is Standard_False
        	:type theHasVTexels: bool
        	:rtype: None
        """
        _Graphic3d.Graphic3d_ArrayOfQuadrangleStrips_swiginit(self, _Graphic3d.new_Graphic3d_ArrayOfQuadrangleStrips(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_ArrayOfQuadrangleStrips_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfQuadrangleStrips

# Register Graphic3d_ArrayOfQuadrangleStrips in _Graphic3d:
_Graphic3d.Graphic3d_ArrayOfQuadrangleStrips_swigregister(Graphic3d_ArrayOfQuadrangleStrips)

class Graphic3d_ArrayOfQuadrangles(Graphic3d_ArrayOfPrimitives):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates an array of quadrangles (Graphic3d_TOPA_QUADRANGLES), a quadrangle can be filled as: 1) Creating a set of quadrangles defined with his vertexes, i.e: @code myArray = Graphic3d_ArrayOfQuadrangles (8); myArray->AddVertex (x1, y1, z1); .... myArray->AddVertex (x8, y8, z8); @endcode 2) Creating a set of indexed quadrangles defined with his vertex ans edges, i.e: @code myArray = Graphic3d_ArrayOfQuadrangles (6, 8); myArray->AddVertex (x1, y1, z1); .... myArray->AddVertex (x6, y6, z6); myArray->AddEdges (1, 2, 3, 4); myArray->AddEdges (3, 4, 5, 6); @endcode @param theMaxVertexs defines the maximum allowed vertex number in the array @param theMaxEdges defines the maximum allowed edge number in the array (for indexed array) @param theArrayFlags array flags
        	:param theMaxVertexs:
        	:type theMaxVertexs: int
        	:param theMaxEdges:
        	:type theMaxEdges: int
        	:param theArrayFlags:
        	:type theArrayFlags: int
        	:rtype: None* Creates an array of quadrangles (Graphic3d_TOPA_QUADRANGLES). @param theMaxVertexs defines the maximum allowed vertex number in the array @param theMaxEdges defines the maximum allowed edge number in the array (for indexed array)
        	:param theMaxVertexs:
        	:type theMaxVertexs: int
        	:param theMaxEdges: default value is 0
        	:type theMaxEdges: int
        	:param theHasVNormals: default value is Standard_False
        	:type theHasVNormals: bool
        	:param theHasVColors: default value is Standard_False
        	:type theHasVColors: bool
        	:param theHasVTexels: default value is Standard_False
        	:type theHasVTexels: bool
        	:rtype: None
        """
        _Graphic3d.Graphic3d_ArrayOfQuadrangles_swiginit(self, _Graphic3d.new_Graphic3d_ArrayOfQuadrangles(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_ArrayOfQuadrangles_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfQuadrangles

# Register Graphic3d_ArrayOfQuadrangles in _Graphic3d:
_Graphic3d.Graphic3d_ArrayOfQuadrangles_swigregister(Graphic3d_ArrayOfQuadrangles)

class Graphic3d_ArrayOfSegments(Graphic3d_ArrayOfPrimitives):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates an array of segments (Graphic3d_TOPA_SEGMENTS), a segment can be filled as: 1) Creating a set of segments defined with his vertexes, i.e: @code myArray = Graphic3d_ArrayOfSegments (4); myArray->AddVertex (x1, y1, z1); .... myArray->AddVertex (x4, y4, z4); @endcode 2) Creating a set of indexed segments defined with his vertex and edges, i.e: @code myArray = Graphic3d_ArrayOfSegments (4, 8); myArray->AddVertex (x1, y1, z1); .... myArray->AddVertex (x4, y4, z4); myArray->AddEdges (1, 2); myArray->AddEdges (3, 4); myArray->AddEdges (2, 4); myArray->AddEdges (1, 3); @endcode @param theMaxVertexs defines the maximum allowed vertex number in the array @param theMaxEdges defines the maximum allowed edge number in the array @param theArrayFlags array flags
        	:param theMaxVertexs:
        	:type theMaxVertexs: int
        	:param theMaxEdges:
        	:type theMaxEdges: int
        	:param theArrayFlags:
        	:type theArrayFlags: int
        	:rtype: None* Creates an array of segments (Graphic3d_TOPA_SEGMENTS). @param theMaxVertexs defines the maximum allowed vertex number in the array @param theMaxEdges defines the maximum allowed edge number in the array @param theHasVColors when True, AddVertex(Point,Color) should be used for specifying vertex color
        	:param theMaxVertexs:
        	:type theMaxVertexs: int
        	:param theMaxEdges: default value is 0
        	:type theMaxEdges: int
        	:param theHasVColors: default value is Standard_False
        	:type theHasVColors: bool
        	:rtype: None
        """
        _Graphic3d.Graphic3d_ArrayOfSegments_swiginit(self, _Graphic3d.new_Graphic3d_ArrayOfSegments(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_ArrayOfSegments_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfSegments

# Register Graphic3d_ArrayOfSegments in _Graphic3d:
_Graphic3d.Graphic3d_ArrayOfSegments_swigregister(Graphic3d_ArrayOfSegments)

class Graphic3d_ArrayOfTriangleFans(Graphic3d_ArrayOfPrimitives):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates an array of triangle fans (Graphic3d_TOPA_TRIANGLEFANS), a polygon can be filled as: 1) Creating a single fan defined with his vertexes, i.e: @code myArray = Graphic3d_ArrayOfTriangleFans (7); myArray->AddVertex (x1, y1, z1); .... myArray->AddVertex (x7, y7, z7); @endcode 2) creating separate fans defined with a predefined number of fans and the number of vertex per fan, i.e: @code myArray = Graphic3d_ArrayOfTriangleFans (8, 2); myArray->AddBound (4); myArray->AddVertex (x1, y1, z1); .... myArray->AddVertex (x4, y4, z4); myArray->AddBound (4); myArray->AddVertex (x5, y5, z5); .... myArray->AddVertex (x8, y8, z8); @endcode The number of triangle really drawn is: VertexNumber() - 2 * Min(1, BoundNumber()) @param theMaxVertexs defines the maximum allowed vertex number in the array @param theMaxFans defines the maximum allowed fan number in the array @param theArrayFlags array flags
        	:param theMaxVertexs:
        	:type theMaxVertexs: int
        	:param theMaxFans:
        	:type theMaxFans: int
        	:param theArrayFlags:
        	:type theArrayFlags: int
        	:rtype: None* Creates an array of triangle fans (Graphic3d_TOPA_TRIANGLEFANS). @param theMaxVertexs defines the maximum allowed vertex number in the array @param theMaxFans defines the maximum allowed fan number in the array
        	:param theMaxVertexs:
        	:type theMaxVertexs: int
        	:param theMaxFans: default value is 0
        	:type theMaxFans: int
        	:param theHasVNormals: default value is Standard_False
        	:type theHasVNormals: bool
        	:param theHasVColors: default value is Standard_False
        	:type theHasVColors: bool
        	:param theHasBColors: default value is Standard_False
        	:type theHasBColors: bool
        	:param theHasVTexels: default value is Standard_False
        	:type theHasVTexels: bool
        	:rtype: None
        """
        _Graphic3d.Graphic3d_ArrayOfTriangleFans_swiginit(self, _Graphic3d.new_Graphic3d_ArrayOfTriangleFans(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_ArrayOfTriangleFans_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfTriangleFans

# Register Graphic3d_ArrayOfTriangleFans in _Graphic3d:
_Graphic3d.Graphic3d_ArrayOfTriangleFans_swigregister(Graphic3d_ArrayOfTriangleFans)

class Graphic3d_ArrayOfTriangleStrips(Graphic3d_ArrayOfPrimitives):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates an array of triangle strips (Graphic3d_TOPA_TRIANGLESTRIPS), a polygon can be filled as: 1) Creating a single strip defined with his vertexes, i.e: @code myArray = Graphic3d_ArrayOfTriangleStrips (7); myArray->AddVertex (x1, y1, z1); .... myArray->AddVertex (x7, y7, z7); @endcode 2) Creating separate strips defined with a predefined number of strips and the number of vertex per strip, i.e: @code myArray = Graphic3d_ArrayOfTriangleStrips (8, 2); myArray->AddBound (4); myArray->AddVertex (x1, y1, z1); .... myArray->AddVertex (x4, y4, z4); myArray->AddBound (4); myArray->AddVertex (x5, y5, z5); .... myArray->AddVertex (x8, y8, z8); @endcode @param theMaxVertexs defines the maximum allowed vertex number in the array @param theMaxStrips defines the maximum allowed strip number in the array;  the number of triangle really drawn is: VertexNumber() - 2 * Min(1, BoundNumber()) @param theArrayFlags array flags
        	:param theMaxVertexs:
        	:type theMaxVertexs: int
        	:param theMaxStrips:
        	:type theMaxStrips: int
        	:param theArrayFlags:
        	:type theArrayFlags: int
        	:rtype: None* Creates an array of triangle strips (Graphic3d_TOPA_TRIANGLESTRIPS). @param theMaxVertexs defines the maximum allowed vertex number in the array @param theMaxStrips defines the maximum allowed strip number in the array;  the number of triangle really drawn is: VertexNumber() - 2 * Min(1, BoundNumber()) @param theHasVNormals when True, AddVertex(Point,Normal), AddVertex(Point,Normal,Color) or AddVertex(Point,Normal,Texel) should be used to specify vertex normal;  vertex normals should be specified coherent to triangle orientation (defined by order of vertexes within triangle) for proper rendering @param theHasVColors when True, AddVertex(Point,Color) or AddVertex(Point,Normal,Color) should be used to specify vertex color @param theHasBColors when True, AddBound(number,Color) should be used to specify sub-group color @param theHasVTexels when True, AddVertex(Point,Texel) or AddVertex(Point,Normal,Texel) should be used to specify vertex UV coordinates
        	:param theMaxVertexs:
        	:type theMaxVertexs: int
        	:param theMaxStrips: default value is 0
        	:type theMaxStrips: int
        	:param theHasVNormals: default value is Standard_False
        	:type theHasVNormals: bool
        	:param theHasVColors: default value is Standard_False
        	:type theHasVColors: bool
        	:param theHasBColors: default value is Standard_False
        	:type theHasBColors: bool
        	:param theHasVTexels: default value is Standard_False
        	:type theHasVTexels: bool
        	:rtype: None
        """
        _Graphic3d.Graphic3d_ArrayOfTriangleStrips_swiginit(self, _Graphic3d.new_Graphic3d_ArrayOfTriangleStrips(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_ArrayOfTriangleStrips_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfTriangleStrips

# Register Graphic3d_ArrayOfTriangleStrips in _Graphic3d:
_Graphic3d.Graphic3d_ArrayOfTriangleStrips_swigregister(Graphic3d_ArrayOfTriangleStrips)

class Graphic3d_ArrayOfTriangles(Graphic3d_ArrayOfPrimitives):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates an array of triangles (Graphic3d_TOPA_TRIANGLES), a triangle can be filled as: 1) Creating a set of triangles defined with his vertexes, i.e: @code myArray = Graphic3d_ArrayOfTriangles (6); myArray->AddVertex (x1, y1, z1); .... myArray->AddVertex (x6, y6, z6); @endcode 3) Creating a set of indexed triangles defined with his vertex and edges, i.e: @code myArray = Graphic3d_ArrayOfTriangles (4, 6); myArray->AddVertex (x1, y1, z1); .... myArray->AddVertex (x4, y4, z4); myArray->AddEdges (1, 2, 3); myArray->AddEdges (2, 3, 4); @endcode @param theMaxVertexs defines the maximum allowed vertex number in the array @param theMaxEdges defines the maximum allowed edge number in the array @param theArrayFlags array flags
        	:param theMaxVertexs:
        	:type theMaxVertexs: int
        	:param theMaxEdges:
        	:type theMaxEdges: int
        	:param theArrayFlags:
        	:type theArrayFlags: int
        	:rtype: None* Creates an array of triangles (Graphic3d_TOPA_TRIANGLES). @param theMaxVertexs defines the maximum allowed vertex number in the array @param theMaxEdges defines the maximum allowed edge number in the array @param theHasVNormals when True, AddVertex(Point,Normal), AddVertex(Point,Normal,Color) or AddVertex(Point,Normal,Texel) should be used to specify vertex normal;  vertex normals should be specified coherent to triangle orientation (defined by order of vertexes within triangle) for proper rendering @param theHasVColors when True, AddVertex(Point,Color) or AddVertex(Point,Normal,Color) should be used to specify vertex color @param theHasVTexels when True, AddVertex(Point,Texel) or AddVertex(Point,Normal,Texel) should be used to specify vertex UV coordinates
        	:param theMaxVertexs:
        	:type theMaxVertexs: int
        	:param theMaxEdges: default value is 0
        	:type theMaxEdges: int
        	:param theHasVNormals: default value is Standard_False
        	:type theHasVNormals: bool
        	:param theHasVColors: default value is Standard_False
        	:type theHasVColors: bool
        	:param theHasVTexels: default value is Standard_False
        	:type theHasVTexels: bool
        	:rtype: None
        """
        _Graphic3d.Graphic3d_ArrayOfTriangles_swiginit(self, _Graphic3d.new_Graphic3d_ArrayOfTriangles(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_ArrayOfTriangles_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfTriangles

# Register Graphic3d_ArrayOfTriangles in _Graphic3d:
_Graphic3d.Graphic3d_ArrayOfTriangles_swigregister(Graphic3d_ArrayOfTriangles)

class Graphic3d_AspectFillArea3d(Graphic3d_Aspects):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Edge = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectFillArea3d_Edge)

    def __init__(self, *args):
        r"""
        * Creates a context table for fill area primitives defined with the following default values: //! InteriorStyle : Aspect_IS_EMPTY InteriorColor : Quantity_NOC_CYAN1 EdgeColor : Quantity_NOC_WHITE EdgeLineType : Aspect_TOL_SOLID EdgeWidth : 1.0 FrontMaterial : NOM_BRASS BackMaterial : NOM_BRASS HatchStyle : Aspect_HS_SOLID //! Display of back-facing filled polygons. No distinction between external and internal faces of FillAreas. The edges are not drawn. Polygon offset parameters: mode = Aspect_POM_None, factor = 1., units = 0.
        	:rtype: None* Creates a context table for fill area primitives defined with the specified values. Display of back-facing filled polygons. No distinction between external and internal faces of FillAreas. The edges are not drawn. Polygon offset parameters: mode = Aspect_POM_None, factor = 1., units = 0.
        	:param theInterior:
        	:type theInterior: Aspect_InteriorStyle
        	:param theInteriorColor:
        	:type theInteriorColor: Quantity_Color
        	:param theEdgeColor:
        	:type theEdgeColor: Quantity_Color
        	:param theEdgeLineType:
        	:type theEdgeLineType: Aspect_TypeOfLine
        	:param theEdgeWidth:
        	:type theEdgeWidth: float
        	:param theFrontMaterial:
        	:type theFrontMaterial: Graphic3d_MaterialAspect
        	:param theBackMaterial:
        	:type theBackMaterial: Graphic3d_MaterialAspect
        	:rtype: None
        """
        _Graphic3d.Graphic3d_AspectFillArea3d_swiginit(self, _Graphic3d.new_Graphic3d_AspectFillArea3d(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_AspectFillArea3d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_AspectFillArea3d

# Register Graphic3d_AspectFillArea3d in _Graphic3d:
_Graphic3d.Graphic3d_AspectFillArea3d_swigregister(Graphic3d_AspectFillArea3d)

class Graphic3d_AspectLine3d(Graphic3d_Aspects):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates a context table for line primitives defined with the following default values: //! Color = Quantity_NOC_YELLOW; Type = Aspect_TOL_SOLID; Width = 1.0;
        	:rtype: None* Creates a context table for line primitives defined with the specified values. Warning: theWidth is the 'line width scale factor'. The nominal line width is 1 pixel. The width of the line is determined by applying the line width scale factor to this nominal line width. The supported line widths vary by 1-pixel units.
        	:param theColor:
        	:type theColor: Quantity_Color
        	:param theType:
        	:type theType: Aspect_TypeOfLine
        	:param theWidth:
        	:type theWidth: float
        	:rtype: None
        """
        _Graphic3d.Graphic3d_AspectLine3d_swiginit(self, _Graphic3d.new_Graphic3d_AspectLine3d(*args))
    SetType = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectLine3d_SetType)
    SetWidth = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectLine3d_SetWidth)
    Type = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectLine3d_Type)
    Width = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectLine3d_Width)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_AspectLine3d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_AspectLine3d

# Register Graphic3d_AspectLine3d in _Graphic3d:
_Graphic3d.Graphic3d_AspectLine3d_swigregister(Graphic3d_AspectLine3d)

class Graphic3d_AspectMarker3d(Graphic3d_Aspects):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GetMarkerImage = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectMarker3d_GetMarkerImage)
    GetTextureSize = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectMarker3d_GetTextureSize)

    def __init__(self, *args):
        r"""
        * Creates a context table for marker primitives defined with the following default values: //! Marker type : TOM_X Color : YELLOW Scale factor: 1.0
        	:rtype: None:param theType:
        	:type theType: Aspect_TypeOfMarker
        	:param theColor:
        	:type theColor: Quantity_Color
        	:param theScale:
        	:type theScale: float
        	:rtype: None* Creates a context table for marker primitives defined with the specified values.
        	:param theColor:
        	:type theColor: Quantity_Color
        	:param theWidth:
        	:type theWidth: int
        	:param theHeight:
        	:type theHeight: int
        	:param theTextureBitmap:
        	:type theTextureBitmap: TColStd_HArray1OfByte
        	:rtype: None* Creates a context table for marker primitives defined with the specified values.
        	:param theTextureImage:
        	:type theTextureImage: Image_PixMap
        	:rtype: None
        """
        _Graphic3d.Graphic3d_AspectMarker3d_swiginit(self, _Graphic3d.new_Graphic3d_AspectMarker3d(*args))
    Scale = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectMarker3d_Scale)
    SetBitMap = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectMarker3d_SetBitMap)
    SetScale = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectMarker3d_SetScale)
    SetType = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectMarker3d_SetType)
    Type = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectMarker3d_Type)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_AspectMarker3d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_AspectMarker3d

# Register Graphic3d_AspectMarker3d in _Graphic3d:
_Graphic3d.Graphic3d_AspectMarker3d_swigregister(Graphic3d_AspectMarker3d)

class Graphic3d_AspectText3d(Graphic3d_Aspects):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Color = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectText3d_Color)
    ColorRGBA = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectText3d_ColorRGBA)
    DisplayType = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectText3d_DisplayType)
    Font = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectText3d_Font)
    GetTextAngle = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectText3d_GetTextAngle)
    GetTextFontAspect = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectText3d_GetTextFontAspect)
    GetTextZoomable = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectText3d_GetTextZoomable)

    def __init__(self, *args):
        r"""
        * Creates a context table for text primitives defined with the following default values: Color : Quantity_NOC_YELLOW Font : Font_NOF_ASCII_MONO The style : Aspect_TOST_NORMAL The display type : Aspect_TODT_NORMAL
        	:rtype: None* Creates a context table for text primitives defined with the specified values. @param theColor [in] text color @param theFont [in] font family name or alias like Font_NOF_ASCII_MONO @param theExpansionFactor [in] deprecated parameter, has no effect @param theSpace [in] deprecated parameter, has no effect @param theStyle [in] font style @param theDisplayType [in] display mode
        	:param theColor:
        	:type theColor: Quantity_Color
        	:param theFont:
        	:type theFont: char *
        	:param theExpansionFactor:
        	:type theExpansionFactor: float
        	:param theSpace:
        	:type theSpace: float
        	:param theStyle: default value is Aspect_TOST_NORMAL
        	:type theStyle: Aspect_TypeOfStyleText
        	:param theDisplayType: default value is Aspect_TODT_NORMAL
        	:type theDisplayType: Aspect_TypeOfDisplayText
        	:rtype: None
        """
        _Graphic3d.Graphic3d_AspectText3d_swiginit(self, _Graphic3d.new_Graphic3d_AspectText3d(*args))
    SetColor = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectText3d_SetColor)
    SetDisplayType = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectText3d_SetDisplayType)
    SetFont = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectText3d_SetFont)
    SetStyle = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectText3d_SetStyle)
    SetTextAngle = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectText3d_SetTextAngle)
    Style = _swig_new_instance_method(_Graphic3d.Graphic3d_AspectText3d_Style)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_AspectText3d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_AspectText3d

# Register Graphic3d_AspectText3d in _Graphic3d:
_Graphic3d.Graphic3d_AspectText3d_swigregister(Graphic3d_AspectText3d)

class Graphic3d_AttribBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:param theAlloc:
        	:type theAlloc: NCollection_BaseAllocator
        	:rtype: None
        """
        _Graphic3d.Graphic3d_AttribBuffer_swiginit(self, _Graphic3d.new_Graphic3d_AttribBuffer(*args))
    Init = _swig_new_instance_method(_Graphic3d.Graphic3d_AttribBuffer_Init)
    Invalidate = _swig_new_instance_method(_Graphic3d.Graphic3d_AttribBuffer_Invalidate)
    InvalidatedRange = _swig_new_instance_method(_Graphic3d.Graphic3d_AttribBuffer_InvalidatedRange)
    IsInterleaved = _swig_new_instance_method(_Graphic3d.Graphic3d_AttribBuffer_IsInterleaved)
    IsMutable = _swig_new_instance_method(_Graphic3d.Graphic3d_AttribBuffer_IsMutable)
    SetInterleaved = _swig_new_instance_method(_Graphic3d.Graphic3d_AttribBuffer_SetInterleaved)
    SetMutable = _swig_new_instance_method(_Graphic3d.Graphic3d_AttribBuffer_SetMutable)
    Validate = _swig_new_instance_method(_Graphic3d.Graphic3d_AttribBuffer_Validate)
    invalidate = _swig_new_instance_method(_Graphic3d.Graphic3d_AttribBuffer_invalidate)

    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_AttribBuffer

# Register Graphic3d_AttribBuffer in _Graphic3d:
_Graphic3d.Graphic3d_AttribBuffer_swigregister(Graphic3d_AttribBuffer)

class Graphic3d_CView(Graphic3d_DataStructureManager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Activate = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_Activate)
    BackfacingModel = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_BackfacingModel)
    Background = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_Background)
    BackgroundCubeMap = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_BackgroundCubeMap)
    BackgroundImage = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_BackgroundImage)
    BackgroundImageStyle = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_BackgroundImageStyle)
    BufferDump = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_BufferDump)
    Camera = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_Camera)
    ChangeHiddenObjects = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_ChangeHiddenObjects)
    ChangeRenderingParams = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_ChangeRenderingParams)
    ClipPlanes = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_ClipPlanes)
    Compute = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_Compute)
    ComputedMode = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_ComputedMode)
    ConsiderZoomPersistenceObjects = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_ConsiderZoomPersistenceObjects)
    ContainsFacet = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_ContainsFacet)
    CopySettings = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_CopySettings)
    Deactivate = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_Deactivate)
    DiagnosticInformation = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_DiagnosticInformation)
    DisplayedStructures = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_DisplayedStructures)
    FBO = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_FBO)
    FBOChangeViewport = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_FBOChangeViewport)
    FBOCreate = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_FBOCreate)
    FBOGetDimensions = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_FBOGetDimensions)
    FBORelease = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_FBORelease)
    GetGraduatedTrihedron = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_GetGraduatedTrihedron)
    GradientBackground = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_GradientBackground)
    GraduatedTrihedronDisplay = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_GraduatedTrihedronDisplay)
    GraduatedTrihedronErase = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_GraduatedTrihedronErase)
    GraduatedTrihedronMinMaxValues = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_GraduatedTrihedronMinMaxValues)
    HiddenObjects = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_HiddenObjects)
    Identification = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_Identification)
    InsertLayerAfter = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_InsertLayerAfter)
    InsertLayerBefore = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_InsertLayerBefore)
    Invalidate = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_Invalidate)
    InvalidateBVHData = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_InvalidateBVHData)
    InvalidateZLayerBoundingBox = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_InvalidateZLayerBoundingBox)
    IsActive = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_IsActive)
    IsComputed = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_IsComputed)
    IsDefined = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_IsDefined)
    IsInvalidated = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_IsInvalidated)
    IsRemoved = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_IsRemoved)
    Layer = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_Layer)
    Layers = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_Layers)
    Lights = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_Lights)
    MinMaxValues = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_MinMaxValues)
    NumberOfDisplayedStructures = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_NumberOfDisplayedStructures)
    ReCompute = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_ReCompute)
    Redraw = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_Redraw)
    RedrawImmediate = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_RedrawImmediate)
    Remove = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_Remove)
    RemoveZLayer = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_RemoveZLayer)
    RenderingParams = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_RenderingParams)
    Resized = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_Resized)
    SetBackfacingModel = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_SetBackfacingModel)
    SetBackground = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_SetBackground)
    SetBackgroundCubeMap = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_SetBackgroundCubeMap)
    SetBackgroundImage = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_SetBackgroundImage)
    SetBackgroundImageStyle = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_SetBackgroundImageStyle)
    SetCamera = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_SetCamera)
    SetClipPlanes = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_SetClipPlanes)
    SetComputedMode = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_SetComputedMode)
    SetFBO = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_SetFBO)
    SetGradientBackground = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_SetGradientBackground)
    SetImmediateModeDrawToFront = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_SetImmediateModeDrawToFront)
    SetLights = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_SetLights)
    SetShadingModel = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_SetShadingModel)
    SetTextureEnv = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_SetTextureEnv)
    SetVisualizationType = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_SetVisualizationType)
    SetWindow = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_SetWindow)
    SetZLayerSettings = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_SetZLayerSettings)
    ShadingModel = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_ShadingModel)
    StatisticInformation = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_StatisticInformation)
    StructureManager = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_StructureManager)
    TextureEnv = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_TextureEnv)
    Update = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_Update)
    VisualizationType = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_VisualizationType)
    Window = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_Window)
    ZLayerMax = _swig_new_instance_method(_Graphic3d.Graphic3d_CView_ZLayerMax)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_CView_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_CView

# Register Graphic3d_CView in _Graphic3d:
_Graphic3d.Graphic3d_CView_swigregister(Graphic3d_CView)

class Graphic3d_FrameStatsDataTmp(Graphic3d_FrameStatsData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ChangeCounterValue = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStatsDataTmp_ChangeCounterValue)
    GetChangeFrameRate = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStatsDataTmp_GetChangeFrameRate)
    SetChangeFrameRate = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStatsDataTmp_SetChangeFrameRate)
    GetChangeFrameRateCpu = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStatsDataTmp_GetChangeFrameRateCpu)
    SetChangeFrameRateCpu = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStatsDataTmp_SetChangeFrameRateCpu)
    ChangeTimer = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStatsDataTmp_ChangeTimer)
    GetChangeTimerValue = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStatsDataTmp_GetChangeTimerValue)
    SetChangeTimerValue = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStatsDataTmp_SetChangeTimerValue)
    FlushTimers = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStatsDataTmp_FlushTimers)

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:rtype: None
        """
        _Graphic3d.Graphic3d_FrameStatsDataTmp_swiginit(self, _Graphic3d.new_Graphic3d_FrameStatsDataTmp(*args))
    Reset = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStatsDataTmp_Reset)
    Set = _swig_new_instance_method(_Graphic3d.Graphic3d_FrameStatsDataTmp_Set)

    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_FrameStatsDataTmp

# Register Graphic3d_FrameStatsDataTmp in _Graphic3d:
_Graphic3d.Graphic3d_FrameStatsDataTmp_swigregister(Graphic3d_FrameStatsDataTmp)

class Graphic3d_MediaTextureSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Duration = _swig_new_instance_method(_Graphic3d.Graphic3d_MediaTextureSet_Duration)
    FrameSize = _swig_new_instance_method(_Graphic3d.Graphic3d_MediaTextureSet_FrameSize)

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:rtype: None
        """
        _Graphic3d.Graphic3d_MediaTextureSet_swiginit(self, _Graphic3d.new_Graphic3d_MediaTextureSet(*args))
    Input = _swig_new_instance_method(_Graphic3d.Graphic3d_MediaTextureSet_Input)
    IsFullRangeYUV = _swig_new_instance_method(_Graphic3d.Graphic3d_MediaTextureSet_IsFullRangeYUV)
    IsPlanarYUV = _swig_new_instance_method(_Graphic3d.Graphic3d_MediaTextureSet_IsPlanarYUV)
    Notify = _swig_new_instance_method(_Graphic3d.Graphic3d_MediaTextureSet_Notify)
    OpenInput = _swig_new_instance_method(_Graphic3d.Graphic3d_MediaTextureSet_OpenInput)
    PlayerContext = _swig_new_instance_method(_Graphic3d.Graphic3d_MediaTextureSet_PlayerContext)
    Progress = _swig_new_instance_method(_Graphic3d.Graphic3d_MediaTextureSet_Progress)
    ShaderProgram = _swig_new_instance_method(_Graphic3d.Graphic3d_MediaTextureSet_ShaderProgram)
    SwapFrames = _swig_new_instance_method(_Graphic3d.Graphic3d_MediaTextureSet_SwapFrames)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_MediaTextureSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_MediaTextureSet

# Register Graphic3d_MediaTextureSet in _Graphic3d:
_Graphic3d.Graphic3d_MediaTextureSet_swigregister(Graphic3d_MediaTextureSet)

class Graphic3d_TextureEnv(Graphic3d_TextureRoot):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates an environment texture from a file.
        	:param theFileName:
        	:type theFileName: TCollection_AsciiString
        	:rtype: None* Creates an environment texture from a predefined texture name set.
        	:param theName:
        	:type theName: Graphic3d_NameOfTextureEnv
        	:rtype: None* Creates an environment texture from the pixmap.
        	:param thePixMap:
        	:type thePixMap: Image_PixMap
        	:rtype: None
        """
        _Graphic3d.Graphic3d_TextureEnv_swiginit(self, _Graphic3d.new_Graphic3d_TextureEnv(*args))
    Name = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureEnv_Name)
    NumberOfTextures = _swig_new_static_method(_Graphic3d.Graphic3d_TextureEnv_NumberOfTextures)
    TextureName = _swig_new_static_method(_Graphic3d.Graphic3d_TextureEnv_TextureName)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_TextureEnv_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_TextureEnv

# Register Graphic3d_TextureEnv in _Graphic3d:
_Graphic3d.Graphic3d_TextureEnv_swigregister(Graphic3d_TextureEnv)
Graphic3d_TextureEnv_NumberOfTextures = _Graphic3d.Graphic3d_TextureEnv_NumberOfTextures
Graphic3d_TextureEnv_TextureName = _Graphic3d.Graphic3d_TextureEnv_TextureName

class Graphic3d_TextureMap(Graphic3d_TextureRoot):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    AnisoFilter = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureMap_AnisoFilter)
    DisableModulate = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureMap_DisableModulate)
    DisableRepeat = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureMap_DisableRepeat)
    DisableSmooth = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureMap_DisableSmooth)
    EnableModulate = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureMap_EnableModulate)
    EnableRepeat = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureMap_EnableRepeat)
    EnableSmooth = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureMap_EnableSmooth)
    IsModulate = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureMap_IsModulate)
    IsRepeat = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureMap_IsRepeat)
    IsSmoothed = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureMap_IsSmoothed)
    SetAnisoFilter = _swig_new_instance_method(_Graphic3d.Graphic3d_TextureMap_SetAnisoFilter)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_TextureMap_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_TextureMap

# Register Graphic3d_TextureMap in _Graphic3d:
_Graphic3d.Graphic3d_TextureMap_swigregister(Graphic3d_TextureMap)

class Graphic3d_CubeMap(Graphic3d_TextureMap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    CurrentSide = _swig_new_instance_method(_Graphic3d.Graphic3d_CubeMap_CurrentSide)
    IsTopDown = _swig_new_instance_method(_Graphic3d.Graphic3d_CubeMap_IsTopDown)
    More = _swig_new_instance_method(_Graphic3d.Graphic3d_CubeMap_More)
    Next = _swig_new_instance_method(_Graphic3d.Graphic3d_CubeMap_Next)
    Reset = _swig_new_instance_method(_Graphic3d.Graphic3d_CubeMap_Reset)
    SetZInversion = _swig_new_instance_method(_Graphic3d.Graphic3d_CubeMap_SetZInversion)
    Value = _swig_new_instance_method(_Graphic3d.Graphic3d_CubeMap_Value)
    ZIsInverted = _swig_new_instance_method(_Graphic3d.Graphic3d_CubeMap_ZIsInverted)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_CubeMap_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_CubeMap

# Register Graphic3d_CubeMap in _Graphic3d:
_Graphic3d.Graphic3d_CubeMap_swigregister(Graphic3d_CubeMap)

class Graphic3d_MutableIndexBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:param theAlloc:
        	:type theAlloc: NCollection_BaseAllocator
        	:rtype: None
        """
        _Graphic3d.Graphic3d_MutableIndexBuffer_swiginit(self, _Graphic3d.new_Graphic3d_MutableIndexBuffer(*args))
    Invalidate = _swig_new_instance_method(_Graphic3d.Graphic3d_MutableIndexBuffer_Invalidate)
    InvalidatedRange = _swig_new_instance_method(_Graphic3d.Graphic3d_MutableIndexBuffer_InvalidatedRange)
    IsMutable = _swig_new_instance_method(_Graphic3d.Graphic3d_MutableIndexBuffer_IsMutable)
    Validate = _swig_new_instance_method(_Graphic3d.Graphic3d_MutableIndexBuffer_Validate)
    invalidate = _swig_new_instance_method(_Graphic3d.Graphic3d_MutableIndexBuffer_invalidate)

    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_MutableIndexBuffer

# Register Graphic3d_MutableIndexBuffer in _Graphic3d:
_Graphic3d.Graphic3d_MutableIndexBuffer_swigregister(Graphic3d_MutableIndexBuffer)

class Graphic3d_Texture1D(Graphic3d_TextureMap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Name = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture1D_Name)
    NumberOfTextures = _swig_new_static_method(_Graphic3d.Graphic3d_Texture1D_NumberOfTextures)
    TextureName = _swig_new_static_method(_Graphic3d.Graphic3d_Texture1D_TextureName)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_Texture1D_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Texture1D

# Register Graphic3d_Texture1D in _Graphic3d:
_Graphic3d.Graphic3d_Texture1D_swigregister(Graphic3d_Texture1D)
Graphic3d_Texture1D_NumberOfTextures = _Graphic3d.Graphic3d_Texture1D_NumberOfTextures
Graphic3d_Texture1D_TextureName = _Graphic3d.Graphic3d_Texture1D_TextureName

class Graphic3d_Texture2D(Graphic3d_TextureMap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    HasMipMaps = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2D_HasMipMaps)
    Name = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2D_Name)
    NumberOfTextures = _swig_new_static_method(_Graphic3d.Graphic3d_Texture2D_NumberOfTextures)
    SetImage = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2D_SetImage)
    SetMipMaps = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2D_SetMipMaps)
    TextureName = _swig_new_static_method(_Graphic3d.Graphic3d_Texture2D_TextureName)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_Texture2D_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Texture2D

# Register Graphic3d_Texture2D in _Graphic3d:
_Graphic3d.Graphic3d_Texture2D_swigregister(Graphic3d_Texture2D)
Graphic3d_Texture2D_NumberOfTextures = _Graphic3d.Graphic3d_Texture2D_NumberOfTextures
Graphic3d_Texture2D_TextureName = _Graphic3d.Graphic3d_Texture2D_TextureName

class Graphic3d_CubeMapSeparate(Graphic3d_CubeMap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Initializes cubemap to be loaded from file. @thePaths - array of paths to separate image files (has to have size equal 6).
        	:param thePaths:
        	:type thePaths: NCollection_Array1<TCollection_AsciiString>
        	:rtype: None* Initializes cubemap to be setted directly from PixMaps. @theImages - array if PixMaps (has to have size equal 6).
        	:param theImages:
        	:type theImages: Image_PixMap
        	:rtype: None
        """
        _Graphic3d.Graphic3d_CubeMapSeparate_swiginit(self, _Graphic3d.new_Graphic3d_CubeMapSeparate(*args))
    Value = _swig_new_instance_method(_Graphic3d.Graphic3d_CubeMapSeparate_Value)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_CubeMapSeparate_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_CubeMapSeparate

# Register Graphic3d_CubeMapSeparate in _Graphic3d:
_Graphic3d.Graphic3d_CubeMapSeparate_swigregister(Graphic3d_CubeMapSeparate)

class Graphic3d_MediaTexture(Graphic3d_Texture2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Frame = _swig_new_instance_method(_Graphic3d.Graphic3d_MediaTexture_Frame)
    GenerateNewId = _swig_new_instance_method(_Graphic3d.Graphic3d_MediaTexture_GenerateNewId)

    def __init__(self, *args):
        r"""
        * Main constructor.
        	:param theMutex:
        	:type theMutex: Media_HMutex
        	:param thePlane: default value is -1
        	:type thePlane: int
        	:rtype: None
        """
        _Graphic3d.Graphic3d_MediaTexture_swiginit(self, _Graphic3d.new_Graphic3d_MediaTexture(*args))
    SetFrame = _swig_new_instance_method(_Graphic3d.Graphic3d_MediaTexture_SetFrame)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_MediaTexture_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_MediaTexture

# Register Graphic3d_MediaTexture in _Graphic3d:
_Graphic3d.Graphic3d_MediaTexture_swigregister(Graphic3d_MediaTexture)

class Graphic3d_Texture1Dmanual(Graphic3d_Texture1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates a texture from the file FileName.
        	:param theFileName:
        	:type theFileName: TCollection_AsciiString
        	:rtype: None* Create a texture from a predefined texture name set.
        	:param theNOT:
        	:type theNOT: Graphic3d_NameOfTexture1D
        	:rtype: None* Creates a texture from the pixmap.
        	:param thePixMap:
        	:type thePixMap: Image_PixMap
        	:rtype: None
        """
        _Graphic3d.Graphic3d_Texture1Dmanual_swiginit(self, _Graphic3d.new_Graphic3d_Texture1Dmanual(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_Texture1Dmanual_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Texture1Dmanual

# Register Graphic3d_Texture1Dmanual in _Graphic3d:
_Graphic3d.Graphic3d_Texture1Dmanual_swigregister(Graphic3d_Texture1Dmanual)

class Graphic3d_Texture1Dsegment(Graphic3d_Texture1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates a texture from a file
        	:param theFileName:
        	:type theFileName: TCollection_AsciiString
        	:rtype: None* Creates a texture from a predefined texture name set.
        	:param theNOT:
        	:type theNOT: Graphic3d_NameOfTexture1D
        	:rtype: None* Creates a texture from the pixmap.
        	:param thePixMap:
        	:type thePixMap: Image_PixMap
        	:rtype: None
        """
        _Graphic3d.Graphic3d_Texture1Dsegment_swiginit(self, _Graphic3d.new_Graphic3d_Texture1Dsegment(*args))
    Segment = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture1Dsegment_Segment)
    SetSegment = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture1Dsegment_SetSegment)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_Texture1Dsegment_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Texture1Dsegment

# Register Graphic3d_Texture1Dsegment in _Graphic3d:
_Graphic3d.Graphic3d_Texture1Dsegment_swigregister(Graphic3d_Texture1Dsegment)

class Graphic3d_Texture2Dmanual(Graphic3d_Texture2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates a texture from a file. MipMaps levels will be automatically generated if needed.
        	:param theFileName:
        	:type theFileName: TCollection_AsciiString
        	:rtype: None* Creates a texture from a predefined texture name set. MipMaps levels will be automatically generated if needed.
        	:param theNOT:
        	:type theNOT: Graphic3d_NameOfTexture2D
        	:rtype: None* Creates a texture from the pixmap. MipMaps levels will be automatically generated if needed.
        	:param thePixMap:
        	:type thePixMap: Image_PixMap
        	:rtype: None
        """
        _Graphic3d.Graphic3d_Texture2Dmanual_swiginit(self, _Graphic3d.new_Graphic3d_Texture2Dmanual(*args))


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_Texture2Dmanual_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Texture2Dmanual

# Register Graphic3d_Texture2Dmanual in _Graphic3d:
_Graphic3d.Graphic3d_Texture2Dmanual_swigregister(Graphic3d_Texture2Dmanual)

class Graphic3d_Texture2Dplane(Graphic3d_Texture2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates a texture from a file
        	:param theFileName:
        	:type theFileName: TCollection_AsciiString
        	:rtype: None* Creates a texture from a predefined texture name set.
        	:param theNOT:
        	:type theNOT: Graphic3d_NameOfTexture2D
        	:rtype: None* Creates a texture from the pixmap.
        	:param thePixMap:
        	:type thePixMap: Image_PixMap
        	:rtype: None
        """
        _Graphic3d.Graphic3d_Texture2Dplane_swiginit(self, _Graphic3d.new_Graphic3d_Texture2Dplane(*args))
    Plane = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2Dplane_Plane)
    PlaneS = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2Dplane_PlaneS)
    PlaneT = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2Dplane_PlaneT)
    Rotation = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2Dplane_Rotation)
    ScaleS = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2Dplane_ScaleS)
    ScaleT = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2Dplane_ScaleT)
    SetPlane = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2Dplane_SetPlane)
    SetPlaneS = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2Dplane_SetPlaneS)
    SetPlaneT = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2Dplane_SetPlaneT)
    SetRotation = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2Dplane_SetRotation)
    SetScaleS = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2Dplane_SetScaleS)
    SetScaleT = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2Dplane_SetScaleT)
    SetTranslateS = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2Dplane_SetTranslateS)
    SetTranslateT = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2Dplane_SetTranslateT)
    TranslateS = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2Dplane_TranslateS)
    TranslateT = _swig_new_instance_method(_Graphic3d.Graphic3d_Texture2Dplane_TranslateT)


    @staticmethod
    def DownCast(t):
      return Handle_Graphic3d_Texture2Dplane_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Texture2Dplane

# Register Graphic3d_Texture2Dplane in _Graphic3d:
_Graphic3d.Graphic3d_Texture2Dplane_swigregister(Graphic3d_Texture2Dplane)



