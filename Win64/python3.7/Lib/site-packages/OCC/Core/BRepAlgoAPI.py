# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepAlgoAPI module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brepalgoapi.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BRepAlgoAPI
else:
    import _BRepAlgoAPI

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _BRepAlgoAPI.SWIG_PyInstanceMethod_New
_swig_new_static_method = _BRepAlgoAPI.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepAlgoAPI.delete_SwigPyIterator
    value = _swig_new_instance_method(_BRepAlgoAPI.SwigPyIterator_value)
    incr = _swig_new_instance_method(_BRepAlgoAPI.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_BRepAlgoAPI.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_BRepAlgoAPI.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_BRepAlgoAPI.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_BRepAlgoAPI.SwigPyIterator_copy)
    next = _swig_new_instance_method(_BRepAlgoAPI.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_BRepAlgoAPI.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_BRepAlgoAPI.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_BRepAlgoAPI.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_BRepAlgoAPI.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_BRepAlgoAPI.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_BRepAlgoAPI.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_BRepAlgoAPI.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_BRepAlgoAPI.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_BRepAlgoAPI.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BRepAlgoAPI:
_BRepAlgoAPI.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.BOPAlgo
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.TopTools
import OCC.Core.TCollection
import OCC.Core.IntTools
import OCC.Core.BRepAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.Geom2dHatch
import OCC.Core.IntRes2d
import OCC.Core.HatchGen
import OCC.Core.Geom2dInt
import OCC.Core.IntCurve
import OCC.Core.Extrema
import OCC.Core.Intf
import OCC.Core.GeomAPI
import OCC.Core.Approx
import OCC.Core.AppCont
import OCC.Core.AppParCurves
import OCC.Core.BRepClass3d
import OCC.Core.IntCurveSurface
import OCC.Core.IntSurf
import OCC.Core.IntCurvesFace
import OCC.Core.IntPatch
import OCC.Core.IntAna
import OCC.Core.GeomInt
import OCC.Core.IntImp
import OCC.Core.ApproxInt
import OCC.Core.BOPDS
import OCC.Core.BRepTools
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.BOPTools
import OCC.Core.BRepBuilderAPI
class BRepAlgoAPI_Algo(OCC.Core.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Clear = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Algo_Clear)
    SetRunParallel = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Algo_SetRunParallel)
    RunParallel = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Algo_RunParallel)
    SetFuzzyValue = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Algo_SetFuzzyValue)
    FuzzyValue = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Algo_FuzzyValue)
    HasErrors = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Algo_HasErrors)
    HasWarnings = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Algo_HasWarnings)
    HasError = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Algo_HasError)
    HasWarning = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Algo_HasWarning)
    ClearWarnings = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Algo_ClearWarnings)
    GetReport = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Algo_GetReport)
    SetProgressIndicator = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Algo_SetProgressIndicator)
    SetUseOBB = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Algo_SetUseOBB)

# Register BRepAlgoAPI_Algo in _BRepAlgoAPI:
_BRepAlgoAPI.BRepAlgoAPI_Algo_swigregister(BRepAlgoAPI_Algo)

class BRepAlgoAPI_Check(OCC.Core.BOPAlgo.BOPAlgo_Options):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * @name Constructors Empty constructor.
        	:rtype: None* Constructor for checking single shape. //! @param theS [in] - the shape to check; @param bTestSE [in] - flag which specifies whether to check the shape  on small edges or not; by default it is set to True; @param bTestSI [in] - flag which specifies whether to check the shape  on self-interference or not; by default it is set to True;
        	:param theS:
        	:type theS: TopoDS_Shape
        	:param bTestSE: default value is Standard_True
        	:type bTestSE: bool
        	:param bTestSI: default value is Standard_True
        	:type bTestSI: bool
        	:rtype: None* Constructor for checking the couple of shapes. Additionally to the validity checks of each given shape, the types of the given shapes will be checked on validity for Boolean operation of given type. //! @param theS1 [in] - the first shape to check; @param theS2 [in] - the second shape to check; @param theOp [in] - the type of Boolean Operation for which the validity of given shapes should be checked. @param bTestSE [in] - flag which specifies whether to check the shape  on small edges or not; by default it is set to True; @param bTestSI [in] - flag which specifies whether to check the shape  on self-interference or not; by default it is set to True;
        	:param theS1:
        	:type theS1: TopoDS_Shape
        	:param theS2:
        	:type theS2: TopoDS_Shape
        	:param theOp: default value is BOPAlgo_UNKNOWN
        	:type theOp: BOPAlgo_Operation
        	:param bTestSE: default value is Standard_True
        	:type bTestSE: bool
        	:param bTestSI: default value is Standard_True
        	:type bTestSI: bool
        	:rtype: None
        """
        _BRepAlgoAPI.BRepAlgoAPI_Check_swiginit(self, _BRepAlgoAPI.new_BRepAlgoAPI_Check(*args))
    IsValid = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Check_IsValid)
    Perform = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Check_Perform)
    Result = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Check_Result)
    SetData = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Check_SetData)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAlgoAPI.delete_BRepAlgoAPI_Check

# Register BRepAlgoAPI_Check in _BRepAlgoAPI:
_BRepAlgoAPI.BRepAlgoAPI_Check_swigregister(BRepAlgoAPI_Check)

class BRepAlgoAPI_BuilderAlgo(BRepAlgoAPI_Algo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Arguments = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_Arguments)

    def __init__(self, *args):
        r"""
        * @name Constructors Empty constructor
        	:rtype: None* Constructor with prepared Filler object
        	:param thePF:
        	:type thePF: BOPAlgo_PaveFiller
        	:rtype: None
        """
        _BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_swiginit(self, _BRepAlgoAPI.new_BRepAlgoAPI_BuilderAlgo(*args))
    Builder = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_Builder)
    CheckInverted = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_CheckInverted)
    DSFiller = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_DSFiller)
    Glue = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_Glue)
    HasDeleted = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_HasDeleted)
    HasGenerated = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_HasGenerated)
    HasHistory = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_HasHistory)
    HasModified = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_HasModified)
    History = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_History)
    NonDestructive = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_NonDestructive)
    SectionEdges = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SectionEdges)
    SetArguments = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SetArguments)
    SetCheckInverted = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SetCheckInverted)
    SetGlue = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SetGlue)
    SetNonDestructive = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SetNonDestructive)
    SetToFillHistory = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SetToFillHistory)
    SimplifyResult = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_SimplifyResult)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAlgoAPI.delete_BRepAlgoAPI_BuilderAlgo

# Register BRepAlgoAPI_BuilderAlgo in _BRepAlgoAPI:
_BRepAlgoAPI.BRepAlgoAPI_BuilderAlgo_swigregister(BRepAlgoAPI_BuilderAlgo)

class BRepAlgoAPI_Defeaturing(BRepAlgoAPI_Algo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddFaceToRemove = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_AddFaceToRemove)
    AddFacesToRemove = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_AddFacesToRemove)

    def __init__(self, *args):
        r"""
        * @name Constructors Empty constructor
        	:rtype: None
        """
        _BRepAlgoAPI.BRepAlgoAPI_Defeaturing_swiginit(self, _BRepAlgoAPI.new_BRepAlgoAPI_Defeaturing(*args))
    FacesToRemove = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_FacesToRemove)
    HasDeleted = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_HasDeleted)
    HasGenerated = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_HasGenerated)
    HasHistory = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_HasHistory)
    HasModified = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_HasModified)
    History = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_History)
    InputShape = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_InputShape)
    SetShape = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_SetShape)
    SetToFillHistory = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_SetToFillHistory)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAlgoAPI.delete_BRepAlgoAPI_Defeaturing

# Register BRepAlgoAPI_Defeaturing in _BRepAlgoAPI:
_BRepAlgoAPI.BRepAlgoAPI_Defeaturing_swigregister(BRepAlgoAPI_Defeaturing)

class BRepAlgoAPI_BooleanOperation(BRepAlgoAPI_BuilderAlgo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * @name Constructors Empty constructor
        	:rtype: None* Constructor with precomputed intersections of arguments.
        	:param thePF:
        	:type thePF: BOPAlgo_PaveFiller
        	:rtype: None
        """
        _BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_swiginit(self, _BRepAlgoAPI.new_BRepAlgoAPI_BooleanOperation(*args))
    Operation = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_Operation)
    SetOperation = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_SetOperation)
    SetTools = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_SetTools)
    Shape1 = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_Shape1)
    Shape2 = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_Shape2)
    Tools = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_Tools)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAlgoAPI.delete_BRepAlgoAPI_BooleanOperation

# Register BRepAlgoAPI_BooleanOperation in _BRepAlgoAPI:
_BRepAlgoAPI.BRepAlgoAPI_BooleanOperation_swigregister(BRepAlgoAPI_BooleanOperation)

class BRepAlgoAPI_Splitter(BRepAlgoAPI_BuilderAlgo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * @name Constructors Empty constructor
        	:rtype: None* Constructor with already prepared intersection tool - PaveFiller
        	:param thePF:
        	:type thePF: BOPAlgo_PaveFiller
        	:rtype: None
        """
        _BRepAlgoAPI.BRepAlgoAPI_Splitter_swiginit(self, _BRepAlgoAPI.new_BRepAlgoAPI_Splitter(*args))
    SetTools = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Splitter_SetTools)
    Tools = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Splitter_Tools)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAlgoAPI.delete_BRepAlgoAPI_Splitter

# Register BRepAlgoAPI_Splitter in _BRepAlgoAPI:
_BRepAlgoAPI.BRepAlgoAPI_Splitter_swigregister(BRepAlgoAPI_Splitter)

class BRepAlgoAPI_Common(BRepAlgoAPI_BooleanOperation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Empty constructor
        	:rtype: None* Empty constructor <PF> - PaveFiller object that is carried out
        	:param PF:
        	:type PF: BOPAlgo_PaveFiller
        	:rtype: None* Constructor with two shapes <S1> -argument <S2> -tool <anOperation> - the type of the operation Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:rtype: None* Constructor with two shapes <S1> -argument <S2> -tool <anOperation> - the type of the operation <PF> - PaveFiller object that is carried out Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param PF:
        	:type PF: BOPAlgo_PaveFiller
        	:rtype: None
        """
        _BRepAlgoAPI.BRepAlgoAPI_Common_swiginit(self, _BRepAlgoAPI.new_BRepAlgoAPI_Common(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAlgoAPI.delete_BRepAlgoAPI_Common

# Register BRepAlgoAPI_Common in _BRepAlgoAPI:
_BRepAlgoAPI.BRepAlgoAPI_Common_swigregister(BRepAlgoAPI_Common)

class BRepAlgoAPI_Cut(BRepAlgoAPI_BooleanOperation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Empty constructor
        	:rtype: None* Empty constructor <PF> - PaveFiller object that is carried out
        	:param PF:
        	:type PF: BOPAlgo_PaveFiller
        	:rtype: None* Constructor with two shapes <S1> -argument <S2> -tool <anOperation> - the type of the operation Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:rtype: None* Constructor with two shapes <S1> -argument <S2> -tool <anOperation> - the type of the operation <PF> - PaveFiller object that is carried out Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param aDSF:
        	:type aDSF: BOPAlgo_PaveFiller
        	:param bFWD: default value is Standard_True
        	:type bFWD: bool
        	:rtype: None
        """
        _BRepAlgoAPI.BRepAlgoAPI_Cut_swiginit(self, _BRepAlgoAPI.new_BRepAlgoAPI_Cut(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAlgoAPI.delete_BRepAlgoAPI_Cut

# Register BRepAlgoAPI_Cut in _BRepAlgoAPI:
_BRepAlgoAPI.BRepAlgoAPI_Cut_swigregister(BRepAlgoAPI_Cut)

class BRepAlgoAPI_Fuse(BRepAlgoAPI_BooleanOperation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Empty constructor
        	:rtype: None* Empty constructor <PF> - PaveFiller object that is carried out
        	:param PF:
        	:type PF: BOPAlgo_PaveFiller
        	:rtype: None* Constructor with two shapes <S1> -argument <S2> -tool <anOperation> - the type of the operation Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:rtype: None* Constructor with two shapes <S1> -argument <S2> -tool <anOperation> - the type of the operation <PF> - PaveFiller object that is carried out Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param aDSF:
        	:type aDSF: BOPAlgo_PaveFiller
        	:rtype: None
        """
        _BRepAlgoAPI.BRepAlgoAPI_Fuse_swiginit(self, _BRepAlgoAPI.new_BRepAlgoAPI_Fuse(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAlgoAPI.delete_BRepAlgoAPI_Fuse

# Register BRepAlgoAPI_Fuse in _BRepAlgoAPI:
_BRepAlgoAPI.BRepAlgoAPI_Fuse_swigregister(BRepAlgoAPI_Fuse)

class BRepAlgoAPI_Section(BRepAlgoAPI_BooleanOperation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Approximation = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Section_Approximation)

    def __init__(self, *args):
        r"""
        * Empty constructor
        	:rtype: None* Empty constructor <PF> - PaveFiller object that is carried out
        	:param PF:
        	:type PF: BOPAlgo_PaveFiller
        	:rtype: None* Constructor with two shapes <S1> -argument <S2> -tool <PerformNow> - the flag: if <PerformNow>=True - the algorithm is performed immediatly Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param PerformNow: default value is Standard_True
        	:type PerformNow: bool
        	:rtype: None* Constructor with two shapes <S1> -argument <S2> -tool <PF> - PaveFiller object that is carried out <PerformNow> - the flag: if <PerformNow>=True - the algorithm is performed immediatly Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param aDSF:
        	:type aDSF: BOPAlgo_PaveFiller
        	:param PerformNow: default value is Standard_True
        	:type PerformNow: bool
        	:rtype: None* Constructor with two shapes <S1> - argument <Pl> - tool <PerformNow> - the flag: if <PerformNow>=True - the algorithm is performed immediatly Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param Pl:
        	:type Pl: gp_Pln
        	:param PerformNow: default value is Standard_True
        	:type PerformNow: bool
        	:rtype: None* Constructor with two shapes <S1> - argument <Sf> - tool <PerformNow> - the flag: if <PerformNow>=True - the algorithm is performed immediatly Obsolete
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param Sf:
        	:type Sf: Geom_Surface
        	:param PerformNow: default value is Standard_True
        	:type PerformNow: bool
        	:rtype: None* Constructor with two shapes <Sf> - argument <S2> - tool <PerformNow> - the flag: if <PerformNow>=True - the algorithm is performed immediatly Obsolete
        	:param Sf:
        	:type Sf: Geom_Surface
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param PerformNow: default value is Standard_True
        	:type PerformNow: bool
        	:rtype: None* Constructor with two shapes <Sf1> - argument <Sf2> - tool <PerformNow> - the flag: if <PerformNow>=True - the algorithm is performed immediatly Obsolete
        	:param Sf1:
        	:type Sf1: Geom_Surface
        	:param Sf2:
        	:type Sf2: Geom_Surface
        	:param PerformNow: default value is Standard_True
        	:type PerformNow: bool
        	:rtype: None
        """
        _BRepAlgoAPI.BRepAlgoAPI_Section_swiginit(self, _BRepAlgoAPI.new_BRepAlgoAPI_Section(*args))
    ComputePCurveOn1 = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Section_ComputePCurveOn1)
    ComputePCurveOn2 = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Section_ComputePCurveOn2)
    HasAncestorFaceOn1 = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Section_HasAncestorFaceOn1)
    HasAncestorFaceOn2 = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Section_HasAncestorFaceOn2)
    Init1 = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Section_Init1)
    Init2 = _swig_new_instance_method(_BRepAlgoAPI.BRepAlgoAPI_Section_Init2)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAlgoAPI.delete_BRepAlgoAPI_Section

# Register BRepAlgoAPI_Section in _BRepAlgoAPI:
_BRepAlgoAPI.BRepAlgoAPI_Section_swigregister(BRepAlgoAPI_Section)



