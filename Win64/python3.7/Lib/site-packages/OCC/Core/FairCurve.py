# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
FairCurve module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_faircurve.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _FairCurve
else:
    import _FairCurve

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _FairCurve.SWIG_PyInstanceMethod_New
_swig_new_static_method = _FairCurve.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FairCurve.delete_SwigPyIterator
    value = _swig_new_instance_method(_FairCurve.SwigPyIterator_value)
    incr = _swig_new_instance_method(_FairCurve.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_FairCurve.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_FairCurve.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_FairCurve.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_FairCurve.SwigPyIterator_copy)
    next = _swig_new_instance_method(_FairCurve.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_FairCurve.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_FairCurve.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_FairCurve.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_FairCurve.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_FairCurve.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_FairCurve.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_FairCurve.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_FairCurve.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_FairCurve.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _FairCurve:
_FairCurve.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Geom2d
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.math
import OCC.Core.Message
FairCurve_OK = _FairCurve.FairCurve_OK
FairCurve_NotConverged = _FairCurve.FairCurve_NotConverged
FairCurve_InfiniteSliding = _FairCurve.FairCurve_InfiniteSliding
FairCurve_NullHeight = _FairCurve.FairCurve_NullHeight
class FairCurve_Batten(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Compute = _swig_new_instance_method(_FairCurve.FairCurve_Batten_Compute)
    Curve = _swig_new_instance_method(_FairCurve.FairCurve_Batten_Curve)
    DumpToString = _swig_new_instance_method(_FairCurve.FairCurve_Batten_DumpToString)

    def __init__(self, *args):
        r"""
        * Constructor with the two points and the geometrical characteristics of the batten (elastic beam) Height is the height of the deformation, and Slope is the slope value, initialized at 0. The user can then supply the desired slope value by the method, SetSlope. Other parameters are initialized as follow : - FreeSliding = False - ConstraintOrder1 = 1 - ConstraintOrder2 = 1 - Angle1 = 0 - Angle2 = 0 - SlidingFactor = 1 Exceptions NegativeValue if Height is less than or equal to 0. NullValue if the distance between P1 and P2 is less than or equal to the tolerance value for distance in Precision::Confusion: P1.IsEqual(P2, Precision::Confusion()). The function gp_Pnt2d::IsEqual tests to see if this is the case.
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:param Height:
        	:type Height: float
        	:param Slope: default value is 0
        	:type Slope: float
        	:rtype: None
        """
        _FairCurve.FairCurve_Batten_swiginit(self, _FairCurve.new_FairCurve_Batten(*args))
    GetAngle1 = _swig_new_instance_method(_FairCurve.FairCurve_Batten_GetAngle1)
    GetAngle2 = _swig_new_instance_method(_FairCurve.FairCurve_Batten_GetAngle2)
    GetConstraintOrder1 = _swig_new_instance_method(_FairCurve.FairCurve_Batten_GetConstraintOrder1)
    GetConstraintOrder2 = _swig_new_instance_method(_FairCurve.FairCurve_Batten_GetConstraintOrder2)
    GetFreeSliding = _swig_new_instance_method(_FairCurve.FairCurve_Batten_GetFreeSliding)
    GetHeight = _swig_new_instance_method(_FairCurve.FairCurve_Batten_GetHeight)
    GetP1 = _swig_new_instance_method(_FairCurve.FairCurve_Batten_GetP1)
    GetP2 = _swig_new_instance_method(_FairCurve.FairCurve_Batten_GetP2)
    GetSlidingFactor = _swig_new_instance_method(_FairCurve.FairCurve_Batten_GetSlidingFactor)
    GetSlope = _swig_new_instance_method(_FairCurve.FairCurve_Batten_GetSlope)
    SetAngle1 = _swig_new_instance_method(_FairCurve.FairCurve_Batten_SetAngle1)
    SetAngle2 = _swig_new_instance_method(_FairCurve.FairCurve_Batten_SetAngle2)
    SetConstraintOrder1 = _swig_new_instance_method(_FairCurve.FairCurve_Batten_SetConstraintOrder1)
    SetConstraintOrder2 = _swig_new_instance_method(_FairCurve.FairCurve_Batten_SetConstraintOrder2)
    SetFreeSliding = _swig_new_instance_method(_FairCurve.FairCurve_Batten_SetFreeSliding)
    SetHeight = _swig_new_instance_method(_FairCurve.FairCurve_Batten_SetHeight)
    SetP1 = _swig_new_instance_method(_FairCurve.FairCurve_Batten_SetP1)
    SetP2 = _swig_new_instance_method(_FairCurve.FairCurve_Batten_SetP2)
    SetSlidingFactor = _swig_new_instance_method(_FairCurve.FairCurve_Batten_SetSlidingFactor)
    SetSlope = _swig_new_instance_method(_FairCurve.FairCurve_Batten_SetSlope)
    SlidingOfReference = _swig_new_instance_method(_FairCurve.FairCurve_Batten_SlidingOfReference)

    __repr__ = _dumps_object

    __swig_destroy__ = _FairCurve.delete_FairCurve_Batten

# Register FairCurve_Batten in _FairCurve:
_FairCurve.FairCurve_Batten_swigregister(FairCurve_Batten)

class FairCurve_BattenLaw(OCC.Core.math.math_Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructor of linear batten with Heigth : the Heigth at the middle point Slope : the geometric slope of the batten Sliding : Active Length of the batten without extension
        	:param Heigth:
        	:type Heigth: float
        	:param Slope:
        	:type Slope: float
        	:param Sliding:
        	:type Sliding: float
        	:rtype: None
        """
        _FairCurve.FairCurve_BattenLaw_swiginit(self, _FairCurve.new_FairCurve_BattenLaw(*args))
    SetHeigth = _swig_new_instance_method(_FairCurve.FairCurve_BattenLaw_SetHeigth)
    SetSliding = _swig_new_instance_method(_FairCurve.FairCurve_BattenLaw_SetSliding)
    SetSlope = _swig_new_instance_method(_FairCurve.FairCurve_BattenLaw_SetSlope)

    __repr__ = _dumps_object

    __swig_destroy__ = _FairCurve.delete_FairCurve_BattenLaw

# Register FairCurve_BattenLaw in _FairCurve:
_FairCurve.FairCurve_BattenLaw_swigregister(FairCurve_BattenLaw)

class FairCurve_DistributionOfEnergy(OCC.Core.math.math_FunctionSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetDerivativeOrder = _swig_new_instance_method(_FairCurve.FairCurve_DistributionOfEnergy_SetDerivativeOrder)

    __repr__ = _dumps_object

    __swig_destroy__ = _FairCurve.delete_FairCurve_DistributionOfEnergy

# Register FairCurve_DistributionOfEnergy in _FairCurve:
_FairCurve.FairCurve_DistributionOfEnergy_swigregister(FairCurve_DistributionOfEnergy)

class FairCurve_Energy(OCC.Core.math.math_MultipleVarFunctionWithHessian):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Poles = _swig_new_instance_method(_FairCurve.FairCurve_Energy_Poles)
    Values = _swig_new_instance_method(_FairCurve.FairCurve_Energy_Values)
    Variable = _swig_new_instance_method(_FairCurve.FairCurve_Energy_Variable)

    __repr__ = _dumps_object

    __swig_destroy__ = _FairCurve.delete_FairCurve_Energy

# Register FairCurve_Energy in _FairCurve:
_FairCurve.FairCurve_Energy_swigregister(FairCurve_Energy)

class FairCurve_Newton(OCC.Core.math.math_NewtonMinimum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * The tolerance required on the solution is given by Tolerance. Iteration are stopped if (!WithSingularity) and H(F(Xi)) is not definite positive (if the smaller eigenvalue of H < Convexity) or IsConverged() returns True for 2 successives Iterations. Warning: This constructor do not computation
        	:param theFunction:
        	:type theFunction: math_MultipleVarFunctionWithHessian
        	:param theSpatialTolerance: default value is 1.0e-7
        	:type theSpatialTolerance: float
        	:param theCriteriumTolerance: default value is 1.0e-7
        	:type theCriteriumTolerance: float
        	:param theNbIterations: default value is 40
        	:type theNbIterations: int
        	:param theConvexity: default value is 1.0e-6
        	:type theConvexity: float
        	:param theWithSingularity: default value is Standard_True
        	:type theWithSingularity: bool
        	:rtype: None
        """
        _FairCurve.FairCurve_Newton_swiginit(self, _FairCurve.new_FairCurve_Newton(*args))
    IsConverged = _swig_new_instance_method(_FairCurve.FairCurve_Newton_IsConverged)

    __repr__ = _dumps_object

    __swig_destroy__ = _FairCurve.delete_FairCurve_Newton

# Register FairCurve_Newton in _FairCurve:
_FairCurve.FairCurve_Newton_swigregister(FairCurve_Newton)

class FairCurve_DistributionOfJerk(FairCurve_DistributionOfEnergy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param BSplOrder:
        	:type BSplOrder: int
        	:param FlatKnots:
        	:type FlatKnots: TColStd_HArray1OfReal
        	:param Poles:
        	:type Poles: TColgp_HArray1OfPnt2d
        	:param DerivativeOrder:
        	:type DerivativeOrder: int
        	:param Law:
        	:type Law: FairCurve_BattenLaw
        	:param NbValAux: default value is 0
        	:type NbValAux: int
        	:rtype: None
        """
        _FairCurve.FairCurve_DistributionOfJerk_swiginit(self, _FairCurve.new_FairCurve_DistributionOfJerk(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _FairCurve.delete_FairCurve_DistributionOfJerk

# Register FairCurve_DistributionOfJerk in _FairCurve:
_FairCurve.FairCurve_DistributionOfJerk_swigregister(FairCurve_DistributionOfJerk)

class FairCurve_DistributionOfSagging(FairCurve_DistributionOfEnergy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param BSplOrder:
        	:type BSplOrder: int
        	:param FlatKnots:
        	:type FlatKnots: TColStd_HArray1OfReal
        	:param Poles:
        	:type Poles: TColgp_HArray1OfPnt2d
        	:param DerivativeOrder:
        	:type DerivativeOrder: int
        	:param Law:
        	:type Law: FairCurve_BattenLaw
        	:param NbValAux: default value is 0
        	:type NbValAux: int
        	:rtype: None
        """
        _FairCurve.FairCurve_DistributionOfSagging_swiginit(self, _FairCurve.new_FairCurve_DistributionOfSagging(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _FairCurve.delete_FairCurve_DistributionOfSagging

# Register FairCurve_DistributionOfSagging in _FairCurve:
_FairCurve.FairCurve_DistributionOfSagging_swigregister(FairCurve_DistributionOfSagging)

class FairCurve_DistributionOfTension(FairCurve_DistributionOfEnergy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param BSplOrder:
        	:type BSplOrder: int
        	:param FlatKnots:
        	:type FlatKnots: TColStd_HArray1OfReal
        	:param Poles:
        	:type Poles: TColgp_HArray1OfPnt2d
        	:param DerivativeOrder:
        	:type DerivativeOrder: int
        	:param LengthSliding:
        	:type LengthSliding: float
        	:param Law:
        	:type Law: FairCurve_BattenLaw
        	:param NbValAux: default value is 0
        	:type NbValAux: int
        	:param Uniform: default value is Standard_False
        	:type Uniform: bool
        	:rtype: None
        """
        _FairCurve.FairCurve_DistributionOfTension_swiginit(self, _FairCurve.new_FairCurve_DistributionOfTension(*args))
    SetLengthSliding = _swig_new_instance_method(_FairCurve.FairCurve_DistributionOfTension_SetLengthSliding)

    __repr__ = _dumps_object

    __swig_destroy__ = _FairCurve.delete_FairCurve_DistributionOfTension

# Register FairCurve_DistributionOfTension in _FairCurve:
_FairCurve.FairCurve_DistributionOfTension_swigregister(FairCurve_DistributionOfTension)

class FairCurve_EnergyOfBatten(FairCurve_Energy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Angles corresspond to the Ox axis
        	:param BSplOrder:
        	:type BSplOrder: int
        	:param FlatKnots:
        	:type FlatKnots: TColStd_HArray1OfReal
        	:param Poles:
        	:type Poles: TColgp_HArray1OfPnt2d
        	:param ContrOrder1:
        	:type ContrOrder1: int
        	:param ContrOrder2:
        	:type ContrOrder2: int
        	:param Law:
        	:type Law: FairCurve_BattenLaw
        	:param LengthSliding:
        	:type LengthSliding: float
        	:param FreeSliding: default value is Standard_True
        	:type FreeSliding: bool
        	:param Angle1: default value is 0
        	:type Angle1: float
        	:param Angle2: default value is 0
        	:type Angle2: float
        	:rtype: None
        """
        _FairCurve.FairCurve_EnergyOfBatten_swiginit(self, _FairCurve.new_FairCurve_EnergyOfBatten(*args))
    LengthSliding = _swig_new_instance_method(_FairCurve.FairCurve_EnergyOfBatten_LengthSliding)
    Status = _swig_new_instance_method(_FairCurve.FairCurve_EnergyOfBatten_Status)

    __repr__ = _dumps_object

    __swig_destroy__ = _FairCurve.delete_FairCurve_EnergyOfBatten

# Register FairCurve_EnergyOfBatten in _FairCurve:
_FairCurve.FairCurve_EnergyOfBatten_swigregister(FairCurve_EnergyOfBatten)

class FairCurve_EnergyOfMVC(FairCurve_Energy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Angles corresspond to the Ox axis
        	:param BSplOrder:
        	:type BSplOrder: int
        	:param FlatKnots:
        	:type FlatKnots: TColStd_HArray1OfReal
        	:param Poles:
        	:type Poles: TColgp_HArray1OfPnt2d
        	:param ContrOrder1:
        	:type ContrOrder1: int
        	:param ContrOrder2:
        	:type ContrOrder2: int
        	:param Law:
        	:type Law: FairCurve_BattenLaw
        	:param PhysicalRatio:
        	:type PhysicalRatio: float
        	:param LengthSliding:
        	:type LengthSliding: float
        	:param FreeSliding: default value is Standard_True
        	:type FreeSliding: bool
        	:param Angle1: default value is 0
        	:type Angle1: float
        	:param Angle2: default value is 0
        	:type Angle2: float
        	:param Curvature1: default value is 0
        	:type Curvature1: float
        	:param Curvature2: default value is 0
        	:type Curvature2: float
        	:rtype: None
        """
        _FairCurve.FairCurve_EnergyOfMVC_swiginit(self, _FairCurve.new_FairCurve_EnergyOfMVC(*args))
    LengthSliding = _swig_new_instance_method(_FairCurve.FairCurve_EnergyOfMVC_LengthSliding)
    Status = _swig_new_instance_method(_FairCurve.FairCurve_EnergyOfMVC_Status)

    __repr__ = _dumps_object

    __swig_destroy__ = _FairCurve.delete_FairCurve_EnergyOfMVC

# Register FairCurve_EnergyOfMVC in _FairCurve:
_FairCurve.FairCurve_EnergyOfMVC_swigregister(FairCurve_EnergyOfMVC)

class FairCurve_MinimalVariation(FairCurve_Batten):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DumpToString = _swig_new_instance_method(_FairCurve.FairCurve_MinimalVariation_DumpToString)

    def __init__(self, *args):
        r"""
        * Constructs the two contact points P1 and P2 and the geometrical characteristics of the batten (elastic beam) These include the real number values for height of deformation Height, slope value Slope, and kind of energy PhysicalRatio. The kinds of energy include: - Jerk (0) - Sagging (1). Note that the default setting for Physical Ration is in FairCurve_Batten Other parameters are initialized as follow : - FreeSliding = False - ConstraintOrder1 = 1 - ConstraintOrder2 = 1 - Angle1 = 0 - Angle2 = 0 - Curvature1 = 0 - Curvature2 = 0 - SlidingFactor = 1 Warning If PhysicalRatio equals 1, you cannot impose constraints on curvature. Exceptions NegativeValue if Height is less than or equal to 0. NullValue if the distance between P1 and P2 is less than or equal to the tolerance value for distance in Precision::Confusion: P1.IsEqual(P2, Precision::Confusion()). The function gp_Pnt2d::IsEqual tests to see if this is the case. Definition of the geometricals constraints
        	:param P1:
        	:type P1: gp_Pnt2d
        	:param P2:
        	:type P2: gp_Pnt2d
        	:param Heigth:
        	:type Heigth: float
        	:param Slope: default value is 0
        	:type Slope: float
        	:param PhysicalRatio: default value is 0
        	:type PhysicalRatio: float
        	:rtype: None
        """
        _FairCurve.FairCurve_MinimalVariation_swiginit(self, _FairCurve.new_FairCurve_MinimalVariation(*args))
    GetCurvature1 = _swig_new_instance_method(_FairCurve.FairCurve_MinimalVariation_GetCurvature1)
    GetCurvature2 = _swig_new_instance_method(_FairCurve.FairCurve_MinimalVariation_GetCurvature2)
    GetPhysicalRatio = _swig_new_instance_method(_FairCurve.FairCurve_MinimalVariation_GetPhysicalRatio)
    SetCurvature1 = _swig_new_instance_method(_FairCurve.FairCurve_MinimalVariation_SetCurvature1)
    SetCurvature2 = _swig_new_instance_method(_FairCurve.FairCurve_MinimalVariation_SetCurvature2)
    SetPhysicalRatio = _swig_new_instance_method(_FairCurve.FairCurve_MinimalVariation_SetPhysicalRatio)

    __repr__ = _dumps_object

    __swig_destroy__ = _FairCurve.delete_FairCurve_MinimalVariation

# Register FairCurve_MinimalVariation in _FairCurve:
_FairCurve.FairCurve_MinimalVariation_swigregister(FairCurve_MinimalVariation)



