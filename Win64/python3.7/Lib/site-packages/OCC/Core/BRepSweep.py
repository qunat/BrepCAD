# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepSweep module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brepsweep.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BRepSweep
else:
    import _BRepSweep

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _BRepSweep.SWIG_PyInstanceMethod_New
_swig_new_static_method = _BRepSweep.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepSweep.delete_SwigPyIterator
    value = _swig_new_instance_method(_BRepSweep.SwigPyIterator_value)
    incr = _swig_new_instance_method(_BRepSweep.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_BRepSweep.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_BRepSweep.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_BRepSweep.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_BRepSweep.SwigPyIterator_copy)
    next = _swig_new_instance_method(_BRepSweep.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_BRepSweep.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_BRepSweep.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_BRepSweep.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_BRepSweep.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_BRepSweep.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_BRepSweep.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_BRepSweep.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_BRepSweep.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_BRepSweep.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BRepSweep:
_BRepSweep.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.BRep
import OCC.Core.GeomAbs
import OCC.Core.Geom
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.Geom2d
import OCC.Core.Sweep
class BRepSweep_Builder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_BRepSweep.BRepSweep_Builder_Add)

    def __init__(self, *args):
        r"""
        * Creates a Builder.
        	:param aBuilder:
        	:type aBuilder: BRep_Builder
        	:rtype: None
        """
        _BRepSweep.BRepSweep_Builder_swiginit(self, _BRepSweep.new_BRepSweep_Builder(*args))
    Builder = _swig_new_instance_method(_BRepSweep.BRepSweep_Builder_Builder)
    MakeCompSolid = _swig_new_instance_method(_BRepSweep.BRepSweep_Builder_MakeCompSolid)
    MakeCompound = _swig_new_instance_method(_BRepSweep.BRepSweep_Builder_MakeCompound)
    MakeShell = _swig_new_instance_method(_BRepSweep.BRepSweep_Builder_MakeShell)
    MakeSolid = _swig_new_instance_method(_BRepSweep.BRepSweep_Builder_MakeSolid)
    MakeWire = _swig_new_instance_method(_BRepSweep.BRepSweep_Builder_MakeWire)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Builder

# Register BRepSweep_Builder in _BRepSweep:
_BRepSweep.BRepSweep_Builder_swigregister(BRepSweep_Builder)

class BRepSweep_Iterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""":rtype: None"""
        _BRepSweep.BRepSweep_Iterator_swiginit(self, _BRepSweep.new_BRepSweep_Iterator(*args))
    Init = _swig_new_instance_method(_BRepSweep.BRepSweep_Iterator_Init)
    More = _swig_new_instance_method(_BRepSweep.BRepSweep_Iterator_More)
    Next = _swig_new_instance_method(_BRepSweep.BRepSweep_Iterator_Next)
    Orientation = _swig_new_instance_method(_BRepSweep.BRepSweep_Iterator_Orientation)
    Value = _swig_new_instance_method(_BRepSweep.BRepSweep_Iterator_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Iterator

# Register BRepSweep_Iterator in _BRepSweep:
_BRepSweep.BRepSweep_Iterator_swigregister(BRepSweep_Iterator)

class BRepSweep_NumLinearRegularSweep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Closed = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_Closed)
    DirectSolid = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_DirectSolid)
    FirstShape = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_FirstShape)
    GDDShapeIsToAdd = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_GDDShapeIsToAdd)
    GGDShapeIsToAdd = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_GGDShapeIsToAdd)
    GenIsUsed = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_GenIsUsed)
    HasShape = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_HasShape)
    IsInvariant = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_IsInvariant)
    IsUsed = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_IsUsed)
    LastShape = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_LastShape)
    MakeEmptyDirectingEdge = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyDirectingEdge)
    MakeEmptyFace = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyFace)
    MakeEmptyGeneratingEdge = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyGeneratingEdge)
    MakeEmptyVertex = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyVertex)
    SeparatedWires = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_SeparatedWires)
    SetContinuity = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetContinuity)
    SetDirectingPCurve = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetDirectingPCurve)
    SetDirectingParameter = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetDirectingParameter)
    SetGeneratingPCurve = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetGeneratingPCurve)
    SetGeneratingParameter = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetGeneratingParameter)
    SetPCurve = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetPCurve)
    SetParameters = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_SetParameters)
    Shape = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_Shape)
    SplitShell = _swig_new_instance_method(_BRepSweep.BRepSweep_NumLinearRegularSweep_SplitShell)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_NumLinearRegularSweep

# Register BRepSweep_NumLinearRegularSweep in _BRepSweep:
_BRepSweep.BRepSweep_NumLinearRegularSweep_swigregister(BRepSweep_NumLinearRegularSweep)

class BRepSweep_Prism(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Builds the prism of base S and vector V. If C is true, S is copied. If Canonize is true then generated surfaces are attempted to be canonized in simple types
        	:param S:
        	:type S: TopoDS_Shape
        	:param V:
        	:type V: gp_Vec
        	:param Copy: default value is Standard_False
        	:type Copy: bool
        	:param Canonize: default value is Standard_True
        	:type Canonize: bool
        	:rtype: None* Builds a semi-infinite or an infinite prism of base S. If Copy is true S is copied. If Inf is true the prism is infinite, if Inf is false the prism is infinite in the direction D. If Canonize is true then generated surfaces are attempted to be canonized in simple types
        	:param S:
        	:type S: TopoDS_Shape
        	:param D:
        	:type D: gp_Dir
        	:param Inf: default value is Standard_True
        	:type Inf: bool
        	:param Copy: default value is Standard_False
        	:type Copy: bool
        	:param Canonize: default value is Standard_True
        	:type Canonize: bool
        	:rtype: None
        """
        _BRepSweep.BRepSweep_Prism_swiginit(self, _BRepSweep.new_BRepSweep_Prism(*args))
    FirstShape = _swig_new_instance_method(_BRepSweep.BRepSweep_Prism_FirstShape)
    GenIsUsed = _swig_new_instance_method(_BRepSweep.BRepSweep_Prism_GenIsUsed)
    IsUsed = _swig_new_instance_method(_BRepSweep.BRepSweep_Prism_IsUsed)
    LastShape = _swig_new_instance_method(_BRepSweep.BRepSweep_Prism_LastShape)
    Shape = _swig_new_instance_method(_BRepSweep.BRepSweep_Prism_Shape)
    Vec = _swig_new_instance_method(_BRepSweep.BRepSweep_Prism_Vec)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Prism

# Register BRepSweep_Prism in _BRepSweep:
_BRepSweep.BRepSweep_Prism_swigregister(BRepSweep_Prism)

class BRepSweep_Revol(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Angle = _swig_new_instance_method(_BRepSweep.BRepSweep_Revol_Angle)
    Axe = _swig_new_instance_method(_BRepSweep.BRepSweep_Revol_Axe)

    def __init__(self, *args):
        r"""
        * Builds the Revol of meridian S axis A and angle D. If C is true S is copied.
        	:param S:
        	:type S: TopoDS_Shape
        	:param A:
        	:type A: gp_Ax1
        	:param D:
        	:type D: float
        	:param C: default value is Standard_False
        	:type C: bool
        	:rtype: None* Builds the Revol of meridian S axis A and angle 2*Pi. If C is true S is copied.
        	:param S:
        	:type S: TopoDS_Shape
        	:param A:
        	:type A: gp_Ax1
        	:param C: default value is Standard_False
        	:type C: bool
        	:rtype: None
        """
        _BRepSweep.BRepSweep_Revol_swiginit(self, _BRepSweep.new_BRepSweep_Revol(*args))
    FirstShape = _swig_new_instance_method(_BRepSweep.BRepSweep_Revol_FirstShape)
    IsUsed = _swig_new_instance_method(_BRepSweep.BRepSweep_Revol_IsUsed)
    LastShape = _swig_new_instance_method(_BRepSweep.BRepSweep_Revol_LastShape)
    Shape = _swig_new_instance_method(_BRepSweep.BRepSweep_Revol_Shape)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Revol

# Register BRepSweep_Revol in _BRepSweep:
_BRepSweep.BRepSweep_Revol_swigregister(BRepSweep_Revol)

class BRepSweep_Tool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Initialize the tool with <aShape>. The IndexTool must prepare an indexation for all the subshapes of this shape.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:rtype: None
        """
        _BRepSweep.BRepSweep_Tool_swiginit(self, _BRepSweep.new_BRepSweep_Tool(*args))
    Index = _swig_new_instance_method(_BRepSweep.BRepSweep_Tool_Index)
    NbShapes = _swig_new_instance_method(_BRepSweep.BRepSweep_Tool_NbShapes)
    Orientation = _swig_new_instance_method(_BRepSweep.BRepSweep_Tool_Orientation)
    SetOrientation = _swig_new_instance_method(_BRepSweep.BRepSweep_Tool_SetOrientation)
    Shape = _swig_new_instance_method(_BRepSweep.BRepSweep_Tool_Shape)
    Type = _swig_new_instance_method(_BRepSweep.BRepSweep_Tool_Type)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Tool

# Register BRepSweep_Tool in _BRepSweep:
_BRepSweep.BRepSweep_Tool_swigregister(BRepSweep_Tool)

class BRepSweep_Trsf(BRepSweep_NumLinearRegularSweep):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Init = _swig_new_instance_method(_BRepSweep.BRepSweep_Trsf_Init)
    Process = _swig_new_instance_method(_BRepSweep.BRepSweep_Trsf_Process)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Trsf

# Register BRepSweep_Trsf in _BRepSweep:
_BRepSweep.BRepSweep_Trsf_swigregister(BRepSweep_Trsf)

class BRepSweep_Rotation(BRepSweep_Trsf):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Angle = _swig_new_instance_method(_BRepSweep.BRepSweep_Rotation_Angle)
    Axe = _swig_new_instance_method(_BRepSweep.BRepSweep_Rotation_Axe)

    def __init__(self, *args):
        r"""
        * Creates a topology by rotating <S> around A with the angle D.
        	:param S:
        	:type S: TopoDS_Shape
        	:param N:
        	:type N: Sweep_NumShape
        	:param L:
        	:type L: TopLoc_Location
        	:param A:
        	:type A: gp_Ax1
        	:param D:
        	:type D: float
        	:param C:
        	:type C: bool
        	:rtype: None
        """
        _BRepSweep.BRepSweep_Rotation_swiginit(self, _BRepSweep.new_BRepSweep_Rotation(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Rotation

# Register BRepSweep_Rotation in _BRepSweep:
_BRepSweep.BRepSweep_Rotation_swigregister(BRepSweep_Rotation)

class BRepSweep_Translation(BRepSweep_Trsf):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates a topology by translating <S> with the vector <V>. If C is true S Sucomponents are copied. If Canonize is true then generated surfaces are attempted to be canonized in simple types
        	:param S:
        	:type S: TopoDS_Shape
        	:param N:
        	:type N: Sweep_NumShape
        	:param L:
        	:type L: TopLoc_Location
        	:param V:
        	:type V: gp_Vec
        	:param C:
        	:type C: bool
        	:param Canonize: default value is Standard_True
        	:type Canonize: bool
        	:rtype: None
        """
        _BRepSweep.BRepSweep_Translation_swiginit(self, _BRepSweep.new_BRepSweep_Translation(*args))
    Vec = _swig_new_instance_method(_BRepSweep.BRepSweep_Translation_Vec)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Translation

# Register BRepSweep_Translation in _BRepSweep:
_BRepSweep.BRepSweep_Translation_swigregister(BRepSweep_Translation)



