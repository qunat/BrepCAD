# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
VrmlData module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_vrmldata.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VrmlData
else:
    import _VrmlData

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _VrmlData.SWIG_PyInstanceMethod_New
_swig_new_static_method = _VrmlData.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VrmlData.delete_SwigPyIterator
    value = _swig_new_instance_method(_VrmlData.SwigPyIterator_value)
    incr = _swig_new_instance_method(_VrmlData.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_VrmlData.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_VrmlData.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_VrmlData.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_VrmlData.SwigPyIterator_copy)
    next = _swig_new_instance_method(_VrmlData.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_VrmlData.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_VrmlData.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_VrmlData.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_VrmlData.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_VrmlData.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_VrmlData.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_VrmlData.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_VrmlData.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_VrmlData.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VrmlData:
_VrmlData.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TCollection
import OCC.Core.gp
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.TDocStd
import OCC.Core.TDF
import OCC.Core.TColStd
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.Storage
import OCC.Core.Bnd
import OCC.Core.TColgp
import OCC.Core.BVH
import OCC.Core.Quantity
VrmlData_StatusOK = _VrmlData.VrmlData_StatusOK
VrmlData_EmptyData = _VrmlData.VrmlData_EmptyData
VrmlData_UnrecoverableError = _VrmlData.VrmlData_UnrecoverableError
VrmlData_GeneralError = _VrmlData.VrmlData_GeneralError
VrmlData_EndOfFile = _VrmlData.VrmlData_EndOfFile
VrmlData_NotVrmlFile = _VrmlData.VrmlData_NotVrmlFile
VrmlData_CannotOpenFile = _VrmlData.VrmlData_CannotOpenFile
VrmlData_VrmlFormatError = _VrmlData.VrmlData_VrmlFormatError
VrmlData_NumericInputError = _VrmlData.VrmlData_NumericInputError
VrmlData_IrrelevantNumber = _VrmlData.VrmlData_IrrelevantNumber
VrmlData_BooleanInputError = _VrmlData.VrmlData_BooleanInputError
VrmlData_StringInputError = _VrmlData.VrmlData_StringInputError
VrmlData_NodeNameUnknown = _VrmlData.VrmlData_NodeNameUnknown
VrmlData_NonPositiveSize = _VrmlData.VrmlData_NonPositiveSize
VrmlData_ReadUnknownNode = _VrmlData.VrmlData_ReadUnknownNode
VrmlData_NonSupportedFeature = _VrmlData.VrmlData_NonSupportedFeature
VrmlData_OutputStreamUndefined = _VrmlData.VrmlData_OutputStreamUndefined
VrmlData_NotImplemented = _VrmlData.VrmlData_NotImplemented
Handle_VrmlData_Node_Create = _VrmlData.Handle_VrmlData_Node_Create
Handle_VrmlData_Node_DownCast = _VrmlData.Handle_VrmlData_Node_DownCast
Handle_VrmlData_Node_IsNull = _VrmlData.Handle_VrmlData_Node_IsNull
Handle_VrmlData_Appearance_Create = _VrmlData.Handle_VrmlData_Appearance_Create
Handle_VrmlData_Appearance_DownCast = _VrmlData.Handle_VrmlData_Appearance_DownCast
Handle_VrmlData_Appearance_IsNull = _VrmlData.Handle_VrmlData_Appearance_IsNull
Handle_VrmlData_Geometry_Create = _VrmlData.Handle_VrmlData_Geometry_Create
Handle_VrmlData_Geometry_DownCast = _VrmlData.Handle_VrmlData_Geometry_DownCast
Handle_VrmlData_Geometry_IsNull = _VrmlData.Handle_VrmlData_Geometry_IsNull
Handle_VrmlData_Group_Create = _VrmlData.Handle_VrmlData_Group_Create
Handle_VrmlData_Group_DownCast = _VrmlData.Handle_VrmlData_Group_DownCast
Handle_VrmlData_Group_IsNull = _VrmlData.Handle_VrmlData_Group_IsNull
Handle_VrmlData_Material_Create = _VrmlData.Handle_VrmlData_Material_Create
Handle_VrmlData_Material_DownCast = _VrmlData.Handle_VrmlData_Material_DownCast
Handle_VrmlData_Material_IsNull = _VrmlData.Handle_VrmlData_Material_IsNull
Handle_VrmlData_ShapeNode_Create = _VrmlData.Handle_VrmlData_ShapeNode_Create
Handle_VrmlData_ShapeNode_DownCast = _VrmlData.Handle_VrmlData_ShapeNode_DownCast
Handle_VrmlData_ShapeNode_IsNull = _VrmlData.Handle_VrmlData_ShapeNode_IsNull
Handle_VrmlData_TextureCoordinate_Create = _VrmlData.Handle_VrmlData_TextureCoordinate_Create
Handle_VrmlData_TextureCoordinate_DownCast = _VrmlData.Handle_VrmlData_TextureCoordinate_DownCast
Handle_VrmlData_TextureCoordinate_IsNull = _VrmlData.Handle_VrmlData_TextureCoordinate_IsNull
Handle_VrmlData_UnknownNode_Create = _VrmlData.Handle_VrmlData_UnknownNode_Create
Handle_VrmlData_UnknownNode_DownCast = _VrmlData.Handle_VrmlData_UnknownNode_DownCast
Handle_VrmlData_UnknownNode_IsNull = _VrmlData.Handle_VrmlData_UnknownNode_IsNull
Handle_VrmlData_WorldInfo_Create = _VrmlData.Handle_VrmlData_WorldInfo_Create
Handle_VrmlData_WorldInfo_DownCast = _VrmlData.Handle_VrmlData_WorldInfo_DownCast
Handle_VrmlData_WorldInfo_IsNull = _VrmlData.Handle_VrmlData_WorldInfo_IsNull
Handle_VrmlData_Box_Create = _VrmlData.Handle_VrmlData_Box_Create
Handle_VrmlData_Box_DownCast = _VrmlData.Handle_VrmlData_Box_DownCast
Handle_VrmlData_Box_IsNull = _VrmlData.Handle_VrmlData_Box_IsNull
Handle_VrmlData_Color_Create = _VrmlData.Handle_VrmlData_Color_Create
Handle_VrmlData_Color_DownCast = _VrmlData.Handle_VrmlData_Color_DownCast
Handle_VrmlData_Color_IsNull = _VrmlData.Handle_VrmlData_Color_IsNull
Handle_VrmlData_Cone_Create = _VrmlData.Handle_VrmlData_Cone_Create
Handle_VrmlData_Cone_DownCast = _VrmlData.Handle_VrmlData_Cone_DownCast
Handle_VrmlData_Cone_IsNull = _VrmlData.Handle_VrmlData_Cone_IsNull
Handle_VrmlData_Coordinate_Create = _VrmlData.Handle_VrmlData_Coordinate_Create
Handle_VrmlData_Coordinate_DownCast = _VrmlData.Handle_VrmlData_Coordinate_DownCast
Handle_VrmlData_Coordinate_IsNull = _VrmlData.Handle_VrmlData_Coordinate_IsNull
Handle_VrmlData_Cylinder_Create = _VrmlData.Handle_VrmlData_Cylinder_Create
Handle_VrmlData_Cylinder_DownCast = _VrmlData.Handle_VrmlData_Cylinder_DownCast
Handle_VrmlData_Cylinder_IsNull = _VrmlData.Handle_VrmlData_Cylinder_IsNull
Handle_VrmlData_ImageTexture_Create = _VrmlData.Handle_VrmlData_ImageTexture_Create
Handle_VrmlData_ImageTexture_DownCast = _VrmlData.Handle_VrmlData_ImageTexture_DownCast
Handle_VrmlData_ImageTexture_IsNull = _VrmlData.Handle_VrmlData_ImageTexture_IsNull
Handle_VrmlData_IndexedLineSet_Create = _VrmlData.Handle_VrmlData_IndexedLineSet_Create
Handle_VrmlData_IndexedLineSet_DownCast = _VrmlData.Handle_VrmlData_IndexedLineSet_DownCast
Handle_VrmlData_IndexedLineSet_IsNull = _VrmlData.Handle_VrmlData_IndexedLineSet_IsNull
Handle_VrmlData_Normal_Create = _VrmlData.Handle_VrmlData_Normal_Create
Handle_VrmlData_Normal_DownCast = _VrmlData.Handle_VrmlData_Normal_DownCast
Handle_VrmlData_Normal_IsNull = _VrmlData.Handle_VrmlData_Normal_IsNull
Handle_VrmlData_Sphere_Create = _VrmlData.Handle_VrmlData_Sphere_Create
Handle_VrmlData_Sphere_DownCast = _VrmlData.Handle_VrmlData_Sphere_DownCast
Handle_VrmlData_Sphere_IsNull = _VrmlData.Handle_VrmlData_Sphere_IsNull
Handle_VrmlData_IndexedFaceSet_Create = _VrmlData.Handle_VrmlData_IndexedFaceSet_Create
Handle_VrmlData_IndexedFaceSet_DownCast = _VrmlData.Handle_VrmlData_IndexedFaceSet_DownCast
Handle_VrmlData_IndexedFaceSet_IsNull = _VrmlData.Handle_VrmlData_IndexedFaceSet_IsNull
class VrmlData_DataMapOfShapeAppearance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_VrmlData.VrmlData_DataMapOfShapeAppearance_begin)
    end = _swig_new_instance_method(_VrmlData.VrmlData_DataMapOfShapeAppearance_end)
    cbegin = _swig_new_instance_method(_VrmlData.VrmlData_DataMapOfShapeAppearance_cbegin)
    cend = _swig_new_instance_method(_VrmlData.VrmlData_DataMapOfShapeAppearance_cend)

    def __init__(self, *args):
        _VrmlData.VrmlData_DataMapOfShapeAppearance_swiginit(self, _VrmlData.new_VrmlData_DataMapOfShapeAppearance(*args))
    Exchange = _swig_new_instance_method(_VrmlData.VrmlData_DataMapOfShapeAppearance_Exchange)
    Assign = _swig_new_instance_method(_VrmlData.VrmlData_DataMapOfShapeAppearance_Assign)
    Set = _swig_new_instance_method(_VrmlData.VrmlData_DataMapOfShapeAppearance_Set)
    ReSize = _swig_new_instance_method(_VrmlData.VrmlData_DataMapOfShapeAppearance_ReSize)
    Bind = _swig_new_instance_method(_VrmlData.VrmlData_DataMapOfShapeAppearance_Bind)
    Bound = _swig_new_instance_method(_VrmlData.VrmlData_DataMapOfShapeAppearance_Bound)
    IsBound = _swig_new_instance_method(_VrmlData.VrmlData_DataMapOfShapeAppearance_IsBound)
    UnBind = _swig_new_instance_method(_VrmlData.VrmlData_DataMapOfShapeAppearance_UnBind)
    Seek = _swig_new_instance_method(_VrmlData.VrmlData_DataMapOfShapeAppearance_Seek)
    Find = _swig_new_instance_method(_VrmlData.VrmlData_DataMapOfShapeAppearance_Find)
    ChangeSeek = _swig_new_instance_method(_VrmlData.VrmlData_DataMapOfShapeAppearance_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_VrmlData.VrmlData_DataMapOfShapeAppearance_ChangeFind)
    __call__ = _swig_new_instance_method(_VrmlData.VrmlData_DataMapOfShapeAppearance___call__)
    Clear = _swig_new_instance_method(_VrmlData.VrmlData_DataMapOfShapeAppearance_Clear)
    __swig_destroy__ = _VrmlData.delete_VrmlData_DataMapOfShapeAppearance
    Size = _swig_new_instance_method(_VrmlData.VrmlData_DataMapOfShapeAppearance_Size)

# Register VrmlData_DataMapOfShapeAppearance in _VrmlData:
_VrmlData.VrmlData_DataMapOfShapeAppearance_swigregister(VrmlData_DataMapOfShapeAppearance)

class VrmlData_MapOfNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cbegin = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_cbegin)
    cend = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_cend)

    def __init__(self, *args):
        _VrmlData.VrmlData_MapOfNode_swiginit(self, _VrmlData.new_VrmlData_MapOfNode(*args))
    Exchange = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_Exchange)
    Assign = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_Assign)
    Set = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_Set)
    ReSize = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_ReSize)
    Add = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_Add)
    Added = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_Added)
    Remove = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_Remove)
    Clear = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_Clear)
    __swig_destroy__ = _VrmlData.delete_VrmlData_MapOfNode
    Size = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_Size)
    IsEqual = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_IsEqual)
    Contains = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_Contains)
    Union = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_Union)
    Unite = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_Unite)
    HasIntersection = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_HasIntersection)
    Intersection = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_Intersection)
    Intersect = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_Intersect)
    Subtraction = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_Subtraction)
    Subtract = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_Subtract)
    Difference = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_Difference)
    Differ = _swig_new_instance_method(_VrmlData.VrmlData_MapOfNode_Differ)

# Register VrmlData_MapOfNode in _VrmlData:
_VrmlData.VrmlData_MapOfNode_swigregister(VrmlData_MapOfNode)

class VrmlData_ListOfNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_VrmlData.VrmlData_ListOfNode_begin)
    end = _swig_new_instance_method(_VrmlData.VrmlData_ListOfNode_end)
    cbegin = _swig_new_instance_method(_VrmlData.VrmlData_ListOfNode_cbegin)
    cend = _swig_new_instance_method(_VrmlData.VrmlData_ListOfNode_cend)

    def __init__(self, *args):
        _VrmlData.VrmlData_ListOfNode_swiginit(self, _VrmlData.new_VrmlData_ListOfNode(*args))
    Size = _swig_new_instance_method(_VrmlData.VrmlData_ListOfNode_Size)
    Assign = _swig_new_instance_method(_VrmlData.VrmlData_ListOfNode_Assign)
    Set = _swig_new_instance_method(_VrmlData.VrmlData_ListOfNode_Set)
    Clear = _swig_new_instance_method(_VrmlData.VrmlData_ListOfNode_Clear)
    First = _swig_new_instance_method(_VrmlData.VrmlData_ListOfNode_First)
    Last = _swig_new_instance_method(_VrmlData.VrmlData_ListOfNode_Last)
    Append = _swig_new_instance_method(_VrmlData.VrmlData_ListOfNode_Append)
    Prepend = _swig_new_instance_method(_VrmlData.VrmlData_ListOfNode_Prepend)
    RemoveFirst = _swig_new_instance_method(_VrmlData.VrmlData_ListOfNode_RemoveFirst)
    Remove = _swig_new_instance_method(_VrmlData.VrmlData_ListOfNode_Remove)
    InsertBefore = _swig_new_instance_method(_VrmlData.VrmlData_ListOfNode_InsertBefore)
    InsertAfter = _swig_new_instance_method(_VrmlData.VrmlData_ListOfNode_InsertAfter)
    Reverse = _swig_new_instance_method(_VrmlData.VrmlData_ListOfNode_Reverse)
    __swig_destroy__ = _VrmlData.delete_VrmlData_ListOfNode

# Register VrmlData_ListOfNode in _VrmlData:
_VrmlData.VrmlData_ListOfNode_swigregister(VrmlData_ListOfNode)

class VrmlData_Node(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_VrmlData.VrmlData_Node_Clone)
    GlobalIndent = _swig_new_static_method(_VrmlData.VrmlData_Node_GlobalIndent)
    IsDefault = _swig_new_instance_method(_VrmlData.VrmlData_Node_IsDefault)
    Name = _swig_new_instance_method(_VrmlData.VrmlData_Node_Name)
    OK = _swig_new_static_method(_VrmlData.VrmlData_Node_OK)
    Read = _swig_new_instance_method(_VrmlData.VrmlData_Node_Read)
    ReadBoolean = _swig_new_static_method(_VrmlData.VrmlData_Node_ReadBoolean)
    ReadInteger = _swig_new_static_method(_VrmlData.VrmlData_Node_ReadInteger)
    ReadMultiString = _swig_new_static_method(_VrmlData.VrmlData_Node_ReadMultiString)
    ReadNode = _swig_new_instance_method(_VrmlData.VrmlData_Node_ReadNode)
    ReadString = _swig_new_static_method(_VrmlData.VrmlData_Node_ReadString)
    Scene = _swig_new_instance_method(_VrmlData.VrmlData_Node_Scene)
    Write = _swig_new_instance_method(_VrmlData.VrmlData_Node_Write)
    WriteClosing = _swig_new_instance_method(_VrmlData.VrmlData_Node_WriteClosing)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Node_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Node

# Register VrmlData_Node in _VrmlData:
_VrmlData.VrmlData_Node_swigregister(VrmlData_Node)
VrmlData_Node_GlobalIndent = _VrmlData.VrmlData_Node_GlobalIndent
VrmlData_Node_OK = _VrmlData.VrmlData_Node_OK
VrmlData_Node_ReadBoolean = _VrmlData.VrmlData_Node_ReadBoolean
VrmlData_Node_ReadInteger = _VrmlData.VrmlData_Node_ReadInteger
VrmlData_Node_ReadMultiString = _VrmlData.VrmlData_Node_ReadMultiString
VrmlData_Node_ReadString = _VrmlData.VrmlData_Node_ReadString

class VrmlData_Scene(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddNode = _swig_new_instance_method(_VrmlData.VrmlData_Scene_AddNode)
    Allocator = _swig_new_instance_method(_VrmlData.VrmlData_Scene_Allocator)
    DumpToString = _swig_new_instance_method(_VrmlData.VrmlData_Scene_DumpToString)
    FindNode = _swig_new_instance_method(_VrmlData.VrmlData_Scene_FindNode)
    GetIterator = _swig_new_instance_method(_VrmlData.VrmlData_Scene_GetIterator)
    GetLineError = _swig_new_instance_method(_VrmlData.VrmlData_Scene_GetLineError)
    GetShape = _swig_new_instance_method(_VrmlData.VrmlData_Scene_GetShape)
    IsDummyWrite = _swig_new_instance_method(_VrmlData.VrmlData_Scene_IsDummyWrite)
    NamedNodesIterator = _swig_new_instance_method(_VrmlData.VrmlData_Scene_NamedNodesIterator)
    ReadArrIndex = _swig_new_instance_method(_VrmlData.VrmlData_Scene_ReadArrIndex)
    ReadLine = _swig_new_static_method(_VrmlData.VrmlData_Scene_ReadLine)
    ReadReal = _swig_new_instance_method(_VrmlData.VrmlData_Scene_ReadReal)
    ReadWord = _swig_new_static_method(_VrmlData.VrmlData_Scene_ReadWord)
    ReadXY = _swig_new_instance_method(_VrmlData.VrmlData_Scene_ReadXY)
    ReadXYZ = _swig_new_instance_method(_VrmlData.VrmlData_Scene_ReadXYZ)
    SetIndent = _swig_new_instance_method(_VrmlData.VrmlData_Scene_SetIndent)
    SetLinearScale = _swig_new_instance_method(_VrmlData.VrmlData_Scene_SetLinearScale)
    SetVrmlDir = _swig_new_instance_method(_VrmlData.VrmlData_Scene_SetVrmlDir)
    Status = _swig_new_instance_method(_VrmlData.VrmlData_Scene_Status)

    def __init__(self, *args):
        r"""
        * /** * Constructor. */
        	:param &: default value is 0L
        	:type &: NCollection_IncAllocator
        	:rtype: None
        """
        _VrmlData.VrmlData_Scene_swiginit(self, _VrmlData.new_VrmlData_Scene(*args))
    VrmlDirIterator = _swig_new_instance_method(_VrmlData.VrmlData_Scene_VrmlDirIterator)
    WorldInfo = _swig_new_instance_method(_VrmlData.VrmlData_Scene_WorldInfo)
    WriteArrIndex = _swig_new_instance_method(_VrmlData.VrmlData_Scene_WriteArrIndex)
    WriteLine = _swig_new_instance_method(_VrmlData.VrmlData_Scene_WriteLine)
    WriteNode = _swig_new_instance_method(_VrmlData.VrmlData_Scene_WriteNode)
    WriteXYZ = _swig_new_instance_method(_VrmlData.VrmlData_Scene_WriteXYZ)

    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Scene

# Register VrmlData_Scene in _VrmlData:
_VrmlData.VrmlData_Scene_swigregister(VrmlData_Scene)
VrmlData_Scene_ReadLine = _VrmlData.VrmlData_Scene_ReadLine
VrmlData_Scene_ReadWord = _VrmlData.VrmlData_Scene_ReadWord

class VrmlData_ShapeConvert(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddShape = _swig_new_instance_method(_VrmlData.VrmlData_ShapeConvert_AddShape)
    Convert = _swig_new_instance_method(_VrmlData.VrmlData_ShapeConvert_Convert)
    ConvertDocument = _swig_new_instance_method(_VrmlData.VrmlData_ShapeConvert_ConvertDocument)

    def __init__(self, *args):
        r"""
        * /** * Constructor. * @param theScene * Scene receiving all Vrml data. * @param theScale * Scale factor, considering that VRML standard specifies coordinates in * meters. So if your data are in mm, you should provide theScale=0.001 */
        	:param theScene:
        	:type theScene: VrmlData_Scene
        	:param theScale: default value is 1
        	:type theScale: float
        	:rtype: None
        """
        _VrmlData.VrmlData_ShapeConvert_swiginit(self, _VrmlData.new_VrmlData_ShapeConvert(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_ShapeConvert

# Register VrmlData_ShapeConvert in _VrmlData:
_VrmlData.VrmlData_ShapeConvert_swigregister(VrmlData_ShapeConvert)

class VrmlData_Appearance(VrmlData_Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Material = _swig_new_instance_method(_VrmlData.VrmlData_Appearance_Material)
    SetMaterial = _swig_new_instance_method(_VrmlData.VrmlData_Appearance_SetMaterial)
    SetTexture = _swig_new_instance_method(_VrmlData.VrmlData_Appearance_SetTexture)
    SetTextureTransform = _swig_new_instance_method(_VrmlData.VrmlData_Appearance_SetTextureTransform)
    Texture = _swig_new_instance_method(_VrmlData.VrmlData_Appearance_Texture)
    TextureTransform = _swig_new_instance_method(_VrmlData.VrmlData_Appearance_TextureTransform)

    def __init__(self, *args):
        r"""
        * /** * Empty constructor */
        	:rtype: None* /** * Constructor */
        	:param theScene:
        	:type theScene: VrmlData_Scene
        	:param theName:
        	:type theName: char *
        	:rtype: None
        """
        _VrmlData.VrmlData_Appearance_swiginit(self, _VrmlData.new_VrmlData_Appearance(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Appearance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Appearance

# Register VrmlData_Appearance in _VrmlData:
_VrmlData.VrmlData_Appearance_swigregister(VrmlData_Appearance)

class VrmlData_Geometry(VrmlData_Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    TShape = _swig_new_instance_method(_VrmlData.VrmlData_Geometry_TShape)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Geometry_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Geometry

# Register VrmlData_Geometry in _VrmlData:
_VrmlData.VrmlData_Geometry_swigregister(VrmlData_Geometry)

class VrmlData_Group(VrmlData_Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddNode = _swig_new_instance_method(_VrmlData.VrmlData_Group_AddNode)
    Box = _swig_new_instance_method(_VrmlData.VrmlData_Group_Box)
    FindNode = _swig_new_instance_method(_VrmlData.VrmlData_Group_FindNode)
    GetTransform = _swig_new_instance_method(_VrmlData.VrmlData_Group_GetTransform)
    IsTransform = _swig_new_instance_method(_VrmlData.VrmlData_Group_IsTransform)
    NodeIterator = _swig_new_instance_method(_VrmlData.VrmlData_Group_NodeIterator)
    RemoveNode = _swig_new_instance_method(_VrmlData.VrmlData_Group_RemoveNode)
    SetBox = _swig_new_instance_method(_VrmlData.VrmlData_Group_SetBox)
    SetTransform = _swig_new_instance_method(_VrmlData.VrmlData_Group_SetTransform)
    Shape = _swig_new_instance_method(_VrmlData.VrmlData_Group_Shape)

    def __init__(self, *args):
        r"""
        * /** * Empty constructor. * @param isTransform * True if the group of type Transform is defined * @param theAlloc * Allocator used for the list of children */
        	:param isTransform: default value is Standard_False
        	:type isTransform: bool
        	:rtype: None* /** * Constructor. * @param theName * Name of the Group node * @param isTransform * True if the group of type Transform is defined * @param theAlloc * Allocator used for the list of children */
        	:param theScene:
        	:type theScene: VrmlData_Scene
        	:param theName:
        	:type theName: char *
        	:param isTransform: default value is Standard_False
        	:type isTransform: bool
        	:rtype: None
        """
        _VrmlData.VrmlData_Group_swiginit(self, _VrmlData.new_VrmlData_Group(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Group_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Group

# Register VrmlData_Group in _VrmlData:
_VrmlData.VrmlData_Group_swigregister(VrmlData_Group)

class VrmlData_Material(VrmlData_Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AmbientIntensity = _swig_new_instance_method(_VrmlData.VrmlData_Material_AmbientIntensity)
    DiffuseColor = _swig_new_instance_method(_VrmlData.VrmlData_Material_DiffuseColor)
    EmissiveColor = _swig_new_instance_method(_VrmlData.VrmlData_Material_EmissiveColor)
    SetAmbientIntensity = _swig_new_instance_method(_VrmlData.VrmlData_Material_SetAmbientIntensity)
    SetDiffuseColor = _swig_new_instance_method(_VrmlData.VrmlData_Material_SetDiffuseColor)
    SetEmissiveColor = _swig_new_instance_method(_VrmlData.VrmlData_Material_SetEmissiveColor)
    SetShininess = _swig_new_instance_method(_VrmlData.VrmlData_Material_SetShininess)
    SetSpecularColor = _swig_new_instance_method(_VrmlData.VrmlData_Material_SetSpecularColor)
    SetTransparency = _swig_new_instance_method(_VrmlData.VrmlData_Material_SetTransparency)
    Shininess = _swig_new_instance_method(_VrmlData.VrmlData_Material_Shininess)
    SpecularColor = _swig_new_instance_method(_VrmlData.VrmlData_Material_SpecularColor)
    Transparency = _swig_new_instance_method(_VrmlData.VrmlData_Material_Transparency)

    def __init__(self, *args):
        r"""
        * /** * Empty constructor */
        	:rtype: None* /** * Constructor */
        	:param theScene:
        	:type theScene: VrmlData_Scene
        	:param theName:
        	:type theName: char *
        	:param theAmbientIntensity: default value is -1
        	:type theAmbientIntensity: float
        	:param theShininess: default value is -1
        	:type theShininess: float
        	:param theTransparency: default value is -1
        	:type theTransparency: float
        	:rtype: None
        """
        _VrmlData.VrmlData_Material_swiginit(self, _VrmlData.new_VrmlData_Material(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Material_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Material

# Register VrmlData_Material in _VrmlData:
_VrmlData.VrmlData_Material_swigregister(VrmlData_Material)

class VrmlData_ShapeNode(VrmlData_Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Appearance = _swig_new_instance_method(_VrmlData.VrmlData_ShapeNode_Appearance)
    Geometry = _swig_new_instance_method(_VrmlData.VrmlData_ShapeNode_Geometry)
    SetAppearance = _swig_new_instance_method(_VrmlData.VrmlData_ShapeNode_SetAppearance)
    SetGeometry = _swig_new_instance_method(_VrmlData.VrmlData_ShapeNode_SetGeometry)

    def __init__(self, *args):
        r"""
        * /** * Empty constructor */
        	:rtype: None* /** * Constructor */
        	:param theScene:
        	:type theScene: VrmlData_Scene
        	:param theName:
        	:type theName: char *
        	:rtype: None
        """
        _VrmlData.VrmlData_ShapeNode_swiginit(self, _VrmlData.new_VrmlData_ShapeNode(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_ShapeNode_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_ShapeNode

# Register VrmlData_ShapeNode in _VrmlData:
_VrmlData.VrmlData_ShapeNode_swigregister(VrmlData_ShapeNode)

class VrmlData_TextureCoordinate(VrmlData_Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AllocateValues = _swig_new_instance_method(_VrmlData.VrmlData_TextureCoordinate_AllocateValues)
    Length = _swig_new_instance_method(_VrmlData.VrmlData_TextureCoordinate_Length)
    Points = _swig_new_instance_method(_VrmlData.VrmlData_TextureCoordinate_Points)
    SetPoints = _swig_new_instance_method(_VrmlData.VrmlData_TextureCoordinate_SetPoints)

    def __init__(self, *args):
        r"""
        * /** * Empty constructor */
        	:rtype: None* /** * Constructor */
        	:param theScene:
        	:type theScene: VrmlData_Scene
        	:param theName:
        	:type theName: char *
        	:param nPoints: default value is 0
        	:type nPoints: size_t
        	:param arrPoints: default value is 0L
        	:type arrPoints: gp_XY *
        	:rtype: None
        """
        _VrmlData.VrmlData_TextureCoordinate_swiginit(self, _VrmlData.new_VrmlData_TextureCoordinate(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_TextureCoordinate_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_TextureCoordinate

# Register VrmlData_TextureCoordinate in _VrmlData:
_VrmlData.VrmlData_TextureCoordinate_swigregister(VrmlData_TextureCoordinate)

class VrmlData_UnknownNode(VrmlData_Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GetTitle = _swig_new_instance_method(_VrmlData.VrmlData_UnknownNode_GetTitle)

    def __init__(self, *args):
        r"""
        * /** * Empty Constructor. */
        	:rtype: None* /** * Constructor. */
        	:param theScene:
        	:type theScene: VrmlData_Scene
        	:param theName: default value is 0L
        	:type theName: char *
        	:param theTitle: default value is 0L
        	:type theTitle: char *
        	:rtype: None
        """
        _VrmlData.VrmlData_UnknownNode_swiginit(self, _VrmlData.new_VrmlData_UnknownNode(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_UnknownNode_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_UnknownNode

# Register VrmlData_UnknownNode in _VrmlData:
_VrmlData.VrmlData_UnknownNode_swigregister(VrmlData_UnknownNode)

class VrmlData_WorldInfo(VrmlData_Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddInfo = _swig_new_instance_method(_VrmlData.VrmlData_WorldInfo_AddInfo)
    InfoIterator = _swig_new_instance_method(_VrmlData.VrmlData_WorldInfo_InfoIterator)
    SetTitle = _swig_new_instance_method(_VrmlData.VrmlData_WorldInfo_SetTitle)
    Title = _swig_new_instance_method(_VrmlData.VrmlData_WorldInfo_Title)

    def __init__(self, *args):
        r"""
        * /** * Empty Constructor. */
        	:rtype: None* /** * Constructor. */
        	:param theScene:
        	:type theScene: VrmlData_Scene
        	:param theName: default value is 0L
        	:type theName: char *
        	:param theTitle: default value is 0L
        	:type theTitle: char *
        	:rtype: None
        """
        _VrmlData.VrmlData_WorldInfo_swiginit(self, _VrmlData.new_VrmlData_WorldInfo(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_WorldInfo_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_WorldInfo

# Register VrmlData_WorldInfo in _VrmlData:
_VrmlData.VrmlData_WorldInfo_swigregister(VrmlData_WorldInfo)

class VrmlData_Box(VrmlData_Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SetSize = _swig_new_instance_method(_VrmlData.VrmlData_Box_SetSize)
    Size = _swig_new_instance_method(_VrmlData.VrmlData_Box_Size)

    def __init__(self, *args):
        r"""
        * /** * Empty constructor */
        	:rtype: None* /** * Constructor */
        	:param theScene:
        	:type theScene: VrmlData_Scene
        	:param theName:
        	:type theName: char *
        	:param sizeX: default value is 2
        	:type sizeX: float
        	:param sizeY: default value is 2
        	:type sizeY: float
        	:param sizeZ: default value is 2
        	:type sizeZ: float
        	:rtype: None
        """
        _VrmlData.VrmlData_Box_swiginit(self, _VrmlData.new_VrmlData_Box(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Box_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Box

# Register VrmlData_Box in _VrmlData:
_VrmlData.VrmlData_Box_swigregister(VrmlData_Box)

class VrmlData_Color(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_VrmlData.VrmlData_Color_Clone)
    Color = _swig_new_instance_method(_VrmlData.VrmlData_Color_Color)
    Read = _swig_new_instance_method(_VrmlData.VrmlData_Color_Read)
    SetColors = _swig_new_instance_method(_VrmlData.VrmlData_Color_SetColors)

    def __init__(self, *args):
        r"""
        * /** * Empty constructor. */
        	:rtype: None* /** * Constructor. */
        	:param theScene:
        	:type theScene: VrmlData_Scene
        	:param theName:
        	:type theName: char *
        	:param nColors: default value is 0
        	:type nColors: size_t
        	:param arrColors: default value is 0L
        	:type arrColors: gp_XYZ *
        	:rtype: None
        """
        _VrmlData.VrmlData_Color_swiginit(self, _VrmlData.new_VrmlData_Color(*args))
    Write = _swig_new_instance_method(_VrmlData.VrmlData_Color_Write)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Color_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Color

# Register VrmlData_Color in _VrmlData:
_VrmlData.VrmlData_Color_swigregister(VrmlData_Color)

class VrmlData_Cone(VrmlData_Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BottomRadius = _swig_new_instance_method(_VrmlData.VrmlData_Cone_BottomRadius)
    HasBottom = _swig_new_instance_method(_VrmlData.VrmlData_Cone_HasBottom)
    HasSide = _swig_new_instance_method(_VrmlData.VrmlData_Cone_HasSide)
    Height = _swig_new_instance_method(_VrmlData.VrmlData_Cone_Height)
    SetBottomRadius = _swig_new_instance_method(_VrmlData.VrmlData_Cone_SetBottomRadius)
    SetFaces = _swig_new_instance_method(_VrmlData.VrmlData_Cone_SetFaces)
    SetHeight = _swig_new_instance_method(_VrmlData.VrmlData_Cone_SetHeight)

    def __init__(self, *args):
        r"""
        * /** * Empty constructor */
        	:rtype: None* /** * Constructor */
        	:param theScene:
        	:type theScene: VrmlData_Scene
        	:param theName:
        	:type theName: char *
        	:param theBottomRadius: default value is 1
        	:type theBottomRadius: float
        	:param theHeight: default value is 2
        	:type theHeight: float
        	:rtype: None
        """
        _VrmlData.VrmlData_Cone_swiginit(self, _VrmlData.new_VrmlData_Cone(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Cone_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Cone

# Register VrmlData_Cone in _VrmlData:
_VrmlData.VrmlData_Cone_swigregister(VrmlData_Cone)

class VrmlData_Coordinate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_VrmlData.VrmlData_Coordinate_Clone)
    Coordinate = _swig_new_instance_method(_VrmlData.VrmlData_Coordinate_Coordinate)
    Read = _swig_new_instance_method(_VrmlData.VrmlData_Coordinate_Read)

    def __init__(self, *args):
        r"""
        * /** * Empty Constructor */
        	:rtype: None* /** * Constructor */
        	:param theScene:
        	:type theScene: VrmlData_Scene
        	:param theName:
        	:type theName: char *
        	:param nPoints: default value is 0
        	:type nPoints: size_t
        	:param arrPoints: default value is 0L
        	:type arrPoints: gp_XYZ *
        	:rtype: None
        """
        _VrmlData.VrmlData_Coordinate_swiginit(self, _VrmlData.new_VrmlData_Coordinate(*args))
    Write = _swig_new_instance_method(_VrmlData.VrmlData_Coordinate_Write)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Coordinate_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Coordinate

# Register VrmlData_Coordinate in _VrmlData:
_VrmlData.VrmlData_Coordinate_swigregister(VrmlData_Coordinate)

class VrmlData_Cylinder(VrmlData_Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HasBottom = _swig_new_instance_method(_VrmlData.VrmlData_Cylinder_HasBottom)
    HasSide = _swig_new_instance_method(_VrmlData.VrmlData_Cylinder_HasSide)
    HasTop = _swig_new_instance_method(_VrmlData.VrmlData_Cylinder_HasTop)
    Height = _swig_new_instance_method(_VrmlData.VrmlData_Cylinder_Height)
    Radius = _swig_new_instance_method(_VrmlData.VrmlData_Cylinder_Radius)
    SetFaces = _swig_new_instance_method(_VrmlData.VrmlData_Cylinder_SetFaces)
    SetHeight = _swig_new_instance_method(_VrmlData.VrmlData_Cylinder_SetHeight)
    SetRadius = _swig_new_instance_method(_VrmlData.VrmlData_Cylinder_SetRadius)

    def __init__(self, *args):
        r"""
        * /** * Empty constructor */
        	:rtype: None* /** * Constructor */
        	:param theScene:
        	:type theScene: VrmlData_Scene
        	:param theName:
        	:type theName: char *
        	:param theRadius: default value is 1
        	:type theRadius: float
        	:param theHeight: default value is 2
        	:type theHeight: float
        	:rtype: None
        """
        _VrmlData.VrmlData_Cylinder_swiginit(self, _VrmlData.new_VrmlData_Cylinder(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Cylinder_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Cylinder

# Register VrmlData_Cylinder in _VrmlData:
_VrmlData.VrmlData_Cylinder_swigregister(VrmlData_Cylinder)

class VrmlData_ImageTexture(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_VrmlData.VrmlData_ImageTexture_Clone)
    Read = _swig_new_instance_method(_VrmlData.VrmlData_ImageTexture_Read)
    URL = _swig_new_instance_method(_VrmlData.VrmlData_ImageTexture_URL)

    def __init__(self, *args):
        r"""
        * /** * Empty constructor */
        	:rtype: None* /** * Constructor */
        	:param theScene:
        	:type theScene: VrmlData_Scene
        	:param theName:
        	:type theName: char *
        	:param theURL: default value is 0L
        	:type theURL: char *
        	:param theRepS: default value is Standard_False
        	:type theRepS: bool
        	:param theRepT: default value is Standard_False
        	:type theRepT: bool
        	:rtype: None
        """
        _VrmlData.VrmlData_ImageTexture_swiginit(self, _VrmlData.new_VrmlData_ImageTexture(*args))
    Write = _swig_new_instance_method(_VrmlData.VrmlData_ImageTexture_Write)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_ImageTexture_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_ImageTexture

# Register VrmlData_ImageTexture in _VrmlData:
_VrmlData.VrmlData_ImageTexture_swigregister(VrmlData_ImageTexture)

class VrmlData_IndexedLineSet(VrmlData_Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ArrayColorInd = _swig_new_instance_method(_VrmlData.VrmlData_IndexedLineSet_ArrayColorInd)
    Colors = _swig_new_instance_method(_VrmlData.VrmlData_IndexedLineSet_Colors)
    Coordinates = _swig_new_instance_method(_VrmlData.VrmlData_IndexedLineSet_Coordinates)
    GetColor = _swig_new_instance_method(_VrmlData.VrmlData_IndexedLineSet_GetColor)
    Polygon = _swig_new_instance_method(_VrmlData.VrmlData_IndexedLineSet_Polygon)
    Polygons = _swig_new_instance_method(_VrmlData.VrmlData_IndexedLineSet_Polygons)
    SetColorInd = _swig_new_instance_method(_VrmlData.VrmlData_IndexedLineSet_SetColorInd)
    SetColorPerVertex = _swig_new_instance_method(_VrmlData.VrmlData_IndexedLineSet_SetColorPerVertex)
    SetColors = _swig_new_instance_method(_VrmlData.VrmlData_IndexedLineSet_SetColors)
    SetCoordinates = _swig_new_instance_method(_VrmlData.VrmlData_IndexedLineSet_SetCoordinates)
    SetPolygons = _swig_new_instance_method(_VrmlData.VrmlData_IndexedLineSet_SetPolygons)

    def __init__(self, *args):
        r"""
        * /** * Empty constructor. */
        	:rtype: None* /** * Constructor. */
        	:param theScene:
        	:type theScene: VrmlData_Scene
        	:param theName:
        	:type theName: char *
        	:param isColorPerVertex: default value is Standard_True
        	:type isColorPerVertex: bool
        	:rtype: None
        """
        _VrmlData.VrmlData_IndexedLineSet_swiginit(self, _VrmlData.new_VrmlData_IndexedLineSet(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_IndexedLineSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_IndexedLineSet

# Register VrmlData_IndexedLineSet in _VrmlData:
_VrmlData.VrmlData_IndexedLineSet_swigregister(VrmlData_IndexedLineSet)

class VrmlData_Normal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_VrmlData.VrmlData_Normal_Clone)
    Normal = _swig_new_instance_method(_VrmlData.VrmlData_Normal_Normal)
    Read = _swig_new_instance_method(_VrmlData.VrmlData_Normal_Read)

    def __init__(self, *args):
        r"""
        * /** * Empty constructor */
        	:rtype: None* /** * Constructor */
        	:param theScene:
        	:type theScene: VrmlData_Scene
        	:param theName:
        	:type theName: char *
        	:param nVec: default value is 0
        	:type nVec: size_t
        	:param arrVec: default value is 0L
        	:type arrVec: gp_XYZ *
        	:rtype: None
        """
        _VrmlData.VrmlData_Normal_swiginit(self, _VrmlData.new_VrmlData_Normal(*args))
    Write = _swig_new_instance_method(_VrmlData.VrmlData_Normal_Write)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Normal_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Normal

# Register VrmlData_Normal in _VrmlData:
_VrmlData.VrmlData_Normal_swigregister(VrmlData_Normal)

class VrmlData_Sphere(VrmlData_Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Radius = _swig_new_instance_method(_VrmlData.VrmlData_Sphere_Radius)
    SetRadius = _swig_new_instance_method(_VrmlData.VrmlData_Sphere_SetRadius)

    def __init__(self, *args):
        r"""
        * /** * Empty constructor */
        	:rtype: None* /** * Constructor */
        	:param theScene:
        	:type theScene: VrmlData_Scene
        	:param theName:
        	:type theName: char *
        	:param theRadius: default value is 1
        	:type theRadius: float
        	:rtype: None
        """
        _VrmlData.VrmlData_Sphere_swiginit(self, _VrmlData.new_VrmlData_Sphere(*args))


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Sphere_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Sphere

# Register VrmlData_Sphere in _VrmlData:
_VrmlData.VrmlData_Sphere_swigregister(VrmlData_Sphere)

class VrmlData_IndexedFaceSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ArrayColorInd = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_ArrayColorInd)
    ArrayNormalInd = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_ArrayNormalInd)
    ArrayTextureCoordInd = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_ArrayTextureCoordInd)
    Clone = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_Clone)
    Colors = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_Colors)
    Coordinates = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_Coordinates)
    GetColor = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_GetColor)
    IndiceNormals = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_IndiceNormals)
    IsDefault = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_IsDefault)
    Normals = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_Normals)
    Polygon = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_Polygon)
    Polygons = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_Polygons)
    Read = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_Read)
    SetColorInd = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_SetColorInd)
    SetColorPerVertex = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_SetColorPerVertex)
    SetColors = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_SetColors)
    SetCoordinates = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_SetCoordinates)
    SetNormalInd = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_SetNormalInd)
    SetNormalPerVertex = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_SetNormalPerVertex)
    SetNormals = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_SetNormals)
    SetPolygons = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_SetPolygons)
    SetTextureCoordInd = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_SetTextureCoordInd)
    SetTextureCoords = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_SetTextureCoords)
    TShape = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_TShape)
    TextureCoords = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_TextureCoords)

    def __init__(self, *args):
        r"""
        * /** * Empty constructor */
        	:rtype: None* /** * Constructor */
        	:param theScene:
        	:type theScene: VrmlData_Scene
        	:param theName:
        	:type theName: char *
        	:param isCCW: default value is Standard_True
        	:type isCCW: bool
        	:param isSolid: default value is Standard_True
        	:type isSolid: bool
        	:param isConvex: default value is Standard_True
        	:type isConvex: bool
        	:param theCreaseAngle: default value is 0
        	:type theCreaseAngle: float
        	:rtype: None
        """
        _VrmlData.VrmlData_IndexedFaceSet_swiginit(self, _VrmlData.new_VrmlData_IndexedFaceSet(*args))
    Write = _swig_new_instance_method(_VrmlData.VrmlData_IndexedFaceSet_Write)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_IndexedFaceSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_IndexedFaceSet

# Register VrmlData_IndexedFaceSet in _VrmlData:
_VrmlData.VrmlData_IndexedFaceSet_swigregister(VrmlData_IndexedFaceSet)



