# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
AIS module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_ais.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _AIS
else:
    import _AIS

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _AIS.SWIG_PyInstanceMethod_New
_swig_new_static_method = _AIS.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AIS.delete_SwigPyIterator
    value = _swig_new_instance_method(_AIS.SwigPyIterator_value)
    incr = _swig_new_instance_method(_AIS.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_AIS.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_AIS.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_AIS.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_AIS.SwigPyIterator_copy)
    next = _swig_new_instance_method(_AIS.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_AIS.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_AIS.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_AIS.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_AIS.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_AIS.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_AIS.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_AIS.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_AIS.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_AIS.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AIS:
_AIS.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.SelectMgr
import OCC.Core.PrsMgr
import OCC.Core.Prs3d
import OCC.Core.TColgp
import OCC.Core.Graphic3d
import OCC.Core.BVH
import OCC.Core.Quantity
import OCC.Core.TCollection
import OCC.Core.gp
import OCC.Core.Aspect
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColStd
import OCC.Core.Bnd
import OCC.Core.Image
import OCC.Core.OSD
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.HLRAlgo
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.TopTools
import OCC.Core.V3d
import OCC.Core.SelectBasics
import OCC.Core.Select3D
import OCC.Core.StdSelect
import OCC.Core.DsgPrs
AIS_TrihedronSelectionMode_EntireObject = _AIS.AIS_TrihedronSelectionMode_EntireObject
AIS_TrihedronSelectionMode_Origin = _AIS.AIS_TrihedronSelectionMode_Origin
AIS_TrihedronSelectionMode_Axes = _AIS.AIS_TrihedronSelectionMode_Axes
AIS_TrihedronSelectionMode_MainPlanes = _AIS.AIS_TrihedronSelectionMode_MainPlanes
AIS_MouseGesture_NONE = _AIS.AIS_MouseGesture_NONE
AIS_MouseGesture_SelectRectangle = _AIS.AIS_MouseGesture_SelectRectangle
AIS_MouseGesture_SelectLasso = _AIS.AIS_MouseGesture_SelectLasso
AIS_MouseGesture_Zoom = _AIS.AIS_MouseGesture_Zoom
AIS_MouseGesture_Pan = _AIS.AIS_MouseGesture_Pan
AIS_MouseGesture_RotateOrbit = _AIS.AIS_MouseGesture_RotateOrbit
AIS_MouseGesture_RotateView = _AIS.AIS_MouseGesture_RotateView
AIS_CM_All = _AIS.AIS_CM_All
AIS_CM_Interactive = _AIS.AIS_CM_Interactive
AIS_CM_Filters = _AIS.AIS_CM_Filters
AIS_CM_StandardModes = _AIS.AIS_CM_StandardModes
AIS_CM_TemporaryShapePrs = _AIS.AIS_CM_TemporaryShapePrs
AIS_TOA_Line = _AIS.AIS_TOA_Line
AIS_TOA_Dimension = _AIS.AIS_TOA_Dimension
AIS_TOA_Wire = _AIS.AIS_TOA_Wire
AIS_TOA_Plane = _AIS.AIS_TOA_Plane
AIS_TOA_Vector = _AIS.AIS_TOA_Vector
AIS_TOA_UIso = _AIS.AIS_TOA_UIso
AIS_TOA_VIso = _AIS.AIS_TOA_VIso
AIS_TOA_Free = _AIS.AIS_TOA_Free
AIS_TOA_UnFree = _AIS.AIS_TOA_UnFree
AIS_TOA_Section = _AIS.AIS_TOA_Section
AIS_TOA_Hidden = _AIS.AIS_TOA_Hidden
AIS_TOA_Seen = _AIS.AIS_TOA_Seen
AIS_TOA_FaceBoundary = _AIS.AIS_TOA_FaceBoundary
AIS_TOA_FirstAxis = _AIS.AIS_TOA_FirstAxis
AIS_TOA_SecondAxis = _AIS.AIS_TOA_SecondAxis
AIS_TOA_ThirdAxis = _AIS.AIS_TOA_ThirdAxis
AIS_TOAV_Both = _AIS.AIS_TOAV_Both
AIS_TOAV_First = _AIS.AIS_TOAV_First
AIS_TOAV_Second = _AIS.AIS_TOAV_Second
AIS_TOAV_None = _AIS.AIS_TOAV_None
AIS_DSM_All = _AIS.AIS_DSM_All
AIS_DSM_Line = _AIS.AIS_DSM_Line
AIS_DSM_Text = _AIS.AIS_DSM_Text
AIS_KOI_None = _AIS.AIS_KOI_None
AIS_KOI_Datum = _AIS.AIS_KOI_Datum
AIS_KOI_Shape = _AIS.AIS_KOI_Shape
AIS_KOI_Object = _AIS.AIS_KOI_Object
AIS_KOI_Relation = _AIS.AIS_KOI_Relation
AIS_KOI_Dimension = _AIS.AIS_KOI_Dimension
AIS_KOD_NONE = _AIS.AIS_KOD_NONE
AIS_KOD_LENGTH = _AIS.AIS_KOD_LENGTH
AIS_KOD_PLANEANGLE = _AIS.AIS_KOD_PLANEANGLE
AIS_KOD_SOLIDANGLE = _AIS.AIS_KOD_SOLIDANGLE
AIS_KOD_AREA = _AIS.AIS_KOD_AREA
AIS_KOD_VOLUME = _AIS.AIS_KOD_VOLUME
AIS_KOD_MASS = _AIS.AIS_KOD_MASS
AIS_KOD_TIME = _AIS.AIS_KOD_TIME
AIS_KOD_RADIUS = _AIS.AIS_KOD_RADIUS
AIS_KOD_DIAMETER = _AIS.AIS_KOD_DIAMETER
AIS_KOD_CHAMF2D = _AIS.AIS_KOD_CHAMF2D
AIS_KOD_CHAMF3D = _AIS.AIS_KOD_CHAMF3D
AIS_KOD_OFFSET = _AIS.AIS_KOD_OFFSET
AIS_KOD_ELLIPSERADIUS = _AIS.AIS_KOD_ELLIPSERADIUS
AIS_SS_Added = _AIS.AIS_SS_Added
AIS_SS_Removed = _AIS.AIS_SS_Removed
AIS_SS_NotDone = _AIS.AIS_SS_NotDone
AIS_TOAX_Unknown = _AIS.AIS_TOAX_Unknown
AIS_TOAX_XAxis = _AIS.AIS_TOAX_XAxis
AIS_TOAX_YAxis = _AIS.AIS_TOAX_YAxis
AIS_TOAX_ZAxis = _AIS.AIS_TOAX_ZAxis
AIS_TOU_LENGTH = _AIS.AIS_TOU_LENGTH
AIS_TOU_SURFACE = _AIS.AIS_TOU_SURFACE
AIS_TOU_VOLUME = _AIS.AIS_TOU_VOLUME
AIS_TOU_PLANE_ANGLE = _AIS.AIS_TOU_PLANE_ANGLE
AIS_TOU_SOLID_ANGLE = _AIS.AIS_TOU_SOLID_ANGLE
AIS_TOU_MASS = _AIS.AIS_TOU_MASS
AIS_TOU_FORCE = _AIS.AIS_TOU_FORCE
AIS_TOU_TIME = _AIS.AIS_TOU_TIME
AIS_TOA_Interior = _AIS.AIS_TOA_Interior
AIS_TOA_Exterior = _AIS.AIS_TOA_Exterior
AIS_CS_None = _AIS.AIS_CS_None
AIS_CS_Connection = _AIS.AIS_CS_Connection
AIS_CS_Transform = _AIS.AIS_CS_Transform
AIS_CS_Both = _AIS.AIS_CS_Both
AIS_RotationMode_BndBoxActive = _AIS.AIS_RotationMode_BndBoxActive
AIS_RotationMode_PickLast = _AIS.AIS_RotationMode_PickLast
AIS_RotationMode_PickCenter = _AIS.AIS_RotationMode_PickCenter
AIS_RotationMode_CameraAt = _AIS.AIS_RotationMode_CameraAt
AIS_RotationMode_BndBoxScene = _AIS.AIS_RotationMode_BndBoxScene
AIS_RotationMode_LOWER = _AIS.AIS_RotationMode_LOWER
AIS_RotationMode_UPPER = _AIS.AIS_RotationMode_UPPER
AIS_ViewSelectionTool_Picking = _AIS.AIS_ViewSelectionTool_Picking
AIS_ViewSelectionTool_RubberBand = _AIS.AIS_ViewSelectionTool_RubberBand
AIS_ViewSelectionTool_Polygon = _AIS.AIS_ViewSelectionTool_Polygon
AIS_ViewInputBufferType_UI = _AIS.AIS_ViewInputBufferType_UI
AIS_ViewInputBufferType_GL = _AIS.AIS_ViewInputBufferType_GL
AIS_NavigationMode_Orbit = _AIS.AIS_NavigationMode_Orbit
AIS_NavigationMode_FirstPersonFlight = _AIS.AIS_NavigationMode_FirstPersonFlight
AIS_NavigationMode_FirstPersonWalk = _AIS.AIS_NavigationMode_FirstPersonWalk
AIS_NavigationMode_LOWER = _AIS.AIS_NavigationMode_LOWER
AIS_NavigationMode_UPPER = _AIS.AIS_NavigationMode_UPPER
AIS_TOI_IsoU = _AIS.AIS_TOI_IsoU
AIS_TOI_IsoV = _AIS.AIS_TOI_IsoV
AIS_TOI_Both = _AIS.AIS_TOI_Both
AIS_KOR_NONE = _AIS.AIS_KOR_NONE
AIS_KOR_CONCENTRIC = _AIS.AIS_KOR_CONCENTRIC
AIS_KOR_EQUALDISTANCE = _AIS.AIS_KOR_EQUALDISTANCE
AIS_KOR_EQUALRADIUS = _AIS.AIS_KOR_EQUALRADIUS
AIS_KOR_FIX = _AIS.AIS_KOR_FIX
AIS_KOR_IDENTIC = _AIS.AIS_KOR_IDENTIC
AIS_KOR_OFFSET = _AIS.AIS_KOR_OFFSET
AIS_KOR_PARALLEL = _AIS.AIS_KOR_PARALLEL
AIS_KOR_PERPENDICULAR = _AIS.AIS_KOR_PERPENDICULAR
AIS_KOR_TANGENT = _AIS.AIS_KOR_TANGENT
AIS_KOR_SYMMETRIC = _AIS.AIS_KOR_SYMMETRIC
AIS_SOD_Error = _AIS.AIS_SOD_Error
AIS_SOD_Nothing = _AIS.AIS_SOD_Nothing
AIS_SOD_AllBad = _AIS.AIS_SOD_AllBad
AIS_SOD_Selected = _AIS.AIS_SOD_Selected
AIS_SOD_OnlyOneDetected = _AIS.AIS_SOD_OnlyOneDetected
AIS_SOD_OnlyOneGood = _AIS.AIS_SOD_OnlyOneGood
AIS_SOD_SeveralGood = _AIS.AIS_SOD_SeveralGood
AIS_WalkTranslation_Forward = _AIS.AIS_WalkTranslation_Forward
AIS_WalkTranslation_Side = _AIS.AIS_WalkTranslation_Side
AIS_WalkTranslation_Up = _AIS.AIS_WalkTranslation_Up
AIS_WalkRotation_Yaw = _AIS.AIS_WalkRotation_Yaw
AIS_WalkRotation_Pitch = _AIS.AIS_WalkRotation_Pitch
AIS_WalkRotation_Roll = _AIS.AIS_WalkRotation_Roll
AIS_MM_None = _AIS.AIS_MM_None
AIS_MM_Translation = _AIS.AIS_MM_Translation
AIS_MM_Rotation = _AIS.AIS_MM_Rotation
AIS_MM_Scaling = _AIS.AIS_MM_Scaling
AIS_MM_TranslationPlane = _AIS.AIS_MM_TranslationPlane
AIS_SelectionModesConcurrency_Single = _AIS.AIS_SelectionModesConcurrency_Single
AIS_SelectionModesConcurrency_GlobalOrLocal = _AIS.AIS_SelectionModesConcurrency_GlobalOrLocal
AIS_SelectionModesConcurrency_Multiple = _AIS.AIS_SelectionModesConcurrency_Multiple
AIS_KOS_Plane = _AIS.AIS_KOS_Plane
AIS_KOS_Cylinder = _AIS.AIS_KOS_Cylinder
AIS_KOS_Cone = _AIS.AIS_KOS_Cone
AIS_KOS_Sphere = _AIS.AIS_KOS_Sphere
AIS_KOS_Torus = _AIS.AIS_KOS_Torus
AIS_KOS_Revolution = _AIS.AIS_KOS_Revolution
AIS_KOS_Extrusion = _AIS.AIS_KOS_Extrusion
AIS_KOS_OtherSurface = _AIS.AIS_KOS_OtherSurface
AIS_SD_None = _AIS.AIS_SD_None
AIS_SD_Point = _AIS.AIS_SD_Point
AIS_SD_Axis = _AIS.AIS_SD_Axis
AIS_SD_Trihedron = _AIS.AIS_SD_Trihedron
AIS_SD_PlaneTrihedron = _AIS.AIS_SD_PlaneTrihedron
AIS_SD_Line = _AIS.AIS_SD_Line
AIS_SD_Circle = _AIS.AIS_SD_Circle
AIS_SD_Plane = _AIS.AIS_SD_Plane
AIS_WireFrame = _AIS.AIS_WireFrame
AIS_Shaded = _AIS.AIS_Shaded
AIS_SOP_Error = _AIS.AIS_SOP_Error
AIS_SOP_NothingSelected = _AIS.AIS_SOP_NothingSelected
AIS_SOP_Removed = _AIS.AIS_SOP_Removed
AIS_SOP_OneSelected = _AIS.AIS_SOP_OneSelected
AIS_SOP_SeveralSelected = _AIS.AIS_SOP_SeveralSelected
AIS_DragAction_Start = _AIS.AIS_DragAction_Start
AIS_DragAction_Update = _AIS.AIS_DragAction_Update
AIS_DragAction_Stop = _AIS.AIS_DragAction_Stop
AIS_DragAction_Abort = _AIS.AIS_DragAction_Abort
AIS_DSS_No = _AIS.AIS_DSS_No
AIS_DSS_Before = _AIS.AIS_DSS_Before
AIS_DSS_After = _AIS.AIS_DSS_After
AIS_TOD_Unknown = _AIS.AIS_TOD_Unknown
AIS_TOD_Horizontal = _AIS.AIS_TOD_Horizontal
AIS_TOD_Vertical = _AIS.AIS_TOD_Vertical
AIS_TOPL_Unknown = _AIS.AIS_TOPL_Unknown
AIS_TOPL_XYPlane = _AIS.AIS_TOPL_XYPlane
AIS_TOPL_XZPlane = _AIS.AIS_TOPL_XZPlane
AIS_TOPL_YZPlane = _AIS.AIS_TOPL_YZPlane
AIS_DS_Displayed = _AIS.AIS_DS_Displayed
AIS_DS_Erased = _AIS.AIS_DS_Erased
AIS_DS_None = _AIS.AIS_DS_None
Handle_AIS_Animation_Create = _AIS.Handle_AIS_Animation_Create
Handle_AIS_Animation_DownCast = _AIS.Handle_AIS_Animation_DownCast
Handle_AIS_Animation_IsNull = _AIS.Handle_AIS_Animation_IsNull
Handle_AIS_AttributeFilter_Create = _AIS.Handle_AIS_AttributeFilter_Create
Handle_AIS_AttributeFilter_DownCast = _AIS.Handle_AIS_AttributeFilter_DownCast
Handle_AIS_AttributeFilter_IsNull = _AIS.Handle_AIS_AttributeFilter_IsNull
Handle_AIS_BadEdgeFilter_Create = _AIS.Handle_AIS_BadEdgeFilter_Create
Handle_AIS_BadEdgeFilter_DownCast = _AIS.Handle_AIS_BadEdgeFilter_DownCast
Handle_AIS_BadEdgeFilter_IsNull = _AIS.Handle_AIS_BadEdgeFilter_IsNull
Handle_AIS_C0RegularityFilter_Create = _AIS.Handle_AIS_C0RegularityFilter_Create
Handle_AIS_C0RegularityFilter_DownCast = _AIS.Handle_AIS_C0RegularityFilter_DownCast
Handle_AIS_C0RegularityFilter_IsNull = _AIS.Handle_AIS_C0RegularityFilter_IsNull
Handle_AIS_ColoredDrawer_Create = _AIS.Handle_AIS_ColoredDrawer_Create
Handle_AIS_ColoredDrawer_DownCast = _AIS.Handle_AIS_ColoredDrawer_DownCast
Handle_AIS_ColoredDrawer_IsNull = _AIS.Handle_AIS_ColoredDrawer_IsNull
Handle_AIS_DimensionOwner_Create = _AIS.Handle_AIS_DimensionOwner_Create
Handle_AIS_DimensionOwner_DownCast = _AIS.Handle_AIS_DimensionOwner_DownCast
Handle_AIS_DimensionOwner_IsNull = _AIS.Handle_AIS_DimensionOwner_IsNull
Handle_AIS_ExclusionFilter_Create = _AIS.Handle_AIS_ExclusionFilter_Create
Handle_AIS_ExclusionFilter_DownCast = _AIS.Handle_AIS_ExclusionFilter_DownCast
Handle_AIS_ExclusionFilter_IsNull = _AIS.Handle_AIS_ExclusionFilter_IsNull
Handle_AIS_GlobalStatus_Create = _AIS.Handle_AIS_GlobalStatus_Create
Handle_AIS_GlobalStatus_DownCast = _AIS.Handle_AIS_GlobalStatus_DownCast
Handle_AIS_GlobalStatus_IsNull = _AIS.Handle_AIS_GlobalStatus_IsNull
Handle_AIS_InteractiveContext_Create = _AIS.Handle_AIS_InteractiveContext_Create
Handle_AIS_InteractiveContext_DownCast = _AIS.Handle_AIS_InteractiveContext_DownCast
Handle_AIS_InteractiveContext_IsNull = _AIS.Handle_AIS_InteractiveContext_IsNull
Handle_AIS_InteractiveObject_Create = _AIS.Handle_AIS_InteractiveObject_Create
Handle_AIS_InteractiveObject_DownCast = _AIS.Handle_AIS_InteractiveObject_DownCast
Handle_AIS_InteractiveObject_IsNull = _AIS.Handle_AIS_InteractiveObject_IsNull
Handle_AIS_ManipulatorOwner_Create = _AIS.Handle_AIS_ManipulatorOwner_Create
Handle_AIS_ManipulatorOwner_DownCast = _AIS.Handle_AIS_ManipulatorOwner_DownCast
Handle_AIS_ManipulatorOwner_IsNull = _AIS.Handle_AIS_ManipulatorOwner_IsNull
Handle_AIS_Selection_Create = _AIS.Handle_AIS_Selection_Create
Handle_AIS_Selection_DownCast = _AIS.Handle_AIS_Selection_DownCast
Handle_AIS_Selection_IsNull = _AIS.Handle_AIS_Selection_IsNull
Handle_AIS_TrihedronOwner_Create = _AIS.Handle_AIS_TrihedronOwner_Create
Handle_AIS_TrihedronOwner_DownCast = _AIS.Handle_AIS_TrihedronOwner_DownCast
Handle_AIS_TrihedronOwner_IsNull = _AIS.Handle_AIS_TrihedronOwner_IsNull
Handle_AIS_TypeFilter_Create = _AIS.Handle_AIS_TypeFilter_Create
Handle_AIS_TypeFilter_DownCast = _AIS.Handle_AIS_TypeFilter_DownCast
Handle_AIS_TypeFilter_IsNull = _AIS.Handle_AIS_TypeFilter_IsNull
Handle_AIS_AnimationCamera_Create = _AIS.Handle_AIS_AnimationCamera_Create
Handle_AIS_AnimationCamera_DownCast = _AIS.Handle_AIS_AnimationCamera_DownCast
Handle_AIS_AnimationCamera_IsNull = _AIS.Handle_AIS_AnimationCamera_IsNull
Handle_AIS_AnimationObject_Create = _AIS.Handle_AIS_AnimationObject_Create
Handle_AIS_AnimationObject_DownCast = _AIS.Handle_AIS_AnimationObject_DownCast
Handle_AIS_AnimationObject_IsNull = _AIS.Handle_AIS_AnimationObject_IsNull
Handle_AIS_Circle_Create = _AIS.Handle_AIS_Circle_Create
Handle_AIS_Circle_DownCast = _AIS.Handle_AIS_Circle_DownCast
Handle_AIS_Circle_IsNull = _AIS.Handle_AIS_Circle_IsNull
Handle_AIS_ColorScale_Create = _AIS.Handle_AIS_ColorScale_Create
Handle_AIS_ColorScale_DownCast = _AIS.Handle_AIS_ColorScale_DownCast
Handle_AIS_ColorScale_IsNull = _AIS.Handle_AIS_ColorScale_IsNull
Handle_AIS_ConnectedInteractive_Create = _AIS.Handle_AIS_ConnectedInteractive_Create
Handle_AIS_ConnectedInteractive_DownCast = _AIS.Handle_AIS_ConnectedInteractive_DownCast
Handle_AIS_ConnectedInteractive_IsNull = _AIS.Handle_AIS_ConnectedInteractive_IsNull
Handle_AIS_Dimension_Create = _AIS.Handle_AIS_Dimension_Create
Handle_AIS_Dimension_DownCast = _AIS.Handle_AIS_Dimension_DownCast
Handle_AIS_Dimension_IsNull = _AIS.Handle_AIS_Dimension_IsNull
Handle_AIS_Line_Create = _AIS.Handle_AIS_Line_Create
Handle_AIS_Line_DownCast = _AIS.Handle_AIS_Line_DownCast
Handle_AIS_Line_IsNull = _AIS.Handle_AIS_Line_IsNull
Handle_AIS_Manipulator_Create = _AIS.Handle_AIS_Manipulator_Create
Handle_AIS_Manipulator_DownCast = _AIS.Handle_AIS_Manipulator_DownCast
Handle_AIS_Manipulator_IsNull = _AIS.Handle_AIS_Manipulator_IsNull
Handle_AIS_MultipleConnectedInteractive_Create = _AIS.Handle_AIS_MultipleConnectedInteractive_Create
Handle_AIS_MultipleConnectedInteractive_DownCast = _AIS.Handle_AIS_MultipleConnectedInteractive_DownCast
Handle_AIS_MultipleConnectedInteractive_IsNull = _AIS.Handle_AIS_MultipleConnectedInteractive_IsNull
Handle_AIS_Plane_Create = _AIS.Handle_AIS_Plane_Create
Handle_AIS_Plane_DownCast = _AIS.Handle_AIS_Plane_DownCast
Handle_AIS_Plane_IsNull = _AIS.Handle_AIS_Plane_IsNull
Handle_AIS_PlaneTrihedron_Create = _AIS.Handle_AIS_PlaneTrihedron_Create
Handle_AIS_PlaneTrihedron_DownCast = _AIS.Handle_AIS_PlaneTrihedron_DownCast
Handle_AIS_PlaneTrihedron_IsNull = _AIS.Handle_AIS_PlaneTrihedron_IsNull
Handle_AIS_Point_Create = _AIS.Handle_AIS_Point_Create
Handle_AIS_Point_DownCast = _AIS.Handle_AIS_Point_DownCast
Handle_AIS_Point_IsNull = _AIS.Handle_AIS_Point_IsNull
Handle_AIS_PointCloud_Create = _AIS.Handle_AIS_PointCloud_Create
Handle_AIS_PointCloud_DownCast = _AIS.Handle_AIS_PointCloud_DownCast
Handle_AIS_PointCloud_IsNull = _AIS.Handle_AIS_PointCloud_IsNull
Handle_AIS_Relation_Create = _AIS.Handle_AIS_Relation_Create
Handle_AIS_Relation_DownCast = _AIS.Handle_AIS_Relation_DownCast
Handle_AIS_Relation_IsNull = _AIS.Handle_AIS_Relation_IsNull
Handle_AIS_RubberBand_Create = _AIS.Handle_AIS_RubberBand_Create
Handle_AIS_RubberBand_DownCast = _AIS.Handle_AIS_RubberBand_DownCast
Handle_AIS_RubberBand_IsNull = _AIS.Handle_AIS_RubberBand_IsNull
Handle_AIS_Shape_Create = _AIS.Handle_AIS_Shape_Create
Handle_AIS_Shape_DownCast = _AIS.Handle_AIS_Shape_DownCast
Handle_AIS_Shape_IsNull = _AIS.Handle_AIS_Shape_IsNull
Handle_AIS_SignatureFilter_Create = _AIS.Handle_AIS_SignatureFilter_Create
Handle_AIS_SignatureFilter_DownCast = _AIS.Handle_AIS_SignatureFilter_DownCast
Handle_AIS_SignatureFilter_IsNull = _AIS.Handle_AIS_SignatureFilter_IsNull
Handle_AIS_TextLabel_Create = _AIS.Handle_AIS_TextLabel_Create
Handle_AIS_TextLabel_DownCast = _AIS.Handle_AIS_TextLabel_DownCast
Handle_AIS_TextLabel_IsNull = _AIS.Handle_AIS_TextLabel_IsNull
Handle_AIS_Triangulation_Create = _AIS.Handle_AIS_Triangulation_Create
Handle_AIS_Triangulation_DownCast = _AIS.Handle_AIS_Triangulation_DownCast
Handle_AIS_Triangulation_IsNull = _AIS.Handle_AIS_Triangulation_IsNull
Handle_AIS_Trihedron_Create = _AIS.Handle_AIS_Trihedron_Create
Handle_AIS_Trihedron_DownCast = _AIS.Handle_AIS_Trihedron_DownCast
Handle_AIS_Trihedron_IsNull = _AIS.Handle_AIS_Trihedron_IsNull
Handle_AIS_AngleDimension_Create = _AIS.Handle_AIS_AngleDimension_Create
Handle_AIS_AngleDimension_DownCast = _AIS.Handle_AIS_AngleDimension_DownCast
Handle_AIS_AngleDimension_IsNull = _AIS.Handle_AIS_AngleDimension_IsNull
Handle_AIS_Chamf2dDimension_Create = _AIS.Handle_AIS_Chamf2dDimension_Create
Handle_AIS_Chamf2dDimension_DownCast = _AIS.Handle_AIS_Chamf2dDimension_DownCast
Handle_AIS_Chamf2dDimension_IsNull = _AIS.Handle_AIS_Chamf2dDimension_IsNull
Handle_AIS_Chamf3dDimension_Create = _AIS.Handle_AIS_Chamf3dDimension_Create
Handle_AIS_Chamf3dDimension_DownCast = _AIS.Handle_AIS_Chamf3dDimension_DownCast
Handle_AIS_Chamf3dDimension_IsNull = _AIS.Handle_AIS_Chamf3dDimension_IsNull
Handle_AIS_ColoredShape_Create = _AIS.Handle_AIS_ColoredShape_Create
Handle_AIS_ColoredShape_DownCast = _AIS.Handle_AIS_ColoredShape_DownCast
Handle_AIS_ColoredShape_IsNull = _AIS.Handle_AIS_ColoredShape_IsNull
Handle_AIS_ConcentricRelation_Create = _AIS.Handle_AIS_ConcentricRelation_Create
Handle_AIS_ConcentricRelation_DownCast = _AIS.Handle_AIS_ConcentricRelation_DownCast
Handle_AIS_ConcentricRelation_IsNull = _AIS.Handle_AIS_ConcentricRelation_IsNull
Handle_AIS_DiameterDimension_Create = _AIS.Handle_AIS_DiameterDimension_Create
Handle_AIS_DiameterDimension_DownCast = _AIS.Handle_AIS_DiameterDimension_DownCast
Handle_AIS_DiameterDimension_IsNull = _AIS.Handle_AIS_DiameterDimension_IsNull
Handle_AIS_EllipseRadiusDimension_Create = _AIS.Handle_AIS_EllipseRadiusDimension_Create
Handle_AIS_EllipseRadiusDimension_DownCast = _AIS.Handle_AIS_EllipseRadiusDimension_DownCast
Handle_AIS_EllipseRadiusDimension_IsNull = _AIS.Handle_AIS_EllipseRadiusDimension_IsNull
Handle_AIS_EqualDistanceRelation_Create = _AIS.Handle_AIS_EqualDistanceRelation_Create
Handle_AIS_EqualDistanceRelation_DownCast = _AIS.Handle_AIS_EqualDistanceRelation_DownCast
Handle_AIS_EqualDistanceRelation_IsNull = _AIS.Handle_AIS_EqualDistanceRelation_IsNull
Handle_AIS_EqualRadiusRelation_Create = _AIS.Handle_AIS_EqualRadiusRelation_Create
Handle_AIS_EqualRadiusRelation_DownCast = _AIS.Handle_AIS_EqualRadiusRelation_DownCast
Handle_AIS_EqualRadiusRelation_IsNull = _AIS.Handle_AIS_EqualRadiusRelation_IsNull
Handle_AIS_FixRelation_Create = _AIS.Handle_AIS_FixRelation_Create
Handle_AIS_FixRelation_DownCast = _AIS.Handle_AIS_FixRelation_DownCast
Handle_AIS_FixRelation_IsNull = _AIS.Handle_AIS_FixRelation_IsNull
Handle_AIS_IdenticRelation_Create = _AIS.Handle_AIS_IdenticRelation_Create
Handle_AIS_IdenticRelation_DownCast = _AIS.Handle_AIS_IdenticRelation_DownCast
Handle_AIS_IdenticRelation_IsNull = _AIS.Handle_AIS_IdenticRelation_IsNull
Handle_AIS_LengthDimension_Create = _AIS.Handle_AIS_LengthDimension_Create
Handle_AIS_LengthDimension_DownCast = _AIS.Handle_AIS_LengthDimension_DownCast
Handle_AIS_LengthDimension_IsNull = _AIS.Handle_AIS_LengthDimension_IsNull
Handle_AIS_MidPointRelation_Create = _AIS.Handle_AIS_MidPointRelation_Create
Handle_AIS_MidPointRelation_DownCast = _AIS.Handle_AIS_MidPointRelation_DownCast
Handle_AIS_MidPointRelation_IsNull = _AIS.Handle_AIS_MidPointRelation_IsNull
Handle_AIS_OffsetDimension_Create = _AIS.Handle_AIS_OffsetDimension_Create
Handle_AIS_OffsetDimension_DownCast = _AIS.Handle_AIS_OffsetDimension_DownCast
Handle_AIS_OffsetDimension_IsNull = _AIS.Handle_AIS_OffsetDimension_IsNull
Handle_AIS_ParallelRelation_Create = _AIS.Handle_AIS_ParallelRelation_Create
Handle_AIS_ParallelRelation_DownCast = _AIS.Handle_AIS_ParallelRelation_DownCast
Handle_AIS_ParallelRelation_IsNull = _AIS.Handle_AIS_ParallelRelation_IsNull
Handle_AIS_PerpendicularRelation_Create = _AIS.Handle_AIS_PerpendicularRelation_Create
Handle_AIS_PerpendicularRelation_DownCast = _AIS.Handle_AIS_PerpendicularRelation_DownCast
Handle_AIS_PerpendicularRelation_IsNull = _AIS.Handle_AIS_PerpendicularRelation_IsNull
Handle_AIS_RadiusDimension_Create = _AIS.Handle_AIS_RadiusDimension_Create
Handle_AIS_RadiusDimension_DownCast = _AIS.Handle_AIS_RadiusDimension_DownCast
Handle_AIS_RadiusDimension_IsNull = _AIS.Handle_AIS_RadiusDimension_IsNull
Handle_AIS_SymmetricRelation_Create = _AIS.Handle_AIS_SymmetricRelation_Create
Handle_AIS_SymmetricRelation_DownCast = _AIS.Handle_AIS_SymmetricRelation_DownCast
Handle_AIS_SymmetricRelation_IsNull = _AIS.Handle_AIS_SymmetricRelation_IsNull
Handle_AIS_TangentRelation_Create = _AIS.Handle_AIS_TangentRelation_Create
Handle_AIS_TangentRelation_DownCast = _AIS.Handle_AIS_TangentRelation_DownCast
Handle_AIS_TangentRelation_IsNull = _AIS.Handle_AIS_TangentRelation_IsNull
Handle_AIS_TexturedShape_Create = _AIS.Handle_AIS_TexturedShape_Create
Handle_AIS_TexturedShape_DownCast = _AIS.Handle_AIS_TexturedShape_DownCast
Handle_AIS_TexturedShape_IsNull = _AIS.Handle_AIS_TexturedShape_IsNull
Handle_AIS_MaxRadiusDimension_Create = _AIS.Handle_AIS_MaxRadiusDimension_Create
Handle_AIS_MaxRadiusDimension_DownCast = _AIS.Handle_AIS_MaxRadiusDimension_DownCast
Handle_AIS_MaxRadiusDimension_IsNull = _AIS.Handle_AIS_MaxRadiusDimension_IsNull
Handle_AIS_MinRadiusDimension_Create = _AIS.Handle_AIS_MinRadiusDimension_Create
Handle_AIS_MinRadiusDimension_DownCast = _AIS.Handle_AIS_MinRadiusDimension_DownCast
Handle_AIS_MinRadiusDimension_IsNull = _AIS.Handle_AIS_MinRadiusDimension_IsNull
class AIS_DataMapofIntegerListOfinteractive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive_begin)
    end = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive_end)
    cbegin = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive_cbegin)
    cend = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive_cend)

    def __init__(self, *args):
        _AIS.AIS_DataMapofIntegerListOfinteractive_swiginit(self, _AIS.new_AIS_DataMapofIntegerListOfinteractive(*args))
    Exchange = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive_Exchange)
    Assign = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive_Assign)
    Set = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive_Set)
    ReSize = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive_ReSize)
    Bind = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive_Bind)
    Bound = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive_Bound)
    IsBound = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive_IsBound)
    UnBind = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive_UnBind)
    Seek = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive_Seek)
    Find = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive_Find)
    ChangeSeek = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive_ChangeFind)
    __call__ = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive___call__)
    Clear = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive_Clear)
    __swig_destroy__ = _AIS.delete_AIS_DataMapofIntegerListOfinteractive
    Size = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive_Size)
    Keys = _swig_new_instance_method(_AIS.AIS_DataMapofIntegerListOfinteractive_Keys)

# Register AIS_DataMapofIntegerListOfinteractive in _AIS:
_AIS.AIS_DataMapofIntegerListOfinteractive_swigregister(AIS_DataMapofIntegerListOfinteractive)

class AIS_ListOfInteractive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_AIS.AIS_ListOfInteractive_begin)
    end = _swig_new_instance_method(_AIS.AIS_ListOfInteractive_end)
    cbegin = _swig_new_instance_method(_AIS.AIS_ListOfInteractive_cbegin)
    cend = _swig_new_instance_method(_AIS.AIS_ListOfInteractive_cend)

    def __init__(self, *args):
        _AIS.AIS_ListOfInteractive_swiginit(self, _AIS.new_AIS_ListOfInteractive(*args))
    Size = _swig_new_instance_method(_AIS.AIS_ListOfInteractive_Size)
    Assign = _swig_new_instance_method(_AIS.AIS_ListOfInteractive_Assign)
    Set = _swig_new_instance_method(_AIS.AIS_ListOfInteractive_Set)
    Clear = _swig_new_instance_method(_AIS.AIS_ListOfInteractive_Clear)
    First = _swig_new_instance_method(_AIS.AIS_ListOfInteractive_First)
    Last = _swig_new_instance_method(_AIS.AIS_ListOfInteractive_Last)
    Append = _swig_new_instance_method(_AIS.AIS_ListOfInteractive_Append)
    Prepend = _swig_new_instance_method(_AIS.AIS_ListOfInteractive_Prepend)
    RemoveFirst = _swig_new_instance_method(_AIS.AIS_ListOfInteractive_RemoveFirst)
    Remove = _swig_new_instance_method(_AIS.AIS_ListOfInteractive_Remove)
    InsertBefore = _swig_new_instance_method(_AIS.AIS_ListOfInteractive_InsertBefore)
    InsertAfter = _swig_new_instance_method(_AIS.AIS_ListOfInteractive_InsertAfter)
    Reverse = _swig_new_instance_method(_AIS.AIS_ListOfInteractive_Reverse)
    __swig_destroy__ = _AIS.delete_AIS_ListOfInteractive

# Register AIS_ListOfInteractive in _AIS:
_AIS.AIS_ListOfInteractive_swigregister(AIS_ListOfInteractive)

class AIS_ListIteratorOfListOfInteractive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AIS.AIS_ListIteratorOfListOfInteractive_swiginit(self, _AIS.new_AIS_ListIteratorOfListOfInteractive(*args))
    More = _swig_new_instance_method(_AIS.AIS_ListIteratorOfListOfInteractive_More)
    Next = _swig_new_instance_method(_AIS.AIS_ListIteratorOfListOfInteractive_Next)
    Value = _swig_new_instance_method(_AIS.AIS_ListIteratorOfListOfInteractive_Value)
    ChangeValue = _swig_new_instance_method(_AIS.AIS_ListIteratorOfListOfInteractive_ChangeValue)
    __swig_destroy__ = _AIS.delete_AIS_ListIteratorOfListOfInteractive

# Register AIS_ListIteratorOfListOfInteractive in _AIS:
_AIS.AIS_ListIteratorOfListOfInteractive_swigregister(AIS_ListIteratorOfListOfInteractive)

class AIS_MouseGestureMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_AIS.AIS_MouseGestureMap_begin)
    end = _swig_new_instance_method(_AIS.AIS_MouseGestureMap_end)
    cbegin = _swig_new_instance_method(_AIS.AIS_MouseGestureMap_cbegin)
    cend = _swig_new_instance_method(_AIS.AIS_MouseGestureMap_cend)

    def __init__(self, *args):
        _AIS.AIS_MouseGestureMap_swiginit(self, _AIS.new_AIS_MouseGestureMap(*args))
    Exchange = _swig_new_instance_method(_AIS.AIS_MouseGestureMap_Exchange)
    Assign = _swig_new_instance_method(_AIS.AIS_MouseGestureMap_Assign)
    Set = _swig_new_instance_method(_AIS.AIS_MouseGestureMap_Set)
    ReSize = _swig_new_instance_method(_AIS.AIS_MouseGestureMap_ReSize)
    Bind = _swig_new_instance_method(_AIS.AIS_MouseGestureMap_Bind)
    Bound = _swig_new_instance_method(_AIS.AIS_MouseGestureMap_Bound)
    IsBound = _swig_new_instance_method(_AIS.AIS_MouseGestureMap_IsBound)
    UnBind = _swig_new_instance_method(_AIS.AIS_MouseGestureMap_UnBind)
    Seek = _swig_new_instance_method(_AIS.AIS_MouseGestureMap_Seek)
    Find = _swig_new_instance_method(_AIS.AIS_MouseGestureMap_Find)
    ChangeSeek = _swig_new_instance_method(_AIS.AIS_MouseGestureMap_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_AIS.AIS_MouseGestureMap_ChangeFind)
    __call__ = _swig_new_instance_method(_AIS.AIS_MouseGestureMap___call__)
    Clear = _swig_new_instance_method(_AIS.AIS_MouseGestureMap_Clear)
    __swig_destroy__ = _AIS.delete_AIS_MouseGestureMap
    Size = _swig_new_instance_method(_AIS.AIS_MouseGestureMap_Size)

# Register AIS_MouseGestureMap in _AIS:
_AIS.AIS_MouseGestureMap_swigregister(AIS_MouseGestureMap)

class AIS_DataMapOfShapeDrawer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_AIS.AIS_DataMapOfShapeDrawer_begin)
    end = _swig_new_instance_method(_AIS.AIS_DataMapOfShapeDrawer_end)
    cbegin = _swig_new_instance_method(_AIS.AIS_DataMapOfShapeDrawer_cbegin)
    cend = _swig_new_instance_method(_AIS.AIS_DataMapOfShapeDrawer_cend)

    def __init__(self, *args):
        _AIS.AIS_DataMapOfShapeDrawer_swiginit(self, _AIS.new_AIS_DataMapOfShapeDrawer(*args))
    Exchange = _swig_new_instance_method(_AIS.AIS_DataMapOfShapeDrawer_Exchange)
    Assign = _swig_new_instance_method(_AIS.AIS_DataMapOfShapeDrawer_Assign)
    Set = _swig_new_instance_method(_AIS.AIS_DataMapOfShapeDrawer_Set)
    ReSize = _swig_new_instance_method(_AIS.AIS_DataMapOfShapeDrawer_ReSize)
    Bind = _swig_new_instance_method(_AIS.AIS_DataMapOfShapeDrawer_Bind)
    Bound = _swig_new_instance_method(_AIS.AIS_DataMapOfShapeDrawer_Bound)
    IsBound = _swig_new_instance_method(_AIS.AIS_DataMapOfShapeDrawer_IsBound)
    UnBind = _swig_new_instance_method(_AIS.AIS_DataMapOfShapeDrawer_UnBind)
    Seek = _swig_new_instance_method(_AIS.AIS_DataMapOfShapeDrawer_Seek)
    Find = _swig_new_instance_method(_AIS.AIS_DataMapOfShapeDrawer_Find)
    ChangeSeek = _swig_new_instance_method(_AIS.AIS_DataMapOfShapeDrawer_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_AIS.AIS_DataMapOfShapeDrawer_ChangeFind)
    __call__ = _swig_new_instance_method(_AIS.AIS_DataMapOfShapeDrawer___call__)
    Clear = _swig_new_instance_method(_AIS.AIS_DataMapOfShapeDrawer_Clear)
    __swig_destroy__ = _AIS.delete_AIS_DataMapOfShapeDrawer
    Size = _swig_new_instance_method(_AIS.AIS_DataMapOfShapeDrawer_Size)

# Register AIS_DataMapOfShapeDrawer in _AIS:
_AIS.AIS_DataMapOfShapeDrawer_swigregister(AIS_DataMapOfShapeDrawer)

class AIS_MapOfInteractive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cbegin = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_cbegin)
    cend = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_cend)

    def __init__(self, *args):
        _AIS.AIS_MapOfInteractive_swiginit(self, _AIS.new_AIS_MapOfInteractive(*args))
    Exchange = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_Exchange)
    Assign = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_Assign)
    Set = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_Set)
    ReSize = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_ReSize)
    Add = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_Add)
    Added = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_Added)
    Remove = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_Remove)
    Clear = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_Clear)
    __swig_destroy__ = _AIS.delete_AIS_MapOfInteractive
    Size = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_Size)
    IsEqual = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_IsEqual)
    Contains = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_Contains)
    Union = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_Union)
    Unite = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_Unite)
    HasIntersection = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_HasIntersection)
    Intersection = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_Intersection)
    Intersect = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_Intersect)
    Subtraction = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_Subtraction)
    Subtract = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_Subtract)
    Difference = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_Difference)
    Differ = _swig_new_instance_method(_AIS.AIS_MapOfInteractive_Differ)

# Register AIS_MapOfInteractive in _AIS:
_AIS.AIS_MapOfInteractive_swigregister(AIS_MapOfInteractive)

class AIS_DataMapOfIOStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_AIS.AIS_DataMapOfIOStatus_begin)
    end = _swig_new_instance_method(_AIS.AIS_DataMapOfIOStatus_end)
    cbegin = _swig_new_instance_method(_AIS.AIS_DataMapOfIOStatus_cbegin)
    cend = _swig_new_instance_method(_AIS.AIS_DataMapOfIOStatus_cend)

    def __init__(self, *args):
        _AIS.AIS_DataMapOfIOStatus_swiginit(self, _AIS.new_AIS_DataMapOfIOStatus(*args))
    Exchange = _swig_new_instance_method(_AIS.AIS_DataMapOfIOStatus_Exchange)
    Assign = _swig_new_instance_method(_AIS.AIS_DataMapOfIOStatus_Assign)
    Set = _swig_new_instance_method(_AIS.AIS_DataMapOfIOStatus_Set)
    ReSize = _swig_new_instance_method(_AIS.AIS_DataMapOfIOStatus_ReSize)
    Bind = _swig_new_instance_method(_AIS.AIS_DataMapOfIOStatus_Bind)
    Bound = _swig_new_instance_method(_AIS.AIS_DataMapOfIOStatus_Bound)
    IsBound = _swig_new_instance_method(_AIS.AIS_DataMapOfIOStatus_IsBound)
    UnBind = _swig_new_instance_method(_AIS.AIS_DataMapOfIOStatus_UnBind)
    Seek = _swig_new_instance_method(_AIS.AIS_DataMapOfIOStatus_Seek)
    Find = _swig_new_instance_method(_AIS.AIS_DataMapOfIOStatus_Find)
    ChangeSeek = _swig_new_instance_method(_AIS.AIS_DataMapOfIOStatus_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_AIS.AIS_DataMapOfIOStatus_ChangeFind)
    __call__ = _swig_new_instance_method(_AIS.AIS_DataMapOfIOStatus___call__)
    Clear = _swig_new_instance_method(_AIS.AIS_DataMapOfIOStatus_Clear)
    __swig_destroy__ = _AIS.delete_AIS_DataMapOfIOStatus
    Size = _swig_new_instance_method(_AIS.AIS_DataMapOfIOStatus_Size)

# Register AIS_DataMapOfIOStatus in _AIS:
_AIS.AIS_DataMapOfIOStatus_swigregister(AIS_DataMapOfIOStatus)

class AIS_SequenceOfDimension(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_begin)
    end = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_end)
    cbegin = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_cbegin)
    cend = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_cend)

    def __init__(self, *args):
        _AIS.AIS_SequenceOfDimension_swiginit(self, _AIS.new_AIS_SequenceOfDimension(*args))
    Size = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_Size)
    Length = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_Length)
    Lower = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_Lower)
    Upper = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_Upper)
    IsEmpty = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_IsEmpty)
    Reverse = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_Reverse)
    Exchange = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_Exchange)
    delNode = _swig_new_static_method(_AIS.AIS_SequenceOfDimension_delNode)
    Clear = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_Clear)
    Assign = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_Assign)
    Set = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_Set)
    Remove = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_Remove)
    Append = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_Append)
    Prepend = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_Prepend)
    InsertBefore = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_InsertBefore)
    InsertAfter = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_InsertAfter)
    Split = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_Split)
    First = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_First)
    ChangeFirst = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_ChangeFirst)
    Last = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_Last)
    ChangeLast = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_ChangeLast)
    Value = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_Value)
    ChangeValue = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_ChangeValue)
    __call__ = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension___call__)
    SetValue = _swig_new_instance_method(_AIS.AIS_SequenceOfDimension_SetValue)
    __swig_destroy__ = _AIS.delete_AIS_SequenceOfDimension

# Register AIS_SequenceOfDimension in _AIS:
_AIS.AIS_SequenceOfDimension_swigregister(AIS_SequenceOfDimension)
AIS_SequenceOfDimension_delNode = _AIS.AIS_SequenceOfDimension_delNode

class AIS_IndexedDataMapOfOwnerPrs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_begin)
    end = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_end)
    cbegin = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_cbegin)
    cend = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_cend)

    def __init__(self, *args):
        _AIS.AIS_IndexedDataMapOfOwnerPrs_swiginit(self, _AIS.new_AIS_IndexedDataMapOfOwnerPrs(*args))
    Exchange = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_Exchange)
    Assign = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_Assign)
    Set = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_Set)
    ReSize = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_ReSize)
    Add = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_Add)
    Contains = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_Contains)
    Substitute = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_Substitute)
    Swap = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_Swap)
    RemoveLast = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_RemoveLast)
    RemoveFromIndex = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_RemoveFromIndex)
    RemoveKey = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_RemoveKey)
    FindKey = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_FindKey)
    FindFromIndex = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_FindFromIndex)
    ChangeFromIndex = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_ChangeFromIndex)
    __call__ = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs___call__)
    FindIndex = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_FindIndex)
    ChangeFromKey = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_ChangeFromKey)
    Seek = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_Seek)
    ChangeSeek = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_ChangeSeek)
    FindFromKey = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_FindFromKey)
    Clear = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_Clear)
    __swig_destroy__ = _AIS.delete_AIS_IndexedDataMapOfOwnerPrs
    Size = _swig_new_instance_method(_AIS.AIS_IndexedDataMapOfOwnerPrs_Size)

# Register AIS_IndexedDataMapOfOwnerPrs in _AIS:
_AIS.AIS_IndexedDataMapOfOwnerPrs_swigregister(AIS_IndexedDataMapOfOwnerPrs)

class AIS_NListOfEntityOwner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_AIS.AIS_NListOfEntityOwner_begin)
    end = _swig_new_instance_method(_AIS.AIS_NListOfEntityOwner_end)
    cbegin = _swig_new_instance_method(_AIS.AIS_NListOfEntityOwner_cbegin)
    cend = _swig_new_instance_method(_AIS.AIS_NListOfEntityOwner_cend)

    def __init__(self, *args):
        _AIS.AIS_NListOfEntityOwner_swiginit(self, _AIS.new_AIS_NListOfEntityOwner(*args))
    Size = _swig_new_instance_method(_AIS.AIS_NListOfEntityOwner_Size)
    Assign = _swig_new_instance_method(_AIS.AIS_NListOfEntityOwner_Assign)
    Set = _swig_new_instance_method(_AIS.AIS_NListOfEntityOwner_Set)
    Clear = _swig_new_instance_method(_AIS.AIS_NListOfEntityOwner_Clear)
    First = _swig_new_instance_method(_AIS.AIS_NListOfEntityOwner_First)
    Last = _swig_new_instance_method(_AIS.AIS_NListOfEntityOwner_Last)
    Append = _swig_new_instance_method(_AIS.AIS_NListOfEntityOwner_Append)
    Prepend = _swig_new_instance_method(_AIS.AIS_NListOfEntityOwner_Prepend)
    RemoveFirst = _swig_new_instance_method(_AIS.AIS_NListOfEntityOwner_RemoveFirst)
    Remove = _swig_new_instance_method(_AIS.AIS_NListOfEntityOwner_Remove)
    InsertBefore = _swig_new_instance_method(_AIS.AIS_NListOfEntityOwner_InsertBefore)
    InsertAfter = _swig_new_instance_method(_AIS.AIS_NListOfEntityOwner_InsertAfter)
    Reverse = _swig_new_instance_method(_AIS.AIS_NListOfEntityOwner_Reverse)
    __swig_destroy__ = _AIS.delete_AIS_NListOfEntityOwner

# Register AIS_NListOfEntityOwner in _AIS:
_AIS.AIS_NListOfEntityOwner_swigregister(AIS_NListOfEntityOwner)

class AIS_SequenceOfInteractive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_begin)
    end = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_end)
    cbegin = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_cbegin)
    cend = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_cend)

    def __init__(self, *args):
        _AIS.AIS_SequenceOfInteractive_swiginit(self, _AIS.new_AIS_SequenceOfInteractive(*args))
    Size = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_Size)
    Length = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_Length)
    Lower = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_Lower)
    Upper = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_Upper)
    IsEmpty = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_IsEmpty)
    Reverse = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_Reverse)
    Exchange = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_Exchange)
    delNode = _swig_new_static_method(_AIS.AIS_SequenceOfInteractive_delNode)
    Clear = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_Clear)
    Assign = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_Assign)
    Set = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_Set)
    Remove = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_Remove)
    Append = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_Append)
    Prepend = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_Prepend)
    InsertBefore = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_InsertBefore)
    InsertAfter = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_InsertAfter)
    Split = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_Split)
    First = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_First)
    ChangeFirst = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_ChangeFirst)
    Last = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_Last)
    ChangeLast = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_ChangeLast)
    Value = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_Value)
    ChangeValue = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_ChangeValue)
    __call__ = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive___call__)
    SetValue = _swig_new_instance_method(_AIS.AIS_SequenceOfInteractive_SetValue)
    __swig_destroy__ = _AIS.delete_AIS_SequenceOfInteractive

# Register AIS_SequenceOfInteractive in _AIS:
_AIS.AIS_SequenceOfInteractive_swigregister(AIS_SequenceOfInteractive)
AIS_SequenceOfInteractive_delNode = _AIS.AIS_SequenceOfInteractive_delNode

class ais(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ComputeGeomCurve = _swig_new_static_method(_AIS.ais_ComputeGeomCurve)
    ComputeGeometry = _swig_new_static_method(_AIS.ais_ComputeGeometry)
    ComputeProjEdgePresentation = _swig_new_static_method(_AIS.ais_ComputeProjEdgePresentation)
    ComputeProjVertexPresentation = _swig_new_static_method(_AIS.ais_ComputeProjVertexPresentation)
    DistanceFromApex = _swig_new_static_method(_AIS.ais_DistanceFromApex)
    Farest = _swig_new_static_method(_AIS.ais_Farest)
    GetPlaneFromFace = _swig_new_static_method(_AIS.ais_GetPlaneFromFace)
    InDomain = _swig_new_static_method(_AIS.ais_InDomain)
    InitAngleBetweenCurvilinearFaces = _swig_new_static_method(_AIS.ais_InitAngleBetweenCurvilinearFaces)
    InitAngleBetweenPlanarFaces = _swig_new_static_method(_AIS.ais_InitAngleBetweenPlanarFaces)
    InitFaceLength = _swig_new_static_method(_AIS.ais_InitFaceLength)
    InitLengthBetweenCurvilinearFaces = _swig_new_static_method(_AIS.ais_InitLengthBetweenCurvilinearFaces)
    Nearest = _swig_new_static_method(_AIS.ais_Nearest)
    NearestApex = _swig_new_static_method(_AIS.ais_NearestApex)
    ProjectPointOnLine = _swig_new_static_method(_AIS.ais_ProjectPointOnLine)
    ProjectPointOnPlane = _swig_new_static_method(_AIS.ais_ProjectPointOnPlane)
    TranslatePointToBound = _swig_new_static_method(_AIS.ais_TranslatePointToBound)

    __repr__ = _dumps_object


    def __init__(self):
        _AIS.ais_swiginit(self, _AIS.new_ais())
    __swig_destroy__ = _AIS.delete_ais

# Register ais in _AIS:
_AIS.ais_swigregister(ais)
ais_ComputeGeomCurve = _AIS.ais_ComputeGeomCurve
ais_ComputeGeometry = _AIS.ais_ComputeGeometry
ais_ComputeProjEdgePresentation = _AIS.ais_ComputeProjEdgePresentation
ais_ComputeProjVertexPresentation = _AIS.ais_ComputeProjVertexPresentation
ais_DistanceFromApex = _AIS.ais_DistanceFromApex
ais_Farest = _AIS.ais_Farest
ais_GetPlaneFromFace = _AIS.ais_GetPlaneFromFace
ais_InDomain = _AIS.ais_InDomain
ais_InitAngleBetweenCurvilinearFaces = _AIS.ais_InitAngleBetweenCurvilinearFaces
ais_InitAngleBetweenPlanarFaces = _AIS.ais_InitAngleBetweenPlanarFaces
ais_InitFaceLength = _AIS.ais_InitFaceLength
ais_InitLengthBetweenCurvilinearFaces = _AIS.ais_InitLengthBetweenCurvilinearFaces
ais_Nearest = _AIS.ais_Nearest
ais_NearestApex = _AIS.ais_NearestApex
ais_ProjectPointOnLine = _AIS.ais_ProjectPointOnLine
ais_ProjectPointOnPlane = _AIS.ais_ProjectPointOnPlane
ais_TranslatePointToBound = _AIS.ais_TranslatePointToBound

class AIS_Animation(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates empty animation.
        	:param theAnimationName:
        	:type theAnimationName: TCollection_AsciiString
        	:rtype: None
        """
        _AIS.AIS_Animation_swiginit(self, _AIS.new_AIS_Animation(*args))
    Add = _swig_new_instance_method(_AIS.AIS_Animation_Add)
    Children = _swig_new_instance_method(_AIS.AIS_Animation_Children)
    Clear = _swig_new_instance_method(_AIS.AIS_Animation_Clear)
    CopyFrom = _swig_new_instance_method(_AIS.AIS_Animation_CopyFrom)
    Duration = _swig_new_instance_method(_AIS.AIS_Animation_Duration)
    ElapsedTime = _swig_new_instance_method(_AIS.AIS_Animation_ElapsedTime)
    Find = _swig_new_instance_method(_AIS.AIS_Animation_Find)
    HasOwnDuration = _swig_new_instance_method(_AIS.AIS_Animation_HasOwnDuration)
    IsStopped = _swig_new_instance_method(_AIS.AIS_Animation_IsStopped)
    Name = _swig_new_instance_method(_AIS.AIS_Animation_Name)
    OwnDuration = _swig_new_instance_method(_AIS.AIS_Animation_OwnDuration)
    Pause = _swig_new_instance_method(_AIS.AIS_Animation_Pause)
    Remove = _swig_new_instance_method(_AIS.AIS_Animation_Remove)
    Replace = _swig_new_instance_method(_AIS.AIS_Animation_Replace)
    SetOwnDuration = _swig_new_instance_method(_AIS.AIS_Animation_SetOwnDuration)
    SetStartPts = _swig_new_instance_method(_AIS.AIS_Animation_SetStartPts)
    Start = _swig_new_instance_method(_AIS.AIS_Animation_Start)
    StartPts = _swig_new_instance_method(_AIS.AIS_Animation_StartPts)
    StartTimer = _swig_new_instance_method(_AIS.AIS_Animation_StartTimer)
    Stop = _swig_new_instance_method(_AIS.AIS_Animation_Stop)
    Update = _swig_new_instance_method(_AIS.AIS_Animation_Update)
    UpdateTimer = _swig_new_instance_method(_AIS.AIS_Animation_UpdateTimer)
    UpdateTotalDuration = _swig_new_instance_method(_AIS.AIS_Animation_UpdateTotalDuration)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Animation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Animation

# Register AIS_Animation in _AIS:
_AIS.AIS_Animation_swigregister(AIS_Animation)

class AIS_AnimationProgress(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Pts = property(_AIS.AIS_AnimationProgress_Pts_get, _AIS.AIS_AnimationProgress_Pts_set)
    LocalPts = property(_AIS.AIS_AnimationProgress_LocalPts_get, _AIS.AIS_AnimationProgress_LocalPts_set)
    LocalNormalized = property(_AIS.AIS_AnimationProgress_LocalNormalized_get, _AIS.AIS_AnimationProgress_LocalNormalized_set)

    def __init__(self, *args):
        r"""
        * //!< normalized position within current animation within 0..1 range
        	:rtype: None
        """
        _AIS.AIS_AnimationProgress_swiginit(self, _AIS.new_AIS_AnimationProgress(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_AnimationProgress

# Register AIS_AnimationProgress in _AIS:
_AIS.AIS_AnimationProgress_swigregister(AIS_AnimationProgress)

class AIS_AttributeFilter(OCC.Core.SelectMgr.SelectMgr_Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructs an empty attribute filter object. This filter object determines whether selectable interactive objects have a non-null owner.
        	:rtype: None* Constructs an attribute filter object defined by the color attribute aCol.
        	:param aCol:
        	:type aCol: Quantity_NameOfColor
        	:rtype: None* Constructs an attribute filter object defined by the line width attribute aWidth.
        	:param aWidth:
        	:type aWidth: float
        	:rtype: None
        """
        _AIS.AIS_AttributeFilter_swiginit(self, _AIS.new_AIS_AttributeFilter(*args))
    HasColor = _swig_new_instance_method(_AIS.AIS_AttributeFilter_HasColor)
    HasWidth = _swig_new_instance_method(_AIS.AIS_AttributeFilter_HasWidth)
    SetColor = _swig_new_instance_method(_AIS.AIS_AttributeFilter_SetColor)
    SetWidth = _swig_new_instance_method(_AIS.AIS_AttributeFilter_SetWidth)
    UnsetColor = _swig_new_instance_method(_AIS.AIS_AttributeFilter_UnsetColor)
    UnsetWidth = _swig_new_instance_method(_AIS.AIS_AttributeFilter_UnsetWidth)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_AttributeFilter_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_AttributeFilter

# Register AIS_AttributeFilter in _AIS:
_AIS.AIS_AttributeFilter_swigregister(AIS_AttributeFilter)

class AIS_BadEdgeFilter(OCC.Core.SelectMgr.SelectMgr_Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructs an empty filter object for bad edges.
        	:rtype: None
        """
        _AIS.AIS_BadEdgeFilter_swiginit(self, _AIS.new_AIS_BadEdgeFilter(*args))
    AddEdge = _swig_new_instance_method(_AIS.AIS_BadEdgeFilter_AddEdge)
    RemoveEdges = _swig_new_instance_method(_AIS.AIS_BadEdgeFilter_RemoveEdges)
    SetContour = _swig_new_instance_method(_AIS.AIS_BadEdgeFilter_SetContour)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_BadEdgeFilter_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_BadEdgeFilter

# Register AIS_BadEdgeFilter in _AIS:
_AIS.AIS_BadEdgeFilter_swigregister(AIS_BadEdgeFilter)

class AIS_C0RegularityFilter(OCC.Core.SelectMgr.SelectMgr_Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param aShape:
        	:type aShape: TopoDS_Shape
        	:rtype: None
        """
        _AIS.AIS_C0RegularityFilter_swiginit(self, _AIS.new_AIS_C0RegularityFilter(*args))


    @staticmethod
    def DownCast(t):
      return Handle_AIS_C0RegularityFilter_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_C0RegularityFilter

# Register AIS_C0RegularityFilter in _AIS:
_AIS.AIS_C0RegularityFilter_swigregister(AIS_C0RegularityFilter)

class AIS_ColoredDrawer(OCC.Core.Prs3d.Prs3d_Drawer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    myIsHidden = property(_AIS.AIS_ColoredDrawer_myIsHidden_get, _AIS.AIS_ColoredDrawer_myIsHidden_set, doc=r"""myIsHidden : bool""")
    myHasOwnColor = property(_AIS.AIS_ColoredDrawer_myHasOwnColor_get, _AIS.AIS_ColoredDrawer_myHasOwnColor_set, doc=r"""myHasOwnColor : bool""")
    myHasOwnTransp = property(_AIS.AIS_ColoredDrawer_myHasOwnTransp_get, _AIS.AIS_ColoredDrawer_myHasOwnTransp_set, doc=r"""myHasOwnTransp : bool""")
    myHasOwnWidth = property(_AIS.AIS_ColoredDrawer_myHasOwnWidth_get, _AIS.AIS_ColoredDrawer_myHasOwnWidth_set, doc=r"""myHasOwnWidth : bool""")

    def __init__(self, *args):
        r"""
        * Default constructor.
        	:param theLink:
        	:type theLink: Prs3d_Drawer
        	:rtype: None
        """
        _AIS.AIS_ColoredDrawer_swiginit(self, _AIS.new_AIS_ColoredDrawer(*args))
    HasOwnColor = _swig_new_instance_method(_AIS.AIS_ColoredDrawer_HasOwnColor)
    HasOwnTransparency = _swig_new_instance_method(_AIS.AIS_ColoredDrawer_HasOwnTransparency)
    HasOwnWidth = _swig_new_instance_method(_AIS.AIS_ColoredDrawer_HasOwnWidth)
    IsHidden = _swig_new_instance_method(_AIS.AIS_ColoredDrawer_IsHidden)
    SetHidden = _swig_new_instance_method(_AIS.AIS_ColoredDrawer_SetHidden)
    SetOwnColor = _swig_new_instance_method(_AIS.AIS_ColoredDrawer_SetOwnColor)
    SetOwnTransparency = _swig_new_instance_method(_AIS.AIS_ColoredDrawer_SetOwnTransparency)
    SetOwnWidth = _swig_new_instance_method(_AIS.AIS_ColoredDrawer_SetOwnWidth)
    UnsetOwnColor = _swig_new_instance_method(_AIS.AIS_ColoredDrawer_UnsetOwnColor)
    UnsetOwnTransparency = _swig_new_instance_method(_AIS.AIS_ColoredDrawer_UnsetOwnTransparency)
    UnsetOwnWidth = _swig_new_instance_method(_AIS.AIS_ColoredDrawer_UnsetOwnWidth)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_ColoredDrawer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ColoredDrawer

# Register AIS_ColoredDrawer in _AIS:
_AIS.AIS_ColoredDrawer_swigregister(AIS_ColoredDrawer)

class AIS_DimensionOwner(OCC.Core.SelectMgr.SelectMgr_EntityOwner):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Initializes the dimension owner, theSO, and attributes it the priority, thePriority.
        	:param theSelObject:
        	:type theSelObject: SelectMgr_SelectableObject
        	:param theSelMode:
        	:type theSelMode: AIS_DimensionSelectionMode
        	:param thePriority: default value is 0
        	:type thePriority: int
        	:rtype: None
        """
        _AIS.AIS_DimensionOwner_swiginit(self, _AIS.new_AIS_DimensionOwner(*args))
    IsHilighted = _swig_new_instance_method(_AIS.AIS_DimensionOwner_IsHilighted)
    SelectionMode = _swig_new_instance_method(_AIS.AIS_DimensionOwner_SelectionMode)
    Unhilight = _swig_new_instance_method(_AIS.AIS_DimensionOwner_Unhilight)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_DimensionOwner_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_DimensionOwner

# Register AIS_DimensionOwner in _AIS:
_AIS.AIS_DimensionOwner_swigregister(AIS_DimensionOwner)

class AIS_ExclusionFilter(OCC.Core.SelectMgr.SelectMgr_Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructs an empty exclusion filter object defined by the flag setting ExclusionFlagOn. By default, the flag is set to true.
        	:param ExclusionFlagOn: default value is Standard_True
        	:type ExclusionFlagOn: bool
        	:rtype: None* All the AIS objects of <TypeToExclude> Will be rejected by the IsOk Method.
        	:param TypeToExclude:
        	:type TypeToExclude: AIS_KindOfInteractive
        	:param ExclusionFlagOn: default value is Standard_True
        	:type ExclusionFlagOn: bool
        	:rtype: None* Constructs an exclusion filter object defined by the enumeration value TypeToExclude, the signature SignatureInType, and the flag setting ExclusionFlagOn. By default, the flag is set to true.
        	:param TypeToExclude:
        	:type TypeToExclude: AIS_KindOfInteractive
        	:param SignatureInType:
        	:type SignatureInType: int
        	:param ExclusionFlagOn: default value is Standard_True
        	:type ExclusionFlagOn: bool
        	:rtype: None
        """
        _AIS.AIS_ExclusionFilter_swiginit(self, _AIS.new_AIS_ExclusionFilter(*args))
    Add = _swig_new_instance_method(_AIS.AIS_ExclusionFilter_Add)
    Clear = _swig_new_instance_method(_AIS.AIS_ExclusionFilter_Clear)
    IsExclusionFlagOn = _swig_new_instance_method(_AIS.AIS_ExclusionFilter_IsExclusionFlagOn)
    IsStored = _swig_new_instance_method(_AIS.AIS_ExclusionFilter_IsStored)
    ListOfSignature = _swig_new_instance_method(_AIS.AIS_ExclusionFilter_ListOfSignature)
    ListOfStoredTypes = _swig_new_instance_method(_AIS.AIS_ExclusionFilter_ListOfStoredTypes)
    Remove = _swig_new_instance_method(_AIS.AIS_ExclusionFilter_Remove)
    SetExclusionFlag = _swig_new_instance_method(_AIS.AIS_ExclusionFilter_SetExclusionFlag)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_ExclusionFilter_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ExclusionFilter

# Register AIS_ExclusionFilter in _AIS:
_AIS.AIS_ExclusionFilter_swigregister(AIS_ExclusionFilter)

class AIS_GlobalStatus(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param aStat:
        	:type aStat: AIS_DisplayStatus
        	:param aDispMode:
        	:type aDispMode: int
        	:param aSelMode:
        	:type aSelMode: int
        	:param ishilighted: default value is Standard_False
        	:type ishilighted: bool
        	:param aLayerIndex: default value is 0
        	:type aLayerIndex: int
        	:rtype: None
        """
        _AIS.AIS_GlobalStatus_swiginit(self, _AIS.new_AIS_GlobalStatus(*args))
    AddSelectionMode = _swig_new_instance_method(_AIS.AIS_GlobalStatus_AddSelectionMode)
    ClearSelectionModes = _swig_new_instance_method(_AIS.AIS_GlobalStatus_ClearSelectionModes)
    DisplayMode = _swig_new_instance_method(_AIS.AIS_GlobalStatus_DisplayMode)
    GetLayerIndex = _swig_new_instance_method(_AIS.AIS_GlobalStatus_GetLayerIndex)
    GraphicStatus = _swig_new_instance_method(_AIS.AIS_GlobalStatus_GraphicStatus)
    HilightStyle = _swig_new_instance_method(_AIS.AIS_GlobalStatus_HilightStyle)
    IsHilighted = _swig_new_instance_method(_AIS.AIS_GlobalStatus_IsHilighted)
    IsSModeIn = _swig_new_instance_method(_AIS.AIS_GlobalStatus_IsSModeIn)
    IsSubIntensityOn = _swig_new_instance_method(_AIS.AIS_GlobalStatus_IsSubIntensityOn)
    RemoveSelectionMode = _swig_new_instance_method(_AIS.AIS_GlobalStatus_RemoveSelectionMode)
    SelectionModes = _swig_new_instance_method(_AIS.AIS_GlobalStatus_SelectionModes)
    SetDisplayMode = _swig_new_instance_method(_AIS.AIS_GlobalStatus_SetDisplayMode)
    SetGraphicStatus = _swig_new_instance_method(_AIS.AIS_GlobalStatus_SetGraphicStatus)
    SetHilightStatus = _swig_new_instance_method(_AIS.AIS_GlobalStatus_SetHilightStatus)
    SetHilightStyle = _swig_new_instance_method(_AIS.AIS_GlobalStatus_SetHilightStyle)
    SetLayerIndex = _swig_new_instance_method(_AIS.AIS_GlobalStatus_SetLayerIndex)
    SubIntensityOff = _swig_new_instance_method(_AIS.AIS_GlobalStatus_SubIntensityOff)
    SubIntensityOn = _swig_new_instance_method(_AIS.AIS_GlobalStatus_SubIntensityOn)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_GlobalStatus_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_GlobalStatus

# Register AIS_GlobalStatus in _AIS:
_AIS.AIS_GlobalStatus_swigregister(AIS_GlobalStatus)

class AIS_GraphicTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GetInteriorColor = _swig_new_static_method(_AIS.AIS_GraphicTool_GetInteriorColor)
    GetLineAtt = _swig_new_static_method(_AIS.AIS_GraphicTool_GetLineAtt)
    GetLineColor = _swig_new_static_method(_AIS.AIS_GraphicTool_GetLineColor)
    GetLineType = _swig_new_static_method(_AIS.AIS_GraphicTool_GetLineType)
    GetLineWidth = _swig_new_static_method(_AIS.AIS_GraphicTool_GetLineWidth)
    GetMaterial = _swig_new_static_method(_AIS.AIS_GraphicTool_GetMaterial)

    __repr__ = _dumps_object


    def __init__(self):
        _AIS.AIS_GraphicTool_swiginit(self, _AIS.new_AIS_GraphicTool())
    __swig_destroy__ = _AIS.delete_AIS_GraphicTool

# Register AIS_GraphicTool in _AIS:
_AIS.AIS_GraphicTool_swigregister(AIS_GraphicTool)
AIS_GraphicTool_GetInteriorColor = _AIS.AIS_GraphicTool_GetInteriorColor
AIS_GraphicTool_GetLineAtt = _AIS.AIS_GraphicTool_GetLineAtt
AIS_GraphicTool_GetLineColor = _AIS.AIS_GraphicTool_GetLineColor
AIS_GraphicTool_GetLineType = _AIS.AIS_GraphicTool_GetLineType
AIS_GraphicTool_GetLineWidth = _AIS.AIS_GraphicTool_GetLineWidth
AIS_GraphicTool_GetMaterial = _AIS.AIS_GraphicTool_GetMaterial

class AIS_InteractiveContext(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * @name object display management Constructs the interactive context object defined by the principal viewer MainViewer.
        	:param MainViewer:
        	:type MainViewer: V3d_Viewer
        	:rtype: None
        """
        _AIS.AIS_InteractiveContext_swiginit(self, _AIS.new_AIS_InteractiveContext(*args))
    Activate = _swig_new_instance_method(_AIS.AIS_InteractiveContext_Activate)
    ActivatedModes = _swig_new_instance_method(_AIS.AIS_InteractiveContext_ActivatedModes)
    AddFilter = _swig_new_instance_method(_AIS.AIS_InteractiveContext_AddFilter)
    AddOrRemoveCurrentObject = _swig_new_instance_method(_AIS.AIS_InteractiveContext_AddOrRemoveCurrentObject)
    AddOrRemoveSelected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_AddOrRemoveSelected)
    AddSelect = _swig_new_instance_method(_AIS.AIS_InteractiveContext_AddSelect)
    Applicative = _swig_new_instance_method(_AIS.AIS_InteractiveContext_Applicative)
    AutomaticHilight = _swig_new_instance_method(_AIS.AIS_InteractiveContext_AutomaticHilight)
    BeginImmediateDraw = _swig_new_instance_method(_AIS.AIS_InteractiveContext_BeginImmediateDraw)
    BoundingBoxOfSelection = _swig_new_instance_method(_AIS.AIS_InteractiveContext_BoundingBoxOfSelection)
    ClearActiveSensitive = _swig_new_instance_method(_AIS.AIS_InteractiveContext_ClearActiveSensitive)
    ClearCurrents = _swig_new_instance_method(_AIS.AIS_InteractiveContext_ClearCurrents)
    ClearDetected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_ClearDetected)
    ClearPrs = _swig_new_instance_method(_AIS.AIS_InteractiveContext_ClearPrs)
    ClearSelected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_ClearSelected)
    Color = _swig_new_instance_method(_AIS.AIS_InteractiveContext_Color)
    Current = _swig_new_instance_method(_AIS.AIS_InteractiveContext_Current)
    CurrentViewer = _swig_new_instance_method(_AIS.AIS_InteractiveContext_CurrentViewer)
    Deactivate = _swig_new_instance_method(_AIS.AIS_InteractiveContext_Deactivate)
    DefaultDrawer = _swig_new_instance_method(_AIS.AIS_InteractiveContext_DefaultDrawer)
    DetectedCurrentObject = _swig_new_instance_method(_AIS.AIS_InteractiveContext_DetectedCurrentObject)
    DetectedCurrentOwner = _swig_new_instance_method(_AIS.AIS_InteractiveContext_DetectedCurrentOwner)
    DetectedCurrentShape = _swig_new_instance_method(_AIS.AIS_InteractiveContext_DetectedCurrentShape)
    DetectedInteractive = _swig_new_instance_method(_AIS.AIS_InteractiveContext_DetectedInteractive)
    DetectedOwner = _swig_new_instance_method(_AIS.AIS_InteractiveContext_DetectedOwner)
    DetectedShape = _swig_new_instance_method(_AIS.AIS_InteractiveContext_DetectedShape)
    DeviationAngle = _swig_new_instance_method(_AIS.AIS_InteractiveContext_DeviationAngle)
    DeviationCoefficient = _swig_new_instance_method(_AIS.AIS_InteractiveContext_DeviationCoefficient)
    DisableDrawHiddenLine = _swig_new_instance_method(_AIS.AIS_InteractiveContext_DisableDrawHiddenLine)
    Disconnect = _swig_new_instance_method(_AIS.AIS_InteractiveContext_Disconnect)
    Display = _swig_new_instance_method(_AIS.AIS_InteractiveContext_Display)
    DisplayActiveSensitive = _swig_new_instance_method(_AIS.AIS_InteractiveContext_DisplayActiveSensitive)
    DisplayAll = _swig_new_instance_method(_AIS.AIS_InteractiveContext_DisplayAll)
    DisplayMode = _swig_new_instance_method(_AIS.AIS_InteractiveContext_DisplayMode)
    DisplayPriority = _swig_new_instance_method(_AIS.AIS_InteractiveContext_DisplayPriority)
    DisplaySelected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_DisplaySelected)
    DisplayStatus = _swig_new_instance_method(_AIS.AIS_InteractiveContext_DisplayStatus)
    DisplayedObjects = _swig_new_instance_method(_AIS.AIS_InteractiveContext_DisplayedObjects)
    DrawHiddenLine = _swig_new_instance_method(_AIS.AIS_InteractiveContext_DrawHiddenLine)
    EnableDrawHiddenLine = _swig_new_instance_method(_AIS.AIS_InteractiveContext_EnableDrawHiddenLine)
    EndImmediateDraw = _swig_new_instance_method(_AIS.AIS_InteractiveContext_EndImmediateDraw)
    Erase = _swig_new_instance_method(_AIS.AIS_InteractiveContext_Erase)
    EraseAll = _swig_new_instance_method(_AIS.AIS_InteractiveContext_EraseAll)
    EraseSelected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_EraseSelected)
    ErasedObjects = _swig_new_instance_method(_AIS.AIS_InteractiveContext_ErasedObjects)
    Filters = _swig_new_instance_method(_AIS.AIS_InteractiveContext_Filters)
    FirstSelectedObject = _swig_new_instance_method(_AIS.AIS_InteractiveContext_FirstSelectedObject)
    FitSelected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_FitSelected)
    GetAutoActivateSelection = _swig_new_instance_method(_AIS.AIS_InteractiveContext_GetAutoActivateSelection)
    GetZLayer = _swig_new_instance_method(_AIS.AIS_InteractiveContext_GetZLayer)
    GravityPoint = _swig_new_instance_method(_AIS.AIS_InteractiveContext_GravityPoint)
    HLRAngle = _swig_new_instance_method(_AIS.AIS_InteractiveContext_HLRAngle)
    HLRDeviationCoefficient = _swig_new_instance_method(_AIS.AIS_InteractiveContext_HLRDeviationCoefficient)
    HasApplicative = _swig_new_instance_method(_AIS.AIS_InteractiveContext_HasApplicative)
    HasColor = _swig_new_instance_method(_AIS.AIS_InteractiveContext_HasColor)
    HasDetected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_HasDetected)
    HasDetectedShape = _swig_new_instance_method(_AIS.AIS_InteractiveContext_HasDetectedShape)
    HasLocation = _swig_new_instance_method(_AIS.AIS_InteractiveContext_HasLocation)
    HasNextDetected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_HasNextDetected)
    HasPolygonOffsets = _swig_new_instance_method(_AIS.AIS_InteractiveContext_HasPolygonOffsets)
    HasSelectedShape = _swig_new_instance_method(_AIS.AIS_InteractiveContext_HasSelectedShape)
    HiddenLineAspect = _swig_new_instance_method(_AIS.AIS_InteractiveContext_HiddenLineAspect)
    HighlightStyle = _swig_new_instance_method(_AIS.AIS_InteractiveContext_HighlightStyle)
    Hilight = _swig_new_instance_method(_AIS.AIS_InteractiveContext_Hilight)
    HilightCurrents = _swig_new_instance_method(_AIS.AIS_InteractiveContext_HilightCurrents)
    HilightNextDetected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_HilightNextDetected)
    HilightPreviousDetected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_HilightPreviousDetected)
    HilightSelected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_HilightSelected)
    HilightWithColor = _swig_new_instance_method(_AIS.AIS_InteractiveContext_HilightWithColor)
    ImmediateAdd = _swig_new_instance_method(_AIS.AIS_InteractiveContext_ImmediateAdd)
    InitCurrent = _swig_new_instance_method(_AIS.AIS_InteractiveContext_InitCurrent)
    InitDetected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_InitDetected)
    InitSelected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_InitSelected)
    IsCurrent = _swig_new_instance_method(_AIS.AIS_InteractiveContext_IsCurrent)
    IsDisplayed = _swig_new_instance_method(_AIS.AIS_InteractiveContext_IsDisplayed)
    IsHilighted = _swig_new_instance_method(_AIS.AIS_InteractiveContext_IsHilighted)
    IsImmediateModeOn = _swig_new_instance_method(_AIS.AIS_InteractiveContext_IsImmediateModeOn)
    IsSelected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_IsSelected)
    IsoNumber = _swig_new_instance_method(_AIS.AIS_InteractiveContext_IsoNumber)
    IsoOnPlane = _swig_new_instance_method(_AIS.AIS_InteractiveContext_IsoOnPlane)
    IsoOnTriangulation = _swig_new_instance_method(_AIS.AIS_InteractiveContext_IsoOnTriangulation)
    LastActiveView = _swig_new_instance_method(_AIS.AIS_InteractiveContext_LastActiveView)
    Load = _swig_new_instance_method(_AIS.AIS_InteractiveContext_Load)
    Location = _swig_new_instance_method(_AIS.AIS_InteractiveContext_Location)
    MainPrsMgr = _swig_new_instance_method(_AIS.AIS_InteractiveContext_MainPrsMgr)
    MainSelector = _swig_new_instance_method(_AIS.AIS_InteractiveContext_MainSelector)
    MoreCurrent = _swig_new_instance_method(_AIS.AIS_InteractiveContext_MoreCurrent)
    MoreDetected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_MoreDetected)
    MoreSelected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_MoreSelected)
    MoveTo = _swig_new_instance_method(_AIS.AIS_InteractiveContext_MoveTo)
    NbCurrents = _swig_new_instance_method(_AIS.AIS_InteractiveContext_NbCurrents)
    NbSelected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_NbSelected)
    NextCurrent = _swig_new_instance_method(_AIS.AIS_InteractiveContext_NextCurrent)
    NextDetected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_NextDetected)
    NextSelected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_NextSelected)
    ObjectsByDisplayStatus = _swig_new_instance_method(_AIS.AIS_InteractiveContext_ObjectsByDisplayStatus)
    ObjectsForView = _swig_new_instance_method(_AIS.AIS_InteractiveContext_ObjectsForView)
    ObjectsInside = _swig_new_instance_method(_AIS.AIS_InteractiveContext_ObjectsInside)
    PickingStrategy = _swig_new_instance_method(_AIS.AIS_InteractiveContext_PickingStrategy)
    PixelTolerance = _swig_new_instance_method(_AIS.AIS_InteractiveContext_PixelTolerance)
    PlaneSize = _swig_new_instance_method(_AIS.AIS_InteractiveContext_PlaneSize)
    PolygonOffsets = _swig_new_instance_method(_AIS.AIS_InteractiveContext_PolygonOffsets)
    PurgeDisplay = _swig_new_instance_method(_AIS.AIS_InteractiveContext_PurgeDisplay)
    RebuildSelectionStructs = _swig_new_instance_method(_AIS.AIS_InteractiveContext_RebuildSelectionStructs)
    RecomputePrsOnly = _swig_new_instance_method(_AIS.AIS_InteractiveContext_RecomputePrsOnly)
    RecomputeSelectionOnly = _swig_new_instance_method(_AIS.AIS_InteractiveContext_RecomputeSelectionOnly)
    Redisplay = _swig_new_instance_method(_AIS.AIS_InteractiveContext_Redisplay)
    RedrawImmediate = _swig_new_instance_method(_AIS.AIS_InteractiveContext_RedrawImmediate)
    Remove = _swig_new_instance_method(_AIS.AIS_InteractiveContext_Remove)
    RemoveAll = _swig_new_instance_method(_AIS.AIS_InteractiveContext_RemoveAll)
    RemoveFilter = _swig_new_instance_method(_AIS.AIS_InteractiveContext_RemoveFilter)
    RemoveFilters = _swig_new_instance_method(_AIS.AIS_InteractiveContext_RemoveFilters)
    ResetLocation = _swig_new_instance_method(_AIS.AIS_InteractiveContext_ResetLocation)
    Select = _swig_new_instance_method(_AIS.AIS_InteractiveContext_Select)
    SelectedInteractive = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SelectedInteractive)
    SelectedOwner = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SelectedOwner)
    SelectedShape = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SelectedShape)
    Selection = _swig_new_instance_method(_AIS.AIS_InteractiveContext_Selection)
    SelectionManager = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SelectionManager)
    SelectionStyle = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SelectionStyle)
    SetAngleAndDeviation = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetAngleAndDeviation)
    SetAutoActivateSelection = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetAutoActivateSelection)
    SetAutomaticHilight = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetAutomaticHilight)
    SetColor = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetColor)
    SetCurrentFacingModel = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetCurrentFacingModel)
    SetCurrentObject = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetCurrentObject)
    SetDeviationAngle = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetDeviationAngle)
    SetDeviationCoefficient = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetDeviationCoefficient)
    SetDisplayMode = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetDisplayMode)
    SetDisplayPriority = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetDisplayPriority)
    SetHLRAngle = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetHLRAngle)
    SetHLRAngleAndDeviation = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetHLRAngleAndDeviation)
    SetHLRDeviationAngle = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetHLRDeviationAngle)
    SetHLRDeviationCoefficient = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetHLRDeviationCoefficient)
    SetHiddenLineAspect = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetHiddenLineAspect)
    SetHighlightStyle = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetHighlightStyle)
    SetIsoNumber = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetIsoNumber)
    SetLocalAttributes = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetLocalAttributes)
    SetLocation = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetLocation)
    SetMaterial = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetMaterial)
    SetPickingStrategy = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetPickingStrategy)
    SetPixelTolerance = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetPixelTolerance)
    SetPlaneSize = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetPlaneSize)
    SetPolygonOffsets = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetPolygonOffsets)
    SetSelected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetSelected)
    SetSelectedAspect = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetSelectedAspect)
    SetSelectedState = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetSelectedState)
    SetSelection = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetSelection)
    SetSelectionModeActive = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetSelectionModeActive)
    SetSelectionSensitivity = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetSelectionSensitivity)
    SetSelectionStyle = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetSelectionStyle)
    SetSubIntensityColor = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetSubIntensityColor)
    SetToHilightSelected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetToHilightSelected)
    SetTransformPersistence = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetTransformPersistence)
    SetTransparency = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetTransparency)
    SetTrihedronSize = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetTrihedronSize)
    SetViewAffinity = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetViewAffinity)
    SetWidth = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetWidth)
    SetZLayer = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SetZLayer)
    ShiftSelect = _swig_new_instance_method(_AIS.AIS_InteractiveContext_ShiftSelect)
    SubIntensityColor = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SubIntensityColor)
    SubIntensityOff = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SubIntensityOff)
    SubIntensityOn = _swig_new_instance_method(_AIS.AIS_InteractiveContext_SubIntensityOn)
    ToHilightSelected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_ToHilightSelected)
    TrihedronSize = _swig_new_instance_method(_AIS.AIS_InteractiveContext_TrihedronSize)
    Unhilight = _swig_new_instance_method(_AIS.AIS_InteractiveContext_Unhilight)
    UnhilightCurrents = _swig_new_instance_method(_AIS.AIS_InteractiveContext_UnhilightCurrents)
    UnhilightSelected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_UnhilightSelected)
    UnsetColor = _swig_new_instance_method(_AIS.AIS_InteractiveContext_UnsetColor)
    UnsetDisplayMode = _swig_new_instance_method(_AIS.AIS_InteractiveContext_UnsetDisplayMode)
    UnsetLocalAttributes = _swig_new_instance_method(_AIS.AIS_InteractiveContext_UnsetLocalAttributes)
    UnsetMaterial = _swig_new_instance_method(_AIS.AIS_InteractiveContext_UnsetMaterial)
    UnsetTransparency = _swig_new_instance_method(_AIS.AIS_InteractiveContext_UnsetTransparency)
    UnsetWidth = _swig_new_instance_method(_AIS.AIS_InteractiveContext_UnsetWidth)
    Update = _swig_new_instance_method(_AIS.AIS_InteractiveContext_Update)
    UpdateCurrent = _swig_new_instance_method(_AIS.AIS_InteractiveContext_UpdateCurrent)
    UpdateCurrentViewer = _swig_new_instance_method(_AIS.AIS_InteractiveContext_UpdateCurrentViewer)
    UpdateSelected = _swig_new_instance_method(_AIS.AIS_InteractiveContext_UpdateSelected)
    Width = _swig_new_instance_method(_AIS.AIS_InteractiveContext_Width)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_InteractiveContext_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_InteractiveContext

# Register AIS_InteractiveContext in _AIS:
_AIS.AIS_InteractiveContext_swigregister(AIS_InteractiveContext)

class AIS_InteractiveObject(OCC.Core.SelectMgr.SelectMgr_SelectableObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ClearOwner = _swig_new_instance_method(_AIS.AIS_InteractiveObject_ClearOwner)
    DumpJsonToString = _swig_new_instance_method(_AIS.AIS_InteractiveObject_DumpJsonToString)
    GetContext = _swig_new_instance_method(_AIS.AIS_InteractiveObject_GetContext)
    GetOwner = _swig_new_instance_method(_AIS.AIS_InteractiveObject_GetOwner)
    HasInteractiveContext = _swig_new_instance_method(_AIS.AIS_InteractiveObject_HasInteractiveContext)
    HasOwner = _swig_new_instance_method(_AIS.AIS_InteractiveObject_HasOwner)
    HasPresentation = _swig_new_instance_method(_AIS.AIS_InteractiveObject_HasPresentation)
    InteractiveContext = _swig_new_instance_method(_AIS.AIS_InteractiveObject_InteractiveContext)
    Presentation = _swig_new_instance_method(_AIS.AIS_InteractiveObject_Presentation)
    Redisplay = _swig_new_instance_method(_AIS.AIS_InteractiveObject_Redisplay)
    SetAspect = _swig_new_instance_method(_AIS.AIS_InteractiveObject_SetAspect)
    SetContext = _swig_new_instance_method(_AIS.AIS_InteractiveObject_SetContext)
    SetOwner = _swig_new_instance_method(_AIS.AIS_InteractiveObject_SetOwner)
    Signature = _swig_new_instance_method(_AIS.AIS_InteractiveObject_Signature)
    Type = _swig_new_instance_method(_AIS.AIS_InteractiveObject_Type)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_InteractiveObject_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_InteractiveObject

# Register AIS_InteractiveObject in _AIS:
_AIS.AIS_InteractiveObject_swigregister(AIS_InteractiveObject)

class AIS_ManipulatorOwner(OCC.Core.SelectMgr.SelectMgr_EntityOwner):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param theSelObject:
        	:type theSelObject: SelectMgr_SelectableObject
        	:param theIndex:
        	:type theIndex: int
        	:param theMode:
        	:type theMode: AIS_ManipulatorMode
        	:param thePriority: default value is 0
        	:type thePriority: int
        	:rtype: None
        """
        _AIS.AIS_ManipulatorOwner_swiginit(self, _AIS.new_AIS_ManipulatorOwner(*args))
    Index = _swig_new_instance_method(_AIS.AIS_ManipulatorOwner_Index)
    IsHilighted = _swig_new_instance_method(_AIS.AIS_ManipulatorOwner_IsHilighted)
    Mode = _swig_new_instance_method(_AIS.AIS_ManipulatorOwner_Mode)
    Unhilight = _swig_new_instance_method(_AIS.AIS_ManipulatorOwner_Unhilight)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_ManipulatorOwner_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ManipulatorOwner

# Register AIS_ManipulatorOwner in _AIS:
_AIS.AIS_ManipulatorOwner_swigregister(AIS_ManipulatorOwner)

class AIS_PointCloudOwner(OCC.Core.SelectMgr.SelectMgr_EntityOwner):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * ////DEFINE_STANDARD_RTTIEXT(AIS_PointCloudOwner, SelectMgr_EntityOwner) Main constructor.
        	:param theOrigin:
        	:type theOrigin: AIS_PointCloud
        	:rtype: None
        """
        _AIS.AIS_PointCloudOwner_swiginit(self, _AIS.new_AIS_PointCloudOwner(*args))
    Clear = _swig_new_instance_method(_AIS.AIS_PointCloudOwner_Clear)
    DetectedPoints = _swig_new_instance_method(_AIS.AIS_PointCloudOwner_DetectedPoints)
    IsForcedHilight = _swig_new_instance_method(_AIS.AIS_PointCloudOwner_IsForcedHilight)
    SelectedPoints = _swig_new_instance_method(_AIS.AIS_PointCloudOwner_SelectedPoints)
    Unhilight = _swig_new_instance_method(_AIS.AIS_PointCloudOwner_Unhilight)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_PointCloudOwner

# Register AIS_PointCloudOwner in _AIS:
_AIS.AIS_PointCloudOwner_swigregister(AIS_PointCloudOwner)

class AIS_Selection(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * creates a new selection.
        	:rtype: None
        """
        _AIS.AIS_Selection_swiginit(self, _AIS.new_AIS_Selection(*args))
    AddSelect = _swig_new_instance_method(_AIS.AIS_Selection_AddSelect)
    Clear = _swig_new_instance_method(_AIS.AIS_Selection_Clear)
    ClearAndSelect = _swig_new_instance_method(_AIS.AIS_Selection_ClearAndSelect)
    Extent = _swig_new_instance_method(_AIS.AIS_Selection_Extent)
    Init = _swig_new_instance_method(_AIS.AIS_Selection_Init)
    IsEmpty = _swig_new_instance_method(_AIS.AIS_Selection_IsEmpty)
    IsSelected = _swig_new_instance_method(_AIS.AIS_Selection_IsSelected)
    More = _swig_new_instance_method(_AIS.AIS_Selection_More)
    Next = _swig_new_instance_method(_AIS.AIS_Selection_Next)
    Objects = _swig_new_instance_method(_AIS.AIS_Selection_Objects)
    Select = _swig_new_instance_method(_AIS.AIS_Selection_Select)
    Value = _swig_new_instance_method(_AIS.AIS_Selection_Value)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Selection_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Selection

# Register AIS_Selection in _AIS:
_AIS.AIS_Selection_swigregister(AIS_Selection)

class AIS_TrihedronOwner(OCC.Core.SelectMgr.SelectMgr_EntityOwner):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates an owner of AIS_Trihedron object.
        	:param theSelObject:
        	:type theSelObject: SelectMgr_SelectableObject
        	:param theDatumPart:
        	:type theDatumPart: Prs3d_DatumParts
        	:param thePriority:
        	:type thePriority: int
        	:rtype: None
        """
        _AIS.AIS_TrihedronOwner_swiginit(self, _AIS.new_AIS_TrihedronOwner(*args))
    DatumPart = _swig_new_instance_method(_AIS.AIS_TrihedronOwner_DatumPart)
    IsHilighted = _swig_new_instance_method(_AIS.AIS_TrihedronOwner_IsHilighted)
    Unhilight = _swig_new_instance_method(_AIS.AIS_TrihedronOwner_Unhilight)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_TrihedronOwner_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_TrihedronOwner

# Register AIS_TrihedronOwner in _AIS:
_AIS.AIS_TrihedronOwner_swigregister(AIS_TrihedronOwner)

class AIS_TypeFilter(OCC.Core.SelectMgr.SelectMgr_Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Initializes filter for type, aGivenKind.
        	:param aGivenKind:
        	:type aGivenKind: AIS_KindOfInteractive
        	:rtype: None
        """
        _AIS.AIS_TypeFilter_swiginit(self, _AIS.new_AIS_TypeFilter(*args))


    @staticmethod
    def DownCast(t):
      return Handle_AIS_TypeFilter_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_TypeFilter

# Register AIS_TypeFilter in _AIS:
_AIS.AIS_TypeFilter_swigregister(AIS_TypeFilter)

class AIS_ViewController(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:rtype: None
        """
        _AIS.AIS_ViewController_swiginit(self, _AIS.new_AIS_ViewController(*args))
    AbortViewAnimation = _swig_new_instance_method(_AIS.AIS_ViewController_AbortViewAnimation)
    AddTouchPoint = _swig_new_instance_method(_AIS.AIS_ViewController_AddTouchPoint)
    ChangeInputBuffer = _swig_new_instance_method(_AIS.AIS_ViewController_ChangeInputBuffer)
    ChangeKeys = _swig_new_instance_method(_AIS.AIS_ViewController_ChangeKeys)
    ChangeMouseGestureMap = _swig_new_instance_method(_AIS.AIS_ViewController_ChangeMouseGestureMap)
    EventTime = _swig_new_instance_method(_AIS.AIS_ViewController_EventTime)
    FetchNavigationKeys = _swig_new_instance_method(_AIS.AIS_ViewController_FetchNavigationKeys)
    FlushViewEvents = _swig_new_instance_method(_AIS.AIS_ViewController_FlushViewEvents)
    GravityPoint = _swig_new_instance_method(_AIS.AIS_ViewController_GravityPoint)
    HandleViewEvents = _swig_new_instance_method(_AIS.AIS_ViewController_HandleViewEvents)
    HasPreviousMoveTo = _swig_new_instance_method(_AIS.AIS_ViewController_HasPreviousMoveTo)
    HasTouchPoints = _swig_new_instance_method(_AIS.AIS_ViewController_HasTouchPoints)
    InputBuffer = _swig_new_instance_method(_AIS.AIS_ViewController_InputBuffer)
    KeyDown = _swig_new_instance_method(_AIS.AIS_ViewController_KeyDown)
    KeyFromAxis = _swig_new_instance_method(_AIS.AIS_ViewController_KeyFromAxis)
    KeyUp = _swig_new_instance_method(_AIS.AIS_ViewController_KeyUp)
    Keys = _swig_new_instance_method(_AIS.AIS_ViewController_Keys)
    LastMouseFlags = _swig_new_instance_method(_AIS.AIS_ViewController_LastMouseFlags)
    LastMousePosition = _swig_new_instance_method(_AIS.AIS_ViewController_LastMousePosition)
    MinZoomDistance = _swig_new_instance_method(_AIS.AIS_ViewController_MinZoomDistance)
    MouseAcceleration = _swig_new_instance_method(_AIS.AIS_ViewController_MouseAcceleration)
    MouseDoubleClickInterval = _swig_new_instance_method(_AIS.AIS_ViewController_MouseDoubleClickInterval)
    MouseGestureMap = _swig_new_instance_method(_AIS.AIS_ViewController_MouseGestureMap)
    NavigationMode = _swig_new_instance_method(_AIS.AIS_ViewController_NavigationMode)
    OnObjectDragged = _swig_new_instance_method(_AIS.AIS_ViewController_OnObjectDragged)
    OnSelectionChanged = _swig_new_instance_method(_AIS.AIS_ViewController_OnSelectionChanged)
    OrbitAcceleration = _swig_new_instance_method(_AIS.AIS_ViewController_OrbitAcceleration)
    PickPoint = _swig_new_instance_method(_AIS.AIS_ViewController_PickPoint)
    PressMouseButton = _swig_new_instance_method(_AIS.AIS_ViewController_PressMouseButton)
    PressedMouseButtons = _swig_new_instance_method(_AIS.AIS_ViewController_PressedMouseButtons)
    PreviousMoveTo = _swig_new_instance_method(_AIS.AIS_ViewController_PreviousMoveTo)
    ReleaseMouseButton = _swig_new_instance_method(_AIS.AIS_ViewController_ReleaseMouseButton)
    RemoveTouchPoint = _swig_new_instance_method(_AIS.AIS_ViewController_RemoveTouchPoint)
    ResetPreviousMoveTo = _swig_new_instance_method(_AIS.AIS_ViewController_ResetPreviousMoveTo)
    ResetViewInput = _swig_new_instance_method(_AIS.AIS_ViewController_ResetViewInput)
    RotationMode = _swig_new_instance_method(_AIS.AIS_ViewController_RotationMode)
    SelectInViewer = _swig_new_instance_method(_AIS.AIS_ViewController_SelectInViewer)
    SetAllowDragging = _swig_new_instance_method(_AIS.AIS_ViewController_SetAllowDragging)
    SetAllowHighlight = _swig_new_instance_method(_AIS.AIS_ViewController_SetAllowHighlight)
    SetAllowPanning = _swig_new_instance_method(_AIS.AIS_ViewController_SetAllowPanning)
    SetAllowRotation = _swig_new_instance_method(_AIS.AIS_ViewController_SetAllowRotation)
    SetAllowTouchZRotation = _swig_new_instance_method(_AIS.AIS_ViewController_SetAllowTouchZRotation)
    SetAllowZFocus = _swig_new_instance_method(_AIS.AIS_ViewController_SetAllowZFocus)
    SetAllowZooming = _swig_new_instance_method(_AIS.AIS_ViewController_SetAllowZooming)
    SetInvertPitch = _swig_new_instance_method(_AIS.AIS_ViewController_SetInvertPitch)
    SetLockOrbitZUp = _swig_new_instance_method(_AIS.AIS_ViewController_SetLockOrbitZUp)
    SetMinZoomDistance = _swig_new_instance_method(_AIS.AIS_ViewController_SetMinZoomDistance)
    SetMouseAcceleration = _swig_new_instance_method(_AIS.AIS_ViewController_SetMouseAcceleration)
    SetMouseDoubleClickInterval = _swig_new_instance_method(_AIS.AIS_ViewController_SetMouseDoubleClickInterval)
    SetNavigationMode = _swig_new_instance_method(_AIS.AIS_ViewController_SetNavigationMode)
    SetOrbitAcceleration = _swig_new_instance_method(_AIS.AIS_ViewController_SetOrbitAcceleration)
    SetRotationMode = _swig_new_instance_method(_AIS.AIS_ViewController_SetRotationMode)
    SetShowPanAnchorPoint = _swig_new_instance_method(_AIS.AIS_ViewController_SetShowPanAnchorPoint)
    SetShowRotateCenter = _swig_new_instance_method(_AIS.AIS_ViewController_SetShowRotateCenter)
    SetStickToRayOnRotation = _swig_new_instance_method(_AIS.AIS_ViewController_SetStickToRayOnRotation)
    SetStickToRayOnZoom = _swig_new_instance_method(_AIS.AIS_ViewController_SetStickToRayOnZoom)
    SetThrustSpeed = _swig_new_instance_method(_AIS.AIS_ViewController_SetThrustSpeed)
    SetTouchToleranceScale = _swig_new_instance_method(_AIS.AIS_ViewController_SetTouchToleranceScale)
    SetViewAnimation = _swig_new_instance_method(_AIS.AIS_ViewController_SetViewAnimation)
    SetWalkSpeedAbsolute = _swig_new_instance_method(_AIS.AIS_ViewController_SetWalkSpeedAbsolute)
    SetWalkSpeedRelative = _swig_new_instance_method(_AIS.AIS_ViewController_SetWalkSpeedRelative)
    ThrustSpeed = _swig_new_instance_method(_AIS.AIS_ViewController_ThrustSpeed)
    ToAllowDragging = _swig_new_instance_method(_AIS.AIS_ViewController_ToAllowDragging)
    ToAllowHighlight = _swig_new_instance_method(_AIS.AIS_ViewController_ToAllowHighlight)
    ToAllowPanning = _swig_new_instance_method(_AIS.AIS_ViewController_ToAllowPanning)
    ToAllowRotation = _swig_new_instance_method(_AIS.AIS_ViewController_ToAllowRotation)
    ToAllowTouchZRotation = _swig_new_instance_method(_AIS.AIS_ViewController_ToAllowTouchZRotation)
    ToAllowZFocus = _swig_new_instance_method(_AIS.AIS_ViewController_ToAllowZFocus)
    ToAllowZooming = _swig_new_instance_method(_AIS.AIS_ViewController_ToAllowZooming)
    ToInvertPitch = _swig_new_instance_method(_AIS.AIS_ViewController_ToInvertPitch)
    ToLockOrbitZUp = _swig_new_instance_method(_AIS.AIS_ViewController_ToLockOrbitZUp)
    ToShowPanAnchorPoint = _swig_new_instance_method(_AIS.AIS_ViewController_ToShowPanAnchorPoint)
    ToShowRotateCenter = _swig_new_instance_method(_AIS.AIS_ViewController_ToShowRotateCenter)
    ToStickToRayOnRotation = _swig_new_instance_method(_AIS.AIS_ViewController_ToStickToRayOnRotation)
    ToStickToRayOnZoom = _swig_new_instance_method(_AIS.AIS_ViewController_ToStickToRayOnZoom)
    TouchToleranceScale = _swig_new_instance_method(_AIS.AIS_ViewController_TouchToleranceScale)
    UpdateMouseButtons = _swig_new_instance_method(_AIS.AIS_ViewController_UpdateMouseButtons)
    UpdateMouseClick = _swig_new_instance_method(_AIS.AIS_ViewController_UpdateMouseClick)
    UpdateMousePosition = _swig_new_instance_method(_AIS.AIS_ViewController_UpdateMousePosition)
    UpdateMouseScroll = _swig_new_instance_method(_AIS.AIS_ViewController_UpdateMouseScroll)
    UpdatePolySelection = _swig_new_instance_method(_AIS.AIS_ViewController_UpdatePolySelection)
    UpdateRubberBand = _swig_new_instance_method(_AIS.AIS_ViewController_UpdateRubberBand)
    UpdateTouchPoint = _swig_new_instance_method(_AIS.AIS_ViewController_UpdateTouchPoint)
    UpdateViewOrientation = _swig_new_instance_method(_AIS.AIS_ViewController_UpdateViewOrientation)
    UpdateZRotation = _swig_new_instance_method(_AIS.AIS_ViewController_UpdateZRotation)
    UpdateZoom = _swig_new_instance_method(_AIS.AIS_ViewController_UpdateZoom)
    ViewAnimation = _swig_new_instance_method(_AIS.AIS_ViewController_ViewAnimation)
    WalkSpeedAbsolute = _swig_new_instance_method(_AIS.AIS_ViewController_WalkSpeedAbsolute)
    WalkSpeedRelative = _swig_new_instance_method(_AIS.AIS_ViewController_WalkSpeedRelative)
    handleCameraActions = _swig_new_instance_method(_AIS.AIS_ViewController_handleCameraActions)
    handleMoveTo = _swig_new_instance_method(_AIS.AIS_ViewController_handleMoveTo)
    handleOrbitRotation = _swig_new_instance_method(_AIS.AIS_ViewController_handleOrbitRotation)
    handlePanning = _swig_new_instance_method(_AIS.AIS_ViewController_handlePanning)
    handleViewRedraw = _swig_new_instance_method(_AIS.AIS_ViewController_handleViewRedraw)
    handleViewRotation = _swig_new_instance_method(_AIS.AIS_ViewController_handleViewRotation)
    handleZFocusScroll = _swig_new_instance_method(_AIS.AIS_ViewController_handleZFocusScroll)
    handleZRotate = _swig_new_instance_method(_AIS.AIS_ViewController_handleZRotate)
    handleZoom = _swig_new_instance_method(_AIS.AIS_ViewController_handleZoom)
    hasPanningAnchorPoint = _swig_new_instance_method(_AIS.AIS_ViewController_hasPanningAnchorPoint)
    panningAnchorPoint = _swig_new_instance_method(_AIS.AIS_ViewController_panningAnchorPoint)
    setAskNextFrame = _swig_new_instance_method(_AIS.AIS_ViewController_setAskNextFrame)
    setPanningAnchorPoint = _swig_new_instance_method(_AIS.AIS_ViewController_setPanningAnchorPoint)
    toAskNextFrame = _swig_new_instance_method(_AIS.AIS_ViewController_toAskNextFrame)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ViewController

# Register AIS_ViewController in _AIS:
_AIS.AIS_ViewController_swigregister(AIS_ViewController)

class AIS_ViewCubeOwner(OCC.Core.SelectMgr.SelectMgr_EntityOwner):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * ////DEFINE_STANDARD_RTTIEXT(AIS_ViewCubeOwner, SelectMgr_EntityOwner) Main constructor.
        	:param theObject:
        	:type theObject: AIS_ViewCube
        	:param theOrient:
        	:type theOrient: V3d_TypeOfOrientation
        	:param thePriority: default value is 5
        	:type thePriority: int
        	:rtype: None
        """
        _AIS.AIS_ViewCubeOwner_swiginit(self, _AIS.new_AIS_ViewCubeOwner(*args))
    HandleMouseClick = _swig_new_instance_method(_AIS.AIS_ViewCubeOwner_HandleMouseClick)
    IsForcedHilight = _swig_new_instance_method(_AIS.AIS_ViewCubeOwner_IsForcedHilight)
    MainOrientation = _swig_new_instance_method(_AIS.AIS_ViewCubeOwner_MainOrientation)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ViewCubeOwner

# Register AIS_ViewCubeOwner in _AIS:
_AIS.AIS_ViewCubeOwner_swigregister(AIS_ViewCubeOwner)

class AIS_ViewInputBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IsNewGesture = property(_AIS.AIS_ViewInputBuffer_IsNewGesture_get, _AIS.AIS_ViewInputBuffer_IsNewGesture_set)
    ZoomActions = property(_AIS.AIS_ViewInputBuffer_ZoomActions_get, _AIS.AIS_ViewInputBuffer_ZoomActions_set)
    Orientation = property(_AIS.AIS_ViewInputBuffer_Orientation_get, _AIS.AIS_ViewInputBuffer_Orientation_set)
    MoveTo = property(_AIS.AIS_ViewInputBuffer_MoveTo_get, _AIS.AIS_ViewInputBuffer_MoveTo_set)
    Selection = property(_AIS.AIS_ViewInputBuffer_Selection_get, _AIS.AIS_ViewInputBuffer_Selection_set)
    Panning = property(_AIS.AIS_ViewInputBuffer_Panning_get, _AIS.AIS_ViewInputBuffer_Panning_set)
    Dragging = property(_AIS.AIS_ViewInputBuffer_Dragging_get, _AIS.AIS_ViewInputBuffer_Dragging_set)
    OrbitRotation = property(_AIS.AIS_ViewInputBuffer_OrbitRotation_get, _AIS.AIS_ViewInputBuffer_OrbitRotation_set)
    ViewRotation = property(_AIS.AIS_ViewInputBuffer_ViewRotation_get, _AIS.AIS_ViewInputBuffer_ViewRotation_set)
    ZRotate = property(_AIS.AIS_ViewInputBuffer_ZRotate_get, _AIS.AIS_ViewInputBuffer_ZRotate_set)

    def __init__(self, *args):
        r""":rtype: None"""
        _AIS.AIS_ViewInputBuffer_swiginit(self, _AIS.new_AIS_ViewInputBuffer(*args))
    Reset = _swig_new_instance_method(_AIS.AIS_ViewInputBuffer_Reset)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ViewInputBuffer

# Register AIS_ViewInputBuffer in _AIS:
_AIS.AIS_ViewInputBuffer_swigregister(AIS_ViewInputBuffer)

class AIS_WalkDelta(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:rtype: None
        """
        _AIS.AIS_WalkDelta_swiginit(self, _AIS.new_AIS_WalkDelta(*args))
    IsCrouching = _swig_new_instance_method(_AIS.AIS_WalkDelta_IsCrouching)
    IsEmpty = _swig_new_instance_method(_AIS.AIS_WalkDelta_IsEmpty)
    IsJumping = _swig_new_instance_method(_AIS.AIS_WalkDelta_IsJumping)
    IsRunning = _swig_new_instance_method(_AIS.AIS_WalkDelta_IsRunning)
    SetCrouching = _swig_new_instance_method(_AIS.AIS_WalkDelta_SetCrouching)
    SetJumping = _swig_new_instance_method(_AIS.AIS_WalkDelta_SetJumping)
    SetRunning = _swig_new_instance_method(_AIS.AIS_WalkDelta_SetRunning)
    ToMove = _swig_new_instance_method(_AIS.AIS_WalkDelta_ToMove)
    ToRotate = _swig_new_instance_method(_AIS.AIS_WalkDelta_ToRotate)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_WalkDelta

# Register AIS_WalkDelta in _AIS:
_AIS.AIS_WalkDelta_swigregister(AIS_WalkDelta)

class AIS_WalkPart(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Value = property(_AIS.AIS_WalkPart_Value_get, _AIS.AIS_WalkPart_Value_set)
    Pressure = property(_AIS.AIS_WalkPart_Pressure_get, _AIS.AIS_WalkPart_Pressure_set)
    Duration = property(_AIS.AIS_WalkPart_Duration_get, _AIS.AIS_WalkPart_Duration_set)

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:rtype: None
        """
        _AIS.AIS_WalkPart_swiginit(self, _AIS.new_AIS_WalkPart(*args))
    IsEmpty = _swig_new_instance_method(_AIS.AIS_WalkPart_IsEmpty)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_WalkPart

# Register AIS_WalkPart in _AIS:
_AIS.AIS_WalkPart_swigregister(AIS_WalkPart)

class AIS_AnimationCamera(AIS_Animation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Main constructor.
        	:param theAnimationName:
        	:type theAnimationName: TCollection_AsciiString
        	:param theView:
        	:type theView: V3d_View
        	:rtype: None
        """
        _AIS.AIS_AnimationCamera_swiginit(self, _AIS.new_AIS_AnimationCamera(*args))
    CameraEnd = _swig_new_instance_method(_AIS.AIS_AnimationCamera_CameraEnd)
    CameraStart = _swig_new_instance_method(_AIS.AIS_AnimationCamera_CameraStart)
    SetCameraEnd = _swig_new_instance_method(_AIS.AIS_AnimationCamera_SetCameraEnd)
    SetCameraStart = _swig_new_instance_method(_AIS.AIS_AnimationCamera_SetCameraStart)
    SetView = _swig_new_instance_method(_AIS.AIS_AnimationCamera_SetView)
    View = _swig_new_instance_method(_AIS.AIS_AnimationCamera_View)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_AnimationCamera_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_AnimationCamera

# Register AIS_AnimationCamera in _AIS:
_AIS.AIS_AnimationCamera_swigregister(AIS_AnimationCamera)

class AIS_AnimationObject(AIS_Animation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructor with initialization. Note that start/end transformations specify exactly local transformation of the object, not the transformation to be applied to existing local transformation. @param theAnimationName animation identifier @param theContext interactive context where object have been displayed @param theObject object to apply local transformation @param theTrsfStart local transformation at the start of animation (e.g. theObject->LocalTransformation()) @param theTrsfEnd local transformation at the end of animation
        	:param theAnimationName:
        	:type theAnimationName: TCollection_AsciiString
        	:param theContext:
        	:type theContext: AIS_InteractiveContext
        	:param theObject:
        	:type theObject: AIS_InteractiveObject
        	:param theTrsfStart:
        	:type theTrsfStart: gp_Trsf
        	:param theTrsfEnd:
        	:type theTrsfEnd: gp_Trsf
        	:rtype: None
        """
        _AIS.AIS_AnimationObject_swiginit(self, _AIS.new_AIS_AnimationObject(*args))


    @staticmethod
    def DownCast(t):
      return Handle_AIS_AnimationObject_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_AnimationObject

# Register AIS_AnimationObject in _AIS:
_AIS.AIS_AnimationObject_swigregister(AIS_AnimationObject)

class AIS_CameraFrustum(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SelectionMode_Edges = _AIS.AIS_CameraFrustum_SelectionMode_Edges
    
    SelectionMode_Volume = _AIS.AIS_CameraFrustum_SelectionMode_Volume
    

    def __init__(self, *args):
        r"""
        * Constructs camera frustum with default configuration.
        	:rtype: None
        """
        _AIS.AIS_CameraFrustum_swiginit(self, _AIS.new_AIS_CameraFrustum(*args))
    AcceptDisplayMode = _swig_new_instance_method(_AIS.AIS_CameraFrustum_AcceptDisplayMode)
    SetCameraFrustum = _swig_new_instance_method(_AIS.AIS_CameraFrustum_SetCameraFrustum)
    SetColor = _swig_new_instance_method(_AIS.AIS_CameraFrustum_SetColor)
    UnsetColor = _swig_new_instance_method(_AIS.AIS_CameraFrustum_UnsetColor)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_CameraFrustum

# Register AIS_CameraFrustum in _AIS:
_AIS.AIS_CameraFrustum_swigregister(AIS_CameraFrustum)

class AIS_Circle(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Initializes this algorithm for constructing AIS circle datums initializes the circle aCircle
        	:param aCircle:
        	:type aCircle: Geom_Circle
        	:rtype: None* Initializes this algorithm for constructing AIS circle datums. Initializes the circle theCircle, the arc starting point theUStart, the arc ending point theUEnd, and the type of sensitivity theIsFilledCircleSens.
        	:param theCircle:
        	:type theCircle: Geom_Circle
        	:param theUStart:
        	:type theUStart: float
        	:param theUEnd:
        	:type theUEnd: float
        	:param theIsFilledCircleSens: default value is Standard_False
        	:type theIsFilledCircleSens: bool
        	:rtype: None
        """
        _AIS.AIS_Circle_swiginit(self, _AIS.new_AIS_Circle(*args))
    Circle = _swig_new_instance_method(_AIS.AIS_Circle_Circle)
    Compute = _swig_new_instance_method(_AIS.AIS_Circle_Compute)
    IsFilledCircleSens = _swig_new_instance_method(_AIS.AIS_Circle_IsFilledCircleSens)
    Parameters = _swig_new_instance_method(_AIS.AIS_Circle_Parameters)
    SetCircle = _swig_new_instance_method(_AIS.AIS_Circle_SetCircle)
    SetColor = _swig_new_instance_method(_AIS.AIS_Circle_SetColor)
    SetFilledCircleSens = _swig_new_instance_method(_AIS.AIS_Circle_SetFilledCircleSens)
    SetFirstParam = _swig_new_instance_method(_AIS.AIS_Circle_SetFirstParam)
    SetLastParam = _swig_new_instance_method(_AIS.AIS_Circle_SetLastParam)
    SetWidth = _swig_new_instance_method(_AIS.AIS_Circle_SetWidth)
    Signature = _swig_new_instance_method(_AIS.AIS_Circle_Signature)
    Type = _swig_new_instance_method(_AIS.AIS_Circle_Type)
    UnsetColor = _swig_new_instance_method(_AIS.AIS_Circle_UnsetColor)
    UnsetWidth = _swig_new_instance_method(_AIS.AIS_Circle_UnsetWidth)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Circle_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Circle

# Register AIS_Circle in _AIS:
_AIS.AIS_Circle_swigregister(AIS_Circle)

class AIS_ColorScale(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Default constructor.
        	:rtype: None
        """
        _AIS.AIS_ColorScale_swiginit(self, _AIS.new_AIS_ColorScale(*args))
    AcceptDisplayMode = _swig_new_instance_method(_AIS.AIS_ColorScale_AcceptDisplayMode)
    ColorRange = _swig_new_instance_method(_AIS.AIS_ColorScale_ColorRange)
    Compute = _swig_new_instance_method(_AIS.AIS_ColorScale_Compute)
    ComputeSelection = _swig_new_instance_method(_AIS.AIS_ColorScale_ComputeSelection)
    FindColor = _swig_new_instance_method(_AIS.AIS_ColorScale_FindColor)
    Format = _swig_new_instance_method(_AIS.AIS_ColorScale_Format)
    GetBreadth = _swig_new_instance_method(_AIS.AIS_ColorScale_GetBreadth)
    GetColorType = _swig_new_instance_method(_AIS.AIS_ColorScale_GetColorType)
    GetColors = _swig_new_instance_method(_AIS.AIS_ColorScale_GetColors)
    GetFormat = _swig_new_instance_method(_AIS.AIS_ColorScale_GetFormat)
    GetHeight = _swig_new_instance_method(_AIS.AIS_ColorScale_GetHeight)
    GetIntervalColor = _swig_new_instance_method(_AIS.AIS_ColorScale_GetIntervalColor)
    GetLabel = _swig_new_instance_method(_AIS.AIS_ColorScale_GetLabel)
    GetLabelPosition = _swig_new_instance_method(_AIS.AIS_ColorScale_GetLabelPosition)
    GetLabelType = _swig_new_instance_method(_AIS.AIS_ColorScale_GetLabelType)
    GetLabels = _swig_new_instance_method(_AIS.AIS_ColorScale_GetLabels)
    GetMax = _swig_new_instance_method(_AIS.AIS_ColorScale_GetMax)
    GetMin = _swig_new_instance_method(_AIS.AIS_ColorScale_GetMin)
    GetNumberOfIntervals = _swig_new_instance_method(_AIS.AIS_ColorScale_GetNumberOfIntervals)
    GetPosition = _swig_new_instance_method(_AIS.AIS_ColorScale_GetPosition)
    GetRange = _swig_new_instance_method(_AIS.AIS_ColorScale_GetRange)
    GetSize = _swig_new_instance_method(_AIS.AIS_ColorScale_GetSize)
    GetTextHeight = _swig_new_instance_method(_AIS.AIS_ColorScale_GetTextHeight)
    GetTitle = _swig_new_instance_method(_AIS.AIS_ColorScale_GetTitle)
    GetTitlePosition = _swig_new_instance_method(_AIS.AIS_ColorScale_GetTitlePosition)
    GetXPosition = _swig_new_instance_method(_AIS.AIS_ColorScale_GetXPosition)
    GetYPosition = _swig_new_instance_method(_AIS.AIS_ColorScale_GetYPosition)
    HueMax = _swig_new_instance_method(_AIS.AIS_ColorScale_HueMax)
    HueMin = _swig_new_instance_method(_AIS.AIS_ColorScale_HueMin)
    HueRange = _swig_new_instance_method(_AIS.AIS_ColorScale_HueRange)
    IsLabelAtBorder = _swig_new_instance_method(_AIS.AIS_ColorScale_IsLabelAtBorder)
    IsLogarithmic = _swig_new_instance_method(_AIS.AIS_ColorScale_IsLogarithmic)
    IsReversed = _swig_new_instance_method(_AIS.AIS_ColorScale_IsReversed)
    IsSmoothTransition = _swig_new_instance_method(_AIS.AIS_ColorScale_IsSmoothTransition)
    Labels = _swig_new_instance_method(_AIS.AIS_ColorScale_Labels)
    SetBreadth = _swig_new_instance_method(_AIS.AIS_ColorScale_SetBreadth)
    SetColorRange = _swig_new_instance_method(_AIS.AIS_ColorScale_SetColorRange)
    SetColorType = _swig_new_instance_method(_AIS.AIS_ColorScale_SetColorType)
    SetColors = _swig_new_instance_method(_AIS.AIS_ColorScale_SetColors)
    SetFormat = _swig_new_instance_method(_AIS.AIS_ColorScale_SetFormat)
    SetHeight = _swig_new_instance_method(_AIS.AIS_ColorScale_SetHeight)
    SetHueRange = _swig_new_instance_method(_AIS.AIS_ColorScale_SetHueRange)
    SetIntervalColor = _swig_new_instance_method(_AIS.AIS_ColorScale_SetIntervalColor)
    SetLabel = _swig_new_instance_method(_AIS.AIS_ColorScale_SetLabel)
    SetLabelAtBorder = _swig_new_instance_method(_AIS.AIS_ColorScale_SetLabelAtBorder)
    SetLabelPosition = _swig_new_instance_method(_AIS.AIS_ColorScale_SetLabelPosition)
    SetLabelType = _swig_new_instance_method(_AIS.AIS_ColorScale_SetLabelType)
    SetLabels = _swig_new_instance_method(_AIS.AIS_ColorScale_SetLabels)
    SetLogarithmic = _swig_new_instance_method(_AIS.AIS_ColorScale_SetLogarithmic)
    SetMax = _swig_new_instance_method(_AIS.AIS_ColorScale_SetMax)
    SetMin = _swig_new_instance_method(_AIS.AIS_ColorScale_SetMin)
    SetNumberOfIntervals = _swig_new_instance_method(_AIS.AIS_ColorScale_SetNumberOfIntervals)
    SetPosition = _swig_new_instance_method(_AIS.AIS_ColorScale_SetPosition)
    SetRange = _swig_new_instance_method(_AIS.AIS_ColorScale_SetRange)
    SetReversed = _swig_new_instance_method(_AIS.AIS_ColorScale_SetReversed)
    SetSize = _swig_new_instance_method(_AIS.AIS_ColorScale_SetSize)
    SetSmoothTransition = _swig_new_instance_method(_AIS.AIS_ColorScale_SetSmoothTransition)
    SetTextHeight = _swig_new_instance_method(_AIS.AIS_ColorScale_SetTextHeight)
    SetTitle = _swig_new_instance_method(_AIS.AIS_ColorScale_SetTitle)
    SetTitlePosition = _swig_new_instance_method(_AIS.AIS_ColorScale_SetTitlePosition)
    SetXPosition = _swig_new_instance_method(_AIS.AIS_ColorScale_SetXPosition)
    SetYPosition = _swig_new_instance_method(_AIS.AIS_ColorScale_SetYPosition)
    TextHeight = _swig_new_instance_method(_AIS.AIS_ColorScale_TextHeight)
    TextSize = _swig_new_instance_method(_AIS.AIS_ColorScale_TextSize)
    TextWidth = _swig_new_instance_method(_AIS.AIS_ColorScale_TextWidth)
    hueToValidRange = _swig_new_static_method(_AIS.AIS_ColorScale_hueToValidRange)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_ColorScale_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ColorScale

# Register AIS_ColorScale in _AIS:
_AIS.AIS_ColorScale_swigregister(AIS_ColorScale)
AIS_ColorScale_hueToValidRange = _AIS.AIS_ColorScale_hueToValidRange

class AIS_ConnectedInteractive(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Disconnects the previous view and sets highlight mode to 0. This highlights the wireframe presentation aTypeOfPresentation3d. Top_AllView deactivates hidden line removal.
        	:param aTypeOfPresentation3d: default value is PrsMgr_TOP_AllView
        	:type aTypeOfPresentation3d: PrsMgr_TypeOfPresentation3d
        	:rtype: None
        """
        _AIS.AIS_ConnectedInteractive_swiginit(self, _AIS.new_AIS_ConnectedInteractive(*args))
    AcceptDisplayMode = _swig_new_instance_method(_AIS.AIS_ConnectedInteractive_AcceptDisplayMode)
    AcceptShapeDecomposition = _swig_new_instance_method(_AIS.AIS_ConnectedInteractive_AcceptShapeDecomposition)
    Connect = _swig_new_instance_method(_AIS.AIS_ConnectedInteractive_Connect)
    ConnectedTo = _swig_new_instance_method(_AIS.AIS_ConnectedInteractive_ConnectedTo)
    Disconnect = _swig_new_instance_method(_AIS.AIS_ConnectedInteractive_Disconnect)
    HasConnection = _swig_new_instance_method(_AIS.AIS_ConnectedInteractive_HasConnection)
    Signature = _swig_new_instance_method(_AIS.AIS_ConnectedInteractive_Signature)
    Type = _swig_new_instance_method(_AIS.AIS_ConnectedInteractive_Type)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_ConnectedInteractive_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ConnectedInteractive

# Register AIS_ConnectedInteractive in _AIS:
_AIS.AIS_ConnectedInteractive_swigregister(AIS_ConnectedInteractive)

class AIS_Dimension(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ComputeMode_All = _AIS.AIS_Dimension_ComputeMode_All
    
    ComputeMode_Line = _AIS.AIS_Dimension_ComputeMode_Line
    
    ComputeMode_Text = _AIS.AIS_Dimension_ComputeMode_Text
    
    AcceptDisplayMode = _swig_new_instance_method(_AIS.AIS_Dimension_AcceptDisplayMode)
    DimensionAspect = _swig_new_instance_method(_AIS.AIS_Dimension_DimensionAspect)
    DisplaySpecialSymbol = _swig_new_instance_method(_AIS.AIS_Dimension_DisplaySpecialSymbol)
    GetCustomValue = _swig_new_instance_method(_AIS.AIS_Dimension_GetCustomValue)
    GetDisplayUnits = _swig_new_instance_method(_AIS.AIS_Dimension_GetDisplayUnits)
    GetFlyout = _swig_new_instance_method(_AIS.AIS_Dimension_GetFlyout)
    GetGeometryType = _swig_new_instance_method(_AIS.AIS_Dimension_GetGeometryType)
    GetModelUnits = _swig_new_instance_method(_AIS.AIS_Dimension_GetModelUnits)
    GetPlane = _swig_new_instance_method(_AIS.AIS_Dimension_GetPlane)
    GetTextPosition = _swig_new_instance_method(_AIS.AIS_Dimension_GetTextPosition)
    GetValue = _swig_new_instance_method(_AIS.AIS_Dimension_GetValue)
    IsTextPositionCustom = _swig_new_instance_method(_AIS.AIS_Dimension_IsTextPositionCustom)
    IsValid = _swig_new_instance_method(_AIS.AIS_Dimension_IsValid)
    KindOfDimension = _swig_new_instance_method(_AIS.AIS_Dimension_KindOfDimension)
    SelToleranceForText2d = _swig_new_instance_method(_AIS.AIS_Dimension_SelToleranceForText2d)
    SetComputedValue = _swig_new_instance_method(_AIS.AIS_Dimension_SetComputedValue)
    SetCustomPlane = _swig_new_instance_method(_AIS.AIS_Dimension_SetCustomPlane)
    SetCustomValue = _swig_new_instance_method(_AIS.AIS_Dimension_SetCustomValue)
    SetDimensionAspect = _swig_new_instance_method(_AIS.AIS_Dimension_SetDimensionAspect)
    SetDisplaySpecialSymbol = _swig_new_instance_method(_AIS.AIS_Dimension_SetDisplaySpecialSymbol)
    SetDisplayUnits = _swig_new_instance_method(_AIS.AIS_Dimension_SetDisplayUnits)
    SetFlyout = _swig_new_instance_method(_AIS.AIS_Dimension_SetFlyout)
    SetModelUnits = _swig_new_instance_method(_AIS.AIS_Dimension_SetModelUnits)
    SetSelToleranceForText2d = _swig_new_instance_method(_AIS.AIS_Dimension_SetSelToleranceForText2d)
    SetSpecialSymbol = _swig_new_instance_method(_AIS.AIS_Dimension_SetSpecialSymbol)
    SetTextPosition = _swig_new_instance_method(_AIS.AIS_Dimension_SetTextPosition)
    SpecialSymbol = _swig_new_instance_method(_AIS.AIS_Dimension_SpecialSymbol)
    Type = _swig_new_instance_method(_AIS.AIS_Dimension_Type)
    UnsetCustomPlane = _swig_new_instance_method(_AIS.AIS_Dimension_UnsetCustomPlane)
    UnsetFixedTextPosition = _swig_new_instance_method(_AIS.AIS_Dimension_UnsetFixedTextPosition)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Dimension_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Dimension

# Register AIS_Dimension in _AIS:
_AIS.AIS_Dimension_swigregister(AIS_Dimension)

class AIS_Line(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Initializes the line aLine.
        	:param aLine:
        	:type aLine: Geom_Line
        	:rtype: None* Initializes a starting point aStartPoint and a finishing point aEndPoint for the line.
        	:param aStartPoint:
        	:type aStartPoint: Geom_Point
        	:param aEndPoint:
        	:type aEndPoint: Geom_Point
        	:rtype: None
        """
        _AIS.AIS_Line_swiginit(self, _AIS.new_AIS_Line(*args))
    Compute = _swig_new_instance_method(_AIS.AIS_Line_Compute)
    Line = _swig_new_instance_method(_AIS.AIS_Line_Line)
    Points = _swig_new_instance_method(_AIS.AIS_Line_Points)
    SetColor = _swig_new_instance_method(_AIS.AIS_Line_SetColor)
    SetLine = _swig_new_instance_method(_AIS.AIS_Line_SetLine)
    SetPoints = _swig_new_instance_method(_AIS.AIS_Line_SetPoints)
    SetWidth = _swig_new_instance_method(_AIS.AIS_Line_SetWidth)
    Signature = _swig_new_instance_method(_AIS.AIS_Line_Signature)
    Type = _swig_new_instance_method(_AIS.AIS_Line_Type)
    UnsetColor = _swig_new_instance_method(_AIS.AIS_Line_UnsetColor)
    UnsetWidth = _swig_new_instance_method(_AIS.AIS_Line_UnsetWidth)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Line_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Line

# Register AIS_Line in _AIS:
_AIS.AIS_Line_swigregister(AIS_Line)

class AIS_Manipulator(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructs a manipulator object with default placement and all parts to be displayed.
        	:rtype: None* Constructs a manipulator object with input location and positions of axes and all parts to be displayed.
        	:param thePosition:
        	:type thePosition: gp_Ax2
        	:rtype: None
        """
        _AIS.AIS_Manipulator_swiginit(self, _AIS.new_AIS_Manipulator(*args))
    ActiveMode = _swig_new_instance_method(_AIS.AIS_Manipulator_ActiveMode)
    Attach = _swig_new_instance_method(_AIS.AIS_Manipulator_Attach)
    Compute = _swig_new_instance_method(_AIS.AIS_Manipulator_Compute)
    ComputeSelection = _swig_new_instance_method(_AIS.AIS_Manipulator_ComputeSelection)
    DeactivateCurrentMode = _swig_new_instance_method(_AIS.AIS_Manipulator_DeactivateCurrentMode)
    Detach = _swig_new_instance_method(_AIS.AIS_Manipulator_Detach)
    EnableMode = _swig_new_instance_method(_AIS.AIS_Manipulator_EnableMode)
    HasActiveMode = _swig_new_instance_method(_AIS.AIS_Manipulator_HasActiveMode)
    HasActiveTransformation = _swig_new_instance_method(_AIS.AIS_Manipulator_HasActiveTransformation)
    IsAttached = _swig_new_instance_method(_AIS.AIS_Manipulator_IsAttached)
    IsAutoHilight = _swig_new_instance_method(_AIS.AIS_Manipulator_IsAutoHilight)
    IsModeActivationOnDetection = _swig_new_instance_method(_AIS.AIS_Manipulator_IsModeActivationOnDetection)
    Object = _swig_new_instance_method(_AIS.AIS_Manipulator_Object)
    ObjectTransformation = _swig_new_instance_method(_AIS.AIS_Manipulator_ObjectTransformation)
    Objects = _swig_new_instance_method(_AIS.AIS_Manipulator_Objects)
    Position = _swig_new_instance_method(_AIS.AIS_Manipulator_Position)
    SetGap = _swig_new_instance_method(_AIS.AIS_Manipulator_SetGap)
    SetModeActivationOnDetection = _swig_new_instance_method(_AIS.AIS_Manipulator_SetModeActivationOnDetection)
    SetPart = _swig_new_instance_method(_AIS.AIS_Manipulator_SetPart)
    SetPosition = _swig_new_instance_method(_AIS.AIS_Manipulator_SetPosition)
    SetSize = _swig_new_instance_method(_AIS.AIS_Manipulator_SetSize)
    SetZoomPersistence = _swig_new_instance_method(_AIS.AIS_Manipulator_SetZoomPersistence)
    Size = _swig_new_instance_method(_AIS.AIS_Manipulator_Size)
    StartTransform = _swig_new_instance_method(_AIS.AIS_Manipulator_StartTransform)
    StartTransformation = _swig_new_instance_method(_AIS.AIS_Manipulator_StartTransformation)
    StopTransform = _swig_new_instance_method(_AIS.AIS_Manipulator_StopTransform)
    Transform = _swig_new_instance_method(_AIS.AIS_Manipulator_Transform)
    ZoomPersistence = _swig_new_instance_method(_AIS.AIS_Manipulator_ZoomPersistence)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Manipulator_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Manipulator

# Register AIS_Manipulator in _AIS:
_AIS.AIS_Manipulator_swigregister(AIS_Manipulator)

class AIS_MediaPlayer(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:rtype: None
        """
        _AIS.AIS_MediaPlayer_swiginit(self, _AIS.new_AIS_MediaPlayer(*args))
    Duration = _swig_new_instance_method(_AIS.AIS_MediaPlayer_Duration)
    OpenInput = _swig_new_instance_method(_AIS.AIS_MediaPlayer_OpenInput)
    PlayPause = _swig_new_instance_method(_AIS.AIS_MediaPlayer_PlayPause)
    PlayerContext = _swig_new_instance_method(_AIS.AIS_MediaPlayer_PlayerContext)
    PresentFrame = _swig_new_instance_method(_AIS.AIS_MediaPlayer_PresentFrame)
    SetCallback = _swig_new_instance_method(_AIS.AIS_MediaPlayer_SetCallback)
    SetClosePlayer = _swig_new_instance_method(_AIS.AIS_MediaPlayer_SetClosePlayer)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_MediaPlayer

# Register AIS_MediaPlayer in _AIS:
_AIS.AIS_MediaPlayer_swigregister(AIS_MediaPlayer)

class AIS_MultipleConnectedInteractive(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Initializes the Interactive Object with multiple connections to AIS_Interactive objects.
        	:rtype: None
        """
        _AIS.AIS_MultipleConnectedInteractive_swiginit(self, _AIS.new_AIS_MultipleConnectedInteractive(*args))
    AcceptShapeDecomposition = _swig_new_instance_method(_AIS.AIS_MultipleConnectedInteractive_AcceptShapeDecomposition)
    Compute = _swig_new_instance_method(_AIS.AIS_MultipleConnectedInteractive_Compute)
    Connect = _swig_new_instance_method(_AIS.AIS_MultipleConnectedInteractive_Connect)
    Disconnect = _swig_new_instance_method(_AIS.AIS_MultipleConnectedInteractive_Disconnect)
    DisconnectAll = _swig_new_instance_method(_AIS.AIS_MultipleConnectedInteractive_DisconnectAll)
    HasConnection = _swig_new_instance_method(_AIS.AIS_MultipleConnectedInteractive_HasConnection)
    Signature = _swig_new_instance_method(_AIS.AIS_MultipleConnectedInteractive_Signature)
    Type = _swig_new_instance_method(_AIS.AIS_MultipleConnectedInteractive_Type)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_MultipleConnectedInteractive_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_MultipleConnectedInteractive

# Register AIS_MultipleConnectedInteractive in _AIS:
_AIS.AIS_MultipleConnectedInteractive_swigregister(AIS_MultipleConnectedInteractive)

class AIS_Plane(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * initializes the plane aComponent. If the mode aCurrentMode equals true, the drawing tool, 'Drawer' is not initialized.
        	:param aComponent:
        	:type aComponent: Geom_Plane
        	:param aCurrentMode: default value is Standard_False
        	:type aCurrentMode: bool
        	:rtype: None* initializes the plane aComponent and the point aCenter. If the mode aCurrentMode equals true, the drawing tool, 'Drawer' is not initialized. aCurrentMode equals true, the drawing tool, 'Drawer' is not initialized.
        	:param aComponent:
        	:type aComponent: Geom_Plane
        	:param aCenter:
        	:type aCenter: gp_Pnt
        	:param aCurrentMode: default value is Standard_False
        	:type aCurrentMode: bool
        	:rtype: None* initializes the plane aComponent, the point aCenter, and the minimum and maximum points, aPmin and aPmax. If the mode aCurrentMode equals true, the drawing tool, 'Drawer' is not initialized.
        	:param aComponent:
        	:type aComponent: Geom_Plane
        	:param aCenter:
        	:type aCenter: gp_Pnt
        	:param aPmin:
        	:type aPmin: gp_Pnt
        	:param aPmax:
        	:type aPmax: gp_Pnt
        	:param aCurrentMode: default value is Standard_False
        	:type aCurrentMode: bool
        	:rtype: None:param aComponent:
        	:type aComponent: Geom_Axis2Placement
        	:param aPlaneType:
        	:type aPlaneType: AIS_TypeOfPlane
        	:param aCurrentMode: default value is Standard_False
        	:type aCurrentMode: bool
        	:rtype: None
        """
        _AIS.AIS_Plane_swiginit(self, _AIS.new_AIS_Plane(*args))
    AcceptDisplayMode = _swig_new_instance_method(_AIS.AIS_Plane_AcceptDisplayMode)
    Axis2Placement = _swig_new_instance_method(_AIS.AIS_Plane_Axis2Placement)
    Center = _swig_new_instance_method(_AIS.AIS_Plane_Center)
    Component = _swig_new_instance_method(_AIS.AIS_Plane_Component)
    Compute = _swig_new_instance_method(_AIS.AIS_Plane_Compute)
    ComputeSelection = _swig_new_instance_method(_AIS.AIS_Plane_ComputeSelection)
    CurrentMode = _swig_new_instance_method(_AIS.AIS_Plane_CurrentMode)
    HasOwnSize = _swig_new_instance_method(_AIS.AIS_Plane_HasOwnSize)
    IsXYZPlane = _swig_new_instance_method(_AIS.AIS_Plane_IsXYZPlane)
    PlaneAttributes = _swig_new_instance_method(_AIS.AIS_Plane_PlaneAttributes)
    SetAxis2Placement = _swig_new_instance_method(_AIS.AIS_Plane_SetAxis2Placement)
    SetCenter = _swig_new_instance_method(_AIS.AIS_Plane_SetCenter)
    SetColor = _swig_new_instance_method(_AIS.AIS_Plane_SetColor)
    SetComponent = _swig_new_instance_method(_AIS.AIS_Plane_SetComponent)
    SetCurrentMode = _swig_new_instance_method(_AIS.AIS_Plane_SetCurrentMode)
    SetPlaneAttributes = _swig_new_instance_method(_AIS.AIS_Plane_SetPlaneAttributes)
    SetSize = _swig_new_instance_method(_AIS.AIS_Plane_SetSize)
    SetTypeOfSensitivity = _swig_new_instance_method(_AIS.AIS_Plane_SetTypeOfSensitivity)
    Signature = _swig_new_instance_method(_AIS.AIS_Plane_Signature)
    Size = _swig_new_instance_method(_AIS.AIS_Plane_Size)
    Type = _swig_new_instance_method(_AIS.AIS_Plane_Type)
    TypeOfPlane = _swig_new_instance_method(_AIS.AIS_Plane_TypeOfPlane)
    TypeOfSensitivity = _swig_new_instance_method(_AIS.AIS_Plane_TypeOfSensitivity)
    UnsetColor = _swig_new_instance_method(_AIS.AIS_Plane_UnsetColor)
    UnsetSize = _swig_new_instance_method(_AIS.AIS_Plane_UnsetSize)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Plane_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Plane

# Register AIS_Plane in _AIS:
_AIS.AIS_Plane_swigregister(AIS_Plane)

class AIS_PlaneTrihedron(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Initializes the plane aPlane. The plane trihedron is constructed from this and an axis.
        	:param aPlane:
        	:type aPlane: Geom_Plane
        	:rtype: None
        """
        _AIS.AIS_PlaneTrihedron_swiginit(self, _AIS.new_AIS_PlaneTrihedron(*args))
    AcceptDisplayMode = _swig_new_instance_method(_AIS.AIS_PlaneTrihedron_AcceptDisplayMode)
    Component = _swig_new_instance_method(_AIS.AIS_PlaneTrihedron_Component)
    Compute = _swig_new_instance_method(_AIS.AIS_PlaneTrihedron_Compute)
    GetLength = _swig_new_instance_method(_AIS.AIS_PlaneTrihedron_GetLength)
    Position = _swig_new_instance_method(_AIS.AIS_PlaneTrihedron_Position)
    SetColor = _swig_new_instance_method(_AIS.AIS_PlaneTrihedron_SetColor)
    SetComponent = _swig_new_instance_method(_AIS.AIS_PlaneTrihedron_SetComponent)
    SetLength = _swig_new_instance_method(_AIS.AIS_PlaneTrihedron_SetLength)
    SetXLabel = _swig_new_instance_method(_AIS.AIS_PlaneTrihedron_SetXLabel)
    SetYLabel = _swig_new_instance_method(_AIS.AIS_PlaneTrihedron_SetYLabel)
    Signature = _swig_new_instance_method(_AIS.AIS_PlaneTrihedron_Signature)
    Type = _swig_new_instance_method(_AIS.AIS_PlaneTrihedron_Type)
    XAxis = _swig_new_instance_method(_AIS.AIS_PlaneTrihedron_XAxis)
    YAxis = _swig_new_instance_method(_AIS.AIS_PlaneTrihedron_YAxis)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_PlaneTrihedron_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_PlaneTrihedron

# Register AIS_PlaneTrihedron in _AIS:
_AIS.AIS_PlaneTrihedron_swigregister(AIS_PlaneTrihedron)

class AIS_Point(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Initializes the point aComponent from which the point datum will be built.
        	:param aComponent:
        	:type aComponent: Geom_Point
        	:rtype: None
        """
        _AIS.AIS_Point_swiginit(self, _AIS.new_AIS_Point(*args))
    AcceptDisplayMode = _swig_new_instance_method(_AIS.AIS_Point_AcceptDisplayMode)
    Component = _swig_new_instance_method(_AIS.AIS_Point_Component)
    Compute = _swig_new_instance_method(_AIS.AIS_Point_Compute)
    HasMarker = _swig_new_instance_method(_AIS.AIS_Point_HasMarker)
    SetColor = _swig_new_instance_method(_AIS.AIS_Point_SetColor)
    SetComponent = _swig_new_instance_method(_AIS.AIS_Point_SetComponent)
    SetMarker = _swig_new_instance_method(_AIS.AIS_Point_SetMarker)
    Signature = _swig_new_instance_method(_AIS.AIS_Point_Signature)
    Type = _swig_new_instance_method(_AIS.AIS_Point_Type)
    UnsetColor = _swig_new_instance_method(_AIS.AIS_Point_UnsetColor)
    UnsetMarker = _swig_new_instance_method(_AIS.AIS_Point_UnsetMarker)
    Vertex = _swig_new_instance_method(_AIS.AIS_Point_Vertex)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Point_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Point

# Register AIS_Point in _AIS:
_AIS.AIS_Point_swigregister(AIS_Point)

class AIS_PointCloud(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DM_Points = _AIS.AIS_PointCloud_DM_Points
    
    DM_BndBox = _AIS.AIS_PointCloud_DM_BndBox
    
    SM_Points = _AIS.AIS_PointCloud_SM_Points
    
    SM_SubsetOfPoints = _AIS.AIS_PointCloud_SM_SubsetOfPoints
    
    SM_BndBox = _AIS.AIS_PointCloud_SM_BndBox
    

    def __init__(self, *args):
        r"""
        * Constructor.
        	:rtype: None
        """
        _AIS.AIS_PointCloud_swiginit(self, _AIS.new_AIS_PointCloud(*args))
    GetBoundingBox = _swig_new_instance_method(_AIS.AIS_PointCloud_GetBoundingBox)
    GetPoints = _swig_new_instance_method(_AIS.AIS_PointCloud_GetPoints)
    SetColor = _swig_new_instance_method(_AIS.AIS_PointCloud_SetColor)
    SetPoints = _swig_new_instance_method(_AIS.AIS_PointCloud_SetPoints)
    UnsetColor = _swig_new_instance_method(_AIS.AIS_PointCloud_UnsetColor)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_PointCloud_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_PointCloud

# Register AIS_PointCloud in _AIS:
_AIS.AIS_PointCloud_swigregister(AIS_PointCloud)

class AIS_Relation(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    AcceptDisplayMode = _swig_new_instance_method(_AIS.AIS_Relation_AcceptDisplayMode)
    ArrowSize = _swig_new_instance_method(_AIS.AIS_Relation_ArrowSize)
    AutomaticPosition = _swig_new_instance_method(_AIS.AIS_Relation_AutomaticPosition)
    ExtShape = _swig_new_instance_method(_AIS.AIS_Relation_ExtShape)
    FirstShape = _swig_new_instance_method(_AIS.AIS_Relation_FirstShape)
    IsMovable = _swig_new_instance_method(_AIS.AIS_Relation_IsMovable)
    KindOfDimension = _swig_new_instance_method(_AIS.AIS_Relation_KindOfDimension)
    Plane = _swig_new_instance_method(_AIS.AIS_Relation_Plane)
    Position = _swig_new_instance_method(_AIS.AIS_Relation_Position)
    SecondShape = _swig_new_instance_method(_AIS.AIS_Relation_SecondShape)
    SetArrowSize = _swig_new_instance_method(_AIS.AIS_Relation_SetArrowSize)
    SetAutomaticPosition = _swig_new_instance_method(_AIS.AIS_Relation_SetAutomaticPosition)
    SetBndBox = _swig_new_instance_method(_AIS.AIS_Relation_SetBndBox)
    SetColor = _swig_new_instance_method(_AIS.AIS_Relation_SetColor)
    SetExtShape = _swig_new_instance_method(_AIS.AIS_Relation_SetExtShape)
    SetFirstShape = _swig_new_instance_method(_AIS.AIS_Relation_SetFirstShape)
    SetPlane = _swig_new_instance_method(_AIS.AIS_Relation_SetPlane)
    SetPosition = _swig_new_instance_method(_AIS.AIS_Relation_SetPosition)
    SetSecondShape = _swig_new_instance_method(_AIS.AIS_Relation_SetSecondShape)
    SetSymbolPrs = _swig_new_instance_method(_AIS.AIS_Relation_SetSymbolPrs)
    SetText = _swig_new_instance_method(_AIS.AIS_Relation_SetText)
    SetValue = _swig_new_instance_method(_AIS.AIS_Relation_SetValue)
    SymbolPrs = _swig_new_instance_method(_AIS.AIS_Relation_SymbolPrs)
    Text = _swig_new_instance_method(_AIS.AIS_Relation_Text)
    Type = _swig_new_instance_method(_AIS.AIS_Relation_Type)
    UnsetBndBox = _swig_new_instance_method(_AIS.AIS_Relation_UnsetBndBox)
    UnsetColor = _swig_new_instance_method(_AIS.AIS_Relation_UnsetColor)
    Value = _swig_new_instance_method(_AIS.AIS_Relation_Value)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Relation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Relation

# Register AIS_Relation in _AIS:
_AIS.AIS_Relation_swigregister(AIS_Relation)

class AIS_RubberBand(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructs rubber band with default configuration: empty filling and white solid lines. @warning It binds this object with Graphic3d_ZLayerId_TopOSD layer.
        	:rtype: None* Consructs the rubber band with empty filling and defined line style. @param theLineColor [in] color of rubber band lines @param theType [in] type of rubber band lines @param theLineWidth [in] width of rubber band line. By default it is 1. @warning It binds this object with Graphic3d_ZLayerId_TopOSD layer.
        	:param theLineColor:
        	:type theLineColor: Quantity_Color
        	:param theType:
        	:type theType: Aspect_TypeOfLine
        	:param theLineWidth: default value is 1.0
        	:type theLineWidth: float
        	:param theIsPolygonClosed: default value is Standard_True
        	:type theIsPolygonClosed: bool
        	:rtype: None* Constructs the rubber band with defined filling and line parameters. @param theLineColor [in] color of rubber band lines @param theType [in] type of rubber band lines @param theFillColor [in] color of rubber band filling @param theTransparency [in] transparency of the filling. 0 is for opaque filling. By default it is transparent. @param theLineWidth [in] width of rubber band line. By default it is 1. @warning It binds this object with Graphic3d_ZLayerId_TopOSD layer.
        	:param theLineColor:
        	:type theLineColor: Quantity_Color
        	:param theType:
        	:type theType: Aspect_TypeOfLine
        	:param theFillColor:
        	:type theFillColor: Quantity_Color
        	:param theTransparency: default value is 1.0
        	:type theTransparency: float
        	:param theLineWidth: default value is 1.0
        	:type theLineWidth: float
        	:param theIsPolygonClosed: default value is Standard_True
        	:type theIsPolygonClosed: bool
        	:rtype: None
        """
        _AIS.AIS_RubberBand_swiginit(self, _AIS.new_AIS_RubberBand(*args))
    AddPoint = _swig_new_instance_method(_AIS.AIS_RubberBand_AddPoint)
    ClearPoints = _swig_new_instance_method(_AIS.AIS_RubberBand_ClearPoints)
    FillColor = _swig_new_instance_method(_AIS.AIS_RubberBand_FillColor)
    FillTransparency = _swig_new_instance_method(_AIS.AIS_RubberBand_FillTransparency)
    IsFilling = _swig_new_instance_method(_AIS.AIS_RubberBand_IsFilling)
    IsPolygonClosed = _swig_new_instance_method(_AIS.AIS_RubberBand_IsPolygonClosed)
    LineColor = _swig_new_instance_method(_AIS.AIS_RubberBand_LineColor)
    LineType = _swig_new_instance_method(_AIS.AIS_RubberBand_LineType)
    LineWidth = _swig_new_instance_method(_AIS.AIS_RubberBand_LineWidth)
    Points = _swig_new_instance_method(_AIS.AIS_RubberBand_Points)
    RemoveLastPoint = _swig_new_instance_method(_AIS.AIS_RubberBand_RemoveLastPoint)
    SetFillColor = _swig_new_instance_method(_AIS.AIS_RubberBand_SetFillColor)
    SetFillTransparency = _swig_new_instance_method(_AIS.AIS_RubberBand_SetFillTransparency)
    SetFilling = _swig_new_instance_method(_AIS.AIS_RubberBand_SetFilling)
    SetLineColor = _swig_new_instance_method(_AIS.AIS_RubberBand_SetLineColor)
    SetLineType = _swig_new_instance_method(_AIS.AIS_RubberBand_SetLineType)
    SetLineWidth = _swig_new_instance_method(_AIS.AIS_RubberBand_SetLineWidth)
    SetPolygonClosed = _swig_new_instance_method(_AIS.AIS_RubberBand_SetPolygonClosed)
    SetRectangle = _swig_new_instance_method(_AIS.AIS_RubberBand_SetRectangle)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_RubberBand_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_RubberBand

# Register AIS_RubberBand in _AIS:
_AIS.AIS_RubberBand_swigregister(AIS_RubberBand)

class AIS_Shape(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Initializes construction of the shape shap from wires, edges and vertices.
        	:param shap:
        	:type shap: TopoDS_Shape
        	:rtype: None
        """
        _AIS.AIS_Shape_swiginit(self, _AIS.new_AIS_Shape(*args))
    AcceptDisplayMode = _swig_new_instance_method(_AIS.AIS_Shape_AcceptDisplayMode)
    AcceptShapeDecomposition = _swig_new_instance_method(_AIS.AIS_Shape_AcceptShapeDecomposition)
    BoundingBox = _swig_new_instance_method(_AIS.AIS_Shape_BoundingBox)
    Color = _swig_new_instance_method(_AIS.AIS_Shape_Color)
    OwnDeviationAngle = _swig_new_instance_method(_AIS.AIS_Shape_OwnDeviationAngle)
    OwnDeviationCoefficient = _swig_new_instance_method(_AIS.AIS_Shape_OwnDeviationCoefficient)
    OwnHLRDeviationAngle = _swig_new_instance_method(_AIS.AIS_Shape_OwnHLRDeviationAngle)
    OwnHLRDeviationCoefficient = _swig_new_instance_method(_AIS.AIS_Shape_OwnHLRDeviationCoefficient)
    SelectionMode = _swig_new_static_method(_AIS.AIS_Shape_SelectionMode)
    SelectionType = _swig_new_static_method(_AIS.AIS_Shape_SelectionType)
    Set = _swig_new_instance_method(_AIS.AIS_Shape_Set)
    SetAngleAndDeviation = _swig_new_instance_method(_AIS.AIS_Shape_SetAngleAndDeviation)
    SetColor = _swig_new_instance_method(_AIS.AIS_Shape_SetColor)
    SetHLRAngleAndDeviation = _swig_new_instance_method(_AIS.AIS_Shape_SetHLRAngleAndDeviation)
    SetOwnDeviationAngle = _swig_new_instance_method(_AIS.AIS_Shape_SetOwnDeviationAngle)
    SetOwnDeviationCoefficient = _swig_new_instance_method(_AIS.AIS_Shape_SetOwnDeviationCoefficient)
    SetOwnHLRDeviationAngle = _swig_new_instance_method(_AIS.AIS_Shape_SetOwnHLRDeviationAngle)
    SetOwnHLRDeviationCoefficient = _swig_new_instance_method(_AIS.AIS_Shape_SetOwnHLRDeviationCoefficient)
    SetShape = _swig_new_instance_method(_AIS.AIS_Shape_SetShape)
    SetTextureOriginUV = _swig_new_instance_method(_AIS.AIS_Shape_SetTextureOriginUV)
    SetTextureRepeatUV = _swig_new_instance_method(_AIS.AIS_Shape_SetTextureRepeatUV)
    SetTextureScaleUV = _swig_new_instance_method(_AIS.AIS_Shape_SetTextureScaleUV)
    SetTypeOfHLR = _swig_new_instance_method(_AIS.AIS_Shape_SetTypeOfHLR)
    SetWidth = _swig_new_instance_method(_AIS.AIS_Shape_SetWidth)
    Shape = _swig_new_instance_method(_AIS.AIS_Shape_Shape)
    Signature = _swig_new_instance_method(_AIS.AIS_Shape_Signature)
    TextureOriginUV = _swig_new_instance_method(_AIS.AIS_Shape_TextureOriginUV)
    TextureRepeatUV = _swig_new_instance_method(_AIS.AIS_Shape_TextureRepeatUV)
    TextureScaleUV = _swig_new_instance_method(_AIS.AIS_Shape_TextureScaleUV)
    Transparency = _swig_new_instance_method(_AIS.AIS_Shape_Transparency)
    Type = _swig_new_instance_method(_AIS.AIS_Shape_Type)
    TypeOfHLR = _swig_new_instance_method(_AIS.AIS_Shape_TypeOfHLR)
    UnsetColor = _swig_new_instance_method(_AIS.AIS_Shape_UnsetColor)
    UnsetWidth = _swig_new_instance_method(_AIS.AIS_Shape_UnsetWidth)
    UserAngle = _swig_new_instance_method(_AIS.AIS_Shape_UserAngle)
    computeHlrPresentation = _swig_new_static_method(_AIS.AIS_Shape_computeHlrPresentation)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Shape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Shape

# Register AIS_Shape in _AIS:
_AIS.AIS_Shape_swigregister(AIS_Shape)
AIS_Shape_SelectionMode = _AIS.AIS_Shape_SelectionMode
AIS_Shape_SelectionType = _AIS.AIS_Shape_SelectionType
AIS_Shape_computeHlrPresentation = _AIS.AIS_Shape_computeHlrPresentation

class AIS_SignatureFilter(AIS_TypeFilter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Initializes the signature filter, adding the signature specification, aGivenSignature, to that for type, aGivenKind, in AIS_TypeFilter.
        	:param aGivenKind:
        	:type aGivenKind: AIS_KindOfInteractive
        	:param aGivenSignature:
        	:type aGivenSignature: int
        	:rtype: None
        """
        _AIS.AIS_SignatureFilter_swiginit(self, _AIS.new_AIS_SignatureFilter(*args))


    @staticmethod
    def DownCast(t):
      return Handle_AIS_SignatureFilter_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_SignatureFilter

# Register AIS_SignatureFilter in _AIS:
_AIS.AIS_SignatureFilter_swigregister(AIS_SignatureFilter)

class AIS_TextLabel(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Default constructor
        	:rtype: None
        """
        _AIS.AIS_TextLabel_swiginit(self, _AIS.new_AIS_TextLabel(*args))
    HasFlipping = _swig_new_instance_method(_AIS.AIS_TextLabel_HasFlipping)
    HasOrientation3D = _swig_new_instance_method(_AIS.AIS_TextLabel_HasOrientation3D)
    Orientation3D = _swig_new_instance_method(_AIS.AIS_TextLabel_Orientation3D)
    Position = _swig_new_instance_method(_AIS.AIS_TextLabel_Position)
    SetAngle = _swig_new_instance_method(_AIS.AIS_TextLabel_SetAngle)
    SetColor = _swig_new_instance_method(_AIS.AIS_TextLabel_SetColor)
    SetColorSubTitle = _swig_new_instance_method(_AIS.AIS_TextLabel_SetColorSubTitle)
    SetDisplayType = _swig_new_instance_method(_AIS.AIS_TextLabel_SetDisplayType)
    SetFlipping = _swig_new_instance_method(_AIS.AIS_TextLabel_SetFlipping)
    SetFont = _swig_new_instance_method(_AIS.AIS_TextLabel_SetFont)
    SetFontAspect = _swig_new_instance_method(_AIS.AIS_TextLabel_SetFontAspect)
    SetHJustification = _swig_new_instance_method(_AIS.AIS_TextLabel_SetHJustification)
    SetHeight = _swig_new_instance_method(_AIS.AIS_TextLabel_SetHeight)
    SetOrientation3D = _swig_new_instance_method(_AIS.AIS_TextLabel_SetOrientation3D)
    SetPosition = _swig_new_instance_method(_AIS.AIS_TextLabel_SetPosition)
    SetText = _swig_new_instance_method(_AIS.AIS_TextLabel_SetText)
    SetVJustification = _swig_new_instance_method(_AIS.AIS_TextLabel_SetVJustification)
    SetZoomable = _swig_new_instance_method(_AIS.AIS_TextLabel_SetZoomable)
    UnsetOrientation3D = _swig_new_instance_method(_AIS.AIS_TextLabel_UnsetOrientation3D)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_TextLabel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_TextLabel

# Register AIS_TextLabel in _AIS:
_AIS.AIS_TextLabel_swigregister(AIS_TextLabel)

class AIS_Triangulation(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructs the Triangulation display object
        	:param aTriangulation:
        	:type aTriangulation: Poly_Triangulation
        	:rtype: None
        """
        _AIS.AIS_Triangulation_swiginit(self, _AIS.new_AIS_Triangulation(*args))
    GetColors = _swig_new_instance_method(_AIS.AIS_Triangulation_GetColors)
    GetTriangulation = _swig_new_instance_method(_AIS.AIS_Triangulation_GetTriangulation)
    HasVertexColors = _swig_new_instance_method(_AIS.AIS_Triangulation_HasVertexColors)
    SetColors = _swig_new_instance_method(_AIS.AIS_Triangulation_SetColors)
    SetTriangulation = _swig_new_instance_method(_AIS.AIS_Triangulation_SetTriangulation)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Triangulation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Triangulation

# Register AIS_Triangulation in _AIS:
_AIS.AIS_Triangulation_swigregister(AIS_Triangulation)

class AIS_Trihedron(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Initializes a trihedron entity.
        	:param theComponent:
        	:type theComponent: Geom_Axis2Placement
        	:rtype: None
        """
        _AIS.AIS_Trihedron_swiginit(self, _AIS.new_AIS_Trihedron(*args))
    AcceptDisplayMode = _swig_new_instance_method(_AIS.AIS_Trihedron_AcceptDisplayMode)
    ArrowColor = _swig_new_instance_method(_AIS.AIS_Trihedron_ArrowColor)
    Component = _swig_new_instance_method(_AIS.AIS_Trihedron_Component)
    DatumDisplayMode = _swig_new_instance_method(_AIS.AIS_Trihedron_DatumDisplayMode)
    DatumPartColor = _swig_new_instance_method(_AIS.AIS_Trihedron_DatumPartColor)
    HasArrowColor = _swig_new_instance_method(_AIS.AIS_Trihedron_HasArrowColor)
    HasOwnSize = _swig_new_instance_method(_AIS.AIS_Trihedron_HasOwnSize)
    HasTextColor = _swig_new_instance_method(_AIS.AIS_Trihedron_HasTextColor)
    IsAutoHilight = _swig_new_instance_method(_AIS.AIS_Trihedron_IsAutoHilight)
    Label = _swig_new_instance_method(_AIS.AIS_Trihedron_Label)
    SelectionPriority = _swig_new_instance_method(_AIS.AIS_Trihedron_SelectionPriority)
    SetArrowColor = _swig_new_instance_method(_AIS.AIS_Trihedron_SetArrowColor)
    SetAxisColor = _swig_new_instance_method(_AIS.AIS_Trihedron_SetAxisColor)
    SetColor = _swig_new_instance_method(_AIS.AIS_Trihedron_SetColor)
    SetComponent = _swig_new_instance_method(_AIS.AIS_Trihedron_SetComponent)
    SetDatumDisplayMode = _swig_new_instance_method(_AIS.AIS_Trihedron_SetDatumDisplayMode)
    SetDatumPartColor = _swig_new_instance_method(_AIS.AIS_Trihedron_SetDatumPartColor)
    SetDrawArrows = _swig_new_instance_method(_AIS.AIS_Trihedron_SetDrawArrows)
    SetLabel = _swig_new_instance_method(_AIS.AIS_Trihedron_SetLabel)
    SetOriginColor = _swig_new_instance_method(_AIS.AIS_Trihedron_SetOriginColor)
    SetSelectionPriority = _swig_new_instance_method(_AIS.AIS_Trihedron_SetSelectionPriority)
    SetSize = _swig_new_instance_method(_AIS.AIS_Trihedron_SetSize)
    SetTextColor = _swig_new_instance_method(_AIS.AIS_Trihedron_SetTextColor)
    SetXAxisColor = _swig_new_instance_method(_AIS.AIS_Trihedron_SetXAxisColor)
    SetYAxisColor = _swig_new_instance_method(_AIS.AIS_Trihedron_SetYAxisColor)
    Signature = _swig_new_instance_method(_AIS.AIS_Trihedron_Signature)
    Size = _swig_new_instance_method(_AIS.AIS_Trihedron_Size)
    TextColor = _swig_new_instance_method(_AIS.AIS_Trihedron_TextColor)
    ToDrawArrows = _swig_new_instance_method(_AIS.AIS_Trihedron_ToDrawArrows)
    Type = _swig_new_instance_method(_AIS.AIS_Trihedron_Type)
    UnsetColor = _swig_new_instance_method(_AIS.AIS_Trihedron_UnsetColor)
    UnsetSize = _swig_new_instance_method(_AIS.AIS_Trihedron_UnsetSize)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Trihedron_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Trihedron

# Register AIS_Trihedron in _AIS:
_AIS.AIS_Trihedron_swigregister(AIS_Trihedron)

class AIS_ViewCube(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:rtype: None
        """
        _AIS.AIS_ViewCube_swiginit(self, _AIS.new_AIS_ViewCube(*args))
    AcceptDisplayMode = _swig_new_instance_method(_AIS.AIS_ViewCube_AcceptDisplayMode)
    AxesPadding = _swig_new_instance_method(_AIS.AIS_ViewCube_AxesPadding)
    AxisLabel = _swig_new_instance_method(_AIS.AIS_ViewCube_AxisLabel)
    BoxColor = _swig_new_instance_method(_AIS.AIS_ViewCube_BoxColor)
    BoxCornerMinSize = _swig_new_instance_method(_AIS.AIS_ViewCube_BoxCornerMinSize)
    BoxCornerStyle = _swig_new_instance_method(_AIS.AIS_ViewCube_BoxCornerStyle)
    BoxEdgeGap = _swig_new_instance_method(_AIS.AIS_ViewCube_BoxEdgeGap)
    BoxEdgeMinSize = _swig_new_instance_method(_AIS.AIS_ViewCube_BoxEdgeMinSize)
    BoxEdgeStyle = _swig_new_instance_method(_AIS.AIS_ViewCube_BoxEdgeStyle)
    BoxFacetExtension = _swig_new_instance_method(_AIS.AIS_ViewCube_BoxFacetExtension)
    BoxSideLabel = _swig_new_instance_method(_AIS.AIS_ViewCube_BoxSideLabel)
    BoxSideStyle = _swig_new_instance_method(_AIS.AIS_ViewCube_BoxSideStyle)
    BoxTransparency = _swig_new_instance_method(_AIS.AIS_ViewCube_BoxTransparency)
    Compute = _swig_new_instance_method(_AIS.AIS_ViewCube_Compute)
    ComputeSelection = _swig_new_instance_method(_AIS.AIS_ViewCube_ComputeSelection)
    Duration = _swig_new_instance_method(_AIS.AIS_ViewCube_Duration)
    Font = _swig_new_instance_method(_AIS.AIS_ViewCube_Font)
    FontHeight = _swig_new_instance_method(_AIS.AIS_ViewCube_FontHeight)
    HandleClick = _swig_new_instance_method(_AIS.AIS_ViewCube_HandleClick)
    HasAnimation = _swig_new_instance_method(_AIS.AIS_ViewCube_HasAnimation)
    InnerColor = _swig_new_instance_method(_AIS.AIS_ViewCube_InnerColor)
    IsAutoHilight = _swig_new_instance_method(_AIS.AIS_ViewCube_IsAutoHilight)
    IsBoxCorner = _swig_new_static_method(_AIS.AIS_ViewCube_IsBoxCorner)
    IsBoxEdge = _swig_new_static_method(_AIS.AIS_ViewCube_IsBoxEdge)
    IsBoxSide = _swig_new_static_method(_AIS.AIS_ViewCube_IsBoxSide)
    IsFixedAnimationLoop = _swig_new_instance_method(_AIS.AIS_ViewCube_IsFixedAnimationLoop)
    IsYup = _swig_new_instance_method(_AIS.AIS_ViewCube_IsYup)
    ResetStyles = _swig_new_instance_method(_AIS.AIS_ViewCube_ResetStyles)
    RoundRadius = _swig_new_instance_method(_AIS.AIS_ViewCube_RoundRadius)
    SetAutoStartAnimation = _swig_new_instance_method(_AIS.AIS_ViewCube_SetAutoStartAnimation)
    SetAxesLabels = _swig_new_instance_method(_AIS.AIS_ViewCube_SetAxesLabels)
    SetAxesPadding = _swig_new_instance_method(_AIS.AIS_ViewCube_SetAxesPadding)
    SetBoxColor = _swig_new_instance_method(_AIS.AIS_ViewCube_SetBoxColor)
    SetBoxCornerMinSize = _swig_new_instance_method(_AIS.AIS_ViewCube_SetBoxCornerMinSize)
    SetBoxEdgeGap = _swig_new_instance_method(_AIS.AIS_ViewCube_SetBoxEdgeGap)
    SetBoxEdgeMinSize = _swig_new_instance_method(_AIS.AIS_ViewCube_SetBoxEdgeMinSize)
    SetBoxFacetExtension = _swig_new_instance_method(_AIS.AIS_ViewCube_SetBoxFacetExtension)
    SetBoxSideLabel = _swig_new_instance_method(_AIS.AIS_ViewCube_SetBoxSideLabel)
    SetBoxTransparency = _swig_new_instance_method(_AIS.AIS_ViewCube_SetBoxTransparency)
    SetColor = _swig_new_instance_method(_AIS.AIS_ViewCube_SetColor)
    SetDrawAxes = _swig_new_instance_method(_AIS.AIS_ViewCube_SetDrawAxes)
    SetDrawEdges = _swig_new_instance_method(_AIS.AIS_ViewCube_SetDrawEdges)
    SetDrawVertices = _swig_new_instance_method(_AIS.AIS_ViewCube_SetDrawVertices)
    SetDuration = _swig_new_instance_method(_AIS.AIS_ViewCube_SetDuration)
    SetFitSelected = _swig_new_instance_method(_AIS.AIS_ViewCube_SetFitSelected)
    SetFixedAnimationLoop = _swig_new_instance_method(_AIS.AIS_ViewCube_SetFixedAnimationLoop)
    SetFont = _swig_new_instance_method(_AIS.AIS_ViewCube_SetFont)
    SetFontHeight = _swig_new_instance_method(_AIS.AIS_ViewCube_SetFontHeight)
    SetInnerColor = _swig_new_instance_method(_AIS.AIS_ViewCube_SetInnerColor)
    SetResetCamera = _swig_new_instance_method(_AIS.AIS_ViewCube_SetResetCamera)
    SetRoundRadius = _swig_new_instance_method(_AIS.AIS_ViewCube_SetRoundRadius)
    SetSize = _swig_new_instance_method(_AIS.AIS_ViewCube_SetSize)
    SetTextColor = _swig_new_instance_method(_AIS.AIS_ViewCube_SetTextColor)
    SetViewAnimation = _swig_new_instance_method(_AIS.AIS_ViewCube_SetViewAnimation)
    SetYup = _swig_new_instance_method(_AIS.AIS_ViewCube_SetYup)
    Size = _swig_new_instance_method(_AIS.AIS_ViewCube_Size)
    StartAnimation = _swig_new_instance_method(_AIS.AIS_ViewCube_StartAnimation)
    TextColor = _swig_new_instance_method(_AIS.AIS_ViewCube_TextColor)
    ToAutoStartAnimation = _swig_new_instance_method(_AIS.AIS_ViewCube_ToAutoStartAnimation)
    ToDrawAxes = _swig_new_instance_method(_AIS.AIS_ViewCube_ToDrawAxes)
    ToDrawEdges = _swig_new_instance_method(_AIS.AIS_ViewCube_ToDrawEdges)
    ToDrawVertices = _swig_new_instance_method(_AIS.AIS_ViewCube_ToDrawVertices)
    ToFitSelected = _swig_new_instance_method(_AIS.AIS_ViewCube_ToFitSelected)
    ToResetCameraUp = _swig_new_instance_method(_AIS.AIS_ViewCube_ToResetCameraUp)
    UnsetColor = _swig_new_instance_method(_AIS.AIS_ViewCube_UnsetColor)
    UnsetHilightAttributes = _swig_new_instance_method(_AIS.AIS_ViewCube_UnsetHilightAttributes)
    UpdateAnimation = _swig_new_instance_method(_AIS.AIS_ViewCube_UpdateAnimation)
    ViewAnimation = _swig_new_instance_method(_AIS.AIS_ViewCube_ViewAnimation)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ViewCube

# Register AIS_ViewCube in _AIS:
_AIS.AIS_ViewCube_swigregister(AIS_ViewCube)
AIS_ViewCube_IsBoxCorner = _AIS.AIS_ViewCube_IsBoxCorner
AIS_ViewCube_IsBoxEdge = _AIS.AIS_ViewCube_IsBoxEdge
AIS_ViewCube_IsBoxSide = _AIS.AIS_ViewCube_IsBoxSide

class AIS_AngleDimension(AIS_Dimension):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructs minimum angle dimension between two linear edges (where possible). These two edges should be intersected by each other. Otherwise the geometry is not valid. @param theFirstEdge [in] the first edge. @param theSecondEdge [in] the second edge.
        	:param theFirstEdge:
        	:type theFirstEdge: TopoDS_Edge
        	:param theSecondEdge:
        	:type theSecondEdge: TopoDS_Edge
        	:rtype: None* Constructs the angle display object defined by three points. @param theFirstPoint [in] the first point (point on first angle flyout). @param theSecondPoint [in] the center point of angle dimension. @param theThirdPoint [in] the second point (point on second angle flyout).
        	:param theFirstPoint:
        	:type theFirstPoint: gp_Pnt
        	:param theSecondPoint:
        	:type theSecondPoint: gp_Pnt
        	:param theThirdPoint:
        	:type theThirdPoint: gp_Pnt
        	:rtype: None* Constructs the angle display object defined by three vertices. @param theFirstVertex [in] the first vertex (vertex for first angle flyout). @param theSecondVertex [in] the center vertex of angle dimension. @param theThirdPoint [in] the second vertex (vertex for second angle flyout).
        	:param theFirstVertex:
        	:type theFirstVertex: TopoDS_Vertex
        	:param theSecondVertex:
        	:type theSecondVertex: TopoDS_Vertex
        	:param theThirdVertex:
        	:type theThirdVertex: TopoDS_Vertex
        	:rtype: None* Constructs angle dimension for the cone face. @param theCone [in] the conical face.
        	:param theCone:
        	:type theCone: TopoDS_Face
        	:rtype: None* Constructs angle dimension between two planar faces. @param theFirstFace [in] the first face. @param theSecondFace [in] the second face.
        	:param theFirstFace:
        	:type theFirstFace: TopoDS_Face
        	:param theSecondFace:
        	:type theSecondFace: TopoDS_Face
        	:rtype: None* Constructs angle dimension between two planar faces. @param theFirstFace [in] the first face. @param theSecondFace [in] the second face. @param thePoint [in] the point which the dimension plane should pass through. This point can lay on the one of the faces or not.
        	:param theFirstFace:
        	:type theFirstFace: TopoDS_Face
        	:param theSecondFace:
        	:type theSecondFace: TopoDS_Face
        	:param thePoint:
        	:type thePoint: gp_Pnt
        	:rtype: None
        """
        _AIS.AIS_AngleDimension_swiginit(self, _AIS.new_AIS_AngleDimension(*args))
    CenterPoint = _swig_new_instance_method(_AIS.AIS_AngleDimension_CenterPoint)
    FirstPoint = _swig_new_instance_method(_AIS.AIS_AngleDimension_FirstPoint)
    FirstShape = _swig_new_instance_method(_AIS.AIS_AngleDimension_FirstShape)
    GetArrowsVisibility = _swig_new_instance_method(_AIS.AIS_AngleDimension_GetArrowsVisibility)
    GetTextPosition = _swig_new_instance_method(_AIS.AIS_AngleDimension_GetTextPosition)
    GetType = _swig_new_instance_method(_AIS.AIS_AngleDimension_GetType)
    SecondPoint = _swig_new_instance_method(_AIS.AIS_AngleDimension_SecondPoint)
    SecondShape = _swig_new_instance_method(_AIS.AIS_AngleDimension_SecondShape)
    SetArrowsVisibility = _swig_new_instance_method(_AIS.AIS_AngleDimension_SetArrowsVisibility)
    SetDisplayUnits = _swig_new_instance_method(_AIS.AIS_AngleDimension_SetDisplayUnits)
    SetMeasuredGeometry = _swig_new_instance_method(_AIS.AIS_AngleDimension_SetMeasuredGeometry)
    SetModelUnits = _swig_new_instance_method(_AIS.AIS_AngleDimension_SetModelUnits)
    SetTextPosition = _swig_new_instance_method(_AIS.AIS_AngleDimension_SetTextPosition)
    SetType = _swig_new_instance_method(_AIS.AIS_AngleDimension_SetType)
    ThirdShape = _swig_new_instance_method(_AIS.AIS_AngleDimension_ThirdShape)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_AngleDimension_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_AngleDimension

# Register AIS_AngleDimension in _AIS:
_AIS.AIS_AngleDimension_swigregister(AIS_AngleDimension)

class AIS_Chamf2dDimension(AIS_Relation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructs the display object for 2D chamfers. This object is defined by the face aFShape, the dimension aVal, the plane aPlane and the text aText.
        	:param aFShape:
        	:type aFShape: TopoDS_Shape
        	:param aPlane:
        	:type aPlane: Geom_Plane
        	:param aVal:
        	:type aVal: float
        	:param aText:
        	:type aText: TCollection_ExtendedString
        	:rtype: None* Constructs the display object for 2D chamfers. This object is defined by the face aFShape, the plane aPlane, the dimension aVal, the position aPosition, the type of arrow aSymbolPrs with the size anArrowSize, and the text aText.
        	:param aFShape:
        	:type aFShape: TopoDS_Shape
        	:param aPlane:
        	:type aPlane: Geom_Plane
        	:param aVal:
        	:type aVal: float
        	:param aText:
        	:type aText: TCollection_ExtendedString
        	:param aPosition:
        	:type aPosition: gp_Pnt
        	:param aSymbolPrs:
        	:type aSymbolPrs: DsgPrs_ArrowSide
        	:param anArrowSize: default value is 0.0
        	:type anArrowSize: float
        	:rtype: None
        """
        _AIS.AIS_Chamf2dDimension_swiginit(self, _AIS.new_AIS_Chamf2dDimension(*args))
    Compute = _swig_new_instance_method(_AIS.AIS_Chamf2dDimension_Compute)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Chamf2dDimension_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Chamf2dDimension

# Register AIS_Chamf2dDimension in _AIS:
_AIS.AIS_Chamf2dDimension_swigregister(AIS_Chamf2dDimension)

class AIS_Chamf3dDimension(AIS_Relation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructs a display object for 3D chamfers. This object is defined by the shape aFShape, the dimension aVal and the text aText.
        	:param aFShape:
        	:type aFShape: TopoDS_Shape
        	:param aVal:
        	:type aVal: float
        	:param aText:
        	:type aText: TCollection_ExtendedString
        	:rtype: None* Constructs a display object for 3D chamfers. This object is defined by the shape aFShape, the dimension aVal, the text aText, the point of origin of the chamfer aPosition, the type of arrow aSymbolPrs with the size anArrowSize.
        	:param aFShape:
        	:type aFShape: TopoDS_Shape
        	:param aVal:
        	:type aVal: float
        	:param aText:
        	:type aText: TCollection_ExtendedString
        	:param aPosition:
        	:type aPosition: gp_Pnt
        	:param aSymbolPrs:
        	:type aSymbolPrs: DsgPrs_ArrowSide
        	:param anArrowSize: default value is 0.0
        	:type anArrowSize: float
        	:rtype: None
        """
        _AIS.AIS_Chamf3dDimension_swiginit(self, _AIS.new_AIS_Chamf3dDimension(*args))
    Compute = _swig_new_instance_method(_AIS.AIS_Chamf3dDimension_Compute)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Chamf3dDimension_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Chamf3dDimension

# Register AIS_Chamf3dDimension in _AIS:
_AIS.AIS_Chamf3dDimension_swigregister(AIS_Chamf3dDimension)

class AIS_ColoredShape(AIS_Shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Default constructor
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: None* Copy constructor
        	:param theShape:
        	:type theShape: AIS_Shape
        	:rtype: None
        """
        _AIS.AIS_ColoredShape_swiginit(self, _AIS.new_AIS_ColoredShape(*args))
    ChangeCustomAspectsMap = _swig_new_instance_method(_AIS.AIS_ColoredShape_ChangeCustomAspectsMap)
    ClearCustomAspects = _swig_new_instance_method(_AIS.AIS_ColoredShape_ClearCustomAspects)
    CustomAspects = _swig_new_instance_method(_AIS.AIS_ColoredShape_CustomAspects)
    CustomAspectsMap = _swig_new_instance_method(_AIS.AIS_ColoredShape_CustomAspectsMap)
    SetCustomColor = _swig_new_instance_method(_AIS.AIS_ColoredShape_SetCustomColor)
    SetCustomTransparency = _swig_new_instance_method(_AIS.AIS_ColoredShape_SetCustomTransparency)
    SetCustomWidth = _swig_new_instance_method(_AIS.AIS_ColoredShape_SetCustomWidth)
    UnsetCustomAspects = _swig_new_instance_method(_AIS.AIS_ColoredShape_UnsetCustomAspects)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_ColoredShape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ColoredShape

# Register AIS_ColoredShape in _AIS:
_AIS.AIS_ColoredShape_swigregister(AIS_ColoredShape)

class AIS_ConcentricRelation(AIS_Relation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructs the display object for concentric relations between shapes. This object is defined by the two shapes, aFShape and aSShape and the plane aPlane. aPlane is provided to create an axis along which the relation of concentricity can be extended.
        	:param aFShape:
        	:type aFShape: TopoDS_Shape
        	:param aSShape:
        	:type aSShape: TopoDS_Shape
        	:param aPlane:
        	:type aPlane: Geom_Plane
        	:rtype: None
        """
        _AIS.AIS_ConcentricRelation_swiginit(self, _AIS.new_AIS_ConcentricRelation(*args))
    Compute = _swig_new_instance_method(_AIS.AIS_ConcentricRelation_Compute)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_ConcentricRelation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ConcentricRelation

# Register AIS_ConcentricRelation in _AIS:
_AIS.AIS_ConcentricRelation_swigregister(AIS_ConcentricRelation)

class AIS_DiameterDimension(AIS_Dimension):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Construct diameter dimension for the circle. @param theCircle [in] the circle to measure.
        	:param theCircle:
        	:type theCircle: gp_Circ
        	:rtype: None* Construct diameter dimension for the circle and orient it correspondingly to the passed plane. @param theCircle [in] the circle to measure. @param thePlane [in] the plane defining preferred orientation for dimension.
        	:param theCircle:
        	:type theCircle: gp_Circ
        	:param thePlane:
        	:type thePlane: gp_Pln
        	:rtype: None* Construct diameter on the passed shape, if applicable. @param theShape [in] the shape to measure.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: None* Construct diameter on the passed shape, if applicable - and define the preferred plane to orient the dimension. @param theShape [in] the shape to measure. @param thePlane [in] the plane defining preferred orientation for dimension.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param thePlane:
        	:type thePlane: gp_Pln
        	:rtype: None
        """
        _AIS.AIS_DiameterDimension_swiginit(self, _AIS.new_AIS_DiameterDimension(*args))
    AnchorPoint = _swig_new_instance_method(_AIS.AIS_DiameterDimension_AnchorPoint)
    Circle = _swig_new_instance_method(_AIS.AIS_DiameterDimension_Circle)
    GetTextPosition = _swig_new_instance_method(_AIS.AIS_DiameterDimension_GetTextPosition)
    SetDisplayUnits = _swig_new_instance_method(_AIS.AIS_DiameterDimension_SetDisplayUnits)
    SetMeasuredGeometry = _swig_new_instance_method(_AIS.AIS_DiameterDimension_SetMeasuredGeometry)
    SetModelUnits = _swig_new_instance_method(_AIS.AIS_DiameterDimension_SetModelUnits)
    SetTextPosition = _swig_new_instance_method(_AIS.AIS_DiameterDimension_SetTextPosition)
    Shape = _swig_new_instance_method(_AIS.AIS_DiameterDimension_Shape)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_DiameterDimension_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_DiameterDimension

# Register AIS_DiameterDimension in _AIS:
_AIS.AIS_DiameterDimension_swigregister(AIS_DiameterDimension)

class AIS_EllipseRadiusDimension(AIS_Relation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ComputeGeometry = _swig_new_instance_method(_AIS.AIS_EllipseRadiusDimension_ComputeGeometry)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_EllipseRadiusDimension_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_EllipseRadiusDimension

# Register AIS_EllipseRadiusDimension in _AIS:
_AIS.AIS_EllipseRadiusDimension_swigregister(AIS_EllipseRadiusDimension)

class AIS_EqualDistanceRelation(AIS_Relation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructs a framework to display equivalent distances between the shapes aShape1, aShape2, aShape3, aShape4 and the plane aPlane. The distance is the length of a projection from the shape to the plane.
        	:param aShape1:
        	:type aShape1: TopoDS_Shape
        	:param aShape2:
        	:type aShape2: TopoDS_Shape
        	:param aShape3:
        	:type aShape3: TopoDS_Shape
        	:param aShape4:
        	:type aShape4: TopoDS_Shape
        	:param aPlane:
        	:type aPlane: Geom_Plane
        	:rtype: None
        """
        _AIS.AIS_EqualDistanceRelation_swiginit(self, _AIS.new_AIS_EqualDistanceRelation(*args))
    Compute = _swig_new_instance_method(_AIS.AIS_EqualDistanceRelation_Compute)
    ComputeOneEdgeOneVertexLength = _swig_new_static_method(_AIS.AIS_EqualDistanceRelation_ComputeOneEdgeOneVertexLength)
    ComputeTwoEdgesLength = _swig_new_static_method(_AIS.AIS_EqualDistanceRelation_ComputeTwoEdgesLength)
    ComputeTwoVerticesLength = _swig_new_static_method(_AIS.AIS_EqualDistanceRelation_ComputeTwoVerticesLength)
    SetShape3 = _swig_new_instance_method(_AIS.AIS_EqualDistanceRelation_SetShape3)
    SetShape4 = _swig_new_instance_method(_AIS.AIS_EqualDistanceRelation_SetShape4)
    Shape3 = _swig_new_instance_method(_AIS.AIS_EqualDistanceRelation_Shape3)
    Shape4 = _swig_new_instance_method(_AIS.AIS_EqualDistanceRelation_Shape4)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_EqualDistanceRelation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_EqualDistanceRelation

# Register AIS_EqualDistanceRelation in _AIS:
_AIS.AIS_EqualDistanceRelation_swigregister(AIS_EqualDistanceRelation)
AIS_EqualDistanceRelation_ComputeOneEdgeOneVertexLength = _AIS.AIS_EqualDistanceRelation_ComputeOneEdgeOneVertexLength
AIS_EqualDistanceRelation_ComputeTwoEdgesLength = _AIS.AIS_EqualDistanceRelation_ComputeTwoEdgesLength
AIS_EqualDistanceRelation_ComputeTwoVerticesLength = _AIS.AIS_EqualDistanceRelation_ComputeTwoVerticesLength

class AIS_EqualRadiusRelation(AIS_Relation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates equal relation of two arc's radiuses. If one of edges is not in the given plane, the presentation method projects it onto the plane.
        	:param aFirstEdge:
        	:type aFirstEdge: TopoDS_Edge
        	:param aSecondEdge:
        	:type aSecondEdge: TopoDS_Edge
        	:param aPlane:
        	:type aPlane: Geom_Plane
        	:rtype: None
        """
        _AIS.AIS_EqualRadiusRelation_swiginit(self, _AIS.new_AIS_EqualRadiusRelation(*args))
    Compute = _swig_new_instance_method(_AIS.AIS_EqualRadiusRelation_Compute)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_EqualRadiusRelation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_EqualRadiusRelation

# Register AIS_EqualRadiusRelation in _AIS:
_AIS.AIS_EqualRadiusRelation_swigregister(AIS_EqualRadiusRelation)

class AIS_FixRelation(AIS_Relation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * initializes the vertex aShape, the plane aPlane and the wire aWire, which connects the two vertices in a fixed relation.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param aPlane:
        	:type aPlane: Geom_Plane
        	:param aWire:
        	:type aWire: TopoDS_Wire
        	:rtype: None* initializes the vertex aShape, the plane aPlane and the wire aWire, the position aPosition, the arrow size anArrowSize and the wire aWire, which connects the two vertices in a fixed relation.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param aPlane:
        	:type aPlane: Geom_Plane
        	:param aWire:
        	:type aWire: TopoDS_Wire
        	:param aPosition:
        	:type aPosition: gp_Pnt
        	:param anArrowSize: default value is 0.01
        	:type anArrowSize: float
        	:rtype: None* initializes the edge aShape and the plane aPlane.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param aPlane:
        	:type aPlane: Geom_Plane
        	:rtype: None* initializes the edge aShape, the plane aPlane, the position aPosition and the arrow size anArrowSize.
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param aPlane:
        	:type aPlane: Geom_Plane
        	:param aPosition:
        	:type aPosition: gp_Pnt
        	:param anArrowSize: default value is 0.01
        	:type anArrowSize: float
        	:rtype: None
        """
        _AIS.AIS_FixRelation_swiginit(self, _AIS.new_AIS_FixRelation(*args))
    Compute = _swig_new_instance_method(_AIS.AIS_FixRelation_Compute)
    SetWire = _swig_new_instance_method(_AIS.AIS_FixRelation_SetWire)
    Wire = _swig_new_instance_method(_AIS.AIS_FixRelation_Wire)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_FixRelation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_FixRelation

# Register AIS_FixRelation in _AIS:
_AIS.AIS_FixRelation_swigregister(AIS_FixRelation)

class AIS_IdenticRelation(AIS_Relation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Initializes the relation of identity between the two entities, FirstShape and SecondShape. The plane aPlane is initialized in case a visual reference is needed to show identity.
        	:param FirstShape:
        	:type FirstShape: TopoDS_Shape
        	:param SecondShape:
        	:type SecondShape: TopoDS_Shape
        	:param aPlane:
        	:type aPlane: Geom_Plane
        	:rtype: None
        """
        _AIS.AIS_IdenticRelation_swiginit(self, _AIS.new_AIS_IdenticRelation(*args))
    AddUser = _swig_new_instance_method(_AIS.AIS_IdenticRelation_AddUser)
    ClearUsers = _swig_new_instance_method(_AIS.AIS_IdenticRelation_ClearUsers)
    Compute = _swig_new_instance_method(_AIS.AIS_IdenticRelation_Compute)
    HasUsers = _swig_new_instance_method(_AIS.AIS_IdenticRelation_HasUsers)
    Users = _swig_new_instance_method(_AIS.AIS_IdenticRelation_Users)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_IdenticRelation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_IdenticRelation

# Register AIS_IdenticRelation in _AIS:
_AIS.AIS_IdenticRelation_swigregister(AIS_IdenticRelation)

class AIS_LengthDimension(AIS_Dimension):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Construct length dimension between face and edge. Here dimension can be built without user-defined plane. @param theFace [in] the face (first shape). @param theEdge [in] the edge (second shape).
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:rtype: None* Construct length dimension between two faces. @param theFirstFace [in] the first face (first shape). @param theSecondFace [in] the second face (second shape).
        	:param theFirstFace:
        	:type theFirstFace: TopoDS_Face
        	:param theSecondFace:
        	:type theSecondFace: TopoDS_Face
        	:rtype: None* Construct length dimension between two points in the specified plane. @param theFirstPoint [in] the first point. @param theSecondPoint [in] the second point. @param thePlane [in] the plane to orient dimension.
        	:param theFirstPoint:
        	:type theFirstPoint: gp_Pnt
        	:param theSecondPoint:
        	:type theSecondPoint: gp_Pnt
        	:param thePlane:
        	:type thePlane: gp_Pln
        	:rtype: None* Construct length dimension between two arbitrary shapes in the specified plane. @param theFirstShape [in] the first shape. @param theSecondShape [in] the second shape. @param thePlane [in] the plane to orient dimension.
        	:param theFirstShape:
        	:type theFirstShape: TopoDS_Shape
        	:param theSecondShape:
        	:type theSecondShape: TopoDS_Shape
        	:param thePlane:
        	:type thePlane: gp_Pln
        	:rtype: None* Construct length dimension of linear edge. @param theEdge [in] the edge to measure. @param thePlane [in] the plane to orient dimension.
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param thePlane:
        	:type thePlane: gp_Pln
        	:rtype: None
        """
        _AIS.AIS_LengthDimension_swiginit(self, _AIS.new_AIS_LengthDimension(*args))
    FirstPoint = _swig_new_instance_method(_AIS.AIS_LengthDimension_FirstPoint)
    FirstShape = _swig_new_instance_method(_AIS.AIS_LengthDimension_FirstShape)
    GetTextPosition = _swig_new_instance_method(_AIS.AIS_LengthDimension_GetTextPosition)
    SecondPoint = _swig_new_instance_method(_AIS.AIS_LengthDimension_SecondPoint)
    SecondShape = _swig_new_instance_method(_AIS.AIS_LengthDimension_SecondShape)
    SetDirection = _swig_new_instance_method(_AIS.AIS_LengthDimension_SetDirection)
    SetDisplayUnits = _swig_new_instance_method(_AIS.AIS_LengthDimension_SetDisplayUnits)
    SetMeasuredGeometry = _swig_new_instance_method(_AIS.AIS_LengthDimension_SetMeasuredGeometry)
    SetMeasuredShapes = _swig_new_instance_method(_AIS.AIS_LengthDimension_SetMeasuredShapes)
    SetModelUnits = _swig_new_instance_method(_AIS.AIS_LengthDimension_SetModelUnits)
    SetTextPosition = _swig_new_instance_method(_AIS.AIS_LengthDimension_SetTextPosition)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_LengthDimension_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_LengthDimension

# Register AIS_LengthDimension in _AIS:
_AIS.AIS_LengthDimension_swigregister(AIS_LengthDimension)

class AIS_MidPointRelation(AIS_Relation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param aSymmTool:
        	:type aSymmTool: TopoDS_Shape
        	:param FirstShape:
        	:type FirstShape: TopoDS_Shape
        	:param SecondShape:
        	:type SecondShape: TopoDS_Shape
        	:param aPlane:
        	:type aPlane: Geom_Plane
        	:rtype: None
        """
        _AIS.AIS_MidPointRelation_swiginit(self, _AIS.new_AIS_MidPointRelation(*args))
    Compute = _swig_new_instance_method(_AIS.AIS_MidPointRelation_Compute)
    GetTool = _swig_new_instance_method(_AIS.AIS_MidPointRelation_GetTool)
    SetTool = _swig_new_instance_method(_AIS.AIS_MidPointRelation_SetTool)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_MidPointRelation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_MidPointRelation

# Register AIS_MidPointRelation in _AIS:
_AIS.AIS_MidPointRelation_swigregister(AIS_MidPointRelation)

class AIS_OffsetDimension(AIS_Relation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructs the offset display object defined by the first shape aFShape, the second shape aSShape, the dimension aVal, and the text aText.
        	:param FistShape:
        	:type FistShape: TopoDS_Shape
        	:param SecondShape:
        	:type SecondShape: TopoDS_Shape
        	:param aVal:
        	:type aVal: float
        	:param aText:
        	:type aText: TCollection_ExtendedString
        	:rtype: None
        """
        _AIS.AIS_OffsetDimension_swiginit(self, _AIS.new_AIS_OffsetDimension(*args))
    Compute = _swig_new_instance_method(_AIS.AIS_OffsetDimension_Compute)
    SetRelativePos = _swig_new_instance_method(_AIS.AIS_OffsetDimension_SetRelativePos)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_OffsetDimension_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_OffsetDimension

# Register AIS_OffsetDimension in _AIS:
_AIS.AIS_OffsetDimension_swigregister(AIS_OffsetDimension)

class AIS_ParallelRelation(AIS_Relation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructs an object to display parallel constraints. This object is defined by the first shape aFShape and the second shape aSShape and the plane aPlane.
        	:param aFShape:
        	:type aFShape: TopoDS_Shape
        	:param aSShape:
        	:type aSShape: TopoDS_Shape
        	:param aPlane:
        	:type aPlane: Geom_Plane
        	:rtype: None* Constructs an object to display parallel constraints. This object is defined by the first shape aFShape and the second shape aSShape the plane aPlane, the position aPosition, the type of arrow, aSymbolPrs and its size anArrowSize.
        	:param aFShape:
        	:type aFShape: TopoDS_Shape
        	:param aSShape:
        	:type aSShape: TopoDS_Shape
        	:param aPlane:
        	:type aPlane: Geom_Plane
        	:param aPosition:
        	:type aPosition: gp_Pnt
        	:param aSymbolPrs:
        	:type aSymbolPrs: DsgPrs_ArrowSide
        	:param anArrowSize: default value is 0.01
        	:type anArrowSize: float
        	:rtype: None
        """
        _AIS.AIS_ParallelRelation_swiginit(self, _AIS.new_AIS_ParallelRelation(*args))
    Compute = _swig_new_instance_method(_AIS.AIS_ParallelRelation_Compute)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_ParallelRelation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ParallelRelation

# Register AIS_ParallelRelation in _AIS:
_AIS.AIS_ParallelRelation_swigregister(AIS_ParallelRelation)

class AIS_PerpendicularRelation(AIS_Relation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructs an object to display constraints of perpendicularity on shapes. This object is defined by a first shape aFShape, a second shape aSShape, and a plane aPlane. aPlane is the plane of reference to show and test the perpendicular relation between two shapes, at least one of which has a revolved surface.
        	:param aFShape:
        	:type aFShape: TopoDS_Shape
        	:param aSShape:
        	:type aSShape: TopoDS_Shape
        	:param aPlane:
        	:type aPlane: Geom_Plane
        	:rtype: None* Constructs an object to display constraints of perpendicularity on shapes. This object is defined by a first shape aFShape and a second shape aSShape.
        	:param aFShape:
        	:type aFShape: TopoDS_Shape
        	:param aSShape:
        	:type aSShape: TopoDS_Shape
        	:rtype: None
        """
        _AIS.AIS_PerpendicularRelation_swiginit(self, _AIS.new_AIS_PerpendicularRelation(*args))
    Compute = _swig_new_instance_method(_AIS.AIS_PerpendicularRelation_Compute)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_PerpendicularRelation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_PerpendicularRelation

# Register AIS_PerpendicularRelation in _AIS:
_AIS.AIS_PerpendicularRelation_swigregister(AIS_PerpendicularRelation)

class AIS_RadiusDimension(AIS_Dimension):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Create radius dimension for the circle geometry. @param theCircle [in] the circle to measure.
        	:param theCircle:
        	:type theCircle: gp_Circ
        	:rtype: None* Create radius dimension for the circle geometry and define its orientation by location of the first point on that circle. @param theCircle [in] the circle to measure. @param theAnchorPoint [in] the point to define the position of the dimension attachment on the circle.
        	:param theCircle:
        	:type theCircle: gp_Circ
        	:param theAnchorPoint:
        	:type theAnchorPoint: gp_Pnt
        	:rtype: None* Create radius dimension for the arbitrary shape (if possible). @param theShape [in] the shape to measure.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: None
        """
        _AIS.AIS_RadiusDimension_swiginit(self, _AIS.new_AIS_RadiusDimension(*args))
    AnchorPoint = _swig_new_instance_method(_AIS.AIS_RadiusDimension_AnchorPoint)
    Circle = _swig_new_instance_method(_AIS.AIS_RadiusDimension_Circle)
    GetTextPosition = _swig_new_instance_method(_AIS.AIS_RadiusDimension_GetTextPosition)
    SetDisplayUnits = _swig_new_instance_method(_AIS.AIS_RadiusDimension_SetDisplayUnits)
    SetMeasuredGeometry = _swig_new_instance_method(_AIS.AIS_RadiusDimension_SetMeasuredGeometry)
    SetModelUnits = _swig_new_instance_method(_AIS.AIS_RadiusDimension_SetModelUnits)
    SetTextPosition = _swig_new_instance_method(_AIS.AIS_RadiusDimension_SetTextPosition)
    Shape = _swig_new_instance_method(_AIS.AIS_RadiusDimension_Shape)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_RadiusDimension_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_RadiusDimension

# Register AIS_RadiusDimension in _AIS:
_AIS.AIS_RadiusDimension_swigregister(AIS_RadiusDimension)

class AIS_SymmetricRelation(AIS_Relation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructs an object to display constraints of symmetricity. This object is defined by a tool aSymmTool, a first shape FirstShape, a second shape SecondShape, and a plane aPlane. aPlane serves as the axis of symmetry. aSymmTool is the shape composed of FirstShape SecondShape and aPlane. It may be queried and edited using the functions GetTool and SetTool. The two shapes are typically two edges, two vertices or two points.
        	:param aSymmTool:
        	:type aSymmTool: TopoDS_Shape
        	:param FirstShape:
        	:type FirstShape: TopoDS_Shape
        	:param SecondShape:
        	:type SecondShape: TopoDS_Shape
        	:param aPlane:
        	:type aPlane: Geom_Plane
        	:rtype: None
        """
        _AIS.AIS_SymmetricRelation_swiginit(self, _AIS.new_AIS_SymmetricRelation(*args))
    Compute = _swig_new_instance_method(_AIS.AIS_SymmetricRelation_Compute)
    GetTool = _swig_new_instance_method(_AIS.AIS_SymmetricRelation_GetTool)
    SetTool = _swig_new_instance_method(_AIS.AIS_SymmetricRelation_SetTool)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_SymmetricRelation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_SymmetricRelation

# Register AIS_SymmetricRelation in _AIS:
_AIS.AIS_SymmetricRelation_swigregister(AIS_SymmetricRelation)

class AIS_TangentRelation(AIS_Relation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * TwoFacesTangent or TwoEdgesTangent relation Constructs an object to display tangency constraints. This object is defined by the first shape aFShape, the second shape aSShape, the plane aPlane and the index anExternRef. aPlane serves as an optional axis. anExternRef set to 0 indicates that there is no relation.
        	:param aFShape:
        	:type aFShape: TopoDS_Shape
        	:param aSShape:
        	:type aSShape: TopoDS_Shape
        	:param aPlane:
        	:type aPlane: Geom_Plane
        	:param anExternRef: default value is 0
        	:type anExternRef: int
        	:rtype: None
        """
        _AIS.AIS_TangentRelation_swiginit(self, _AIS.new_AIS_TangentRelation(*args))
    Compute = _swig_new_instance_method(_AIS.AIS_TangentRelation_Compute)
    ExternRef = _swig_new_instance_method(_AIS.AIS_TangentRelation_ExternRef)
    SetExternRef = _swig_new_instance_method(_AIS.AIS_TangentRelation_SetExternRef)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_TangentRelation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_TangentRelation

# Register AIS_TangentRelation in _AIS:
_AIS.AIS_TangentRelation_swigregister(AIS_TangentRelation)

class AIS_TexturedShape(AIS_Shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * @name main methods Initializes the textured shape.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:rtype: None
        """
        _AIS.AIS_TexturedShape_swiginit(self, _AIS.new_AIS_TexturedShape(*args))
    AcceptDisplayMode = _swig_new_instance_method(_AIS.AIS_TexturedShape_AcceptDisplayMode)
    DisableTextureModulate = _swig_new_instance_method(_AIS.AIS_TexturedShape_DisableTextureModulate)
    EnableTextureModulate = _swig_new_instance_method(_AIS.AIS_TexturedShape_EnableTextureModulate)
    SetTextureFileName = _swig_new_instance_method(_AIS.AIS_TexturedShape_SetTextureFileName)
    SetTextureMapOff = _swig_new_instance_method(_AIS.AIS_TexturedShape_SetTextureMapOff)
    SetTextureMapOn = _swig_new_instance_method(_AIS.AIS_TexturedShape_SetTextureMapOn)
    SetTextureOrigin = _swig_new_instance_method(_AIS.AIS_TexturedShape_SetTextureOrigin)
    SetTexturePixMap = _swig_new_instance_method(_AIS.AIS_TexturedShape_SetTexturePixMap)
    SetTextureRepeat = _swig_new_instance_method(_AIS.AIS_TexturedShape_SetTextureRepeat)
    SetTextureScale = _swig_new_instance_method(_AIS.AIS_TexturedShape_SetTextureScale)
    TextureFile = _swig_new_instance_method(_AIS.AIS_TexturedShape_TextureFile)
    TextureMapState = _swig_new_instance_method(_AIS.AIS_TexturedShape_TextureMapState)
    TextureModulate = _swig_new_instance_method(_AIS.AIS_TexturedShape_TextureModulate)
    TextureOrigin = _swig_new_instance_method(_AIS.AIS_TexturedShape_TextureOrigin)
    TexturePixMap = _swig_new_instance_method(_AIS.AIS_TexturedShape_TexturePixMap)
    TextureRepeat = _swig_new_instance_method(_AIS.AIS_TexturedShape_TextureRepeat)
    TextureScale = _swig_new_instance_method(_AIS.AIS_TexturedShape_TextureScale)
    TextureScaleU = _swig_new_instance_method(_AIS.AIS_TexturedShape_TextureScaleU)
    TextureScaleV = _swig_new_instance_method(_AIS.AIS_TexturedShape_TextureScaleV)
    TextureUOrigin = _swig_new_instance_method(_AIS.AIS_TexturedShape_TextureUOrigin)
    TextureVOrigin = _swig_new_instance_method(_AIS.AIS_TexturedShape_TextureVOrigin)
    URepeat = _swig_new_instance_method(_AIS.AIS_TexturedShape_URepeat)
    UpdateAttributes = _swig_new_instance_method(_AIS.AIS_TexturedShape_UpdateAttributes)
    VRepeat = _swig_new_instance_method(_AIS.AIS_TexturedShape_VRepeat)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_TexturedShape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_TexturedShape

# Register AIS_TexturedShape in _AIS:
_AIS.AIS_TexturedShape_swigregister(AIS_TexturedShape)

class AIS_MaxRadiusDimension(AIS_EllipseRadiusDimension):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Max Ellipse radius dimension Shape can be edge , planar face or cylindrical face
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param aVal:
        	:type aVal: float
        	:param aText:
        	:type aText: TCollection_ExtendedString
        	:rtype: None* Max Ellipse radius dimension with position Shape can be edge , planar face or cylindrical face
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param aVal:
        	:type aVal: float
        	:param aText:
        	:type aText: TCollection_ExtendedString
        	:param aPosition:
        	:type aPosition: gp_Pnt
        	:param aSymbolPrs:
        	:type aSymbolPrs: DsgPrs_ArrowSide
        	:param anArrowSize: default value is 0.0
        	:type anArrowSize: float
        	:rtype: None
        """
        _AIS.AIS_MaxRadiusDimension_swiginit(self, _AIS.new_AIS_MaxRadiusDimension(*args))
    Compute = _swig_new_instance_method(_AIS.AIS_MaxRadiusDimension_Compute)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_MaxRadiusDimension_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_MaxRadiusDimension

# Register AIS_MaxRadiusDimension in _AIS:
_AIS.AIS_MaxRadiusDimension_swigregister(AIS_MaxRadiusDimension)

class AIS_MinRadiusDimension(AIS_EllipseRadiusDimension):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Max Ellipse radius dimension Shape can be edge , planar face or cylindrical face
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param aVal:
        	:type aVal: float
        	:param aText:
        	:type aText: TCollection_ExtendedString
        	:rtype: None* Max Ellipse radius dimension with position Shape can be edge , planar face or cylindrical face
        	:param aShape:
        	:type aShape: TopoDS_Shape
        	:param aVal:
        	:type aVal: float
        	:param aText:
        	:type aText: TCollection_ExtendedString
        	:param aPosition:
        	:type aPosition: gp_Pnt
        	:param aSymbolPrs:
        	:type aSymbolPrs: DsgPrs_ArrowSide
        	:param anArrowSize: default value is 0.0
        	:type anArrowSize: float
        	:rtype: None
        """
        _AIS.AIS_MinRadiusDimension_swiginit(self, _AIS.new_AIS_MinRadiusDimension(*args))
    Compute = _swig_new_instance_method(_AIS.AIS_MinRadiusDimension_Compute)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_MinRadiusDimension_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_MinRadiusDimension

# Register AIS_MinRadiusDimension in _AIS:
_AIS.AIS_MinRadiusDimension_swigregister(AIS_MinRadiusDimension)



