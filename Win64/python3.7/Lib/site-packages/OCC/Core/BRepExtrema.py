# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepExtrema module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brepextrema.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BRepExtrema
else:
    import _BRepExtrema

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _BRepExtrema.SWIG_PyInstanceMethod_New
_swig_new_static_method = _BRepExtrema.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepExtrema.delete_SwigPyIterator
    value = _swig_new_instance_method(_BRepExtrema.SwigPyIterator_value)
    incr = _swig_new_instance_method(_BRepExtrema.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_BRepExtrema.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_BRepExtrema.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_BRepExtrema.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_BRepExtrema.SwigPyIterator_copy)
    next = _swig_new_instance_method(_BRepExtrema.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_BRepExtrema.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_BRepExtrema.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_BRepExtrema.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_BRepExtrema.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_BRepExtrema.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_BRepExtrema.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_BRepExtrema.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_BRepExtrema.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_BRepExtrema.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BRepExtrema:
_BRepExtrema.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Extrema
import OCC.Core.math
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.GeomAdaptor
import OCC.Core.Bnd
import OCC.Core.BVH
BRepExtrema_IsVertex = _BRepExtrema.BRepExtrema_IsVertex
BRepExtrema_IsOnEdge = _BRepExtrema.BRepExtrema_IsOnEdge
BRepExtrema_IsInFace = _BRepExtrema.BRepExtrema_IsInFace
Handle_BRepExtrema_TriangleSet_Create = _BRepExtrema.Handle_BRepExtrema_TriangleSet_Create
Handle_BRepExtrema_TriangleSet_DownCast = _BRepExtrema.Handle_BRepExtrema_TriangleSet_DownCast
Handle_BRepExtrema_TriangleSet_IsNull = _BRepExtrema.Handle_BRepExtrema_TriangleSet_IsNull
class BRepExtrema_SeqOfSolution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_begin)
    end = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_end)
    cbegin = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_cbegin)
    cend = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_cend)

    def __init__(self, *args):
        _BRepExtrema.BRepExtrema_SeqOfSolution_swiginit(self, _BRepExtrema.new_BRepExtrema_SeqOfSolution(*args))
    Size = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_Size)
    Length = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_Length)
    Lower = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_Lower)
    Upper = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_Upper)
    IsEmpty = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_IsEmpty)
    Reverse = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_Reverse)
    Exchange = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_Exchange)
    delNode = _swig_new_static_method(_BRepExtrema.BRepExtrema_SeqOfSolution_delNode)
    Clear = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_Clear)
    Assign = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_Assign)
    Set = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_Set)
    Remove = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_Remove)
    Append = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_Append)
    Prepend = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_Prepend)
    InsertBefore = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_InsertBefore)
    InsertAfter = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_InsertAfter)
    Split = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_Split)
    First = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_First)
    ChangeFirst = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_ChangeFirst)
    Last = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_Last)
    ChangeLast = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_ChangeLast)
    Value = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_Value)
    ChangeValue = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_ChangeValue)
    __call__ = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution___call__)
    SetValue = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SeqOfSolution_SetValue)
    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_SeqOfSolution

# Register BRepExtrema_SeqOfSolution in _BRepExtrema:
_BRepExtrema.BRepExtrema_SeqOfSolution_swigregister(BRepExtrema_SeqOfSolution)
BRepExtrema_SeqOfSolution_delNode = _BRepExtrema.BRepExtrema_SeqOfSolution_delNode

class BRepExtrema_ShapeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_begin)
    end = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_end)
    cbegin = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_cbegin)
    cend = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_cend)

    def __init__(self, *args):
        _BRepExtrema.BRepExtrema_ShapeList_swiginit(self, _BRepExtrema.new_BRepExtrema_ShapeList(*args))
    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_ShapeList
    Length = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_Length)
    Size = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_Size)
    Lower = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_Lower)
    Upper = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_Upper)
    IsEmpty = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_IsEmpty)
    Assign = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_Assign)
    Set = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_Set)
    Append = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_Append)
    Appended = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_Appended)
    Value = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_Value)
    First = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_First)
    ChangeFirst = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_ChangeFirst)
    Last = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_Last)
    ChangeLast = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_ChangeLast)
    __call__ = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList___call__)
    ChangeValue = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_ChangeValue)
    SetValue = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeList_SetValue)

# Register BRepExtrema_ShapeList in _BRepExtrema:
_BRepExtrema.BRepExtrema_ShapeList_swigregister(BRepExtrema_ShapeList)

class BRepExtrema_MapOfIntegerPackedMapOfInteger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_begin)
    end = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_end)
    cbegin = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_cbegin)
    cend = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_cend)

    def __init__(self, *args):
        _BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_swiginit(self, _BRepExtrema.new_BRepExtrema_MapOfIntegerPackedMapOfInteger(*args))
    Exchange = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Exchange)
    Assign = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Assign)
    Set = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Set)
    ReSize = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_ReSize)
    Bind = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Bind)
    Bound = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Bound)
    IsBound = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_IsBound)
    UnBind = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_UnBind)
    Seek = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Seek)
    Find = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Find)
    ChangeSeek = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_ChangeFind)
    __call__ = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger___call__)
    Clear = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Clear)
    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_MapOfIntegerPackedMapOfInteger
    Size = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Size)
    Keys = _swig_new_instance_method(_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_Keys)

# Register BRepExtrema_MapOfIntegerPackedMapOfInteger in _BRepExtrema:
_BRepExtrema.BRepExtrema_MapOfIntegerPackedMapOfInteger_swigregister(BRepExtrema_MapOfIntegerPackedMapOfInteger)

class BRepExtrema_DistShapeShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * create empty tool
        	:rtype: None* computation of the minimum distance (value and pair of points) using default deflection Default value is Precision::Confusion().
        	:param Shape1:
        	:type Shape1: TopoDS_Shape
        	:param Shape2:
        	:type Shape2: TopoDS_Shape
        	:param F: default value is Extrema_ExtFlag_MINMAX
        	:type F: Extrema_ExtFlag
        	:param A: default value is Extrema_ExtAlgo_Grad
        	:type A: Extrema_ExtAlgo
        	:rtype: None* create tool and load both shapes into it
        	:param Shape1:
        	:type Shape1: TopoDS_Shape
        	:param Shape2:
        	:type Shape2: TopoDS_Shape
        	:param theDeflection:
        	:type theDeflection: float
        	:param F: default value is Extrema_ExtFlag_MINMAX
        	:type F: Extrema_ExtFlag
        	:param A: default value is Extrema_ExtAlgo_Grad
        	:type A: Extrema_ExtAlgo
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_DistShapeShape_swiginit(self, _BRepExtrema.new_BRepExtrema_DistShapeShape(*args))
    DumpToString = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_DumpToString)
    InnerSolution = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_InnerSolution)
    IsDone = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_IsDone)
    LoadS1 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_LoadS1)
    LoadS2 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_LoadS2)
    NbSolution = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_NbSolution)
    ParOnEdgeS1 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_ParOnEdgeS1)
    ParOnEdgeS2 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_ParOnEdgeS2)
    ParOnFaceS1 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_ParOnFaceS1)
    ParOnFaceS2 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_ParOnFaceS2)
    Perform = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_Perform)
    PointOnShape1 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_PointOnShape1)
    PointOnShape2 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_PointOnShape2)
    SetAlgo = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_SetAlgo)
    SetDeflection = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_SetDeflection)
    SetFlag = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_SetFlag)
    SupportOnShape1 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_SupportOnShape1)
    SupportOnShape2 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_SupportOnShape2)
    SupportTypeShape1 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_SupportTypeShape1)
    SupportTypeShape2 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_SupportTypeShape2)
    Value = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistShapeShape_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_DistShapeShape

# Register BRepExtrema_DistShapeShape in _BRepExtrema:
_BRepExtrema.BRepExtrema_DistShapeShape_swigregister(BRepExtrema_DistShapeShape)

class BRepExtrema_DistanceSS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * computes the distance between two Shapes ( face edge vertex).
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param B1:
        	:type B1: Bnd_Box
        	:param B2:
        	:type B2: Bnd_Box
        	:param DstRef:
        	:type DstRef: float
        	:param F: default value is Extrema_ExtFlag_MINMAX
        	:type F: Extrema_ExtFlag
        	:param A: default value is Extrema_ExtAlgo_Grad
        	:type A: Extrema_ExtAlgo
        	:rtype: None* computes the distance between two Shapes ( face edge vertex). Parameter theDeflection is used to specify a maximum deviation of extreme distances from the minimum one. Default value is Precision::Confusion().
        	:param S1:
        	:type S1: TopoDS_Shape
        	:param S2:
        	:type S2: TopoDS_Shape
        	:param B1:
        	:type B1: Bnd_Box
        	:param B2:
        	:type B2: Bnd_Box
        	:param DstRef:
        	:type DstRef: float
        	:param aDeflection:
        	:type aDeflection: float
        	:param F: default value is Extrema_ExtFlag_MINMAX
        	:type F: Extrema_ExtFlag
        	:param A: default value is Extrema_ExtAlgo_Grad
        	:type A: Extrema_ExtAlgo
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_DistanceSS_swiginit(self, _BRepExtrema.new_BRepExtrema_DistanceSS(*args))
    DistValue = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistanceSS_DistValue)
    IsDone = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistanceSS_IsDone)
    Seq1Value = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistanceSS_Seq1Value)
    Seq2Value = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistanceSS_Seq2Value)
    SetAlgo = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistanceSS_SetAlgo)
    SetFlag = _swig_new_instance_method(_BRepExtrema.BRepExtrema_DistanceSS_SetFlag)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_DistanceSS

# Register BRepExtrema_DistanceSS in _BRepExtrema:
_BRepExtrema.BRepExtrema_DistanceSS_swigregister(BRepExtrema_DistanceSS)

class BRepExtrema_ElementFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoCheck = _BRepExtrema.BRepExtrema_ElementFilter_NoCheck
    Overlap = _BRepExtrema.BRepExtrema_ElementFilter_Overlap
    DoCheck = _BRepExtrema.BRepExtrema_ElementFilter_DoCheck
    PreCheckElements = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ElementFilter_PreCheckElements)

    __repr__ = _dumps_object


    def __init__(self):
        _BRepExtrema.BRepExtrema_ElementFilter_swiginit(self, _BRepExtrema.new_BRepExtrema_ElementFilter())
    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_ElementFilter

# Register BRepExtrema_ElementFilter in _BRepExtrema:
_BRepExtrema.BRepExtrema_ElementFilter_swigregister(BRepExtrema_ElementFilter)

class BRepExtrema_ExtCC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None* It calculates all the distances.
        	:param E1:
        	:type E1: TopoDS_Edge
        	:param E2:
        	:type E2: TopoDS_Edge
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_ExtCC_swiginit(self, _BRepExtrema.new_BRepExtrema_ExtCC(*args))
    Initialize = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCC_Initialize)
    IsDone = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCC_IsDone)
    IsParallel = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCC_IsParallel)
    NbExt = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCC_NbExt)
    ParameterOnE1 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCC_ParameterOnE1)
    ParameterOnE2 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCC_ParameterOnE2)
    Perform = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCC_Perform)
    PointOnE1 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCC_PointOnE1)
    PointOnE2 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCC_PointOnE2)
    SquareDistance = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCC_SquareDistance)
    TrimmedSquareDistances = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCC_TrimmedSquareDistances)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_ExtCC

# Register BRepExtrema_ExtCC in _BRepExtrema:
_BRepExtrema.BRepExtrema_ExtCC_swigregister(BRepExtrema_ExtCC)

class BRepExtrema_ExtCF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None* It calculates all the distances.
        	:param E:
        	:type E: TopoDS_Edge
        	:param F:
        	:type F: TopoDS_Face
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_ExtCF_swiginit(self, _BRepExtrema.new_BRepExtrema_ExtCF(*args))
    Initialize = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCF_Initialize)
    IsDone = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCF_IsDone)
    IsParallel = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCF_IsParallel)
    NbExt = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCF_NbExt)
    ParameterOnEdge = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCF_ParameterOnEdge)
    ParameterOnFace = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCF_ParameterOnFace)
    Perform = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCF_Perform)
    PointOnEdge = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCF_PointOnEdge)
    PointOnFace = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCF_PointOnFace)
    SquareDistance = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtCF_SquareDistance)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_ExtCF

# Register BRepExtrema_ExtCF in _BRepExtrema:
_BRepExtrema.BRepExtrema_ExtCF_swigregister(BRepExtrema_ExtCF)

class BRepExtrema_ExtFF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None* It calculates all the distances.
        	:param F1:
        	:type F1: TopoDS_Face
        	:param F2:
        	:type F2: TopoDS_Face
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_ExtFF_swiginit(self, _BRepExtrema.new_BRepExtrema_ExtFF(*args))
    Initialize = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtFF_Initialize)
    IsDone = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtFF_IsDone)
    IsParallel = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtFF_IsParallel)
    NbExt = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtFF_NbExt)
    ParameterOnFace1 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtFF_ParameterOnFace1)
    ParameterOnFace2 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtFF_ParameterOnFace2)
    Perform = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtFF_Perform)
    PointOnFace1 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtFF_PointOnFace1)
    PointOnFace2 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtFF_PointOnFace2)
    SquareDistance = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtFF_SquareDistance)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_ExtFF

# Register BRepExtrema_ExtFF in _BRepExtrema:
_BRepExtrema.BRepExtrema_ExtFF_swigregister(BRepExtrema_ExtFF)

class BRepExtrema_ExtPC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None* It calculates all the distances.
        	:param V:
        	:type V: TopoDS_Vertex
        	:param E:
        	:type E: TopoDS_Edge
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_ExtPC_swiginit(self, _BRepExtrema.new_BRepExtrema_ExtPC(*args))
    Initialize = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtPC_Initialize)
    IsDone = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtPC_IsDone)
    IsMin = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtPC_IsMin)
    NbExt = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtPC_NbExt)
    Parameter = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtPC_Parameter)
    Perform = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtPC_Perform)
    Point = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtPC_Point)
    SquareDistance = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtPC_SquareDistance)
    TrimmedSquareDistances = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtPC_TrimmedSquareDistances)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_ExtPC

# Register BRepExtrema_ExtPC in _BRepExtrema:
_BRepExtrema.BRepExtrema_ExtPC_swigregister(BRepExtrema_ExtPC)

class BRepExtrema_ExtPF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None* It calculates all the distances.
        	:param TheVertex:
        	:type TheVertex: TopoDS_Vertex
        	:param TheFace:
        	:type TheFace: TopoDS_Face
        	:param TheFlag: default value is Extrema_ExtFlag_MINMAX
        	:type TheFlag: Extrema_ExtFlag
        	:param TheAlgo: default value is Extrema_ExtAlgo_Grad
        	:type TheAlgo: Extrema_ExtAlgo
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_ExtPF_swiginit(self, _BRepExtrema.new_BRepExtrema_ExtPF(*args))
    Initialize = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtPF_Initialize)
    IsDone = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtPF_IsDone)
    NbExt = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtPF_NbExt)
    Parameter = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtPF_Parameter)
    Perform = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtPF_Perform)
    Point = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtPF_Point)
    SetAlgo = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtPF_SetAlgo)
    SetFlag = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtPF_SetFlag)
    SquareDistance = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ExtPF_SquareDistance)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_ExtPF

# Register BRepExtrema_ExtPF in _BRepExtrema:
_BRepExtrema.BRepExtrema_ExtPF_swigregister(BRepExtrema_ExtPF)

class BRepExtrema_Poly(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Distance = _swig_new_static_method(_BRepExtrema.BRepExtrema_Poly_Distance)

    __repr__ = _dumps_object


    def __init__(self):
        _BRepExtrema.BRepExtrema_Poly_swiginit(self, _BRepExtrema.new_BRepExtrema_Poly())
    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_Poly

# Register BRepExtrema_Poly in _BRepExtrema:
_BRepExtrema.BRepExtrema_Poly_swigregister(BRepExtrema_Poly)
BRepExtrema_Poly_Distance = _BRepExtrema.BRepExtrema_Poly_Distance

class BRepExtrema_ShapeProximity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates empty proximity tool.
        	:param theTolerance: default value is 0.0
        	:type theTolerance: float
        	:rtype: None* Creates proximity tool for the given two shapes.
        	:param theShape1:
        	:type theShape1: TopoDS_Shape
        	:param theShape2:
        	:type theShape2: TopoDS_Shape
        	:param theTolerance: default value is 0.0
        	:type theTolerance: float
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_ShapeProximity_swiginit(self, _BRepExtrema.new_BRepExtrema_ShapeProximity(*args))
    ElementSet1 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeProximity_ElementSet1)
    ElementSet2 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeProximity_ElementSet2)
    GetSubShape1 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeProximity_GetSubShape1)
    GetSubShape2 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeProximity_GetSubShape2)
    IsDone = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeProximity_IsDone)
    LoadShape1 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeProximity_LoadShape1)
    LoadShape2 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeProximity_LoadShape2)
    OverlapSubShapes1 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeProximity_OverlapSubShapes1)
    OverlapSubShapes2 = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeProximity_OverlapSubShapes2)
    Perform = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeProximity_Perform)
    SetTolerance = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeProximity_SetTolerance)
    Tolerance = _swig_new_instance_method(_BRepExtrema.BRepExtrema_ShapeProximity_Tolerance)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_ShapeProximity

# Register BRepExtrema_ShapeProximity in _BRepExtrema:
_BRepExtrema.BRepExtrema_ShapeProximity_swigregister(BRepExtrema_ShapeProximity)

class BRepExtrema_SolutionElem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Empty constructor
        	:rtype: None* This constructor is used when the solution of a distance is a Vertex. The different initialized fields are: @param theDist the distance @param thePoint the solution point @param theSolType the type of solution @param theVertex and the Vertex
        	:param theDist:
        	:type theDist: float
        	:param thePoint:
        	:type thePoint: gp_Pnt
        	:param theSolType:
        	:type theSolType: BRepExtrema_SupportType
        	:param theVertex:
        	:type theVertex: TopoDS_Vertex
        	:rtype: None* This constructor is used when the solution of distance is on an Edge. The different initialized fields are: @param theDist the distance @param thePoint the solution point @param theSolType the type of solution @param theEdge the Edge @param theParam the parameter to locate the solution
        	:param theDist:
        	:type theDist: float
        	:param thePoint:
        	:type thePoint: gp_Pnt
        	:param theSolType:
        	:type theSolType: BRepExtrema_SupportType
        	:param theEdge:
        	:type theEdge: TopoDS_Edge
        	:param theParam:
        	:type theParam: float
        	:rtype: None* This constructor is used when the solution of distance is in a Face. The different initialized fields are: @param theDist the distance @param thePoint the solution point @param theSolType the type of solution @param theFace the Face @param theU U parameter to locate the solution @param theV V parameter to locate the solution
        	:param theDist:
        	:type theDist: float
        	:param thePoint:
        	:type thePoint: gp_Pnt
        	:param theSolType:
        	:type theSolType: BRepExtrema_SupportType
        	:param theFace:
        	:type theFace: TopoDS_Face
        	:param theU:
        	:type theU: float
        	:param theV:
        	:type theV: float
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_SolutionElem_swiginit(self, _BRepExtrema.new_BRepExtrema_SolutionElem(*args))
    Dist = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SolutionElem_Dist)
    Edge = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SolutionElem_Edge)
    EdgeParameter = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SolutionElem_EdgeParameter)
    Face = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SolutionElem_Face)
    FaceParameter = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SolutionElem_FaceParameter)
    Point = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SolutionElem_Point)
    SupportKind = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SolutionElem_SupportKind)
    Vertex = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SolutionElem_Vertex)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_SolutionElem

# Register BRepExtrema_SolutionElem in _BRepExtrema:
_BRepExtrema.BRepExtrema_SolutionElem_swigregister(BRepExtrema_SolutionElem)

class BRepExtrema_TriangleSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates empty triangle set.
        	:rtype: None* Creates triangle set from the given face.
        	:param theFaces:
        	:type theFaces: BRepExtrema_ShapeList
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_TriangleSet_swiginit(self, _BRepExtrema.new_BRepExtrema_TriangleSet(*args))
    Box = _swig_new_instance_method(_BRepExtrema.BRepExtrema_TriangleSet_Box)
    Center = _swig_new_instance_method(_BRepExtrema.BRepExtrema_TriangleSet_Center)
    Clear = _swig_new_instance_method(_BRepExtrema.BRepExtrema_TriangleSet_Clear)
    GetFaceID = _swig_new_instance_method(_BRepExtrema.BRepExtrema_TriangleSet_GetFaceID)
    GetVertices = _swig_new_instance_method(_BRepExtrema.BRepExtrema_TriangleSet_GetVertices)
    Init = _swig_new_instance_method(_BRepExtrema.BRepExtrema_TriangleSet_Init)
    Size = _swig_new_instance_method(_BRepExtrema.BRepExtrema_TriangleSet_Size)
    Swap = _swig_new_instance_method(_BRepExtrema.BRepExtrema_TriangleSet_Swap)


    @staticmethod
    def DownCast(t):
      return Handle_BRepExtrema_TriangleSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_TriangleSet

# Register BRepExtrema_TriangleSet in _BRepExtrema:
_BRepExtrema.BRepExtrema_TriangleSet_swigregister(BRepExtrema_TriangleSet)

class BRepExtrema_SelfIntersection(BRepExtrema_ElementFilter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates unitialized self-intersection tool.
        	:param theTolerance: default value is 0.0
        	:type theTolerance: float
        	:rtype: None* Creates self-intersection tool for the given shape.
        	:param theShape:
        	:type theShape: TopoDS_Shape
        	:param theTolerance: default value is 0.0
        	:type theTolerance: float
        	:rtype: None
        """
        _BRepExtrema.BRepExtrema_SelfIntersection_swiginit(self, _BRepExtrema.new_BRepExtrema_SelfIntersection(*args))
    ElementSet = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SelfIntersection_ElementSet)
    GetSubShape = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SelfIntersection_GetSubShape)
    IsDone = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SelfIntersection_IsDone)
    LoadShape = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SelfIntersection_LoadShape)
    OverlapElements = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SelfIntersection_OverlapElements)
    Perform = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SelfIntersection_Perform)
    SetTolerance = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SelfIntersection_SetTolerance)
    Tolerance = _swig_new_instance_method(_BRepExtrema.BRepExtrema_SelfIntersection_Tolerance)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepExtrema.delete_BRepExtrema_SelfIntersection

# Register BRepExtrema_SelfIntersection in _BRepExtrema:
_BRepExtrema.BRepExtrema_SelfIntersection_swigregister(BRepExtrema_SelfIntersection)



