# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GeomToStep module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_geomtostep.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _GeomToStep
else:
    import _GeomToStep

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _GeomToStep.SWIG_PyInstanceMethod_New
_swig_new_static_method = _GeomToStep.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomToStep.delete_SwigPyIterator
    value = _swig_new_instance_method(_GeomToStep.SwigPyIterator_value)
    incr = _swig_new_instance_method(_GeomToStep.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_GeomToStep.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_GeomToStep.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_GeomToStep.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_GeomToStep.SwigPyIterator_copy)
    next = _swig_new_instance_method(_GeomToStep.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_GeomToStep.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_GeomToStep.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_GeomToStep.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_GeomToStep.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_GeomToStep.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_GeomToStep.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_GeomToStep.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_GeomToStep.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_GeomToStep.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _GeomToStep:
_GeomToStep.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Geom2d
import OCC.Core.StepGeom
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.OSD
import OCC.Core.StepRepr
import OCC.Core.StepBasic
class GeomToStep_Root(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IsDone = _swig_new_instance_method(_GeomToStep.GeomToStep_Root_IsDone)

    __repr__ = _dumps_object


    def __init__(self):
        _GeomToStep.GeomToStep_Root_swiginit(self, _GeomToStep.new_GeomToStep_Root())
    __swig_destroy__ = _GeomToStep.delete_GeomToStep_Root

# Register GeomToStep_Root in _GeomToStep:
_GeomToStep.GeomToStep_Root_swigregister(GeomToStep_Root)

class GeomToStep_MakeAxis1Placement(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param A:
        	:type A: gp_Ax1
        	:rtype: None:param A:
        	:type A: gp_Ax2d
        	:rtype: None:param A:
        	:type A: Geom_Axis1Placement
        	:rtype: None:param A:
        	:type A: Geom2d_AxisPlacement
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeAxis1Placement_swiginit(self, _GeomToStep.new_GeomToStep_MakeAxis1Placement(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeAxis1Placement_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeAxis1Placement

# Register GeomToStep_MakeAxis1Placement in _GeomToStep:
_GeomToStep.GeomToStep_MakeAxis1Placement_swigregister(GeomToStep_MakeAxis1Placement)

class GeomToStep_MakeAxis2Placement2d(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param A:
        	:type A: gp_Ax2
        	:rtype: None:param A:
        	:type A: gp_Ax22d
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeAxis2Placement2d_swiginit(self, _GeomToStep.new_GeomToStep_MakeAxis2Placement2d(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeAxis2Placement2d_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeAxis2Placement2d

# Register GeomToStep_MakeAxis2Placement2d in _GeomToStep:
_GeomToStep.GeomToStep_MakeAxis2Placement2d_swigregister(GeomToStep_MakeAxis2Placement2d)

class GeomToStep_MakeAxis2Placement3d(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :rtype: None:param A:
        	:type A: gp_Ax2
        	:rtype: None:param A:
        	:type A: gp_Ax3
        	:rtype: None:param T:
        	:type T: gp_Trsf
        	:rtype: None:param A:
        	:type A: Geom_Axis2Placement
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeAxis2Placement3d_swiginit(self, _GeomToStep.new_GeomToStep_MakeAxis2Placement3d(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeAxis2Placement3d_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeAxis2Placement3d

# Register GeomToStep_MakeAxis2Placement3d in _GeomToStep:
_GeomToStep.GeomToStep_MakeAxis2Placement3d_swigregister(GeomToStep_MakeAxis2Placement3d)

class GeomToStep_MakeBSplineCurveWithKnots(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param Bsplin:
        	:type Bsplin: Geom_BSplineCurve
        	:rtype: None:param Bsplin:
        	:type Bsplin: Geom2d_BSplineCurve
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeBSplineCurveWithKnots_swiginit(self, _GeomToStep.new_GeomToStep_MakeBSplineCurveWithKnots(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeBSplineCurveWithKnots_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBSplineCurveWithKnots

# Register GeomToStep_MakeBSplineCurveWithKnots in _GeomToStep:
_GeomToStep.GeomToStep_MakeBSplineCurveWithKnots_swigregister(GeomToStep_MakeBSplineCurveWithKnots)

class GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param Bsplin:
        	:type Bsplin: Geom_BSplineCurve
        	:rtype: None:param Bsplin:
        	:type Bsplin: Geom2d_BSplineCurve
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_swiginit(self, _GeomToStep.new_GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve

# Register GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve in _GeomToStep:
_GeomToStep.GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_swigregister(GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve)

class GeomToStep_MakeBSplineSurfaceWithKnots(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param Bsplin:
        	:type Bsplin: Geom_BSplineSurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnots_swiginit(self, _GeomToStep.new_GeomToStep_MakeBSplineSurfaceWithKnots(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnots_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBSplineSurfaceWithKnots

# Register GeomToStep_MakeBSplineSurfaceWithKnots in _GeomToStep:
_GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnots_swigregister(GeomToStep_MakeBSplineSurfaceWithKnots)

class GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param Bsplin:
        	:type Bsplin: Geom_BSplineSurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface

# Register GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface in _GeomToStep:
_GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister(GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface)

class GeomToStep_MakeBoundedCurve(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param C:
        	:type C: Geom_BoundedCurve
        	:rtype: None:param C:
        	:type C: Geom2d_BoundedCurve
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeBoundedCurve_swiginit(self, _GeomToStep.new_GeomToStep_MakeBoundedCurve(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeBoundedCurve_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBoundedCurve

# Register GeomToStep_MakeBoundedCurve in _GeomToStep:
_GeomToStep.GeomToStep_MakeBoundedCurve_swigregister(GeomToStep_MakeBoundedCurve)

class GeomToStep_MakeBoundedSurface(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param C:
        	:type C: Geom_BoundedSurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeBoundedSurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeBoundedSurface(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeBoundedSurface_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBoundedSurface

# Register GeomToStep_MakeBoundedSurface in _GeomToStep:
_GeomToStep.GeomToStep_MakeBoundedSurface_swigregister(GeomToStep_MakeBoundedSurface)

class GeomToStep_MakeCartesianPoint(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param P:
        	:type P: gp_Pnt
        	:rtype: None:param P:
        	:type P: gp_Pnt2d
        	:rtype: None:param P:
        	:type P: Geom_CartesianPoint
        	:rtype: None:param P:
        	:type P: Geom2d_CartesianPoint
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeCartesianPoint_swiginit(self, _GeomToStep.new_GeomToStep_MakeCartesianPoint(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeCartesianPoint_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeCartesianPoint

# Register GeomToStep_MakeCartesianPoint in _GeomToStep:
_GeomToStep.GeomToStep_MakeCartesianPoint_swigregister(GeomToStep_MakeCartesianPoint)

class GeomToStep_MakeCircle(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param C:
        	:type C: gp_Circ
        	:rtype: None:param C:
        	:type C: Geom_Circle
        	:rtype: None:param C:
        	:type C: Geom2d_Circle
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeCircle_swiginit(self, _GeomToStep.new_GeomToStep_MakeCircle(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeCircle_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeCircle

# Register GeomToStep_MakeCircle in _GeomToStep:
_GeomToStep.GeomToStep_MakeCircle_swigregister(GeomToStep_MakeCircle)

class GeomToStep_MakeConic(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param C:
        	:type C: Geom_Conic
        	:rtype: None:param C:
        	:type C: Geom2d_Conic
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeConic_swiginit(self, _GeomToStep.new_GeomToStep_MakeConic(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeConic_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeConic

# Register GeomToStep_MakeConic in _GeomToStep:
_GeomToStep.GeomToStep_MakeConic_swigregister(GeomToStep_MakeConic)

class GeomToStep_MakeConicalSurface(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param CSurf:
        	:type CSurf: Geom_ConicalSurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeConicalSurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeConicalSurface(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeConicalSurface_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeConicalSurface

# Register GeomToStep_MakeConicalSurface in _GeomToStep:
_GeomToStep.GeomToStep_MakeConicalSurface_swigregister(GeomToStep_MakeConicalSurface)

class GeomToStep_MakeCurve(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param C:
        	:type C: Geom_Curve
        	:rtype: None:param C:
        	:type C: Geom2d_Curve
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeCurve_swiginit(self, _GeomToStep.new_GeomToStep_MakeCurve(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeCurve_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeCurve

# Register GeomToStep_MakeCurve in _GeomToStep:
_GeomToStep.GeomToStep_MakeCurve_swigregister(GeomToStep_MakeCurve)

class GeomToStep_MakeCylindricalSurface(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param CSurf:
        	:type CSurf: Geom_CylindricalSurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeCylindricalSurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeCylindricalSurface(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeCylindricalSurface_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeCylindricalSurface

# Register GeomToStep_MakeCylindricalSurface in _GeomToStep:
_GeomToStep.GeomToStep_MakeCylindricalSurface_swigregister(GeomToStep_MakeCylindricalSurface)

class GeomToStep_MakeDirection(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param D:
        	:type D: gp_Dir
        	:rtype: None:param D:
        	:type D: gp_Dir2d
        	:rtype: None:param D:
        	:type D: Geom_Direction
        	:rtype: None:param D:
        	:type D: Geom2d_Direction
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeDirection_swiginit(self, _GeomToStep.new_GeomToStep_MakeDirection(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeDirection_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeDirection

# Register GeomToStep_MakeDirection in _GeomToStep:
_GeomToStep.GeomToStep_MakeDirection_swigregister(GeomToStep_MakeDirection)

class GeomToStep_MakeElementarySurface(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param S:
        	:type S: Geom_ElementarySurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeElementarySurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeElementarySurface(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeElementarySurface_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeElementarySurface

# Register GeomToStep_MakeElementarySurface in _GeomToStep:
_GeomToStep.GeomToStep_MakeElementarySurface_swigregister(GeomToStep_MakeElementarySurface)

class GeomToStep_MakeEllipse(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param C:
        	:type C: gp_Elips
        	:rtype: None:param C:
        	:type C: Geom_Ellipse
        	:rtype: None:param C:
        	:type C: Geom2d_Ellipse
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeEllipse_swiginit(self, _GeomToStep.new_GeomToStep_MakeEllipse(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeEllipse_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeEllipse

# Register GeomToStep_MakeEllipse in _GeomToStep:
_GeomToStep.GeomToStep_MakeEllipse_swigregister(GeomToStep_MakeEllipse)

class GeomToStep_MakeHyperbola(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param C:
        	:type C: Geom2d_Hyperbola
        	:rtype: None:param C:
        	:type C: Geom_Hyperbola
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeHyperbola_swiginit(self, _GeomToStep.new_GeomToStep_MakeHyperbola(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeHyperbola_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeHyperbola

# Register GeomToStep_MakeHyperbola in _GeomToStep:
_GeomToStep.GeomToStep_MakeHyperbola_swigregister(GeomToStep_MakeHyperbola)

class GeomToStep_MakeLine(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param L:
        	:type L: gp_Lin
        	:rtype: None:param L:
        	:type L: gp_Lin2d
        	:rtype: None:param C:
        	:type C: Geom_Line
        	:rtype: None:param C:
        	:type C: Geom2d_Line
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeLine_swiginit(self, _GeomToStep.new_GeomToStep_MakeLine(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeLine_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeLine

# Register GeomToStep_MakeLine in _GeomToStep:
_GeomToStep.GeomToStep_MakeLine_swigregister(GeomToStep_MakeLine)

class GeomToStep_MakeParabola(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param C:
        	:type C: Geom2d_Parabola
        	:rtype: None:param C:
        	:type C: Geom_Parabola
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeParabola_swiginit(self, _GeomToStep.new_GeomToStep_MakeParabola(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeParabola_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeParabola

# Register GeomToStep_MakeParabola in _GeomToStep:
_GeomToStep.GeomToStep_MakeParabola_swigregister(GeomToStep_MakeParabola)

class GeomToStep_MakePlane(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param P:
        	:type P: gp_Pln
        	:rtype: None:param P:
        	:type P: Geom_Plane
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakePlane_swiginit(self, _GeomToStep.new_GeomToStep_MakePlane(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakePlane_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakePlane

# Register GeomToStep_MakePlane in _GeomToStep:
_GeomToStep.GeomToStep_MakePlane_swigregister(GeomToStep_MakePlane)

class GeomToStep_MakePolyline(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param P:
        	:type P: TColgp_Array1OfPnt
        	:rtype: None:param P:
        	:type P: TColgp_Array1OfPnt2d
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakePolyline_swiginit(self, _GeomToStep.new_GeomToStep_MakePolyline(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakePolyline_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakePolyline

# Register GeomToStep_MakePolyline in _GeomToStep:
_GeomToStep.GeomToStep_MakePolyline_swigregister(GeomToStep_MakePolyline)

class GeomToStep_MakeRectangularTrimmedSurface(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param RTSurf:
        	:type RTSurf: Geom_RectangularTrimmedSurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeRectangularTrimmedSurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeRectangularTrimmedSurface(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeRectangularTrimmedSurface_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeRectangularTrimmedSurface

# Register GeomToStep_MakeRectangularTrimmedSurface in _GeomToStep:
_GeomToStep.GeomToStep_MakeRectangularTrimmedSurface_swigregister(GeomToStep_MakeRectangularTrimmedSurface)

class GeomToStep_MakeSphericalSurface(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param CSurf:
        	:type CSurf: Geom_SphericalSurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeSphericalSurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeSphericalSurface(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeSphericalSurface_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSphericalSurface

# Register GeomToStep_MakeSphericalSurface in _GeomToStep:
_GeomToStep.GeomToStep_MakeSphericalSurface_swigregister(GeomToStep_MakeSphericalSurface)

class GeomToStep_MakeSurface(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param C:
        	:type C: Geom_Surface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeSurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeSurface(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeSurface_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSurface

# Register GeomToStep_MakeSurface in _GeomToStep:
_GeomToStep.GeomToStep_MakeSurface_swigregister(GeomToStep_MakeSurface)

class GeomToStep_MakeSurfaceOfLinearExtrusion(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param CSurf:
        	:type CSurf: Geom_SurfaceOfLinearExtrusion
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeSurfaceOfLinearExtrusion_swiginit(self, _GeomToStep.new_GeomToStep_MakeSurfaceOfLinearExtrusion(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeSurfaceOfLinearExtrusion_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSurfaceOfLinearExtrusion

# Register GeomToStep_MakeSurfaceOfLinearExtrusion in _GeomToStep:
_GeomToStep.GeomToStep_MakeSurfaceOfLinearExtrusion_swigregister(GeomToStep_MakeSurfaceOfLinearExtrusion)

class GeomToStep_MakeSurfaceOfRevolution(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param RevSurf:
        	:type RevSurf: Geom_SurfaceOfRevolution
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeSurfaceOfRevolution_swiginit(self, _GeomToStep.new_GeomToStep_MakeSurfaceOfRevolution(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeSurfaceOfRevolution_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSurfaceOfRevolution

# Register GeomToStep_MakeSurfaceOfRevolution in _GeomToStep:
_GeomToStep.GeomToStep_MakeSurfaceOfRevolution_swigregister(GeomToStep_MakeSurfaceOfRevolution)

class GeomToStep_MakeSweptSurface(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param S:
        	:type S: Geom_SweptSurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeSweptSurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeSweptSurface(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeSweptSurface_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSweptSurface

# Register GeomToStep_MakeSweptSurface in _GeomToStep:
_GeomToStep.GeomToStep_MakeSweptSurface_swigregister(GeomToStep_MakeSweptSurface)

class GeomToStep_MakeToroidalSurface(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param TorSurf:
        	:type TorSurf: Geom_ToroidalSurface
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeToroidalSurface_swiginit(self, _GeomToStep.new_GeomToStep_MakeToroidalSurface(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeToroidalSurface_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeToroidalSurface

# Register GeomToStep_MakeToroidalSurface in _GeomToStep:
_GeomToStep.GeomToStep_MakeToroidalSurface_swigregister(GeomToStep_MakeToroidalSurface)

class GeomToStep_MakeVector(GeomToStep_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param V:
        	:type V: gp_Vec
        	:rtype: None:param V:
        	:type V: gp_Vec2d
        	:rtype: None:param V:
        	:type V: Geom_Vector
        	:rtype: None:param V:
        	:type V: Geom2d_Vector
        	:rtype: None
        """
        _GeomToStep.GeomToStep_MakeVector_swiginit(self, _GeomToStep.new_GeomToStep_MakeVector(*args))
    Value = _swig_new_instance_method(_GeomToStep.GeomToStep_MakeVector_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeVector

# Register GeomToStep_MakeVector in _GeomToStep:
_GeomToStep.GeomToStep_MakeVector_swigregister(GeomToStep_MakeVector)



