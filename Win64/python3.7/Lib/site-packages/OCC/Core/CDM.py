# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
CDM module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_cdm.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CDM
else:
    import _CDM

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _CDM.SWIG_PyInstanceMethod_New
_swig_new_static_method = _CDM.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CDM.delete_SwigPyIterator
    value = _swig_new_instance_method(_CDM.SwigPyIterator_value)
    incr = _swig_new_instance_method(_CDM.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_CDM.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_CDM.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_CDM.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_CDM.SwigPyIterator_copy)
    next = _swig_new_instance_method(_CDM.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_CDM.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_CDM.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_CDM.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_CDM.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_CDM.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_CDM.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_CDM.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_CDM.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_CDM.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CDM:
_CDM.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.Resource
CDM_CCS_OK = _CDM.CDM_CCS_OK
CDM_CCS_NotOpen = _CDM.CDM_CCS_NotOpen
CDM_CCS_UnstoredReferenced = _CDM.CDM_CCS_UnstoredReferenced
CDM_CCS_ModifiedReferenced = _CDM.CDM_CCS_ModifiedReferenced
CDM_CCS_ReferenceRejection = _CDM.CDM_CCS_ReferenceRejection
Handle_CDM_Application_Create = _CDM.Handle_CDM_Application_Create
Handle_CDM_Application_DownCast = _CDM.Handle_CDM_Application_DownCast
Handle_CDM_Application_IsNull = _CDM.Handle_CDM_Application_IsNull
Handle_CDM_Document_Create = _CDM.Handle_CDM_Document_Create
Handle_CDM_Document_DownCast = _CDM.Handle_CDM_Document_DownCast
Handle_CDM_Document_IsNull = _CDM.Handle_CDM_Document_IsNull
Handle_CDM_MetaData_Create = _CDM.Handle_CDM_MetaData_Create
Handle_CDM_MetaData_DownCast = _CDM.Handle_CDM_MetaData_DownCast
Handle_CDM_MetaData_IsNull = _CDM.Handle_CDM_MetaData_IsNull
Handle_CDM_Reference_Create = _CDM.Handle_CDM_Reference_Create
Handle_CDM_Reference_DownCast = _CDM.Handle_CDM_Reference_DownCast
Handle_CDM_Reference_IsNull = _CDM.Handle_CDM_Reference_IsNull
class CDM_ListOfReferences(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_CDM.CDM_ListOfReferences_begin)
    end = _swig_new_instance_method(_CDM.CDM_ListOfReferences_end)
    cbegin = _swig_new_instance_method(_CDM.CDM_ListOfReferences_cbegin)
    cend = _swig_new_instance_method(_CDM.CDM_ListOfReferences_cend)

    def __init__(self, *args):
        _CDM.CDM_ListOfReferences_swiginit(self, _CDM.new_CDM_ListOfReferences(*args))
    Size = _swig_new_instance_method(_CDM.CDM_ListOfReferences_Size)
    Assign = _swig_new_instance_method(_CDM.CDM_ListOfReferences_Assign)
    Set = _swig_new_instance_method(_CDM.CDM_ListOfReferences_Set)
    Clear = _swig_new_instance_method(_CDM.CDM_ListOfReferences_Clear)
    First = _swig_new_instance_method(_CDM.CDM_ListOfReferences_First)
    Last = _swig_new_instance_method(_CDM.CDM_ListOfReferences_Last)
    Append = _swig_new_instance_method(_CDM.CDM_ListOfReferences_Append)
    Prepend = _swig_new_instance_method(_CDM.CDM_ListOfReferences_Prepend)
    RemoveFirst = _swig_new_instance_method(_CDM.CDM_ListOfReferences_RemoveFirst)
    Remove = _swig_new_instance_method(_CDM.CDM_ListOfReferences_Remove)
    InsertBefore = _swig_new_instance_method(_CDM.CDM_ListOfReferences_InsertBefore)
    InsertAfter = _swig_new_instance_method(_CDM.CDM_ListOfReferences_InsertAfter)
    Reverse = _swig_new_instance_method(_CDM.CDM_ListOfReferences_Reverse)
    __swig_destroy__ = _CDM.delete_CDM_ListOfReferences

# Register CDM_ListOfReferences in _CDM:
_CDM.CDM_ListOfReferences_swigregister(CDM_ListOfReferences)

class CDM_ListIteratorOfListOfReferences(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CDM.CDM_ListIteratorOfListOfReferences_swiginit(self, _CDM.new_CDM_ListIteratorOfListOfReferences(*args))
    More = _swig_new_instance_method(_CDM.CDM_ListIteratorOfListOfReferences_More)
    Next = _swig_new_instance_method(_CDM.CDM_ListIteratorOfListOfReferences_Next)
    Value = _swig_new_instance_method(_CDM.CDM_ListIteratorOfListOfReferences_Value)
    ChangeValue = _swig_new_instance_method(_CDM.CDM_ListIteratorOfListOfReferences_ChangeValue)
    __swig_destroy__ = _CDM.delete_CDM_ListIteratorOfListOfReferences

# Register CDM_ListIteratorOfListOfReferences in _CDM:
_CDM.CDM_ListIteratorOfListOfReferences_swigregister(CDM_ListIteratorOfListOfReferences)

class CDM_ListOfDocument(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_CDM.CDM_ListOfDocument_begin)
    end = _swig_new_instance_method(_CDM.CDM_ListOfDocument_end)
    cbegin = _swig_new_instance_method(_CDM.CDM_ListOfDocument_cbegin)
    cend = _swig_new_instance_method(_CDM.CDM_ListOfDocument_cend)

    def __init__(self, *args):
        _CDM.CDM_ListOfDocument_swiginit(self, _CDM.new_CDM_ListOfDocument(*args))
    Size = _swig_new_instance_method(_CDM.CDM_ListOfDocument_Size)
    Assign = _swig_new_instance_method(_CDM.CDM_ListOfDocument_Assign)
    Set = _swig_new_instance_method(_CDM.CDM_ListOfDocument_Set)
    Clear = _swig_new_instance_method(_CDM.CDM_ListOfDocument_Clear)
    First = _swig_new_instance_method(_CDM.CDM_ListOfDocument_First)
    Last = _swig_new_instance_method(_CDM.CDM_ListOfDocument_Last)
    Append = _swig_new_instance_method(_CDM.CDM_ListOfDocument_Append)
    Prepend = _swig_new_instance_method(_CDM.CDM_ListOfDocument_Prepend)
    RemoveFirst = _swig_new_instance_method(_CDM.CDM_ListOfDocument_RemoveFirst)
    Remove = _swig_new_instance_method(_CDM.CDM_ListOfDocument_Remove)
    InsertBefore = _swig_new_instance_method(_CDM.CDM_ListOfDocument_InsertBefore)
    InsertAfter = _swig_new_instance_method(_CDM.CDM_ListOfDocument_InsertAfter)
    Reverse = _swig_new_instance_method(_CDM.CDM_ListOfDocument_Reverse)
    __swig_destroy__ = _CDM.delete_CDM_ListOfDocument

# Register CDM_ListOfDocument in _CDM:
_CDM.CDM_ListOfDocument_swigregister(CDM_ListOfDocument)

class CDM_ListIteratorOfListOfDocument(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CDM.CDM_ListIteratorOfListOfDocument_swiginit(self, _CDM.new_CDM_ListIteratorOfListOfDocument(*args))
    More = _swig_new_instance_method(_CDM.CDM_ListIteratorOfListOfDocument_More)
    Next = _swig_new_instance_method(_CDM.CDM_ListIteratorOfListOfDocument_Next)
    Value = _swig_new_instance_method(_CDM.CDM_ListIteratorOfListOfDocument_Value)
    ChangeValue = _swig_new_instance_method(_CDM.CDM_ListIteratorOfListOfDocument_ChangeValue)
    __swig_destroy__ = _CDM.delete_CDM_ListIteratorOfListOfDocument

# Register CDM_ListIteratorOfListOfDocument in _CDM:
_CDM.CDM_ListIteratorOfListOfDocument_swigregister(CDM_ListIteratorOfListOfDocument)

class CDM_PresentationDirectory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_CDM.CDM_PresentationDirectory_begin)
    end = _swig_new_instance_method(_CDM.CDM_PresentationDirectory_end)
    cbegin = _swig_new_instance_method(_CDM.CDM_PresentationDirectory_cbegin)
    cend = _swig_new_instance_method(_CDM.CDM_PresentationDirectory_cend)

    def __init__(self, *args):
        _CDM.CDM_PresentationDirectory_swiginit(self, _CDM.new_CDM_PresentationDirectory(*args))
    Exchange = _swig_new_instance_method(_CDM.CDM_PresentationDirectory_Exchange)
    Assign = _swig_new_instance_method(_CDM.CDM_PresentationDirectory_Assign)
    Set = _swig_new_instance_method(_CDM.CDM_PresentationDirectory_Set)
    ReSize = _swig_new_instance_method(_CDM.CDM_PresentationDirectory_ReSize)
    Bind = _swig_new_instance_method(_CDM.CDM_PresentationDirectory_Bind)
    Bound = _swig_new_instance_method(_CDM.CDM_PresentationDirectory_Bound)
    IsBound = _swig_new_instance_method(_CDM.CDM_PresentationDirectory_IsBound)
    UnBind = _swig_new_instance_method(_CDM.CDM_PresentationDirectory_UnBind)
    Seek = _swig_new_instance_method(_CDM.CDM_PresentationDirectory_Seek)
    Find = _swig_new_instance_method(_CDM.CDM_PresentationDirectory_Find)
    ChangeSeek = _swig_new_instance_method(_CDM.CDM_PresentationDirectory_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_CDM.CDM_PresentationDirectory_ChangeFind)
    __call__ = _swig_new_instance_method(_CDM.CDM_PresentationDirectory___call__)
    Clear = _swig_new_instance_method(_CDM.CDM_PresentationDirectory_Clear)
    __swig_destroy__ = _CDM.delete_CDM_PresentationDirectory
    Size = _swig_new_instance_method(_CDM.CDM_PresentationDirectory_Size)

# Register CDM_PresentationDirectory in _CDM:
_CDM.CDM_PresentationDirectory_swigregister(CDM_PresentationDirectory)

class CDM_MetaDataLookUpTable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_CDM.CDM_MetaDataLookUpTable_begin)
    end = _swig_new_instance_method(_CDM.CDM_MetaDataLookUpTable_end)
    cbegin = _swig_new_instance_method(_CDM.CDM_MetaDataLookUpTable_cbegin)
    cend = _swig_new_instance_method(_CDM.CDM_MetaDataLookUpTable_cend)

    def __init__(self, *args):
        _CDM.CDM_MetaDataLookUpTable_swiginit(self, _CDM.new_CDM_MetaDataLookUpTable(*args))
    Exchange = _swig_new_instance_method(_CDM.CDM_MetaDataLookUpTable_Exchange)
    Assign = _swig_new_instance_method(_CDM.CDM_MetaDataLookUpTable_Assign)
    Set = _swig_new_instance_method(_CDM.CDM_MetaDataLookUpTable_Set)
    ReSize = _swig_new_instance_method(_CDM.CDM_MetaDataLookUpTable_ReSize)
    Bind = _swig_new_instance_method(_CDM.CDM_MetaDataLookUpTable_Bind)
    Bound = _swig_new_instance_method(_CDM.CDM_MetaDataLookUpTable_Bound)
    IsBound = _swig_new_instance_method(_CDM.CDM_MetaDataLookUpTable_IsBound)
    UnBind = _swig_new_instance_method(_CDM.CDM_MetaDataLookUpTable_UnBind)
    Seek = _swig_new_instance_method(_CDM.CDM_MetaDataLookUpTable_Seek)
    Find = _swig_new_instance_method(_CDM.CDM_MetaDataLookUpTable_Find)
    ChangeSeek = _swig_new_instance_method(_CDM.CDM_MetaDataLookUpTable_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_CDM.CDM_MetaDataLookUpTable_ChangeFind)
    __call__ = _swig_new_instance_method(_CDM.CDM_MetaDataLookUpTable___call__)
    Clear = _swig_new_instance_method(_CDM.CDM_MetaDataLookUpTable_Clear)
    __swig_destroy__ = _CDM.delete_CDM_MetaDataLookUpTable
    Size = _swig_new_instance_method(_CDM.CDM_MetaDataLookUpTable_Size)

# Register CDM_MetaDataLookUpTable in _CDM:
_CDM.CDM_MetaDataLookUpTable_swigregister(CDM_MetaDataLookUpTable)

class CDM_MapOfDocument(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cbegin = _swig_new_instance_method(_CDM.CDM_MapOfDocument_cbegin)
    cend = _swig_new_instance_method(_CDM.CDM_MapOfDocument_cend)

    def __init__(self, *args):
        _CDM.CDM_MapOfDocument_swiginit(self, _CDM.new_CDM_MapOfDocument(*args))
    Exchange = _swig_new_instance_method(_CDM.CDM_MapOfDocument_Exchange)
    Assign = _swig_new_instance_method(_CDM.CDM_MapOfDocument_Assign)
    Set = _swig_new_instance_method(_CDM.CDM_MapOfDocument_Set)
    ReSize = _swig_new_instance_method(_CDM.CDM_MapOfDocument_ReSize)
    Add = _swig_new_instance_method(_CDM.CDM_MapOfDocument_Add)
    Added = _swig_new_instance_method(_CDM.CDM_MapOfDocument_Added)
    Remove = _swig_new_instance_method(_CDM.CDM_MapOfDocument_Remove)
    Clear = _swig_new_instance_method(_CDM.CDM_MapOfDocument_Clear)
    __swig_destroy__ = _CDM.delete_CDM_MapOfDocument
    Size = _swig_new_instance_method(_CDM.CDM_MapOfDocument_Size)
    IsEqual = _swig_new_instance_method(_CDM.CDM_MapOfDocument_IsEqual)
    Contains = _swig_new_instance_method(_CDM.CDM_MapOfDocument_Contains)
    Union = _swig_new_instance_method(_CDM.CDM_MapOfDocument_Union)
    Unite = _swig_new_instance_method(_CDM.CDM_MapOfDocument_Unite)
    HasIntersection = _swig_new_instance_method(_CDM.CDM_MapOfDocument_HasIntersection)
    Intersection = _swig_new_instance_method(_CDM.CDM_MapOfDocument_Intersection)
    Intersect = _swig_new_instance_method(_CDM.CDM_MapOfDocument_Intersect)
    Subtraction = _swig_new_instance_method(_CDM.CDM_MapOfDocument_Subtraction)
    Subtract = _swig_new_instance_method(_CDM.CDM_MapOfDocument_Subtract)
    Difference = _swig_new_instance_method(_CDM.CDM_MapOfDocument_Difference)
    Differ = _swig_new_instance_method(_CDM.CDM_MapOfDocument_Differ)

# Register CDM_MapOfDocument in _CDM:
_CDM.CDM_MapOfDocument_swigregister(CDM_MapOfDocument)

class CDM_DocumentHasher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HashCode = _swig_new_static_method(_CDM.CDM_DocumentHasher_HashCode)
    IsEqual = _swig_new_static_method(_CDM.CDM_DocumentHasher_IsEqual)

    def __init__(self):
        _CDM.CDM_DocumentHasher_swiginit(self, _CDM.new_CDM_DocumentHasher())
    __swig_destroy__ = _CDM.delete_CDM_DocumentHasher

# Register CDM_DocumentHasher in _CDM:
_CDM.CDM_DocumentHasher_swigregister(CDM_DocumentHasher)
CDM_DocumentHasher_HashCode = _CDM.CDM_DocumentHasher_HashCode
CDM_DocumentHasher_IsEqual = _CDM.CDM_DocumentHasher_IsEqual

class CDM_Application(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    BeginOfUpdate = _swig_new_instance_method(_CDM.CDM_Application_BeginOfUpdate)
    EndOfUpdate = _swig_new_instance_method(_CDM.CDM_Application_EndOfUpdate)
    MessageDriver = _swig_new_instance_method(_CDM.CDM_Application_MessageDriver)
    Name = _swig_new_instance_method(_CDM.CDM_Application_Name)
    Resources = _swig_new_instance_method(_CDM.CDM_Application_Resources)
    Version = _swig_new_instance_method(_CDM.CDM_Application_Version)
    Write = _swig_new_instance_method(_CDM.CDM_Application_Write)


    @staticmethod
    def DownCast(t):
      return Handle_CDM_Application_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _CDM.delete_CDM_Application

# Register CDM_Application in _CDM:
_CDM.CDM_Application_swigregister(CDM_Application)

class CDM_Document(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    AddComment = _swig_new_instance_method(_CDM.CDM_Document_AddComment)
    Application = _swig_new_instance_method(_CDM.CDM_Document_Application)
    CanClose = _swig_new_instance_method(_CDM.CDM_Document_CanClose)
    CanCloseReference = _swig_new_instance_method(_CDM.CDM_Document_CanCloseReference)
    ChangeStorageFormatVersion = _swig_new_instance_method(_CDM.CDM_Document_ChangeStorageFormatVersion)
    Close = _swig_new_instance_method(_CDM.CDM_Document_Close)
    CloseReference = _swig_new_instance_method(_CDM.CDM_Document_CloseReference)
    Comment = _swig_new_instance_method(_CDM.CDM_Document_Comment)
    Comments = _swig_new_instance_method(_CDM.CDM_Document_Comments)
    CopyReference = _swig_new_instance_method(_CDM.CDM_Document_CopyReference)
    CreateReference = _swig_new_instance_method(_CDM.CDM_Document_CreateReference)
    DeepReferences = _swig_new_instance_method(_CDM.CDM_Document_DeepReferences)
    Description = _swig_new_instance_method(_CDM.CDM_Document_Description)
    Document = _swig_new_instance_method(_CDM.CDM_Document_Document)
    Extensions = _swig_new_instance_method(_CDM.CDM_Document_Extensions)
    FileExtension = _swig_new_instance_method(_CDM.CDM_Document_FileExtension)
    FindDescription = _swig_new_instance_method(_CDM.CDM_Document_FindDescription)
    FindFileExtension = _swig_new_instance_method(_CDM.CDM_Document_FindFileExtension)
    FindFromPresentation = _swig_new_static_method(_CDM.CDM_Document_FindFromPresentation)
    FindPresentation = _swig_new_static_method(_CDM.CDM_Document_FindPresentation)
    Folder = _swig_new_instance_method(_CDM.CDM_Document_Folder)
    FromReferencesNumber = _swig_new_instance_method(_CDM.CDM_Document_FromReferencesNumber)
    GetAlternativeDocument = _swig_new_instance_method(_CDM.CDM_Document_GetAlternativeDocument)
    HasRequestedFolder = _swig_new_instance_method(_CDM.CDM_Document_HasRequestedFolder)
    HasRequestedPreviousVersion = _swig_new_instance_method(_CDM.CDM_Document_HasRequestedPreviousVersion)
    IsInSession = _swig_new_instance_method(_CDM.CDM_Document_IsInSession)
    IsModified = _swig_new_instance_method(_CDM.CDM_Document_IsModified)
    IsOpened = _swig_new_instance_method(_CDM.CDM_Document_IsOpened)
    IsReadOnly = _swig_new_instance_method(_CDM.CDM_Document_IsReadOnly)
    IsStored = _swig_new_instance_method(_CDM.CDM_Document_IsStored)
    IsUpToDate = _swig_new_instance_method(_CDM.CDM_Document_IsUpToDate)
    LoadResources = _swig_new_instance_method(_CDM.CDM_Document_LoadResources)
    MetaData = _swig_new_instance_method(_CDM.CDM_Document_MetaData)
    Modifications = _swig_new_instance_method(_CDM.CDM_Document_Modifications)
    Modify = _swig_new_instance_method(_CDM.CDM_Document_Modify)
    Name = _swig_new_instance_method(_CDM.CDM_Document_Name)
    Open = _swig_new_instance_method(_CDM.CDM_Document_Open)
    Presentation = _swig_new_instance_method(_CDM.CDM_Document_Presentation)
    PrintToString = _swig_new_instance_method(_CDM.CDM_Document_PrintToString)
    Reference = _swig_new_instance_method(_CDM.CDM_Document_Reference)
    ReferenceCounter = _swig_new_instance_method(_CDM.CDM_Document_ReferenceCounter)
    RemoveAllReferences = _swig_new_instance_method(_CDM.CDM_Document_RemoveAllReferences)
    RemoveReference = _swig_new_instance_method(_CDM.CDM_Document_RemoveReference)
    RequestedComment = _swig_new_instance_method(_CDM.CDM_Document_RequestedComment)
    RequestedFolder = _swig_new_instance_method(_CDM.CDM_Document_RequestedFolder)
    RequestedName = _swig_new_instance_method(_CDM.CDM_Document_RequestedName)
    RequestedPreviousVersion = _swig_new_instance_method(_CDM.CDM_Document_RequestedPreviousVersion)
    SetComment = _swig_new_instance_method(_CDM.CDM_Document_SetComment)
    SetComments = _swig_new_instance_method(_CDM.CDM_Document_SetComments)
    SetIsReadOnly = _swig_new_instance_method(_CDM.CDM_Document_SetIsReadOnly)
    SetIsUpToDate = _swig_new_instance_method(_CDM.CDM_Document_SetIsUpToDate)
    SetMetaData = _swig_new_instance_method(_CDM.CDM_Document_SetMetaData)
    SetModifications = _swig_new_instance_method(_CDM.CDM_Document_SetModifications)
    SetReferenceCounter = _swig_new_instance_method(_CDM.CDM_Document_SetReferenceCounter)
    SetRequestedComment = _swig_new_instance_method(_CDM.CDM_Document_SetRequestedComment)
    SetRequestedFolder = _swig_new_instance_method(_CDM.CDM_Document_SetRequestedFolder)
    SetRequestedName = _swig_new_instance_method(_CDM.CDM_Document_SetRequestedName)
    SetRequestedPreviousVersion = _swig_new_instance_method(_CDM.CDM_Document_SetRequestedPreviousVersion)
    ShallowReferences = _swig_new_instance_method(_CDM.CDM_Document_ShallowReferences)
    StorageFormat = _swig_new_instance_method(_CDM.CDM_Document_StorageFormat)
    StorageFormatVersion = _swig_new_instance_method(_CDM.CDM_Document_StorageFormatVersion)
    StorageVersion = _swig_new_instance_method(_CDM.CDM_Document_StorageVersion)
    ToReferencesNumber = _swig_new_instance_method(_CDM.CDM_Document_ToReferencesNumber)
    UnModify = _swig_new_instance_method(_CDM.CDM_Document_UnModify)
    UnsetIsReadOnly = _swig_new_instance_method(_CDM.CDM_Document_UnsetIsReadOnly)
    UnsetIsStored = _swig_new_instance_method(_CDM.CDM_Document_UnsetIsStored)
    UnsetRequestedPreviousVersion = _swig_new_instance_method(_CDM.CDM_Document_UnsetRequestedPreviousVersion)
    Update = _swig_new_instance_method(_CDM.CDM_Document_Update)
    UpdateFromDocuments = _swig_new_instance_method(_CDM.CDM_Document_UpdateFromDocuments)


    @staticmethod
    def DownCast(t):
      return Handle_CDM_Document_DownCast(t)


    __repr__ = _dumps_object


# Register CDM_Document in _CDM:
_CDM.CDM_Document_swigregister(CDM_Document)
CDM_Document_FindFromPresentation = _CDM.CDM_Document_FindFromPresentation
CDM_Document_FindPresentation = _CDM.CDM_Document_FindPresentation

class CDM_MetaData(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Document = _swig_new_instance_method(_CDM.CDM_MetaData_Document)
    FileName = _swig_new_instance_method(_CDM.CDM_MetaData_FileName)
    Folder = _swig_new_instance_method(_CDM.CDM_MetaData_Folder)
    HasVersion = _swig_new_instance_method(_CDM.CDM_MetaData_HasVersion)
    IsReadOnly = _swig_new_instance_method(_CDM.CDM_MetaData_IsReadOnly)
    IsRetrieved = _swig_new_instance_method(_CDM.CDM_MetaData_IsRetrieved)
    LookUp = _swig_new_static_method(_CDM.CDM_MetaData_LookUp)
    Name = _swig_new_instance_method(_CDM.CDM_MetaData_Name)
    Path = _swig_new_instance_method(_CDM.CDM_MetaData_Path)
    PrintToString = _swig_new_instance_method(_CDM.CDM_MetaData_PrintToString)
    SetIsReadOnly = _swig_new_instance_method(_CDM.CDM_MetaData_SetIsReadOnly)
    UnsetDocument = _swig_new_instance_method(_CDM.CDM_MetaData_UnsetDocument)
    UnsetIsReadOnly = _swig_new_instance_method(_CDM.CDM_MetaData_UnsetIsReadOnly)
    Version = _swig_new_instance_method(_CDM.CDM_MetaData_Version)


    @staticmethod
    def DownCast(t):
      return Handle_CDM_MetaData_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _CDM.delete_CDM_MetaData

# Register CDM_MetaData in _CDM:
_CDM.CDM_MetaData_swigregister(CDM_MetaData)
CDM_MetaData_LookUp = _CDM.CDM_MetaData_LookUp

class CDM_Reference(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    DocumentVersion = _swig_new_instance_method(_CDM.CDM_Reference_DocumentVersion)
    FromDocument = _swig_new_instance_method(_CDM.CDM_Reference_FromDocument)
    IsReadOnly = _swig_new_instance_method(_CDM.CDM_Reference_IsReadOnly)
    ReferenceIdentifier = _swig_new_instance_method(_CDM.CDM_Reference_ReferenceIdentifier)
    ToDocument = _swig_new_instance_method(_CDM.CDM_Reference_ToDocument)


    @staticmethod
    def DownCast(t):
      return Handle_CDM_Reference_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _CDM.delete_CDM_Reference

# Register CDM_Reference in _CDM:
_CDM.CDM_Reference_swigregister(CDM_Reference)

class CDM_ReferenceIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param aDocument:
        	:type aDocument: CDM_Document
        	:rtype: None
        """
        _CDM.CDM_ReferenceIterator_swiginit(self, _CDM.new_CDM_ReferenceIterator(*args))
    Document = _swig_new_instance_method(_CDM.CDM_ReferenceIterator_Document)
    DocumentVersion = _swig_new_instance_method(_CDM.CDM_ReferenceIterator_DocumentVersion)
    More = _swig_new_instance_method(_CDM.CDM_ReferenceIterator_More)
    Next = _swig_new_instance_method(_CDM.CDM_ReferenceIterator_Next)
    ReferenceIdentifier = _swig_new_instance_method(_CDM.CDM_ReferenceIterator_ReferenceIdentifier)

    __repr__ = _dumps_object

    __swig_destroy__ = _CDM.delete_CDM_ReferenceIterator

# Register CDM_ReferenceIterator in _CDM:
_CDM.CDM_ReferenceIterator_swigregister(CDM_ReferenceIterator)



