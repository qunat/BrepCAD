# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ShapeConstruct module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_shapeconstruct.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ShapeConstruct
else:
    import _ShapeConstruct

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ShapeConstruct.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ShapeConstruct.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ShapeConstruct.delete_SwigPyIterator
    value = _swig_new_instance_method(_ShapeConstruct.SwigPyIterator_value)
    incr = _swig_new_instance_method(_ShapeConstruct.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_ShapeConstruct.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_ShapeConstruct.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_ShapeConstruct.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_ShapeConstruct.SwigPyIterator_copy)
    next = _swig_new_instance_method(_ShapeConstruct.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_ShapeConstruct.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_ShapeConstruct.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_ShapeConstruct.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_ShapeConstruct.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_ShapeConstruct.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_ShapeConstruct.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_ShapeConstruct.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_ShapeConstruct.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_ShapeConstruct.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ShapeConstruct:
_ShapeConstruct.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Geom2d
import OCC.Core.TopAbs
import OCC.Core.TopTools
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopLoc
import OCC.Core.BRepBuilderAPI
import OCC.Core.BRepTools
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.ShapeAnalysis
import OCC.Core.ShapeExtend
import OCC.Core.TColGeom
import OCC.Core.Adaptor3d
import OCC.Core.Adaptor2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.IntRes2d
Handle_ShapeConstruct_ProjectCurveOnSurface_Create = _ShapeConstruct.Handle_ShapeConstruct_ProjectCurveOnSurface_Create
Handle_ShapeConstruct_ProjectCurveOnSurface_DownCast = _ShapeConstruct.Handle_ShapeConstruct_ProjectCurveOnSurface_DownCast
Handle_ShapeConstruct_ProjectCurveOnSurface_IsNull = _ShapeConstruct.Handle_ShapeConstruct_ProjectCurveOnSurface_IsNull
class shapeconstruct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ConvertCurveToBSpline = _swig_new_static_method(_ShapeConstruct.shapeconstruct_ConvertCurveToBSpline)
    ConvertSurfaceToBSpline = _swig_new_static_method(_ShapeConstruct.shapeconstruct_ConvertSurfaceToBSpline)
    JoinCurves = _swig_new_static_method(_ShapeConstruct.shapeconstruct_JoinCurves)
    JoinPCurves = _swig_new_static_method(_ShapeConstruct.shapeconstruct_JoinPCurves)

    __repr__ = _dumps_object


    def __init__(self):
        _ShapeConstruct.shapeconstruct_swiginit(self, _ShapeConstruct.new_shapeconstruct())
    __swig_destroy__ = _ShapeConstruct.delete_shapeconstruct

# Register shapeconstruct in _ShapeConstruct:
_ShapeConstruct.shapeconstruct_swigregister(shapeconstruct)
shapeconstruct_ConvertCurveToBSpline = _ShapeConstruct.shapeconstruct_ConvertCurveToBSpline
shapeconstruct_ConvertSurfaceToBSpline = _ShapeConstruct.shapeconstruct_ConvertSurfaceToBSpline
shapeconstruct_JoinCurves = _ShapeConstruct.shapeconstruct_JoinCurves
shapeconstruct_JoinPCurves = _ShapeConstruct.shapeconstruct_JoinPCurves

class ShapeConstruct_Curve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AdjustCurve = _swig_new_instance_method(_ShapeConstruct.ShapeConstruct_Curve_AdjustCurve)
    AdjustCurve2d = _swig_new_instance_method(_ShapeConstruct.ShapeConstruct_Curve_AdjustCurve2d)
    AdjustCurveSegment = _swig_new_instance_method(_ShapeConstruct.ShapeConstruct_Curve_AdjustCurveSegment)
    ConvertToBSpline = _swig_new_instance_method(_ShapeConstruct.ShapeConstruct_Curve_ConvertToBSpline)
    FixKnots = _swig_new_static_method(_ShapeConstruct.ShapeConstruct_Curve_FixKnots)

    __repr__ = _dumps_object


    def __init__(self):
        _ShapeConstruct.ShapeConstruct_Curve_swiginit(self, _ShapeConstruct.new_ShapeConstruct_Curve())
    __swig_destroy__ = _ShapeConstruct.delete_ShapeConstruct_Curve

# Register ShapeConstruct_Curve in _ShapeConstruct:
_ShapeConstruct.ShapeConstruct_Curve_swigregister(ShapeConstruct_Curve)
ShapeConstruct_Curve_FixKnots = _ShapeConstruct.ShapeConstruct_Curve_FixKnots

class ShapeConstruct_MakeTriangulation(OCC.Core.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        :param pnts:
        	:type pnts: TColgp_Array1OfPnt
        	:param prec: default value is 0.0
        	:type prec: float
        	:rtype: None:param wire:
        	:type wire: TopoDS_Wire
        	:param prec: default value is 0.0
        	:type prec: float
        	:rtype: None
        """
        _ShapeConstruct.ShapeConstruct_MakeTriangulation_swiginit(self, _ShapeConstruct.new_ShapeConstruct_MakeTriangulation(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeConstruct.delete_ShapeConstruct_MakeTriangulation

# Register ShapeConstruct_MakeTriangulation in _ShapeConstruct:
_ShapeConstruct.ShapeConstruct_MakeTriangulation_swigregister(ShapeConstruct_MakeTriangulation)

class ShapeConstruct_ProjectCurveOnSurface(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GetAdjustOverDegenMode = _swig_new_instance_method(_ShapeConstruct.ShapeConstruct_ProjectCurveOnSurface_GetAdjustOverDegenMode)
    SetAdjustOverDegenMode = _swig_new_instance_method(_ShapeConstruct.ShapeConstruct_ProjectCurveOnSurface_SetAdjustOverDegenMode)
    GetBuildCurveMode = _swig_new_instance_method(_ShapeConstruct.ShapeConstruct_ProjectCurveOnSurface_GetBuildCurveMode)
    SetBuildCurveMode = _swig_new_instance_method(_ShapeConstruct.ShapeConstruct_ProjectCurveOnSurface_SetBuildCurveMode)
    Init = _swig_new_instance_method(_ShapeConstruct.ShapeConstruct_ProjectCurveOnSurface_Init)
    Perform = _swig_new_instance_method(_ShapeConstruct.ShapeConstruct_ProjectCurveOnSurface_Perform)
    PerformByProjLib = _swig_new_instance_method(_ShapeConstruct.ShapeConstruct_ProjectCurveOnSurface_PerformByProjLib)
    SetPrecision = _swig_new_instance_method(_ShapeConstruct.ShapeConstruct_ProjectCurveOnSurface_SetPrecision)
    SetSurface = _swig_new_instance_method(_ShapeConstruct.ShapeConstruct_ProjectCurveOnSurface_SetSurface)

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:rtype: None
        """
        _ShapeConstruct.ShapeConstruct_ProjectCurveOnSurface_swiginit(self, _ShapeConstruct.new_ShapeConstruct_ProjectCurveOnSurface(*args))
    Status = _swig_new_instance_method(_ShapeConstruct.ShapeConstruct_ProjectCurveOnSurface_Status)


    @staticmethod
    def DownCast(t):
      return Handle_ShapeConstruct_ProjectCurveOnSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeConstruct.delete_ShapeConstruct_ProjectCurveOnSurface

# Register ShapeConstruct_ProjectCurveOnSurface in _ShapeConstruct:
_ShapeConstruct.ShapeConstruct_ProjectCurveOnSurface_swigregister(ShapeConstruct_ProjectCurveOnSurface)



