# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
MoniTool module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_monitool.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _MoniTool
else:
    import _MoniTool

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _MoniTool.SWIG_PyInstanceMethod_New
_swig_new_static_method = _MoniTool.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MoniTool.delete_SwigPyIterator
    value = _swig_new_instance_method(_MoniTool.SwigPyIterator_value)
    incr = _swig_new_instance_method(_MoniTool.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_MoniTool.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_MoniTool.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_MoniTool.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_MoniTool.SwigPyIterator_copy)
    next = _swig_new_instance_method(_MoniTool.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_MoniTool.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_MoniTool.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_MoniTool.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_MoniTool.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_MoniTool.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_MoniTool.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_MoniTool.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_MoniTool.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_MoniTool.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _MoniTool:
_MoniTool.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
import OCC.Core.TColStd
MoniTool_ValueMisc = _MoniTool.MoniTool_ValueMisc
MoniTool_ValueInteger = _MoniTool.MoniTool_ValueInteger
MoniTool_ValueReal = _MoniTool.MoniTool_ValueReal
MoniTool_ValueIdent = _MoniTool.MoniTool_ValueIdent
MoniTool_ValueVoid = _MoniTool.MoniTool_ValueVoid
MoniTool_ValueText = _MoniTool.MoniTool_ValueText
MoniTool_ValueEnum = _MoniTool.MoniTool_ValueEnum
MoniTool_ValueLogical = _MoniTool.MoniTool_ValueLogical
MoniTool_ValueSub = _MoniTool.MoniTool_ValueSub
MoniTool_ValueHexa = _MoniTool.MoniTool_ValueHexa
MoniTool_ValueBinary = _MoniTool.MoniTool_ValueBinary
Handle_MoniTool_CaseData_Create = _MoniTool.Handle_MoniTool_CaseData_Create
Handle_MoniTool_CaseData_DownCast = _MoniTool.Handle_MoniTool_CaseData_DownCast
Handle_MoniTool_CaseData_IsNull = _MoniTool.Handle_MoniTool_CaseData_IsNull
Handle_MoniTool_Element_Create = _MoniTool.Handle_MoniTool_Element_Create
Handle_MoniTool_Element_DownCast = _MoniTool.Handle_MoniTool_Element_DownCast
Handle_MoniTool_Element_IsNull = _MoniTool.Handle_MoniTool_Element_IsNull
Handle_MoniTool_IntVal_Create = _MoniTool.Handle_MoniTool_IntVal_Create
Handle_MoniTool_IntVal_DownCast = _MoniTool.Handle_MoniTool_IntVal_DownCast
Handle_MoniTool_IntVal_IsNull = _MoniTool.Handle_MoniTool_IntVal_IsNull
Handle_MoniTool_RealVal_Create = _MoniTool.Handle_MoniTool_RealVal_Create
Handle_MoniTool_RealVal_DownCast = _MoniTool.Handle_MoniTool_RealVal_DownCast
Handle_MoniTool_RealVal_IsNull = _MoniTool.Handle_MoniTool_RealVal_IsNull
Handle_MoniTool_SignText_Create = _MoniTool.Handle_MoniTool_SignText_Create
Handle_MoniTool_SignText_DownCast = _MoniTool.Handle_MoniTool_SignText_DownCast
Handle_MoniTool_SignText_IsNull = _MoniTool.Handle_MoniTool_SignText_IsNull
Handle_MoniTool_Timer_Create = _MoniTool.Handle_MoniTool_Timer_Create
Handle_MoniTool_Timer_DownCast = _MoniTool.Handle_MoniTool_Timer_DownCast
Handle_MoniTool_Timer_IsNull = _MoniTool.Handle_MoniTool_Timer_IsNull
Handle_MoniTool_TypedValue_Create = _MoniTool.Handle_MoniTool_TypedValue_Create
Handle_MoniTool_TypedValue_DownCast = _MoniTool.Handle_MoniTool_TypedValue_DownCast
Handle_MoniTool_TypedValue_IsNull = _MoniTool.Handle_MoniTool_TypedValue_IsNull
Handle_MoniTool_SignShape_Create = _MoniTool.Handle_MoniTool_SignShape_Create
Handle_MoniTool_SignShape_DownCast = _MoniTool.Handle_MoniTool_SignShape_DownCast
Handle_MoniTool_SignShape_IsNull = _MoniTool.Handle_MoniTool_SignShape_IsNull
Handle_MoniTool_TransientElem_Create = _MoniTool.Handle_MoniTool_TransientElem_Create
Handle_MoniTool_TransientElem_DownCast = _MoniTool.Handle_MoniTool_TransientElem_DownCast
Handle_MoniTool_TransientElem_IsNull = _MoniTool.Handle_MoniTool_TransientElem_IsNull
Handle_MoniTool_HSequenceOfElement_Create = _MoniTool.Handle_MoniTool_HSequenceOfElement_Create
Handle_MoniTool_HSequenceOfElement_DownCast = _MoniTool.Handle_MoniTool_HSequenceOfElement_DownCast
Handle_MoniTool_HSequenceOfElement_IsNull = _MoniTool.Handle_MoniTool_HSequenceOfElement_IsNull
class MoniTool_DataMapOfShapeTransient(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfShapeTransient_begin)
    end = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfShapeTransient_end)
    cbegin = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfShapeTransient_cbegin)
    cend = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfShapeTransient_cend)

    def __init__(self, *args):
        _MoniTool.MoniTool_DataMapOfShapeTransient_swiginit(self, _MoniTool.new_MoniTool_DataMapOfShapeTransient(*args))
    Exchange = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfShapeTransient_Exchange)
    Assign = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfShapeTransient_Assign)
    Set = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfShapeTransient_Set)
    ReSize = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfShapeTransient_ReSize)
    Bind = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfShapeTransient_Bind)
    Bound = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfShapeTransient_Bound)
    IsBound = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfShapeTransient_IsBound)
    UnBind = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfShapeTransient_UnBind)
    Seek = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfShapeTransient_Seek)
    Find = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfShapeTransient_Find)
    ChangeSeek = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfShapeTransient_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfShapeTransient_ChangeFind)
    __call__ = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfShapeTransient___call__)
    Clear = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfShapeTransient_Clear)
    __swig_destroy__ = _MoniTool.delete_MoniTool_DataMapOfShapeTransient
    Size = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfShapeTransient_Size)

# Register MoniTool_DataMapOfShapeTransient in _MoniTool:
_MoniTool.MoniTool_DataMapOfShapeTransient_swigregister(MoniTool_DataMapOfShapeTransient)

class MoniTool_SequenceOfElement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_begin)
    end = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_end)
    cbegin = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_cbegin)
    cend = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_cend)

    def __init__(self, *args):
        _MoniTool.MoniTool_SequenceOfElement_swiginit(self, _MoniTool.new_MoniTool_SequenceOfElement(*args))
    Size = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_Size)
    Length = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_Length)
    Lower = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_Lower)
    Upper = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_Upper)
    IsEmpty = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_IsEmpty)
    Reverse = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_Reverse)
    Exchange = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_Exchange)
    delNode = _swig_new_static_method(_MoniTool.MoniTool_SequenceOfElement_delNode)
    Clear = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_Clear)
    Assign = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_Assign)
    Set = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_Set)
    Remove = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_Remove)
    Append = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_Append)
    Prepend = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_Prepend)
    InsertBefore = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_InsertBefore)
    InsertAfter = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_InsertAfter)
    Split = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_Split)
    First = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_First)
    ChangeFirst = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_ChangeFirst)
    Last = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_Last)
    ChangeLast = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_ChangeLast)
    Value = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_Value)
    ChangeValue = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_ChangeValue)
    __call__ = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement___call__)
    SetValue = _swig_new_instance_method(_MoniTool.MoniTool_SequenceOfElement_SetValue)
    __swig_destroy__ = _MoniTool.delete_MoniTool_SequenceOfElement

# Register MoniTool_SequenceOfElement in _MoniTool:
_MoniTool.MoniTool_SequenceOfElement_swigregister(MoniTool_SequenceOfElement)
MoniTool_SequenceOfElement_delNode = _MoniTool.MoniTool_SequenceOfElement_delNode

class MoniTool_DataMapOfTimer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfTimer_begin)
    end = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfTimer_end)
    cbegin = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfTimer_cbegin)
    cend = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfTimer_cend)

    def __init__(self, *args):
        _MoniTool.MoniTool_DataMapOfTimer_swiginit(self, _MoniTool.new_MoniTool_DataMapOfTimer(*args))
    Exchange = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfTimer_Exchange)
    Assign = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfTimer_Assign)
    Set = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfTimer_Set)
    ReSize = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfTimer_ReSize)
    Bind = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfTimer_Bind)
    Bound = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfTimer_Bound)
    IsBound = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfTimer_IsBound)
    UnBind = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfTimer_UnBind)
    Seek = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfTimer_Seek)
    Find = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfTimer_Find)
    ChangeSeek = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfTimer_ChangeSeek)
    ChangeFind = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfTimer_ChangeFind)
    __call__ = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfTimer___call__)
    Clear = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfTimer_Clear)
    __swig_destroy__ = _MoniTool.delete_MoniTool_DataMapOfTimer
    Size = _swig_new_instance_method(_MoniTool.MoniTool_DataMapOfTimer_Size)

# Register MoniTool_DataMapOfTimer in _MoniTool:
_MoniTool.MoniTool_DataMapOfTimer_swigregister(MoniTool_DataMapOfTimer)

class MoniTool_IndexedDataMapOfShapeTransient(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    begin = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_begin)
    end = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_end)
    cbegin = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_cbegin)
    cend = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_cend)

    def __init__(self, *args):
        _MoniTool.MoniTool_IndexedDataMapOfShapeTransient_swiginit(self, _MoniTool.new_MoniTool_IndexedDataMapOfShapeTransient(*args))
    Exchange = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_Exchange)
    Assign = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_Assign)
    Set = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_Set)
    ReSize = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_ReSize)
    Add = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_Add)
    Contains = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_Contains)
    Substitute = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_Substitute)
    Swap = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_Swap)
    RemoveLast = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_RemoveLast)
    RemoveFromIndex = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_RemoveFromIndex)
    RemoveKey = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_RemoveKey)
    FindKey = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_FindKey)
    FindFromIndex = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_FindFromIndex)
    ChangeFromIndex = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_ChangeFromIndex)
    __call__ = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient___call__)
    FindIndex = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_FindIndex)
    ChangeFromKey = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_ChangeFromKey)
    Seek = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_Seek)
    ChangeSeek = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_ChangeSeek)
    FindFromKey = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_FindFromKey)
    Clear = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_Clear)
    __swig_destroy__ = _MoniTool.delete_MoniTool_IndexedDataMapOfShapeTransient
    Size = _swig_new_instance_method(_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_Size)

# Register MoniTool_IndexedDataMapOfShapeTransient in _MoniTool:
_MoniTool.MoniTool_IndexedDataMapOfShapeTransient_swigregister(MoniTool_IndexedDataMapOfShapeTransient)

class MoniTool_AttrList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AttrList = _swig_new_instance_method(_MoniTool.MoniTool_AttrList_AttrList)
    Attribute = _swig_new_instance_method(_MoniTool.MoniTool_AttrList_Attribute)
    AttributeType = _swig_new_instance_method(_MoniTool.MoniTool_AttrList_AttributeType)
    GetAttribute = _swig_new_instance_method(_MoniTool.MoniTool_AttrList_GetAttribute)
    GetAttributes = _swig_new_instance_method(_MoniTool.MoniTool_AttrList_GetAttributes)
    GetIntegerAttribute = _swig_new_instance_method(_MoniTool.MoniTool_AttrList_GetIntegerAttribute)
    GetRealAttribute = _swig_new_instance_method(_MoniTool.MoniTool_AttrList_GetRealAttribute)
    GetStringAttribute = _swig_new_instance_method(_MoniTool.MoniTool_AttrList_GetStringAttribute)
    IntegerAttribute = _swig_new_instance_method(_MoniTool.MoniTool_AttrList_IntegerAttribute)

    def __init__(self, *args):
        r"""
        * Creates an AttrList, empty
        	:rtype: None* Creates an AttrList from another one, definitions are shared (calls SameAttributes)
        	:param other:
        	:type other: MoniTool_AttrList
        	:rtype: None
        """
        _MoniTool.MoniTool_AttrList_swiginit(self, _MoniTool.new_MoniTool_AttrList(*args))
    RealAttribute = _swig_new_instance_method(_MoniTool.MoniTool_AttrList_RealAttribute)
    RemoveAttribute = _swig_new_instance_method(_MoniTool.MoniTool_AttrList_RemoveAttribute)
    SameAttributes = _swig_new_instance_method(_MoniTool.MoniTool_AttrList_SameAttributes)
    SetAttribute = _swig_new_instance_method(_MoniTool.MoniTool_AttrList_SetAttribute)
    SetIntegerAttribute = _swig_new_instance_method(_MoniTool.MoniTool_AttrList_SetIntegerAttribute)
    SetRealAttribute = _swig_new_instance_method(_MoniTool.MoniTool_AttrList_SetRealAttribute)
    SetStringAttribute = _swig_new_instance_method(_MoniTool.MoniTool_AttrList_SetStringAttribute)
    StringAttribute = _swig_new_instance_method(_MoniTool.MoniTool_AttrList_StringAttribute)

    __repr__ = _dumps_object

    __swig_destroy__ = _MoniTool.delete_MoniTool_AttrList

# Register MoniTool_AttrList in _MoniTool:
_MoniTool.MoniTool_AttrList_swigregister(MoniTool_AttrList)

class MoniTool_CaseData(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddAny = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_AddAny)
    AddCPU = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_AddCPU)
    AddData = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_AddData)
    AddEntity = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_AddEntity)
    AddGeom = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_AddGeom)
    AddInteger = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_AddInteger)
    AddRaised = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_AddRaised)
    AddReal = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_AddReal)
    AddReals = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_AddReals)
    AddShape = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_AddShape)
    AddText = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_AddText)
    AddXY = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_AddXY)
    AddXYZ = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_AddXYZ)
    CaseId = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_CaseId)
    Data = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_Data)
    DefCheck = _swig_new_static_method(_MoniTool.MoniTool_CaseData_DefCheck)
    DefMsg = _swig_new_static_method(_MoniTool.MoniTool_CaseData_DefMsg)
    GetCPU = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_GetCPU)
    GetData = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_GetData)
    Integer = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_Integer)
    IsCheck = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_IsCheck)
    IsFail = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_IsFail)
    IsWarning = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_IsWarning)
    Kind = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_Kind)
    LargeCPU = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_LargeCPU)

    def __init__(self, *args):
        r"""
        * Creates a CaseData with a CaseId and a Name (by default not defined)
        	:param caseid: default value is 
        	:type caseid: char *
        	:param name: default value is 
        	:type name: char *
        	:rtype: None
        """
        _MoniTool.MoniTool_CaseData_swiginit(self, _MoniTool.new_MoniTool_CaseData(*args))
    Msg = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_Msg)
    Name = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_Name)
    NameNum = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_NameNum)
    NbData = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_NbData)
    Real = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_Real)
    Reals = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_Reals)
    RemoveData = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_RemoveData)
    ResetCheck = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_ResetCheck)
    SetCaseId = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_SetCaseId)
    SetChange = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_SetChange)
    SetDefFail = _swig_new_static_method(_MoniTool.MoniTool_CaseData_SetDefFail)
    SetDefMsg = _swig_new_static_method(_MoniTool.MoniTool_CaseData_SetDefMsg)
    SetDefWarning = _swig_new_static_method(_MoniTool.MoniTool_CaseData_SetDefWarning)
    SetFail = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_SetFail)
    SetName = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_SetName)
    SetReplace = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_SetReplace)
    SetWarning = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_SetWarning)
    Shape = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_Shape)
    Text = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_Text)
    XY = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_XY)
    XYZ = _swig_new_instance_method(_MoniTool.MoniTool_CaseData_XYZ)


    @staticmethod
    def DownCast(t):
      return Handle_MoniTool_CaseData_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _MoniTool.delete_MoniTool_CaseData

# Register MoniTool_CaseData in _MoniTool:
_MoniTool.MoniTool_CaseData_swigregister(MoniTool_CaseData)
MoniTool_CaseData_DefCheck = _MoniTool.MoniTool_CaseData_DefCheck
MoniTool_CaseData_DefMsg = _MoniTool.MoniTool_CaseData_DefMsg
MoniTool_CaseData_SetDefFail = _MoniTool.MoniTool_CaseData_SetDefFail
MoniTool_CaseData_SetDefMsg = _MoniTool.MoniTool_CaseData_SetDefMsg
MoniTool_CaseData_SetDefWarning = _MoniTool.MoniTool_CaseData_SetDefWarning

class MoniTool_DataInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Type = _swig_new_static_method(_MoniTool.MoniTool_DataInfo_Type)
    TypeName = _swig_new_static_method(_MoniTool.MoniTool_DataInfo_TypeName)

    __repr__ = _dumps_object


    def __init__(self):
        _MoniTool.MoniTool_DataInfo_swiginit(self, _MoniTool.new_MoniTool_DataInfo())
    __swig_destroy__ = _MoniTool.delete_MoniTool_DataInfo

# Register MoniTool_DataInfo in _MoniTool:
_MoniTool.MoniTool_DataInfo_swigregister(MoniTool_DataInfo)
MoniTool_DataInfo_Type = _MoniTool.MoniTool_DataInfo_Type
MoniTool_DataInfo_TypeName = _MoniTool.MoniTool_DataInfo_TypeName

class MoniTool_ElemHasher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HashCode = _swig_new_static_method(_MoniTool.MoniTool_ElemHasher_HashCode)
    IsEqual = _swig_new_static_method(_MoniTool.MoniTool_ElemHasher_IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        _MoniTool.MoniTool_ElemHasher_swiginit(self, _MoniTool.new_MoniTool_ElemHasher())
    __swig_destroy__ = _MoniTool.delete_MoniTool_ElemHasher

# Register MoniTool_ElemHasher in _MoniTool:
_MoniTool.MoniTool_ElemHasher_swigregister(MoniTool_ElemHasher)
MoniTool_ElemHasher_HashCode = _MoniTool.MoniTool_ElemHasher_HashCode
MoniTool_ElemHasher_IsEqual = _MoniTool.MoniTool_ElemHasher_IsEqual

class MoniTool_Element(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ChangeAttr = _swig_new_instance_method(_MoniTool.MoniTool_Element_ChangeAttr)
    Equates = _swig_new_instance_method(_MoniTool.MoniTool_Element_Equates)
    GetHashCode = _swig_new_instance_method(_MoniTool.MoniTool_Element_GetHashCode)
    ListAttr = _swig_new_instance_method(_MoniTool.MoniTool_Element_ListAttr)
    ValueType = _swig_new_instance_method(_MoniTool.MoniTool_Element_ValueType)
    ValueTypeName = _swig_new_instance_method(_MoniTool.MoniTool_Element_ValueTypeName)


    @staticmethod
    def DownCast(t):
      return Handle_MoniTool_Element_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _MoniTool.delete_MoniTool_Element

# Register MoniTool_Element in _MoniTool:
_MoniTool.MoniTool_Element_swigregister(MoniTool_Element)

class MoniTool_IntVal(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GetCValue = _swig_new_instance_method(_MoniTool.MoniTool_IntVal_GetCValue)
    SetCValue = _swig_new_instance_method(_MoniTool.MoniTool_IntVal_SetCValue)

    def __init__(self, *args):
        r"""
        :param val: default value is 0
        	:type val: int
        	:rtype: None
        """
        _MoniTool.MoniTool_IntVal_swiginit(self, _MoniTool.new_MoniTool_IntVal(*args))
    Value = _swig_new_instance_method(_MoniTool.MoniTool_IntVal_Value)


    @staticmethod
    def DownCast(t):
      return Handle_MoniTool_IntVal_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _MoniTool.delete_MoniTool_IntVal

# Register MoniTool_IntVal in _MoniTool:
_MoniTool.MoniTool_IntVal_swigregister(MoniTool_IntVal)

class MoniTool_MTHasher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HashCode = _swig_new_static_method(_MoniTool.MoniTool_MTHasher_HashCode)
    IsEqual = _swig_new_static_method(_MoniTool.MoniTool_MTHasher_IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        _MoniTool.MoniTool_MTHasher_swiginit(self, _MoniTool.new_MoniTool_MTHasher())
    __swig_destroy__ = _MoniTool.delete_MoniTool_MTHasher

# Register MoniTool_MTHasher in _MoniTool:
_MoniTool.MoniTool_MTHasher_swigregister(MoniTool_MTHasher)
MoniTool_MTHasher_HashCode = _MoniTool.MoniTool_MTHasher_HashCode
MoniTool_MTHasher_IsEqual = _MoniTool.MoniTool_MTHasher_IsEqual

class MoniTool_RealVal(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GetCValue = _swig_new_instance_method(_MoniTool.MoniTool_RealVal_GetCValue)
    SetCValue = _swig_new_instance_method(_MoniTool.MoniTool_RealVal_SetCValue)

    def __init__(self, *args):
        r"""
        :param val: default value is 0.0
        	:type val: float
        	:rtype: None
        """
        _MoniTool.MoniTool_RealVal_swiginit(self, _MoniTool.new_MoniTool_RealVal(*args))
    Value = _swig_new_instance_method(_MoniTool.MoniTool_RealVal_Value)


    @staticmethod
    def DownCast(t):
      return Handle_MoniTool_RealVal_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _MoniTool.delete_MoniTool_RealVal

# Register MoniTool_RealVal in _MoniTool:
_MoniTool.MoniTool_RealVal_swigregister(MoniTool_RealVal)

class MoniTool_SignText(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Name = _swig_new_instance_method(_MoniTool.MoniTool_SignText_Name)
    Text = _swig_new_instance_method(_MoniTool.MoniTool_SignText_Text)
    TextAlone = _swig_new_instance_method(_MoniTool.MoniTool_SignText_TextAlone)


    @staticmethod
    def DownCast(t):
      return Handle_MoniTool_SignText_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _MoniTool.delete_MoniTool_SignText

# Register MoniTool_SignText in _MoniTool:
_MoniTool.MoniTool_SignText_swigregister(MoniTool_SignText)

class MoniTool_Stat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Add = _swig_new_instance_method(_MoniTool.MoniTool_Stat_Add)
    AddEnd = _swig_new_instance_method(_MoniTool.MoniTool_Stat_AddEnd)
    AddSub = _swig_new_instance_method(_MoniTool.MoniTool_Stat_AddSub)
    Close = _swig_new_instance_method(_MoniTool.MoniTool_Stat_Close)
    Current = _swig_new_static_method(_MoniTool.MoniTool_Stat_Current)
    Level = _swig_new_instance_method(_MoniTool.MoniTool_Stat_Level)

    def __init__(self, *args):
        r"""
        * Creates a Stat form. At start, one default phase is defined, with one default step. Then, it suffises to start with a count of items (and cycles if several) then record items, to have a queryable report.
        	:param title: default value is 
        	:type title: char *
        	:rtype: None* used when starting
        	:param other:
        	:type other: MoniTool_Stat
        	:rtype: None
        """
        _MoniTool.MoniTool_Stat_swiginit(self, _MoniTool.new_MoniTool_Stat(*args))
    Open = _swig_new_instance_method(_MoniTool.MoniTool_Stat_Open)
    OpenMore = _swig_new_instance_method(_MoniTool.MoniTool_Stat_OpenMore)
    Percent = _swig_new_instance_method(_MoniTool.MoniTool_Stat_Percent)

    __repr__ = _dumps_object

    __swig_destroy__ = _MoniTool.delete_MoniTool_Stat

# Register MoniTool_Stat in _MoniTool:
_MoniTool.MoniTool_Stat_swigregister(MoniTool_Stat)
MoniTool_Stat_Current = _MoniTool.MoniTool_Stat_Current

class MoniTool_Timer(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Amend = _swig_new_instance_method(_MoniTool.MoniTool_Timer_Amend)
    CPU = _swig_new_instance_method(_MoniTool.MoniTool_Timer_CPU)
    ClearTimers = _swig_new_static_method(_MoniTool.MoniTool_Timer_ClearTimers)
    ComputeAmendments = _swig_new_static_method(_MoniTool.MoniTool_Timer_ComputeAmendments)
    Count = _swig_new_instance_method(_MoniTool.MoniTool_Timer_Count)
    Dictionary = _swig_new_static_method(_MoniTool.MoniTool_Timer_Dictionary)
    DumpToString = _swig_new_instance_method(_MoniTool.MoniTool_Timer_DumpToString)
    DumpTimersToString = _swig_new_instance_method(_MoniTool.MoniTool_Timer_DumpTimersToString)
    GetAmendments = _swig_new_static_method(_MoniTool.MoniTool_Timer_GetAmendments)
    IsRunning = _swig_new_instance_method(_MoniTool.MoniTool_Timer_IsRunning)

    def __init__(self, *args):
        r"""
        * Create timer in empty state
        	:rtype: None
        """
        _MoniTool.MoniTool_Timer_swiginit(self, _MoniTool.new_MoniTool_Timer(*args))
    Reset = _swig_new_instance_method(_MoniTool.MoniTool_Timer_Reset)
    Start = _swig_new_static_method(_MoniTool.MoniTool_Timer_Start)
    Stop = _swig_new_static_method(_MoniTool.MoniTool_Timer_Stop)
    Timer = _swig_new_static_method(_MoniTool.MoniTool_Timer_Timer)


    @staticmethod
    def DownCast(t):
      return Handle_MoniTool_Timer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _MoniTool.delete_MoniTool_Timer

# Register MoniTool_Timer in _MoniTool:
_MoniTool.MoniTool_Timer_swigregister(MoniTool_Timer)
MoniTool_Timer_ClearTimers = _MoniTool.MoniTool_Timer_ClearTimers
MoniTool_Timer_ComputeAmendments = _MoniTool.MoniTool_Timer_ComputeAmendments
MoniTool_Timer_Dictionary = _MoniTool.MoniTool_Timer_Dictionary
MoniTool_Timer_GetAmendments = _MoniTool.MoniTool_Timer_GetAmendments
MoniTool_Timer_Start = _MoniTool.MoniTool_Timer_Start
MoniTool_Timer_Stop = _MoniTool.MoniTool_Timer_Stop
MoniTool_Timer_Timer = _MoniTool.MoniTool_Timer_Timer

class MoniTool_TimerSentry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructor creates an instance and runs the corresponding timer
        	:param cname:
        	:type cname: char *
        	:rtype: None* Constructor creates an instance and runs the corresponding timer
        	:param timer:
        	:type timer: MoniTool_Timer
        	:rtype: None
        """
        _MoniTool.MoniTool_TimerSentry_swiginit(self, _MoniTool.new_MoniTool_TimerSentry(*args))
    Stop = _swig_new_instance_method(_MoniTool.MoniTool_TimerSentry_Stop)
    Timer = _swig_new_instance_method(_MoniTool.MoniTool_TimerSentry_Timer)

    __repr__ = _dumps_object

    __swig_destroy__ = _MoniTool.delete_MoniTool_TimerSentry

# Register MoniTool_TimerSentry in _MoniTool:
_MoniTool.MoniTool_TimerSentry_swigregister(MoniTool_TimerSentry)

class MoniTool_TypedValue(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddDef = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_AddDef)
    AddEnum = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_AddEnum)
    AddEnumValue = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_AddEnumValue)
    AddLib = _swig_new_static_method(_MoniTool.MoniTool_TypedValue_AddLib)
    CStringValue = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_CStringValue)
    ClearValue = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_ClearValue)
    Definition = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_Definition)
    EnumCase = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_EnumCase)
    EnumDef = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_EnumDef)
    EnumVal = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_EnumVal)
    FromLib = _swig_new_static_method(_MoniTool.MoniTool_TypedValue_FromLib)
    GetObjectValue = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_GetObjectValue)
    HStringValue = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_HStringValue)
    HasInterpret = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_HasInterpret)
    IntegerLimit = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_IntegerLimit)
    IntegerValue = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_IntegerValue)
    Internals = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_Internals)
    Interpret = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_Interpret)
    IsSetValue = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_IsSetValue)
    Label = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_Label)
    Lib = _swig_new_static_method(_MoniTool.MoniTool_TypedValue_Lib)
    LibList = _swig_new_static_method(_MoniTool.MoniTool_TypedValue_LibList)
    MaxLength = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_MaxLength)

    def __init__(self, *args):
        r"""
        * Creates a TypedValue, with a name //! type gives the type of the parameter, default is free text Also available : Integer, Real, Enum, Entity (i.e. Object) More precise specifications, titles, can be given to the TypedValue once created //! init gives an initial value. If it is not given, the TypedValue begins as 'not set', its value is empty
        	:param name:
        	:type name: char *
        	:param type: default value is MoniTool_ValueText
        	:type type: MoniTool_ValueType
        	:param init: default value is 
        	:type init: char *
        	:rtype: None* Creates a TypedValue from another one, by duplication
        	:param other:
        	:type other: MoniTool_TypedValue
        	:rtype: None
        """
        _MoniTool.MoniTool_TypedValue_swiginit(self, _MoniTool.new_MoniTool_TypedValue(*args))
    Name = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_Name)
    ObjectType = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_ObjectType)
    ObjectTypeName = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_ObjectTypeName)
    ObjectValue = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_ObjectValue)
    Print = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_Print)
    PrintValue = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_PrintValue)
    RealLimit = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_RealLimit)
    RealValue = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_RealValue)
    Satisfies = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_Satisfies)
    SatisfiesName = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_SatisfiesName)
    SetCStringValue = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_SetCStringValue)
    SetDefinition = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_SetDefinition)
    SetHStringValue = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_SetHStringValue)
    SetIntegerLimit = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_SetIntegerLimit)
    SetIntegerValue = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_SetIntegerValue)
    SetInterpret = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_SetInterpret)
    SetLabel = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_SetLabel)
    SetMaxLength = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_SetMaxLength)
    SetObjectType = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_SetObjectType)
    SetObjectValue = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_SetObjectValue)
    SetRealLimit = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_SetRealLimit)
    SetRealValue = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_SetRealValue)
    SetSatisfies = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_SetSatisfies)
    SetUnitDef = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_SetUnitDef)
    StartEnum = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_StartEnum)
    StaticValue = _swig_new_static_method(_MoniTool.MoniTool_TypedValue_StaticValue)
    UnitDef = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_UnitDef)
    ValueType = _swig_new_instance_method(_MoniTool.MoniTool_TypedValue_ValueType)


    @staticmethod
    def DownCast(t):
      return Handle_MoniTool_TypedValue_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _MoniTool.delete_MoniTool_TypedValue

# Register MoniTool_TypedValue in _MoniTool:
_MoniTool.MoniTool_TypedValue_swigregister(MoniTool_TypedValue)
MoniTool_TypedValue_AddLib = _MoniTool.MoniTool_TypedValue_AddLib
MoniTool_TypedValue_FromLib = _MoniTool.MoniTool_TypedValue_FromLib
MoniTool_TypedValue_Lib = _MoniTool.MoniTool_TypedValue_Lib
MoniTool_TypedValue_LibList = _MoniTool.MoniTool_TypedValue_LibList
MoniTool_TypedValue_StaticValue = _MoniTool.MoniTool_TypedValue_StaticValue

class MoniTool_SignShape(MoniTool_SignText):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""":rtype: None"""
        _MoniTool.MoniTool_SignShape_swiginit(self, _MoniTool.new_MoniTool_SignShape(*args))


    @staticmethod
    def DownCast(t):
      return Handle_MoniTool_SignShape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _MoniTool.delete_MoniTool_SignShape

# Register MoniTool_SignShape in _MoniTool:
_MoniTool.MoniTool_SignShape_swigregister(MoniTool_SignShape)

class MoniTool_TransientElem(MoniTool_Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates a TransientElem with a Value. This Value can then not be changed. It is used by the Hasher to compute the HashCode, which will then be stored for an immediate reading.
        	:param akey:
        	:type akey: Standard_Transient
        	:rtype: None
        """
        _MoniTool.MoniTool_TransientElem_swiginit(self, _MoniTool.new_MoniTool_TransientElem(*args))
    Value = _swig_new_instance_method(_MoniTool.MoniTool_TransientElem_Value)


    @staticmethod
    def DownCast(t):
      return Handle_MoniTool_TransientElem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _MoniTool.delete_MoniTool_TransientElem

# Register MoniTool_TransientElem in _MoniTool:
_MoniTool.MoniTool_TransientElem_swigregister(MoniTool_TransientElem)

class MoniTool_HSequenceOfElement(MoniTool_SequenceOfElement, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MoniTool.MoniTool_HSequenceOfElement_swiginit(self, _MoniTool.new_MoniTool_HSequenceOfElement(*args))
    Sequence = _swig_new_instance_method(_MoniTool.MoniTool_HSequenceOfElement_Sequence)
    Append = _swig_new_instance_method(_MoniTool.MoniTool_HSequenceOfElement_Append)
    ChangeSequence = _swig_new_instance_method(_MoniTool.MoniTool_HSequenceOfElement_ChangeSequence)


    @staticmethod
    def DownCast(t):
      return Handle_MoniTool_HSequenceOfElement_DownCast(t)

    __swig_destroy__ = _MoniTool.delete_MoniTool_HSequenceOfElement

# Register MoniTool_HSequenceOfElement in _MoniTool:
_MoniTool.MoniTool_HSequenceOfElement_swigregister(MoniTool_HSequenceOfElement)



