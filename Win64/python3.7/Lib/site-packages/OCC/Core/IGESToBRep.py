# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IGESToBRep module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_igestobrep.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _IGESToBRep
else:
    import _IGESToBRep

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _IGESToBRep.SWIG_PyInstanceMethod_New
_swig_new_static_method = _IGESToBRep.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESToBRep.delete_SwigPyIterator
    value = _swig_new_instance_method(_IGESToBRep.SwigPyIterator_value)
    incr = _swig_new_instance_method(_IGESToBRep.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_IGESToBRep.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_IGESToBRep.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_IGESToBRep.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_IGESToBRep.SwigPyIterator_copy)
    next = _swig_new_instance_method(_IGESToBRep.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_IGESToBRep.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_IGESToBRep.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_IGESToBRep.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_IGESToBRep.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_IGESToBRep.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_IGESToBRep.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_IGESToBRep.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_IGESToBRep.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_IGESToBRep.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _IGESToBRep:
_IGESToBRep.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.IGESData
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.Message
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.OSD
import OCC.Core.Transfer
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.ShapeExtend
import OCC.Core.TColGeom
import OCC.Core.TopTools
import OCC.Core.Geom2d
Handle_IGESToBRep_Actor_Create = _IGESToBRep.Handle_IGESToBRep_Actor_Create
Handle_IGESToBRep_Actor_DownCast = _IGESToBRep.Handle_IGESToBRep_Actor_DownCast
Handle_IGESToBRep_Actor_IsNull = _IGESToBRep.Handle_IGESToBRep_Actor_IsNull
Handle_IGESToBRep_AlgoContainer_Create = _IGESToBRep.Handle_IGESToBRep_AlgoContainer_Create
Handle_IGESToBRep_AlgoContainer_DownCast = _IGESToBRep.Handle_IGESToBRep_AlgoContainer_DownCast
Handle_IGESToBRep_AlgoContainer_IsNull = _IGESToBRep.Handle_IGESToBRep_AlgoContainer_IsNull
Handle_IGESToBRep_IGESBoundary_Create = _IGESToBRep.Handle_IGESToBRep_IGESBoundary_Create
Handle_IGESToBRep_IGESBoundary_DownCast = _IGESToBRep.Handle_IGESToBRep_IGESBoundary_DownCast
Handle_IGESToBRep_IGESBoundary_IsNull = _IGESToBRep.Handle_IGESToBRep_IGESBoundary_IsNull
Handle_IGESToBRep_ToolContainer_Create = _IGESToBRep.Handle_IGESToBRep_ToolContainer_Create
Handle_IGESToBRep_ToolContainer_DownCast = _IGESToBRep.Handle_IGESToBRep_ToolContainer_DownCast
Handle_IGESToBRep_ToolContainer_IsNull = _IGESToBRep.Handle_IGESToBRep_ToolContainer_IsNull
class igestobrep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AlgoContainer = _swig_new_static_method(_IGESToBRep.igestobrep_AlgoContainer)
    IGESCurveToSequenceOfIGESCurve = _swig_new_static_method(_IGESToBRep.igestobrep_IGESCurveToSequenceOfIGESCurve)
    Init = _swig_new_static_method(_IGESToBRep.igestobrep_Init)
    IsBRepEntity = _swig_new_static_method(_IGESToBRep.igestobrep_IsBRepEntity)
    IsBasicCurve = _swig_new_static_method(_IGESToBRep.igestobrep_IsBasicCurve)
    IsBasicSurface = _swig_new_static_method(_IGESToBRep.igestobrep_IsBasicSurface)
    IsCurveAndSurface = _swig_new_static_method(_IGESToBRep.igestobrep_IsCurveAndSurface)
    IsTopoCurve = _swig_new_static_method(_IGESToBRep.igestobrep_IsTopoCurve)
    IsTopoSurface = _swig_new_static_method(_IGESToBRep.igestobrep_IsTopoSurface)
    SetAlgoContainer = _swig_new_static_method(_IGESToBRep.igestobrep_SetAlgoContainer)
    TransferPCurve = _swig_new_static_method(_IGESToBRep.igestobrep_TransferPCurve)

    __repr__ = _dumps_object


    def __init__(self):
        _IGESToBRep.igestobrep_swiginit(self, _IGESToBRep.new_igestobrep())
    __swig_destroy__ = _IGESToBRep.delete_igestobrep

# Register igestobrep in _IGESToBRep:
_IGESToBRep.igestobrep_swigregister(igestobrep)
igestobrep_AlgoContainer = _IGESToBRep.igestobrep_AlgoContainer
igestobrep_IGESCurveToSequenceOfIGESCurve = _IGESToBRep.igestobrep_IGESCurveToSequenceOfIGESCurve
igestobrep_Init = _IGESToBRep.igestobrep_Init
igestobrep_IsBRepEntity = _IGESToBRep.igestobrep_IsBRepEntity
igestobrep_IsBasicCurve = _IGESToBRep.igestobrep_IsBasicCurve
igestobrep_IsBasicSurface = _IGESToBRep.igestobrep_IsBasicSurface
igestobrep_IsCurveAndSurface = _IGESToBRep.igestobrep_IsCurveAndSurface
igestobrep_IsTopoCurve = _IGESToBRep.igestobrep_IsTopoCurve
igestobrep_IsTopoSurface = _IGESToBRep.igestobrep_IsTopoSurface
igestobrep_SetAlgoContainer = _IGESToBRep.igestobrep_SetAlgoContainer
igestobrep_TransferPCurve = _IGESToBRep.igestobrep_TransferPCurve

class IGESToBRep_Actor(OCC.Core.Transfer.Transfer_ActorOfTransientProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GetContinuity = _swig_new_instance_method(_IGESToBRep.IGESToBRep_Actor_GetContinuity)

    def __init__(self, *args):
        r""":rtype: None"""
        _IGESToBRep.IGESToBRep_Actor_swiginit(self, _IGESToBRep.new_IGESToBRep_Actor(*args))
    SetContinuity = _swig_new_instance_method(_IGESToBRep.IGESToBRep_Actor_SetContinuity)
    SetModel = _swig_new_instance_method(_IGESToBRep.IGESToBRep_Actor_SetModel)
    UsedTolerance = _swig_new_instance_method(_IGESToBRep.IGESToBRep_Actor_UsedTolerance)


    @staticmethod
    def DownCast(t):
      return Handle_IGESToBRep_Actor_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_Actor

# Register IGESToBRep_Actor in _IGESToBRep:
_IGESToBRep.IGESToBRep_Actor_swigregister(IGESToBRep_Actor)

class IGESToBRep_AlgoContainer(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Empty constructor
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_AlgoContainer_swiginit(self, _IGESToBRep.new_IGESToBRep_AlgoContainer(*args))
    SetToolContainer = _swig_new_instance_method(_IGESToBRep.IGESToBRep_AlgoContainer_SetToolContainer)
    ToolContainer = _swig_new_instance_method(_IGESToBRep.IGESToBRep_AlgoContainer_ToolContainer)


    @staticmethod
    def DownCast(t):
      return Handle_IGESToBRep_AlgoContainer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_AlgoContainer

# Register IGESToBRep_AlgoContainer in _IGESToBRep:
_IGESToBRep.IGESToBRep_AlgoContainer_swigregister(IGESToBRep_AlgoContainer)

class IGESToBRep_CurveAndSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddShapeResult = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_AddShapeResult)
    GetContinuity = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_GetContinuity)
    GetEpsCoeff = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_GetEpsCoeff)
    GetEpsGeom = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_GetEpsGeom)
    GetEpsilon = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_GetEpsilon)
    GetMaxTol = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_GetMaxTol)
    GetMinTol = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_GetMinTol)
    GetModeApprox = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_GetModeApprox)
    GetModeTransfer = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_GetModeTransfer)
    GetModel = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_GetModel)
    GetOptimized = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_GetOptimized)
    GetShapeResult = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_GetShapeResult)
    GetSurfaceCurve = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_GetSurfaceCurve)
    GetTransferProcess = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_GetTransferProcess)
    GetUVResolution = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_GetUVResolution)
    GetUnitFactor = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_GetUnitFactor)
    HasShapeResult = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_HasShapeResult)

    def __init__(self, *args):
        r"""
        * Creates a tool CurveAndSurface ready to run, with epsilons set to 1.E-04, myModeTopo to True, the optimization of the continuity to False.
        	:rtype: None* Creates a tool CurveAndSurface ready to run and sets its fields as CS's.
        	:param CS:
        	:type CS: IGESToBRep_CurveAndSurface
        	:rtype: None* Creates a tool CurveAndSurface ready to run.
        	:param eps:
        	:type eps: float
        	:param epsGeom:
        	:type epsGeom: float
        	:param epsCoeff:
        	:type epsCoeff: float
        	:param mode:
        	:type mode: bool
        	:param modeapprox:
        	:type modeapprox: bool
        	:param optimized:
        	:type optimized: bool
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_CurveAndSurface_swiginit(self, _IGESToBRep.new_IGESToBRep_CurveAndSurface(*args))
    Init = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_Init)
    NbShapeResult = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_NbShapeResult)
    SendFail = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_SendFail)
    SendMsg = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_SendMsg)
    SendWarning = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_SendWarning)
    SetContinuity = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_SetContinuity)
    SetEpsCoeff = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_SetEpsCoeff)
    SetEpsGeom = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_SetEpsGeom)
    SetEpsilon = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_SetEpsilon)
    SetMaxTol = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_SetMaxTol)
    SetMinTol = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_SetMinTol)
    SetModeApprox = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_SetModeApprox)
    SetModeTransfer = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_SetModeTransfer)
    SetModel = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_SetModel)
    SetOptimized = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_SetOptimized)
    SetShapeResult = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_SetShapeResult)
    SetSurface = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_SetSurface)
    SetSurfaceCurve = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_SetSurfaceCurve)
    SetTransferProcess = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_SetTransferProcess)
    Surface = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_Surface)
    TransferCurveAndSurface = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_TransferCurveAndSurface)
    TransferGeometry = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_TransferGeometry)
    UpdateMinMaxTol = _swig_new_instance_method(_IGESToBRep.IGESToBRep_CurveAndSurface_UpdateMinMaxTol)

    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_CurveAndSurface

# Register IGESToBRep_CurveAndSurface in _IGESToBRep:
_IGESToBRep.IGESToBRep_CurveAndSurface_swigregister(IGESToBRep_CurveAndSurface)

class IGESToBRep_IGESBoundary(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Check = _swig_new_instance_method(_IGESToBRep.IGESToBRep_IGESBoundary_Check)

    def __init__(self, *args):
        r"""
        * Empty constructor
        	:rtype: None* Empty constructor
        	:param CS:
        	:type CS: IGESToBRep_CurveAndSurface
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_IGESBoundary_swiginit(self, _IGESToBRep.new_IGESToBRep_IGESBoundary(*args))
    Init = _swig_new_instance_method(_IGESToBRep.IGESToBRep_IGESBoundary_Init)
    Transfer = _swig_new_instance_method(_IGESToBRep.IGESToBRep_IGESBoundary_Transfer)
    WireData = _swig_new_instance_method(_IGESToBRep.IGESToBRep_IGESBoundary_WireData)
    WireData2d = _swig_new_instance_method(_IGESToBRep.IGESToBRep_IGESBoundary_WireData2d)
    WireData3d = _swig_new_instance_method(_IGESToBRep.IGESToBRep_IGESBoundary_WireData3d)


    @staticmethod
    def DownCast(t):
      return Handle_IGESToBRep_IGESBoundary_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_IGESBoundary

# Register IGESToBRep_IGESBoundary in _IGESToBRep:
_IGESToBRep.IGESToBRep_IGESBoundary_swigregister(IGESToBRep_IGESBoundary)

class IGESToBRep_Reader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Actor = _swig_new_instance_method(_IGESToBRep.IGESToBRep_Reader_Actor)
    Check = _swig_new_instance_method(_IGESToBRep.IGESToBRep_Reader_Check)
    Clear = _swig_new_instance_method(_IGESToBRep.IGESToBRep_Reader_Clear)

    def __init__(self, *args):
        r"""
        * Creates a Reader
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_Reader_swiginit(self, _IGESToBRep.new_IGESToBRep_Reader(*args))
    IsDone = _swig_new_instance_method(_IGESToBRep.IGESToBRep_Reader_IsDone)
    LoadFile = _swig_new_instance_method(_IGESToBRep.IGESToBRep_Reader_LoadFile)
    Model = _swig_new_instance_method(_IGESToBRep.IGESToBRep_Reader_Model)
    NbShapes = _swig_new_instance_method(_IGESToBRep.IGESToBRep_Reader_NbShapes)
    OneShape = _swig_new_instance_method(_IGESToBRep.IGESToBRep_Reader_OneShape)
    SetModel = _swig_new_instance_method(_IGESToBRep.IGESToBRep_Reader_SetModel)
    SetTransientProcess = _swig_new_instance_method(_IGESToBRep.IGESToBRep_Reader_SetTransientProcess)
    Shape = _swig_new_instance_method(_IGESToBRep.IGESToBRep_Reader_Shape)
    Transfer = _swig_new_instance_method(_IGESToBRep.IGESToBRep_Reader_Transfer)
    TransferRoots = _swig_new_instance_method(_IGESToBRep.IGESToBRep_Reader_TransferRoots)
    TransientProcess = _swig_new_instance_method(_IGESToBRep.IGESToBRep_Reader_TransientProcess)
    UsedTolerance = _swig_new_instance_method(_IGESToBRep.IGESToBRep_Reader_UsedTolerance)

    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_Reader

# Register IGESToBRep_Reader in _IGESToBRep:
_IGESToBRep.IGESToBRep_Reader_swigregister(IGESToBRep_Reader)

class IGESToBRep_ToolContainer(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IGESBoundary = _swig_new_instance_method(_IGESToBRep.IGESToBRep_ToolContainer_IGESBoundary)

    def __init__(self, *args):
        r"""
        * Empty constructor
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_ToolContainer_swiginit(self, _IGESToBRep.new_IGESToBRep_ToolContainer(*args))


    @staticmethod
    def DownCast(t):
      return Handle_IGESToBRep_ToolContainer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_ToolContainer

# Register IGESToBRep_ToolContainer in _IGESToBRep:
_IGESToBRep.IGESToBRep_ToolContainer_swigregister(IGESToBRep_ToolContainer)

class IGESToBRep_BRepEntity(IGESToBRep_CurveAndSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates a tool BRepEntity ready to run, with epsilons set to 1.E-04, TheModeTopo to True, the optimization of the continuity to False.
        	:rtype: None* Creates a tool BRepEntity ready to run and sets its fields as CS's.
        	:param CS:
        	:type CS: IGESToBRep_CurveAndSurface
        	:rtype: None* Creates a tool BRepEntity ready to run.
        	:param eps:
        	:type eps: float
        	:param epsGeom:
        	:type epsGeom: float
        	:param epsCoeff:
        	:type epsCoeff: float
        	:param mode:
        	:type mode: bool
        	:param modeapprox:
        	:type modeapprox: bool
        	:param optimized:
        	:type optimized: bool
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_BRepEntity_swiginit(self, _IGESToBRep.new_IGESToBRep_BRepEntity(*args))
    TransferBRepEntity = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BRepEntity_TransferBRepEntity)
    TransferEdge = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BRepEntity_TransferEdge)
    TransferFace = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BRepEntity_TransferFace)
    TransferLoop = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BRepEntity_TransferLoop)
    TransferManifoldSolid = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BRepEntity_TransferManifoldSolid)
    TransferShell = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BRepEntity_TransferShell)
    TransferVertex = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BRepEntity_TransferVertex)

    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_BRepEntity

# Register IGESToBRep_BRepEntity in _IGESToBRep:
_IGESToBRep.IGESToBRep_BRepEntity_swigregister(IGESToBRep_BRepEntity)

class IGESToBRep_BasicCurve(IGESToBRep_CurveAndSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates a tool BasicCurve ready to run, with epsilons set to 1.E-04, TheModeTopo to True, the optimization of the continuity to False.
        	:rtype: None* Creates a tool BasicCurve ready to run and sets its fields as CS's.
        	:param CS:
        	:type CS: IGESToBRep_CurveAndSurface
        	:rtype: None* Creates a tool BasicCurve ready to run.
        	:param eps:
        	:type eps: float
        	:param epsGeom:
        	:type epsGeom: float
        	:param epsCoeff:
        	:type epsCoeff: float
        	:param mode:
        	:type mode: bool
        	:param modeapprox:
        	:type modeapprox: bool
        	:param optimized:
        	:type optimized: bool
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_BasicCurve_swiginit(self, _IGESToBRep.new_IGESToBRep_BasicCurve(*args))
    Transfer2dBSplineCurve = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicCurve_Transfer2dBSplineCurve)
    Transfer2dBasicCurve = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicCurve_Transfer2dBasicCurve)
    Transfer2dCircularArc = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicCurve_Transfer2dCircularArc)
    Transfer2dConicArc = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicCurve_Transfer2dConicArc)
    Transfer2dCopiousData = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicCurve_Transfer2dCopiousData)
    Transfer2dLine = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicCurve_Transfer2dLine)
    Transfer2dSplineCurve = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicCurve_Transfer2dSplineCurve)
    TransferBSplineCurve = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicCurve_TransferBSplineCurve)
    TransferBasicCurve = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicCurve_TransferBasicCurve)
    TransferCircularArc = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicCurve_TransferCircularArc)
    TransferConicArc = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicCurve_TransferConicArc)
    TransferCopiousData = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicCurve_TransferCopiousData)
    TransferLine = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicCurve_TransferLine)
    TransferSplineCurve = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicCurve_TransferSplineCurve)
    TransferTransformation = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicCurve_TransferTransformation)

    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_BasicCurve

# Register IGESToBRep_BasicCurve in _IGESToBRep:
_IGESToBRep.IGESToBRep_BasicCurve_swigregister(IGESToBRep_BasicCurve)

class IGESToBRep_BasicSurface(IGESToBRep_CurveAndSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates a tool BasicSurface ready to run, with epsilons set to 1.E-04, TheModeTopo to True, the optimization of the continuity to False.
        	:rtype: None* Creates a tool BasicSurface ready to run and sets its fields as CS's.
        	:param CS:
        	:type CS: IGESToBRep_CurveAndSurface
        	:rtype: None* Creates a tool BasicSurface ready to run.
        	:param eps:
        	:type eps: float
        	:param epsGeom:
        	:type epsGeom: float
        	:param epsCoeff:
        	:type epsCoeff: float
        	:param mode:
        	:type mode: bool
        	:param modeapprox:
        	:type modeapprox: bool
        	:param optimized:
        	:type optimized: bool
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_BasicSurface_swiginit(self, _IGESToBRep.new_IGESToBRep_BasicSurface(*args))
    TransferBSplineSurface = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicSurface_TransferBSplineSurface)
    TransferBasicSurface = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicSurface_TransferBasicSurface)
    TransferPlaneSurface = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicSurface_TransferPlaneSurface)
    TransferRigthConicalSurface = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicSurface_TransferRigthConicalSurface)
    TransferRigthCylindricalSurface = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicSurface_TransferRigthCylindricalSurface)
    TransferSphericalSurface = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicSurface_TransferSphericalSurface)
    TransferSplineSurface = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicSurface_TransferSplineSurface)
    TransferToroidalSurface = _swig_new_instance_method(_IGESToBRep.IGESToBRep_BasicSurface_TransferToroidalSurface)

    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_BasicSurface

# Register IGESToBRep_BasicSurface in _IGESToBRep:
_IGESToBRep.IGESToBRep_BasicSurface_swigregister(IGESToBRep_BasicSurface)

class IGESToBRep_TopoCurve(IGESToBRep_CurveAndSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Approx2dBSplineCurve = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_Approx2dBSplineCurve)
    ApproxBSplineCurve = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_ApproxBSplineCurve)
    BadCase = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_BadCase)
    Curve = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_Curve)
    Curve2d = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_Curve2d)

    def __init__(self, *args):
        r"""
        * Creates a tool TopoCurve ready to run, with epsilons set to 1.E-04, TheModeTopo to True, the optimization of the continuity to False.
        	:rtype: None* Creates a tool TopoCurve ready to run and sets its fields as CS's.
        	:param CS:
        	:type CS: IGESToBRep_CurveAndSurface
        	:rtype: None* Creates a tool TopoCurve ready to run and sets its fields as CS's.
        	:param CS:
        	:type CS: IGESToBRep_TopoCurve
        	:rtype: None* Creates a tool TopoCurve ready to run.
        	:param eps:
        	:type eps: float
        	:param epsGeom:
        	:type epsGeom: float
        	:param epsCoeff:
        	:type epsCoeff: float
        	:param mode:
        	:type mode: bool
        	:param modeapprox:
        	:type modeapprox: bool
        	:param optimized:
        	:type optimized: bool
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_TopoCurve_swiginit(self, _IGESToBRep.new_IGESToBRep_TopoCurve(*args))
    NbCurves = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_NbCurves)
    NbCurves2d = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_NbCurves2d)
    SetBadCase = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_SetBadCase)
    Transfer2dCompositeCurve = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_Transfer2dCompositeCurve)
    Transfer2dOffsetCurve = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_Transfer2dOffsetCurve)
    Transfer2dPoint = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_Transfer2dPoint)
    Transfer2dTopoBasicCurve = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_Transfer2dTopoBasicCurve)
    Transfer2dTopoCurve = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_Transfer2dTopoCurve)
    TransferBoundary = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_TransferBoundary)
    TransferBoundaryOnFace = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_TransferBoundaryOnFace)
    TransferCompositeCurve = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_TransferCompositeCurve)
    TransferCurveOnFace = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_TransferCurveOnFace)
    TransferCurveOnSurface = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_TransferCurveOnSurface)
    TransferOffsetCurve = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_TransferOffsetCurve)
    TransferPoint = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_TransferPoint)
    TransferTopoBasicCurve = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_TransferTopoBasicCurve)
    TransferTopoCurve = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoCurve_TransferTopoCurve)

    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_TopoCurve

# Register IGESToBRep_TopoCurve in _IGESToBRep:
_IGESToBRep.IGESToBRep_TopoCurve_swigregister(IGESToBRep_TopoCurve)

class IGESToBRep_TopoSurface(IGESToBRep_CurveAndSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Creates a tool TopoSurface ready to run, with epsilons set to 1.E-04, TheModeTopo to True, the optimization of the continuity to False.
        	:rtype: None* Creates a tool TopoSurface ready to run and sets its fields as CS's.
        	:param CS:
        	:type CS: IGESToBRep_CurveAndSurface
        	:rtype: None* Creates a tool TopoSurface ready to run.
        	:param eps:
        	:type eps: float
        	:param epsGeom:
        	:type epsGeom: float
        	:param epsCoeff:
        	:type epsCoeff: float
        	:param mode:
        	:type mode: bool
        	:param modeapprox:
        	:type modeapprox: bool
        	:param optimized:
        	:type optimized: bool
        	:rtype: None
        """
        _IGESToBRep.IGESToBRep_TopoSurface_swiginit(self, _IGESToBRep.new_IGESToBRep_TopoSurface(*args))
    ParamSurface = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoSurface_ParamSurface)
    TransferBoundedSurface = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoSurface_TransferBoundedSurface)
    TransferOffsetSurface = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoSurface_TransferOffsetSurface)
    TransferPerforate = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoSurface_TransferPerforate)
    TransferPlane = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoSurface_TransferPlane)
    TransferRuledSurface = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoSurface_TransferRuledSurface)
    TransferSurfaceOfRevolution = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoSurface_TransferSurfaceOfRevolution)
    TransferTabulatedCylinder = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoSurface_TransferTabulatedCylinder)
    TransferTopoBasicSurface = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoSurface_TransferTopoBasicSurface)
    TransferTopoSurface = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoSurface_TransferTopoSurface)
    TransferTrimmedSurface = _swig_new_instance_method(_IGESToBRep.IGESToBRep_TopoSurface_TransferTrimmedSurface)

    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_TopoSurface

# Register IGESToBRep_TopoSurface in _IGESToBRep:
_IGESToBRep.IGESToBRep_TopoSurface_swigregister(IGESToBRep_TopoSurface)



