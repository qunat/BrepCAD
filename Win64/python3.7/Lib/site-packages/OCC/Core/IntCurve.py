# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IntCurve module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_intcurve.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _IntCurve
else:
    import _IntCurve

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _IntCurve.SWIG_PyInstanceMethod_New
_swig_new_static_method = _IntCurve.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntCurve.delete_SwigPyIterator
    value = _swig_new_instance_method(_IntCurve.SwigPyIterator_value)
    incr = _swig_new_instance_method(_IntCurve.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_IntCurve.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_IntCurve.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_IntCurve.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_IntCurve.SwigPyIterator_copy)
    next = _swig_new_instance_method(_IntCurve.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_IntCurve.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_IntCurve.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_IntCurve.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_IntCurve.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_IntCurve.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_IntCurve.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_IntCurve.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_IntCurve.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_IntCurve.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _IntCurve:
_IntCurve.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.IntRes2d
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.GeomAbs
class IntCurve_IConicTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    D1 = _swig_new_instance_method(_IntCurve.IntCurve_IConicTool_D1)
    D2 = _swig_new_instance_method(_IntCurve.IntCurve_IConicTool_D2)
    Distance = _swig_new_instance_method(_IntCurve.IntCurve_IConicTool_Distance)
    FindParameter = _swig_new_instance_method(_IntCurve.IntCurve_IConicTool_FindParameter)
    GradDistance = _swig_new_instance_method(_IntCurve.IntCurve_IConicTool_GradDistance)

    def __init__(self, *args):
        r"""
        :rtype: None:param IT:
        	:type IT: IntCurve_IConicTool
        	:rtype: None:param E:
        	:type E: gp_Elips2d
        	:rtype: None:param L:
        	:type L: gp_Lin2d
        	:rtype: None:param C:
        	:type C: gp_Circ2d
        	:rtype: None:param P:
        	:type P: gp_Parab2d
        	:rtype: None:param H:
        	:type H: gp_Hypr2d
        	:rtype: None
        """
        _IntCurve.IntCurve_IConicTool_swiginit(self, _IntCurve.new_IntCurve_IConicTool(*args))
    Value = _swig_new_instance_method(_IntCurve.IntCurve_IConicTool_Value)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurve.delete_IntCurve_IConicTool

# Register IntCurve_IConicTool in _IntCurve:
_IntCurve.IntCurve_IConicTool_swigregister(IntCurve_IConicTool)

class IntCurve_IntConicConic(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Empty Constructor
        	:rtype: None* Intersection between 2 lines from gp.
        	:param L1:
        	:type L1: gp_Lin2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param L2:
        	:type L2: gp_Lin2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None* Intersection between a line and a circle. The exception ConstructionError is raised if the method IsClosed of the domain of the circle returns False.
        	:param L:
        	:type L: gp_Lin2d
        	:param DL:
        	:type DL: IntRes2d_Domain
        	:param C:
        	:type C: gp_Circ2d
        	:param DC:
        	:type DC: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None* Intersection between a line and an ellipse. The exception ConstructionError is raised if the method IsClosed of the domain of the ellipse returns False.
        	:param L:
        	:type L: gp_Lin2d
        	:param DL:
        	:type DL: IntRes2d_Domain
        	:param E:
        	:type E: gp_Elips2d
        	:param DE:
        	:type DE: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None* Intersection between a line and a parabola from gp.
        	:param L:
        	:type L: gp_Lin2d
        	:param DL:
        	:type DL: IntRes2d_Domain
        	:param P:
        	:type P: gp_Parab2d
        	:param DP:
        	:type DP: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None* Intersection between a line and an hyperbola.
        	:param L:
        	:type L: gp_Lin2d
        	:param DL:
        	:type DL: IntRes2d_Domain
        	:param H:
        	:type H: gp_Hypr2d
        	:param DH:
        	:type DH: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None* Intersection between 2 circles from gp. The exception ConstructionError is raised if the method IsClosed of one of the domain returns False.
        	:param C1:
        	:type C1: gp_Circ2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param C2:
        	:type C2: gp_Circ2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None* Intersection between a circle and an ellipse. The exception ConstructionError is raised if the method IsClosed of one the domain returns False.
        	:param C:
        	:type C: gp_Circ2d
        	:param DC:
        	:type DC: IntRes2d_Domain
        	:param E:
        	:type E: gp_Elips2d
        	:param DE:
        	:type DE: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None* Intersection between a circle and a parabola. The exception ConstructionError is raised if the method IsClosed of the domain of the circle returns False.
        	:param C:
        	:type C: gp_Circ2d
        	:param DC:
        	:type DC: IntRes2d_Domain
        	:param P:
        	:type P: gp_Parab2d
        	:param DP:
        	:type DP: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None* Intersection between a circle and an hyperbola. The exception ConstructionError is raised if the method IsClosed of the domain of the circle returns False.
        	:param C:
        	:type C: gp_Circ2d
        	:param DC:
        	:type DC: IntRes2d_Domain
        	:param H:
        	:type H: gp_Hypr2d
        	:param DH:
        	:type DH: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None* Intersection between 2 ellipses. The exception ConstructionError is raised if the method IsClosed of one of the domain returns False.
        	:param E1:
        	:type E1: gp_Elips2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param E2:
        	:type E2: gp_Elips2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None* Intersection between an ellipse and a parabola. The exception ConstructionError is raised if the method IsClosed of the domain of the ellipse returns False.
        	:param E:
        	:type E: gp_Elips2d
        	:param DE:
        	:type DE: IntRes2d_Domain
        	:param P:
        	:type P: gp_Parab2d
        	:param DP:
        	:type DP: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None* Intersection between an ellipse and an hyperbola. The exception ConstructionError is raised if the method IsClosed of the domain of the ellipse returns False.
        	:param E:
        	:type E: gp_Elips2d
        	:param DE:
        	:type DE: IntRes2d_Domain
        	:param H:
        	:type H: gp_Hypr2d
        	:param DH:
        	:type DH: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None* Intersection between 2 parabolas.
        	:param P1:
        	:type P1: gp_Parab2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param P2:
        	:type P2: gp_Parab2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None* Intersection between a parabola and an hyperbola.
        	:param P:
        	:type P: gp_Parab2d
        	:param DP:
        	:type DP: IntRes2d_Domain
        	:param H:
        	:type H: gp_Hypr2d
        	:param DH:
        	:type DH: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None* Intersection between 2 hyperbolas.
        	:param H1:
        	:type H1: gp_Hypr2d
        	:param D1:
        	:type D1: IntRes2d_Domain
        	:param H2:
        	:type H2: gp_Hypr2d
        	:param D2:
        	:type D2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _IntCurve.IntCurve_IntConicConic_swiginit(self, _IntCurve.new_IntCurve_IntConicConic(*args))
    Perform = _swig_new_instance_method(_IntCurve.IntCurve_IntConicConic_Perform)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurve.delete_IntCurve_IntConicConic

# Register IntCurve_IntConicConic in _IntCurve:
_IntCurve.IntCurve_IntConicConic_swigregister(IntCurve_IntConicConic)

class IntCurve_IntImpConicParConic(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    And_Domaine_Objet1_Intersections = _swig_new_instance_method(_IntCurve.IntCurve_IntImpConicParConic_And_Domaine_Objet1_Intersections)
    FindU = _swig_new_instance_method(_IntCurve.IntCurve_IntImpConicParConic_FindU)
    FindV = _swig_new_instance_method(_IntCurve.IntCurve_IntImpConicParConic_FindV)

    def __init__(self, *args):
        r"""
        * Empty constructor.
        	:rtype: None* Intersection between an implicit curve and a parametrised curve. The exception ConstructionError is raised if the domain of the parametrised curve does not verify HasFirstPoint and HasLastPoint return True.
        	:param ITool:
        	:type ITool: IntCurve_IConicTool
        	:param Dom1:
        	:type Dom1: IntRes2d_Domain
        	:param PCurve:
        	:type PCurve: IntCurve_PConic
        	:param Dom2:
        	:type Dom2: IntRes2d_Domain
        	:param TolConf:
        	:type TolConf: float
        	:param Tol:
        	:type Tol: float
        	:rtype: None
        """
        _IntCurve.IntCurve_IntImpConicParConic_swiginit(self, _IntCurve.new_IntCurve_IntImpConicParConic(*args))
    Perform = _swig_new_instance_method(_IntCurve.IntCurve_IntImpConicParConic_Perform)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurve.delete_IntCurve_IntImpConicParConic

# Register IntCurve_IntImpConicParConic in _IntCurve:
_IntCurve.IntCurve_IntImpConicParConic_swigregister(IntCurve_IntImpConicParConic)

class IntCurve_MyImpParToolOfIntImpConicParConic(OCC.Core.math.math_FunctionWithDerivative):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        * Constructor of the class.
        	:param IT:
        	:type IT: IntCurve_IConicTool
        	:param PC:
        	:type PC: IntCurve_PConic
        	:rtype: None
        """
        _IntCurve.IntCurve_MyImpParToolOfIntImpConicParConic_swiginit(self, _IntCurve.new_IntCurve_MyImpParToolOfIntImpConicParConic(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurve.delete_IntCurve_MyImpParToolOfIntImpConicParConic

# Register IntCurve_MyImpParToolOfIntImpConicParConic in _IntCurve:
_IntCurve.IntCurve_MyImpParToolOfIntImpConicParConic_swigregister(IntCurve_MyImpParToolOfIntImpConicParConic)

class IntCurve_PConic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Accuracy = _swig_new_instance_method(_IntCurve.IntCurve_PConic_Accuracy)
    Axis2 = _swig_new_instance_method(_IntCurve.IntCurve_PConic_Axis2)
    EpsX = _swig_new_instance_method(_IntCurve.IntCurve_PConic_EpsX)

    def __init__(self, *args):
        r"""
        :param PC:
        	:type PC: IntCurve_PConic
        	:rtype: None:param E:
        	:type E: gp_Elips2d
        	:rtype: None:param C:
        	:type C: gp_Circ2d
        	:rtype: None:param P:
        	:type P: gp_Parab2d
        	:rtype: None:param H:
        	:type H: gp_Hypr2d
        	:rtype: None:param L:
        	:type L: gp_Lin2d
        	:rtype: None
        """
        _IntCurve.IntCurve_PConic_swiginit(self, _IntCurve.new_IntCurve_PConic(*args))
    Param1 = _swig_new_instance_method(_IntCurve.IntCurve_PConic_Param1)
    Param2 = _swig_new_instance_method(_IntCurve.IntCurve_PConic_Param2)
    SetAccuracy = _swig_new_instance_method(_IntCurve.IntCurve_PConic_SetAccuracy)
    SetEpsX = _swig_new_instance_method(_IntCurve.IntCurve_PConic_SetEpsX)
    TypeCurve = _swig_new_instance_method(_IntCurve.IntCurve_PConic_TypeCurve)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurve.delete_IntCurve_PConic

# Register IntCurve_PConic in _IntCurve:
_IntCurve.IntCurve_PConic_swigregister(IntCurve_PConic)

class IntCurve_PConicTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    D1 = _swig_new_static_method(_IntCurve.IntCurve_PConicTool_D1)
    D2 = _swig_new_static_method(_IntCurve.IntCurve_PConicTool_D2)
    EpsX = _swig_new_static_method(_IntCurve.IntCurve_PConicTool_EpsX)
    NbSamples = _swig_new_static_method(_IntCurve.IntCurve_PConicTool_NbSamples)
    Value = _swig_new_static_method(_IntCurve.IntCurve_PConicTool_Value)

    __repr__ = _dumps_object


    def __init__(self):
        _IntCurve.IntCurve_PConicTool_swiginit(self, _IntCurve.new_IntCurve_PConicTool())
    __swig_destroy__ = _IntCurve.delete_IntCurve_PConicTool

# Register IntCurve_PConicTool in _IntCurve:
_IntCurve.IntCurve_PConicTool_swigregister(IntCurve_PConicTool)
IntCurve_PConicTool_D1 = _IntCurve.IntCurve_PConicTool_D1
IntCurve_PConicTool_D2 = _IntCurve.IntCurve_PConicTool_D2
IntCurve_PConicTool_EpsX = _IntCurve.IntCurve_PConicTool_EpsX
IntCurve_PConicTool_NbSamples = _IntCurve.IntCurve_PConicTool_NbSamples
IntCurve_PConicTool_Value = _IntCurve.IntCurve_PConicTool_Value

class IntCurve_ProjectOnPConicTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FindParameter = _swig_new_static_method(_IntCurve.IntCurve_ProjectOnPConicTool_FindParameter)

    __repr__ = _dumps_object


    def __init__(self):
        _IntCurve.IntCurve_ProjectOnPConicTool_swiginit(self, _IntCurve.new_IntCurve_ProjectOnPConicTool())
    __swig_destroy__ = _IntCurve.delete_IntCurve_ProjectOnPConicTool

# Register IntCurve_ProjectOnPConicTool in _IntCurve:
_IntCurve.IntCurve_ProjectOnPConicTool_swigregister(IntCurve_ProjectOnPConicTool)
IntCurve_ProjectOnPConicTool_FindParameter = _IntCurve.IntCurve_ProjectOnPConicTool_FindParameter



