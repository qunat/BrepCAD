# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ModuleSelect.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from OCC.Core.gp import gp_Ax1, gp_Pnt, gp_Dir, gp_Trsf
from OCC.Core.TopLoc import TopLoc_Location
from PyQt5 import QtCore, QtGui, QtWidgets
from GUI import gui_scale
from GUI.StyleSheets import get_stylesheet
from functools import partial
from OCC.Core.AIS import AIS_Shape
from OCC.Core.gp import gp_Trsf, gp_Vec, gp_Pnt,gp_Dir,gp_Circ,gp_Ax2,gp_Lin,gp_Ax1
from OCC.Core.TopAbs import TopAbs_VERTEX, TopAbs_EDGE, TopAbs_FACE, TopAbs_SOLID, TopAbs_SHELL, TopAbs_COMPOUND, TopAbs_WIRE
from OCC.Core.StdSelect import StdSelect_ShapeTypeFilter
from OCC.Core.BRepAdaptor import BRepAdaptor_Surface
from OCC.Core.GeomAbs import (GeomAbs_Plane, GeomAbs_Cylinder,
                              GeomAbs_BSplineSurface)

class AssembleConstrain(QtWidgets.QMainWindow):
    def __init__(self,parent):
        super(AssembleConstrain,self).__init__(parent)
        self.parent=parent
        self.ais_shape=None
        self.selectshape1=None
        self.selectshape2=None
        self.selectshape1_location=None
        self.selectshape2_location=None
        self.selectshape1_direction=None
        self.selectshape2_direction=None
        self.sacle=0.5
        self.setupUi()
        x = parent.geometry().x() + (parent.geometry().width() )/2
        y = parent.geometry().y() + parent.geometry().height() / 2
        self.setGeometry(x, y, 236, 134)
        self.setWindowTitle('同心约束')
        index=self.parent.ModuleWindowManager.tabwidget.currentIndex()
        self.name=self.parent.ModuleWindowManager.tabwidget.tabText(index)
        self.parent.Displayshape_core_dict[self.name].canva._display.register_select_callback(self.getshape)
        self.pushButton.clicked.connect(self.setselect1)
        self.pushButton_2.clicked.connect(self.setselect2)
        self.pushButton_5.clicked.connect(self.moverotate)


    def setupUi(self):
        self.widget = QtWidgets.QWidget(self)
        self.widget.resize(236, 134)
        self.lineEdit = QtWidgets.QLineEdit(self.widget)
        self.lineEdit.setGeometry(QtCore.QRect(130, 10, 81, 30))
        self.lineEdit.setFocusPolicy(QtCore.Qt.NoFocus)
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setGeometry(QtCore.QRect(20, 10, 91, 30))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.widget)
        self.pushButton_2.setGeometry(QtCore.QRect(20, 50, 91, 30))
        self.pushButton_2.setObjectName("pushButton_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.widget)
        self.lineEdit_2.setGeometry(QtCore.QRect(130, 50, 81, 30))
        self.lineEdit_2.setFocusPolicy(QtCore.Qt.NoFocus)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.widget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 90, 211, 31))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_4 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout.addWidget(self.pushButton_4)
        self.pushButton_5 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout.addWidget(self.pushButton_5)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self.widget)
        


    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Form", "Form"))
        self.pushButton.setText(_translate("Form", "选择对象1"))
        self.pushButton_2.setText(_translate("Form", "选择对象2"))
        self.pushButton_4.setText(_translate("Form", "预览"))
        self.pushButton_5.setText(_translate("Form", "确定"))

    def centerOnScreen(self):
        '''Centers the window on the screen.'''
        resolution = QtWidgets.QApplication.desktop().screenGeometry()
        x = (resolution.width() - self.frameSize().width()) / 2
        y = (resolution.height() - self.frameSize().height()) / 2
        self.move(x, y)

    def setselect1(self):
        self.selectshape1=1
        self.parent.Displayshape_core_dict[self.name].canva._display.SetSelectionModeNeutral()
        self.parent.Displayshape_core_dict[self.name].canva._display.SetSelectionModeFace()

    def setselect2(self):
        self.selectshape2=1
        self.parent.Displayshape_core_dict[self.name].canva._display.SetSelectionModeNeutral()
        self.parent.Displayshape_core_dict[self.name].canva._display.SetSelectionModeFace()

    def calculateangle(self):
        angle=self.selectshape1_direction.Angle(self.selectshape2_direction)
        return angle

    def moverotate(self):
        ax1 = gp_Ax1(self.selectshape2_location, gp_Dir(0., 1., 0.))
        aCubeTrsf = gp_Trsf()
        angle = self.calculateangle()
        #tA = time.time()
        n_rotations = 200
        aCubeTrsf.SetRotation(ax1, angle)
        aCubeToploc = TopLoc_Location(aCubeTrsf)
        #self.parent.Displayshape_core_dict[self.name].canva._display.Context.SetLocation(self.selectshape2, aCubeToploc)
        #self.parent.Displayshape_core_dict[self.name].canva._display.Context.UpdateCurrentViewer()
        print(self.selectshape2,angle,123)

        self.Axis = gp_Trsf()  # 变换类
        distance_x=self.selectshape2_location.X()-self.selectshape1_location.X()
        distance_y=self.selectshape2_location.Y()-self.selectshape1_location.Y()
        distance_z=self.selectshape2_location.Z()-self.selectshape1_location.Z()
        self.Axis.SetTranslation(gp_Vec(-distance_x, -distance_y, -0))  # 设置变换类为平移
        self.Axis_Toploc = TopLoc_Location(self.Axis)
        #self.tool.Location(self.Axis_Toploc)
        self.parent.Displayshape_core_dict[self.name].canva._display.Context.SetLocation(self.selectshape2, self.Axis_Toploc*aCubeToploc)
        self.parent.Displayshape_core_dict[self.name].canva._display.Context.UpdateCurrentViewer()

        self.selectshape1=None
        self.selectshape2=None

    def getshape(self,shp, *kwargs):
        """ This function is called whenever a line is selected
        """
        if self.selectshape1==1:
            #First get ais_shape
            shape = self.parent.Displayshape_core_dict[self.name].canva._display.Context.Current()  # 通过此方法可以当前鼠标点击的ais_shape
            #shape = shape.ShapeType();
            self.ais_shape=AIS_Shape.DownCast(shape)
            self.lineEdit.setText("对象1已选择")
            print(self.ais_shape)
            self.selectshape1=self.ais_shape
            #Second get face Vector
            for face in shp:
                print(face)
                BS=BRepAdaptor_Surface(face,True)
                AdpSurf = BS.Surface()
                gp_cyl = AdpSurf.Cylinder()
                self.selectshape1_location = gp_cyl.Location()  # a point of the axis
                self.selectshape1_direction = gp_cyl.Axis().Direction()  # the cylinder axis
                print(self.selectshape1_direction.X(),self.selectshape1_direction.Y(),self.selectshape1_direction.Z())
                print(self.selectshape1_location)
 
        if self.selectshape2==1:
            #First get ais_shape
            shape = self.parent.Displayshape_core_dict[self.name].canva._display.Context.Current()  # 通过此方法可以当前鼠标点击的ais_shape
            #shape = shape.ShapeType();
            self.ais_shape=AIS_Shape.DownCast(shape)
            self.lineEdit_2.setText("对象2已选择")
            self.selectshape2=self.ais_shape
            print(self.ais_shape)
             #Second get face Vector
            for face in shp:
                print(face)
                BS=BRepAdaptor_Surface(face,True)
                AdpSurf = BS.Surface()
                gp_cyl = AdpSurf.Cylinder()
                self.selectshape2_location = gp_cyl.Location()  # a point of the axis
                self.selectshape2_direction = gp_cyl.Axis().Direction()  # the cylinder axis
                print(self.selectshape2_direction.X(),self.selectshape2_direction.Y(),self.selectshape2_direction.Z())



                


        